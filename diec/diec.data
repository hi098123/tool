// Detect an ACE archive.
// Author: Jason Hood <jadoxa@yahoo.com.au>
/*
   Only tested with 2.04.
*/

includeScript("archive");
sName="ACE";

function detect_ACE(bFile,bShowOptions)
{
    var nOffset,nSize;
    if(bFile)
    {
        nOffset=0;
        nSize=File.getSize();
    }
    else
    {
        nOffset=File.getOverlayOffset();
        nSize=File.getOverlaySize();
    }
    if(nSize>48)
    {
        if(File.compare("'**ACE**'",nOffset+7))
        {
            bDetected=1;
            sVersion="2";
            if(File.readByte(nOffset+6)&0x80)
            {
                sOptions="solid";
            }
            if(File.compare("'UNREGISTERED'",nOffset+32))
            {
                sOptions=sOptions.append("unregistered");
            }
            if(bShowOptions)
            {
                // Not sure about this...
                var nOffset=File.findSignature(nOffset+0x20,128,"000101");
                if(nOffset!=-1)
                {
                    nOffset-=3;
                    while(nOffset<File.getSize())
                    {
                        var nPacked=File.readDword(nOffset+7);
                        Archive.add(File.readDword(nOffset+11),nPacked,
                                    File.readByte(nOffset+19)&16);
                        nOffset+=0x23+File.readWord(nOffset+0x21)+nPacked;
                    }
                    sOptions=sOptions.append(Archive.contents());
                }
            }
        }
    }
}
// https://github.com/horsicq/Detect-It-Easy signature file
// Author: Kaens (TG @kaens)

init("format","");

function detect(bShowType,bShowVersion,bShowOptions) {
    if(Binary.compare("000003F300") ) {
        bDetected = 1;
        sName = "Amiga loadable file";
    }
    else if(Binary.compare("000003E700") ) {
        bDetected = 1;
        sName = "Amiga object/library file";
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("format","empty file");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()==0)
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("format","Universal Disk Image Format");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("7801730d62626060"))
    {
        sOptions="read-only zlib-compressed";
        bDetected=1;
    }
    else if(Binary.compare("45520200")&&Binary.compare("'disk image'",0x410))
    {
        sOptions="read/write";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("format","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("'RIFF'........'CDR'"))
    {
        sName="CorelDraw graphics (.CDR)";
        bDetected=1;
    }
    else if(Binary.compare("'RIFF'........'AVI '"))
    {
        sName="AVI";
        bDetected=1;
    }
    else if(Binary.compare("'RIFF'........'WEBPVP8'"))
    {
        sName="WebP";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP
// doc-ref: https://source.denx.de/u-boot/u-boot/-/raw/e4dba4b/include/image.h

init("format","");
function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=0x40)
    {
        if(Binary.compare("27051956"))  // Image Header Magic Number
        {
            bDetected=true;
            switch(Binary.readByte(0x1E)) // Image Type
            {
            case  0: sName = "U-Boot: Invalid Image";                break;
            case  1: sName = "U-Boot: Standalone Program";           break;
            case  2: sName = "U-Boot: OS Kernel Image";              break;
            case  3: sName = "U-Boot: RAMDisk Image";                break;
            case  4: sName = "U-Boot: Multi-File Image";             break;
            case  5: sName = "U-Boot: Firmware Image";               break;
            case  6: sName = "U-Boot: Script file";                  break;
            case  7: sName = "U-Boot: Filesystem Image";             break;
            case  8: sName = "U-Boot: Binary Flat Device Tree Blob"; break;
            case  9: sName = "U-Boot: Kirkwood Boot Image";          break;
            case 10: sName = "U-Boot: Freescale IMXBoot Image";      break;
            case 11: sName = "U-Boot: Davinci UBL Image";            break;
            case 12: sName = "U-Boot: TI OMAP Config Header Image";  break;
            case 13: sName = "U-Boot: TI Davinci AIS Image";         break;
            case 14: sName = "U-Boot: OS Kernel Image";              break;
            case 15: sName = "U-Boot: Freescale PBL Boot Image";     break;
            case 16: sName = "U-Boot: Freescale MXSBoot Image";      break;
            case 17: sName = "U-Boot: TI Keystone GPHeader Image";   break;
            case 18: sName = "U-Boot: ATMEL ROM bootable Image";     break;
            case 19: sName = "U-Boot: Altera SOCFPGA Preloader";     break;
            case 20: sName = "U-Boot: x86 setup.bin Image";          break;
            case 21: sName = "U-Boot: x86 setup.bin Image";          break;
            case 22: sName = "U-Boot: A list of typeless images";    break;
            case 23: sName = "U-Boot: Rockchip Boot Image";          break;
            case 24: sName = "U-Boot: Rockchip SD card";             break;
            case 25: sName = "U-Boot: Rockchip SPI image";           break;
            case 26: sName = "U-Boot: Xilinx Zynq Boot Image";       break;
            case 27: sName = "U-Boot: Xilinx ZynqMP Boot Image";     break;
            case 28: sName = "U-Boot: FPGA Image";                   break;
            case 29: sName = "U-Boot: VYBRID .vyb Image";            break;
            case 30: sName = "U-Boot: Trusted Execution Environment OS Image";  break;
            case 31: sName = "U-Boot: Firmware Image with HABv4 IVT";           break;
            default: bDetected=false;
            }
        }
        if(bDetected)
        {
            sVersion="\"" + Binary.getString(0x20,0x20) + "\"";  // Image Name

            switch(Binary.readByte(0x1C)) // Operating System
            {
            case  0: sOptions="Invalid OS"; break;
            case  1: sOptions="OpenBSD";    break;
            case  2: sOptions="NetBSD";     break;
            case  3: sOptions="FreeBSD";    break;
            case  4: sOptions="4.4BSD";     break;
            case  5: sOptions="Linux";      break;
            case  6: sOptions="SVR4";       break;
            case  7: sOptions="Esix";       break;
            case  8: sOptions="Solaris";    break;
            case  9: sOptions="Irix";       break;
            case 10: sOptions="SCO";        break;
            case 11: sOptions="Dell";       break;
            case 12: sOptions="NCR";        break;
            case 13: sOptions="LynxOS";     break;
            case 14: sOptions="VxWorks";    break;
            case 15: sOptions="pSOS";       break;
            case 16: sOptions="QNX";        break;
            case 17: sOptions="Firmware";   break;
            case 18: sOptions="RTEMS";      break;
            case 19: sOptions="ARTOS";      break;
            case 20: sOptions="Unity OS";   break;
            case 21: sOptions="INTEGRITY";  break;
            case 22: sOptions="OSE";        break;
            case 23: sOptions="Plan 9";     break;
            case 24: sOptions="OpenRTOS";   break;
            case 25: sOptions="ARM Trusted Firmware";           break;
            case 26: sOptions="Trusted Execution Environment";  break;
            case 27: sOptions="RISC-V OpenSBI";                 break;
            case 28: sOptions="EFI Firmware";                   break;
            }

            switch(Binary.readByte(0x1D)) // CPU architecture
            {
            case  0: sOptions=sOptions.append("Invalid CPU"); break;
            case  1: sOptions=sOptions.append("Alpha");       break;
            case  2: sOptions=sOptions.append("ARM");         break;
            case  3: sOptions=sOptions.append("Intel x86");   break;
            case  4: sOptions=sOptions.append("IA64");        break;
            case  5: sOptions=sOptions.append("MIPS");        break;
            case  6: sOptions=sOptions.append("MIPS64");      break;
            case  7: sOptions=sOptions.append("PowerPC");     break;
            case  8: sOptions=sOptions.append("IBM S390");    break;
            case  9: sOptions=sOptions.append("SuperH");      break;
            case 10: sOptions=sOptions.append("Sparc");       break;
            case 11: sOptions=sOptions.append("Sparc64");     break;
            case 12: sOptions=sOptions.append("M68K");        break;
            case 13: sOptions=sOptions.append("Nios-32");     break;
            case 14: sOptions=sOptions.append("MicroBlaze");  break;
            case 15: sOptions=sOptions.append("Nios-II");     break;
            case 16: sOptions=sOptions.append("Blackfin");    break;
            case 17: sOptions=sOptions.append("AVR32");       break;
            case 18: sOptions=sOptions.append("STM ST200");   break;
            case 19: sOptions=sOptions.append("Sandbox");     break;
            case 20: sOptions=sOptions.append("NDS32");       break;
            case 21: sOptions=sOptions.append("OpenRISC");    break;
            case 22: sOptions=sOptions.append("ARM64");       break;
            case 23: sOptions=sOptions.append("ARC");         break;
            case 24: sOptions=sOptions.append("AMD x86_64");  break;
            case 25: sOptions=sOptions.append("Xtensa");      break;
            case 26: sOptions=sOptions.append("RISC-V");      break;
            }

            switch(Binary.readByte(0x1F)) // Compression Type
            {
            case  0: sOptions=sOptions.append("no compression"); break;
            case  1: sOptions=sOptions.append("gzip");           break;
            case  2: sOptions=sOptions.append("bzip2");          break;
            case  3: sOptions=sOptions.append("lzma");           break;
            case  4: sOptions=sOptions.append("lzo");            break;
            case  5: sOptions=sOptions.append("lz4");            break;
            case  6: sOptions=sOptions.append("zstd");           break;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("format","Universal Binary");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=8)
    {
        if(Binary.compare("CAFEBABE"))
        {
            var nMinor=Binary.readBEWord(4);
            var nMajor=Binary.readBEWord(6);
            if(nMinor)
            {
                 bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Tembo (http://tembolab.pl/products/executable-image-viewer.html)

init("format", "Flash Video");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (Binary.getSize() > 37)
    {
        if (Binary.compare("'FLV'") && Binary.compare("'onMetaData'", 27))
        {
            sVersion = "";
            sOptions = "";
            bDetected = 1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
var File=Binary;

includeScript("result-minimal");
includeScript("read");
// DIE's signature file

init("archive","7-Zip");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=64)
    {
        if(Binary.compare("'7z'BCAF271C"))
        {
            sVersion=Binary.readByte(6)+"."+Binary.readByte(7);
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

includeScript("ACE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    detect_ACE(1,bShowOptions);
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP
// Status: WIP
// doc-ref: https://en.wikipedia.org/wiki/Ar_(Unix)
includeScript("archive");
init("archive","The archiver (.AR)");

function detect(bShowType,bShowVersion,bShowOptions)
{

    function ParseLibInfo() {
        sType="format"; 
        sName = "COFF Library (.LIB)"
        var nMachineOffset=Binary.read_uint32(0x48,_BE)+0x3C;
        if (Binary.compare("0000FFFF",nMachineOffset)) {
            var nMachine = Binary.read_uint16(nMachineOffset+6)} // long format
        else {
            var nMachine = Binary.read_uint16(nMachineOffset)}   // short format
        switch(nMachine)
        {
            case  0x014c: sVersion = "I386";   break; // Intel 386 or later processors and compatible processors
            case  0x0162: sVersion = "R3000";  break; // MIPS little-endian, 0x160 big-endian
            case  0x01c0: sVersion = "ARM";    break; // ARM little-endian
            case  0x8664: sVersion = "AMD64";  break; // x64
            case  0xAA64: sVersion = "ARM64";  break; // ARM64 little-endian
            case  0x01c4: sVersion = "ARMNT";  break; // Arm Thumb-2 little-endian
            default: sVersion = "Unknown";
        }
    }

    function ParseDebInfo()
    {
        sName = "Debian Software package (.DEB)";
        sVersion = Binary.getString(nOffset, nFileSize-1);
    }

    if(Binary.compare("'!<arch>'0A"))
    {
            bDetected=true;
            var nOffset = 8
            var nItemCount = 0
            while(nOffset<Binary.getSize()){
                sFileName  = Binary.getString(nOffset,0x10).trim() ; nOffset +=0x10;
                    nOffset +=0x0C; //modification_timestamp
                    nOffset +=0x06; //ownerID
                    nOffset +=0x06; //groupID
                    nOffset +=0x08; //fileMode
                nFileSize = parseInt(Binary.getString(nOffset,0x0A)); nOffset +=0x0A;
                    nOffset +=0x02; //endMarker
                switch(sFileName)
                {
                    case  "/":             ParseLibInfo(); break;
                    case  "debian-binary": ParseDebInfo(); break;
                    case  "/\/":                           break;
                    default: Archive.add(nFileSize,nFileSize);
                }
                    nOffset +=nFileSize;
                if( nFileSize & 1) nOffset +=1;  // padding
                nItemCount+=1
            }

            //sOption("Items:" + nItemCount);
            if (Binary.isVerbose()) sOption(Archive.contents()); // TODO: parse DIR\FILES
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP
// Status: WIP

init("archive","FreeARC Archive (.ARC)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=9)
    {
	
        if(Binary.compare("417243010000"))
        {
            bDetected=true; 


        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

includeScript("arj");

function detect(bShowType,bShowVersion,bShowOptions)
{
    detect_ARJ(1,bShowOptions);
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("archive","Asar Archive (Electron)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=28)
    {
        if(Binary.compare("04..............................'{\"files\":{'"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// doc-ref: https://github.com/dsnet/compress/blob/master/doc/bzip2-format.pdf
init("archive","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=9)
    {
        if(Binary.compare("'BZ0'"))
        {
            sName = "BZip1 compressed data (.BZ)"
            bDetected=true;
        }

        else if(Binary.compare("'BZh'") && Binary.compare("314159265359",0x4))
        {
            sName = "BZip2 compressed data (.BZ2)"
            bDetected=true;
        }
        if(bDetected && Binary.isVerbose())
        {
            sOptions="block-size:"+Binary.getString(3,1)+"00 kb";
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

includeScript("Cab");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(!detect_Cab(0,Binary.getSize(),bShowOptions))
    {
        if(Binary.compare("'ISc('"))
        {
            sName="InstallShield Cabinet File";
            var nVer=Binary.readWord(4);
            switch(Binary.readByte(7))
            {
            case 1: sVersion=(nVer>>12)&15; break;
            case 2:
            case 4: sVersion=(nVer/100).toFixed(2); break;
            }
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
init("archive","DotBundle Project");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("3C70726F6A6563743E0D0A20203C6D61696E65786520706174683D"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP
// Status: WIP

init("archive","GZip data");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=9)
    {
	
        if(Binary.compare("1F8B"))
        {
            bDetected=true; 
            switch(Binary.read_uint8(0x02))
            {
            case 0: sOption("stored");     break;
            case 1: sOption("compressed"); break;
            case 2: sOption("packed");     break;
            case 3: sOption("lzhed");      break;
            case 8: sOption("deflate");    break;
            default: bDetected=false; 
            }
            if (bDetected) {
               switch(Binary.read_uint8(0x08))
               {
               case 2: sOption("best"); break;
               case 4: sOption("fast"); break;
               }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP
// Status: WIP

init("archive","Long Range ZIP (.LRZ)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=9)
    {
        if(Binary.compare("'LRZI'"))
        {
            bDetected=true; 
            var nMajor = Binary.read_uint8(0x04);
            var nMinor = Binary.read_uint8(0x05);
            sVersion = nMajor+"."+nMinor;
            switch(Binary.read_uint8(0x31))
            {
                case 3: break;
                case 4: sOption("BZIP2"); break;
                case 5: sOption("LZO"); break;
                case 6: sOption("LZMA"); break;
                case 7: sOption("GZIP"); break;
                case 8: sOption("ZPAQ"); break;
                default: bDetected=false; 
            }
            switch(Binary.read_uint8(0x16))
            {
                case 0: break;
                case 1: sOption("encrypted"); break;
                default: bDetected=false; 
            }
            switch(Binary.read_uint8(0x15))
            {
                case 0:  break;
                case 1: sOption("md5"); break;
                default: bDetected=false; 
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP
// doc-ref: https://github.com/inikep/lizard/blob/lizard/doc/lizard_Frame_format.md
init("archive","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=9)
    {
        bDetected=true;
        switch(Binary.read_uint32(0x00,_BE))
        {
            case 0x02214C18: sName="LZ4 compressed data, legacy (.LZ4)" ; break;
            case 0x04224D18: sName="LZ4 compressed data (.LZ4)"     ; break;
            case 0x05224D18: sName="LZ5 compressed data (.LZ5)"     ; break;
            case 0x06224D18: sName="Lizard compressed data (.LIZ)"  ; break;
            default: bDetected=false; 
        }

        if(bDetected)
        {
            var bFlags=Binary.read_uint8(0x04);
            if (bFlags & 64)                  { sVersion="v1"; }
            if (bFlags & 128)                 { sVersion="v2"; }
            if (bFlags & 64 && bFlags & 128)  { sVersion="v3"; }
            if (Binary.isVerbose())
            {
                if (bFlags & 1 )  { sOption("PresetDictionary"); }
                if (bFlags & 4 )  { sOption("ContentChecksum"); }
                if (bFlags & 8 )  { sOption("ContentSize"); }
                if (bFlags & 16)  { sOption("BlockChecksum"); }
                if (bFlags & 32)  { sOption("BlockIndependence"); }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP
// doc-ref:
init("archive","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=9)
    {
        if(Binary.compare("89'LZO'000D0A1A0A"))
            bDetected=true;
            sName = "LZOP compressed data";
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("archive","Microsoft Compound");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("D0CF11E0A1B11AE1"))
    {
        var nSub1=Binary.readWord(0x200);
        var nSub2=Binary.readWord(0x1000);
        
        if((nSub1==0)&&(nSub2==0xFFFD))
        {
            sType="installer";
            sName="Microsoft Installer(MSI)";
        }
        else if(nSub1==0xA5EC)
        {
            sType="format";
            sName="MS Office 97-2003";
        }
        else
        {
            sVersion="MS Office 97-2003 or MSI etc.";
        }
        
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP
// doc-ref: https://peazip.github.io/pea_help.pdf
init("archive","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=10)
    {
        if(Binary.compare("EA") && Binary.compare("0000'POD'00", 0x0A))
        {
            bDetected=true;
            sName ="PeaZip Archive (.PEA)";
            sVersion="v"+Binary.read_uint8(0x01)+"."+Binary.read_uint8(0x02)

            if(bDetected && Binary.isVerbose())
            {
                switch(Binary.read_uint8(0x3))
                {
                    case 0:  sOption("NOALGO"); break;
                    case 1:  sOption("ADLER32"); break;
                    case 2:  sOption("CRC32"); break;
                    case 3:  sOption("CRC64"); break;
                    case 16: sOption("MD5"); break;
                    case 17: sOption("RIPEMD160"); break;
                    case 18: sOption("SHA1"); break;
                    case 19: sOption("SHA256"); break;
                    case 20: sOption("SHA512"); break;
                    case 21: sOption("WHIRLPOOL"); break;
                    case 22: sOption("SHA3_256"); break;
                    case 23: sOption("SHA3_512"); break;
                    case 24: sOption("BLAKE2S"); break;
                    case 25: sOption("BLAKE2B"); break;
                    default: bDetected=false; 
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

includeScript("rar");

function detect(bShowType,bShowVersion,bShowOptions)
{
    detect_RAR(1,bShowOptions);
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP

init("archive","Unity");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nFileVer, sEngineVer, sMinPlayerVer
    if(Binary.getSize()>=0x07)
    {
        if(Binary.compare("'UnityFS'00"))
        {
            sName += "/UnityFS";
            nFileVer      = Binary.read_uint32(0x8, _BE);
            sEngineVer    = Binary.getString(0x12);
            sMinPlayerVer = Binary.getString(0x0C);
            if (sEngineVer && sMinPlayerVer)
            {
                sVersion=sVersion.append("FileVer:"+nFileVer);
                sVersion=sVersion.append("EngineVer:"+sEngineVer);
                sVersion=sVersion.append("MinPlayerVer:"+sMinPlayerVer);
                bDetected=true;
            }
        }
        else if(Binary.compare("'UnityRaw'00"))
        {
            sName += "/UnityRaw";
            nFileVer      = Binary.read_uint32(0x9, _BE);
            sEngineVer    = Binary.getString(0x13);
            sMinPlayerVer = Binary.getString(0x0D);
            if (sEngineVer && sMinPlayerVer)
            {
                sVersion=sVersion.append("FileVer:"+nFileVer);
                sVersion=sVersion.append("EngineVer:"+sEngineVer);
                sVersion=sVersion.append("MinPlayerVer:"+sMinPlayerVer);
                bDetected=true;
            }
        }
        else  if(Binary.compare("'UnityWeb'00"))
        {
            sName += "/UnityWeb";
            nFileVer      = Binary.read_uint32(0x9, _BE);
            sEngineVer    = Binary.getString(0x13);
            sMinPlayerVer = Binary.getString(0x0D);
            if (sEngineVer && sMinPlayerVer)
            {
                sVersion=sVersion.append("FileVer:"+nFileVer);
                sVersion=sVersion.append("EngineVer:"+sEngineVer);
                sVersion=sVersion.append("MinPlayerVer:"+sMinPlayerVer);
                bDetected=true;
            }
        }

        else if(Binary.read_uint32(0x10, _BE) == 0)
        {
            sName += "/Unity Asset";
            nFileVer=Binary.read_uint32(0x8, _BE);
            switch(nFileVer)
            {
                case   9: sEngineVer=Binary.getString(0x14);    break;
                case  15: sEngineVer=Binary.getString(0x14);    break;
                case  17: sEngineVer=Binary.getString(0x14);    break;
                case  20: sEngineVer=Binary.getString(0x14);    break;
                case  21: sEngineVer=Binary.getString(0x14);    break;
                case  22: sEngineVer=Binary.getString(0x30);    break;
            }
            if (sEngineVer && nFileVer <=22 && nFileVer >=8)
            {
                sVersion=sVersion.append("FileVer:"+nFileVer);
                sVersion=sVersion.append("EngineVer:"+sEngineVer);
                bDetected=true;
            }
        }
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

includeScript("zip");

function detect(bShowType,bShowVersion,bShowOptions)
{
    detect_Zip(1,bShowOptions);
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP

init("data","");
includeScript("zlib");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (detect_zlib(Binary, 0, bShowOptions))
    {
        sName = "ZLIB data";
        bDetected=true; 
    };
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP
// Status: WIP

init("archive","ZPAQ Compressed Archive (.ZPAQ)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=9)
    {
	
        if(Binary.compare("'7kSt'") && Binary.compare("'zPQ'",0x0D))
        {
            bDetected=true; 
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("archive","btoa");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var sStr=Binary.getString(0,11);

    if(sStr=="'xbtoa Begin'")
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Authors: hypn0 <hypn0@mail.ru>, Kaens (TG@kaens), LinXP

init("archive","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("a596fdff"))
    {
        bDetected=1;
        sName="FTCOMP";
    }
    else if(Binary.compare("aced00057704"))
    {
        bDetected=1;
        sName="IzPack";
    }
    else if(Binary.compare("'bvxn'"))
    {
        bDetected=1;
        sName="LZFSE";
    }
    else if(Binary.compare("'SIT!'"))
    {
        bDetected=1;
        sName="SIT";
    }
    else if(Binary.compare("06'SKF3.0'"))
    {
        bDetected=1;
        sName="SKF";
    }
    else if(Binary.compare("'Archive'00................2800000064"))
    {
        bDetected=1;
        sName="ArcFS";
    }
    else if(Binary.compare("'ARCV'0002"))
    {
        bDetected=1;
        sName="ARCV 2";
    }
    else if(Binary.compare("09006bea"))
    {
        bDetected=1;
        sName="BFF";
    }
    else if(Binary.compare("00069a68"))
    {
        bDetected=1;
        sName="DCL";
    }
    else if(Binary.compare("....'-lh'..2d")||Binary.compare("....'-lz'..2d"))
    {
        sVersion = Binary.getString(2,5)
        bDetected=true;
        switch(Binary.getString(3,3))
        {
        case "lh0":
        case "lh1":
        case "lh2":
        case "lh3":
        case "lh4":
        case "lh5":
        case "lh6":
        case "lh7":
        case "lhd": sName="LHA archive (.LHA)"; break;
        case "lh8":
        case "lh9":
        case "lha":
        case "lhb":
        case "lhc":
        case "lhe": sName="LHA archive, Joe Jared ext (.LHA)"; break;
        case "lhx": sName="LHA archive, UNLHA32 ext (.LHA)"; break;
        case "lzs":
        case "lz2":
        case "lz3":
        case "lz4":
        case "lz5":
        case "lz6":
        case "lz7":
        case "lz8": sName="LHA archive, LArc ext (.LZS)"; break;
        default: bDetected=false;
        }
    }
    else if(Binary.compare("'mflh'0100"))
    {
        bDetected=1;
        sName="MVA";
    }
    else if(Binary.compare("'ViG'....1a"))
    {
        bDetected=1;
        sName="PaperPort";
    }
    else if(Binary.compare("'sqsh'0000"))
    {
        bDetected=1;
        sName="SquashFS";
        sOptions="big endian";
    }
    else if(Binary.compare("'hsqs'0300"))
    {
        bDetected=1;
        sName="SquashFS";
        sOptions="little endian";
    }
    else if(Binary.compare("'im001V'......50....0000"))
    {
        sName="SW";
        bDetected=1;
        var arch_offset=Binary.readByte(0x0e)+15;
        if(Binary.compare("1f9d", arch_offset))
        {
            sOptions="Z archive";
        }
        else if(Binary.compare("1f1e", arch_offset))
        {
            sOptions="PACK 2 archive";
        }
    }
    else if(Binary.compare("0001000401000100010000000000000000000000000000000000000000000000010101"))
    {
        bDetected=1;
        sName="VMS SaveSet";
    }
    else if(Binary.compare("'ZOO'............'Archive'"))
    {
        bDetected=1;
        sName="ZOO";
    }
    else if(Binary.compare("602213636c00"))
    {
        bDetected=1;
        sName="Asymetrix";
    }
    else if(Binary.compare("453dcd28........................'Compressed ROMFS'"))
    {
        bDetected=1;
        sName="CRAMFS";
    }
    else if(Binary.compare("'IsZ!@'01"))
    {
        bDetected=1;
        sName="Zipped ISO Disk Image (.ISZ)";
        switch(Binary.read_uint32(0x10))
        {
        case  0:  sOptions="no password";       break;
        case  1:  sOptions="password";          break;
        case  2:  sOptions="password, aes128";  break;
        case  3:  sOptions="password, aes182";  break;
        case  4:  sOptions="password, aes256";  break;
        }
    }
    else if(Binary.compare("aa59f0000002"))
    {
        bDetected=1;
        sName="SaveDskF";
    }
    else if(Binary.compare("'AlB'1a"))
    {
        bDetected=1;
        sName="BeOS package";
    }
    else if(Binary.compare("'BIGF'00"))
    {
        bDetected=1;
        sName="BIGF";
    }
    else if(Binary.compare("01ca'Copyright (c) Genus Microprogramming, Inc.'"))
    {
        bDetected=1;
        sName="GXL";
    }
    else if(Binary.compare("0100......00ecf9"))
    {
        bDetected=1;
        sName="INSA";
    }
    else if(Binary.compare("..0fd28ccc1f..3c0d8e830dd88f25ac"))
    {
        bDetected=1;
        sName="InstallShield ISN";
    }
    else if(Binary.compare("135d658c3a010200"))
    {
        bDetected=1;
        sName="InstallShield";
        sVersion="3.x"
    }
    else if(Binary.compare("2aab79d800010000"))
    {
        bDetected=1;
        sName="InstallShield INST";
        sVersion="3.x"
    }
    else if(Binary.compare("'SZDD'88"))
    {
        bDetected=1;
        sName="SZDD";
        sOptions="by Microsoft";
    }
    else if(Binary.compare("'KWAJ'88"))
    {
        bDetected=1;
        sName="KWAJ";
        sOptions="by Microsoft";
    }
    else if(Binary.compare("'MDmd'"))
    {
        bDetected=1;
        sName="MDCD";
    }
    else if(Binary.compare("'MPQ'1a"))
    {
        bDetected=1;
        sName="MPQ";
        sOptions="by Blizzard";
    }
    else if(Binary.compare("'_MCT'00'KSLZ'789c"))
    {
        bDetected=1;
        sName="MSKN 2";
        sOptions="zlib";
    }
    else if(Binary.compare("'PACK'............0000"))
    {
        bDetected=1;
        sName="PACK";
    }
    else if(Binary.compare("00000000000000000000000000007400010074000500"))
    {
        bDetected=1;
        sName="PCInstall";
    }
    else if(Binary.compare("'PP20'09"))
    {
        bDetected=1;
        sName="PP20";
    }
    else if(Binary.compare("edabeedb0300"))
    {
        bDetected=1;
        sName="RPM package";
    }
    else if(Binary.compare("bd01..00..00..000000"))
    {
        bDetected=1;
        sName="HUFF";
    }
    else if(Binary.compare("'SZ '88"))
    {
        bDetected=1;
        sName="SZ";
        sOptions="by Microsoft";
    }
    else if(Binary.compare("'BAGF'02"))
    {
        bDetected=1;
        sName="BAGF";
    }
    else if(Binary.compare("'PAC - 'a9' BVRP Software 1990-2000'"))
    {
        bDetected=1;
        sName="PAC";
        sOptions="1990-2000 by BVRP Software";
    }
    else if(Binary.compare("'Cr24'02"))
    {
        bDetected=1;
        sName="CRX";
    }
    else if(Binary.compare("74c42c84e1e5d428"))
    {
        bDetected=1;
        sName="InstallShield INX";
        sVersion="7.x"
    }
    else if(Binary.compare("5d0000....ffffffffffffffff00180ddd04"))
    {
        bDetected=1;
        sName="LZMA";
    }
    else if(Binary.compare("1fa0"))
    {
        bDetected=1;
        sName="SCO";
    }
    else if(Binary.compare("'# PaCkAgE DaTaStReAm'"))
    {
        bDetected=1;
        sName="Solaris Package";
    }
    else if(Binary.compare("'SQZE'010000"))
    {
        bDetected=1;
        sName="SQZE";
    }
    else if(Binary.compare("'xar!'001c00010000"))
    {
        bDetected=1;
        sName="XAR";
    }
    else if(Binary.compare("fd'7zXZ'0000"))
    {
        bDetected=1;
        sName="XZ";
    }
    else if(Binary.compare("1f9d"))
    {
        bDetected=1;
        sName="Z";
    }
    else if(Binary.compare("'LZK00'000000"))
    {
        bDetected=1;
        sName="LZK00";
    }
    else if(Binary.compare("032401010100"))
    {
        bDetected=1;
        sName="WPK";
    }
    else if(Binary.compare("'TPWM'"))
    {
        bDetected=1;
        sName="TPWM (BlueByte)";
    }
    else if((Binary.getSize()>=500)&&(Binary.compare("00'ustar'",0x100)))
    {
        bDetected=1;
        sName="tar";
    }
    else if(Binary.compare("'LB'0100")) {
        bDetected=1;
        sName="XFL game resource file (.XFL)";
        sVersion="v1.0";
        sOptions=sOptions.append(Binary.getString(12,32));
        sOptions=sOptions.append("& other "+(Binary.readDword(8)-1)+" files");
    }
    else if(Binary.compare("FF060000'sNaPpY'")) {
        bDetected=true;
        sName="Snappy compressed data (.SZ)";
    }
    else if(Binary.compare("'blkzip'00")) {
        bDetected=true;
        sName="BulkZip Archive (.BULK)";
    }
    else if(Binary.compare("AE01'NanoZip 0.09 alpha'")) {
        bDetected=true;
        sName="NanoZip Archive (.NZ)";
        sVersion = "0.09 alpha";
    }
    else if(Binary.compare("'CM'2805060000")) {
        bDetected=true;
        sName="RAZOR Archive (.RZ)";
    }
    else if(Binary.compare("28B52FFD")) {
        bDetected=true;
        sName="Facebook Zstandard/ZSTD compressed data (.ZST)";
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// https://github.com/horsicq/Detect-It-Easy signature file
// Authors:
// Kaens TG@kaens (for all the https://en.wikipedia.org/wiki/Music_tracker stuff)
// hypn0 <hypn0@mail.ru>
// main to-dos:
//      Ad-lib formats,
//      wait on fb replies... 

init("audio","");

includeScript("read");

function detect(bShowType,bShowVersion,bShowOptions) {

    if(Binary.compare("'[1tracker module]'0D0A")) {
        bDetected = 1;
        sName = "Shiru's 1tracker module (.1TM)";
        l = File.findString(1,0x40,"Engine="); if(l >= 0) {
            r = File.findString(l+7,0x40,".");
            sVersion = "for "+File.read_ansiString(l+7,r-l-7)
        }
        if(Binary.isVerbose()) {
            l = File.findString(r,0x80,"Title="); if(l >= 0) {
                r = File.findSignature(l+6,0x40,"0D0A");
                sOption(File.read_ansiString(l+6,r-l-6)) }
            l = File.findString(r,0x80,"Author="); if(l >= 0) {
                r = File.findSignature(l+7,0x40,"0D0A");
                sOption(File.read_ansiString(l+7,r-l-7),"by: ") }
            l = File.findString(r,0x80,"Speed="); if(l >=0 ) {
                r = File.findSignature(l+7,0x40,"0D0A");
                sOption(File.read_ansiString(l+7,r-l-7),"spd:") }
        }
    }
    else if( (Binary.compare("'if'") || Binary.compare("'JN'")) && File.getSize()>0x1F1+0x600
      && File.read_uint8(0x6E)<=0x40 && File.read_uint8(0x6F)<=0x80 && File.read_uint8(0xF0)==0xFF) {
        bDetected = 1;
        sName = "Composer 669 / UNIS 669 module (.669)";
        smp = File.read_uint8(0x6E);
        c = 0; for(i = 0; i < smp; i++) c += File.read_uint32(0x01F1+i*0x19+13,_LE);
        c += 0x1F1+(smp*0x19)+smp*0x600;
        if(Binary.isVerbose()) {
            if(File.read_ansiString(0,2) == "JN") sVersion = "extended";
            //if(File.getSize() != c) sVersion += "malformed";
            sOptionT(File.read_codePageString(0x02,36,"CP850")); //the seemingly most-used encoding for'em
            sOptionT(File.read_codePageString(0x26,36,"CP850"));
            sOptionT(File.read_codePageString(0x4A,36,"CP850"));
            sOption("ptn:"+File.read_uint8(0x6F)+" smp:"+smp+" loop:"+File.read_uint8(0x70))
        }
    }
    else if(Binary.compare("'_A2module_'")) {
        bDetected = 1; malformed = false;
        sName = "AdLib Tracker II module (.A2M)";
        nV = File.read_uint8(0x0E); sVersion = "/┤DLiB TR/┤CK3R ][ v"+nV;
        ptn = File.read_uint8(0x0F); if(!ptn || ptn>64) malformed = "PTN";
        if(malformed) sVersion += " malformed"+malformed;
        if(Binary.isVerbose() && malformed != "PTN") sOption("ptn:"+ptn);
    }
    else if(Binary.compare("48E7FFFE4BF900DFF00041FA....43FA....45FA....20180C80'EXITgB '18201820182F18201024C94AA80004660A558006A80000000200042200D28924C1D0A8000424C0D1DF2018D1D82018D1D82018201812D804800000000166F660B4610000'H|'017E01610000'Z|'027E02610000'R|'037E03610000'JL'DF7FFF'NuH'E7FFFE7E01610000AC7E02610000A67E03610000A04CDF7FFF'Nu`'0A602260000092600000'~A'FA....4BF900DFF000'p0;|'000000AA0440001064F4'NuK'F900DFF0003007C0FC00'@A'FA")
      && Binary.compare("'EXIT'",File.getSize()-4)) {
        bDetected = 1; sName = "Art and Magic module (.AAM)"
    }
    else if(Binary.compare("'ADLIB'01")) {
        bDetected = 1;
        sName = "Martin Fernandez's Adlib module (.ADLIB)";
        if(Binary.isVerbose()) {
            t = File.read_ansiString(6,0x100);
            g = File.read_ansiString(6+t.length+1,0x100);
            sOption(t); sOption(g,"for: ")
        }
    }
    else if(Binary.compare("'AERO'")) {
        bDetected = 1;
        sName = "Aero Tracker module (.AERO)";
        sVersion = "v"+File.read_uint8(0x0E);
    }
    else if(Binary.compare("'THX'0.")) {
        // ref http://lclevy.free.fr/exotica/ahx/ahxformat.txt
        bDetected = 1;
        sName = "Abyss' Highest eXperience module (.AHX)";
        var V = File.read_uint8(3);
        if(!V) sVersion = "v1.00~1.27"; else sVersion = "v2.0+";
        malformed = false;
        var b6 = File.read_uint8(6);
        trk0saved = b6 >> 7;
        switch((b6 >> 4) & 7) {
        case 0: if(V) spd = "50Hz"; else spd = ""; break;
        case 1: spd = "100Hz"; break;
        case 2: spd = "150Hz"; break;
        case 3: spd = "200Hz"; break;
        default: malformed = true;
        }
        len = File.read_uint16(6,_BE) & 0xFFF;
        if(!len || len > 999) malformed = true;
        lp = File.read_uint16(8,_BE);
        if(lp >= len) malformed = true;
        trl = File.read_uint8(10); if(!trl || trl > 64) malformed = true;
        smp = File.read_uint8(12); if(smp > 63) malformed = true;
        if(malformed) sVersion += "/malformed";
        if(Binary.isVerbose()) {
            if(File.getSize() < 0xFFFF) {
                var ptitle = File.read_uint16(4,_BE);
                sOption(File.read_ansiString(ptitle,0x20));
            }
            trk = File.read_uint8(11);
            sub = File.read_uint8(13);
            sOption("trk0_saved:"+trk0saved+" len:"+len+" sub:"+sub+" loop:"+lp+" trl:"+trl+" trk:"+trk+" smp:"+smp)
            sOption(spd,"spd:")
        }
    }
    else if(Binary.compare("'AM01'000000") && Binary.compare("'ASD1'00", 0x38)) {
        bDetected = 1;
        sName = "Ace Tracker module (.AM)";
    }
    else if(Binary.compare("'ZXAYAMAD'")) {
        //the format seems similar to .EMUL
        bDetected = 1;
        sName = "AY Amadeus module (.AMAD)";
        if(Binary.isVerbose()) {
            ptitle = 0x14 + File.read_uint16(0x14,_LE);
            sOptionT(File.read_ansiString(ptitle))
        }
    }
    else if(Binary.compare("'AMC V'......' REPLAY!'")) {
        bDetected = 1;
        sName = "A.M. Composer module (.AMC)";
        sVersion = "v"+File.read_ansiString(5,3);
    }
    else if(Binary.compare("'<o'EF'QU'EE'RoR'", 0x426) || Binary.compare("'MaDoKaN96'", 0x426)) {
        //ref http://modland.com/pub/documents/format_documentation/AMusic%20(.amd).txt
        bDetected = 1;
        sName = "AMusic Adlib-MOD module (.AMD)";
        if(File.read_ansiString(0x426,1) != "<") sVersion = "xms rip-off";
        if(File.read_uint8(0x42F) == 0x11) sVersion = sVersion.append("packed");
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0,0x18));
            sOptionT(File.read_ansiString(0x18,0x18),"by: ");
            sOption("ord:"+File.read_uint8(0x3A4)+" ptn:"+(File.read_uint8(0x3A5)+1));
        }
    }
    else if(Binary.compare("'ASYLUM Music Format'")) {
        bDetected = 1;
        sName = "ASYLUM Music Format (.AMF)";
        sVersion = "v"+File.read_ansiString(0x15,3);
    }
    else if(Binary.compare("'AMF'0.")) {
        //some say this format is identical to ASYLUM... /presses (X)/ --Kae
        bDetected = 1;
        sName = "Digital Sound and Music Interface Advanced Music Format module (.AMF)";
        sVersion = "v0"+Hex(File.read_uint8(3));
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(4,32));
    }
    else if(Binary.compare("'AMShdr'1A") && (File.read_uint8(7) <= 30)) {
        //ref http://modland.com/pub/documents/format_documentation/Velvet%20Studio%20v2.2,%20Advanced%20Module%20System%20(.ams).txt
        bDetected = 1; t_ = File.read_uint8(7);
        sName = "Velvet Studio Advanced Module System tune (.AMS)";
        sVersion = "v"+File.read_uint8(9+t_)+"."+File.read_uint8(8+t_);
        malformed = false;
        ptn = File.read_uint16(8+t_+3); if(!ptn || ptn>1024) malformed=true;
        ord = File.read_uint16(8+t_+5); if(!ord) malformed=true;
        ch0 = File.read_uint8(8+t_+10); //if(!ch0 || ch0>32) malformed=true;
        cmd = File.read_uint8(8+t_+11); //if(!cmd || cmd>7) malformed=true;
        if(malformed) sVersion += " malformed";
        if(Binary.isVerbose()) {
            ins = File.read_uint8(8+t_+2);
            bpm0 = File.read_uint8(8+t_+8)+"."+File.read_uint8(8+t_+7);
            spd0 = File.read_uint8(8+t_+9);
            rows = File.read_uint8(8+t_+12);
            flg =  File.read_uint16(8+t_+13);
            stereo = (flg >> 6)&1?"stereo":"mono";
            linfreqtbl = (flg >> 7)&1?" linfreqtbl":"";
            midiused = (flg >> 8)&1?" midi used":"";
            sOptionT(File.read_codePageString(8,t_,"CP850"));
            sOption(stereo+" ins:"+ins+" ptn:"+ptn+" ord:"+ord+
                " bpm0:"+bpm0+" spd0:"+spd0+" ch0:"+ch0+" cmd0:"+cmd+" rows0:"+rows+
                linfreqtbl+midiused)
        }
    }
    else if(Binary.compare("'Extreme0'01")) {
        //ref http://modland.com/pub/documents/format_documentation/Extreme's%20Tracker%20v1.3%20(.ams).txt
        bDetected = 1;
        sName = "Extreme Tracker module (.AMS)";
        //song tech info
        sVersion = "v"+File.read_uint8(7)+"."+File.read_uint8(8);
        if(Binary.isVerbose()) {
            cccsssss = File.read_uint8(9);  cmd=cccsssss>>5; sch=cccsssss&0x1F+1;
            smp = File.read_uint8(10); ptn = File.read_uint16(11,_LE); pos = File.read_uint16(13,_LE);
            vmch = File.read_uint8(15); xtra = File.read_uint16(16,_LE); 
            //title
            pts = smp*17 + xtra + 18; ts = File.read_uint8(pts);
            sOptionT(File.read_ansiString(pts+1,ts));
            sOption("cmd:"+cmd+" strk:"+sch+" smp:"+smp
              +" ptn:"+ptn+" pos:"+pos+" mtrk:"+(vmch+1))
        }
    }
    else if(Binary.compare("'AMX ")) {
        bDetected = 1;
        sName = "AND Xynth module (.AMX)";
    }
    else if(Binary.compare("'AON4'") || Binary.compare("'AON8'")) {
        bDetected = 1;
        sName = "ArtOfNoise/Chorus module (.AON)";
        sVersion = File.read_ansiString(3,1)+"ch";
        if(Binary.isVerbose()) {
            id = File.read_ansiString(4,0x2A);
            p = 0x2E; //header skipped
            t = ''; a = ''; d = ''; c = ''; ord = 0;
            while (p < File.getSize()) {
                hkhd = File.read_ansiString(p,4);
                hksz = File.read_uint32(p+4,_BE);
                p+=0x08; //chunk header = 4xfourcc + 4xsize
                switch (hkhd) {
                    case "NAME": t = File.read_codePageString(p,hksz,"CP1252"); break;
                    case "AUTH": a = File.read_codePageString(p,hksz,"CP1252"); break;
                    case "DATE": d = File.read_codePageString(p,hksz,"CP1252"); break;
                    case "RMRK": c = File.read_codePageString(p,hksz,"CP1252"); break; //apparently intended to be 78ch per line, maybe TODO auto-wrap (without left trimming!)
                    case "PLST": ord = hksz; break;
                }
                p += hksz;
            }
            sOptionT(t); sOptionT(a,"by: "); sOptionT(d,"on: ");
            sOption(c); sOption(id,"with: "); sOption(ord,"ord:");
        }
    }
    else if(Binary.compare("'ADRVPACK'")) {
        bDetected = 1;
        sName = "AProSys module (.APS)";
    }
    else if(Binary.compare("'ARP.'")) {
        bDetected = 1;
        sName = "Arpeggiator module (.ARP)";
    }
    else if(Binary.compare("'ACTIONAMICS SOUND TOOL'",0x3E)) {
        bDetected = 1;
        sName = "Actionamics Sound Tool module (.AST)";
        sVersion = "v"+File.read_ansiString(0x56,3);
    }
    else if(Binary.compare("08'AST '")) {
        bDetected = 1;
        sName = "All Sound Tracker module (.AST)";
        sVersion = "v" + File.read_ansiString(5,4);
        if(Binary.isVerbose()) {
            L = File.read_uint16(0x0A,_BE);
            info = File.read_codePageString(12,L+1,"CP850").trim();
            var s = ""; var q=0;
            for (var i = 0; q<2; i+=0x26) {
                a = info.slice(i,i+0x26);
                if(a.trim() != "") {q++; s += " "+a.trim();} //skipping the empty lines
            }
            sOption(s);
        }
    }
    else if(Binary.compare("'AudioSculpture'")) {
        bDetected = 1;
        sName = "Audio Sculpture module (.AS)"
    }
    else if(Binary.compare("'##synth'0D0A")) {
        bDetected = 1;
        sName = "Athtune module (.ATHTUNE)"
    }
    else if(Binary.compare("48E7FCFE E9417000 41FA.... 43FA.... 23B01000 00..5801 5800.... 001066F0"
      +"70034231 00..4231 00..4231 00..13BC 000100.. 13BC00FF 00..13B1 00......"
      +"3200E341 6100.... 51C8FFD8 422900.. 422900.. 137C00FF 0000137C 00FF0001 33")) {
        bDetected = 1;
        sName = "Activision Pro module (.AVP)"; sVersion = "48E7"
    }
    // if(!bDetected && Binary.compare("6000.... 6000....")) { //TODO tighten up A LOT
    //     ofs0 = File.read_uint16(2,_BE)+2;
    //     bDetected = 0/*1*/; sName = "Activision Pro module (.AVP)"; sVersion = "6000"
    // }
    // if(!bDetected)...
    else if(Binary.compare("'FORM'.... ....'AXSFUSER'")) {
        bDetected = 1;
        sName = "AXS module (.AXS)"
    }
    else if(Binary.compare("'CBMF'")) {
        bDetected = 1;
        sName = "Bob's Adlib Music module (.BAM)"
    }
    else if(Binary.compare("'BBSONG'00")) {
        bDetected = 1;
        sName = "Beepola module (.BBSONG)";
        sVersion = "v"+File.read_ansiString(7,5)+":"+File.read_ansiString(Binary.findString(10,1000,"Engine=")+7);
        if(Binary.isVerbose()) {
            title = File.read_ansiString(0x18,100); 
            sOptionT(title);
            auth = File.read_ansiString(0x18+title.length+8,100); 
            sOptionT(auth,"by: ")
        }
    }
    else if(Binary.compare("000003F3") && File.read_uint8(0x14)
      && Binary.compare("70FF4E75'DAGLISH!'",0x20)
      && File.read_uint32(0x2C,_BE) && File.read_uint32(0x30,_BE)
      && File.read_uint32(0x34,_BE) && File.read_uint32(0x38,_BE)) {
        bDetected = 1;
        sName = "Ben Daglish's SID (.BDS)"; sVersion = "v1.1";
        if(Binary.isVerbose()) {
            title = File.read_ansiString(0x20+File.read_uint32(0x3C,_BE),0x100);
            auth = File.read_ansiString(0x20+File.read_uint32(0x40,_BE),0x100);
            misc = File.read_ansiString(0x20+File.read_uint32(0x44,_BE),0x100);
            sOptionT(title);
            x = File.read_uint32(0x38,_BE); if(x > 1) sOption(x,"x");
            sOptionT(auth,"by: ");
            sOptionT(misc);
        }
    }
    else if(Binary.compare("'Buzz'")) {
        bDetected = 1;
        sName = "Jeskola Buzz module (.BMX)";
        // Do NOT waste time trying to extract anything else...
        // You'll find the format dox lie and formats differ
        // For example, the no. of machines overlaps with some beta's version string
        // For example, that beta has no float x/y coordinates
        // And there is no signature difference. 
    }
    else if(Binary.compare("'buz2'02")) {
        bDetected = 1;
        sName = "Buzzic module (.BUZ2)";
        sVersion = "v2";
    }
    else if(Binary.compare("'BRTF'")) {
        bDetected = 1;
        sName = "BeRoTracker module (.BRT)";
        if(Binary.isVerbose()) {
            p = 8; t = ''; c = ''; q = ''; instmsg = []; sainmsg = [];
            ins = 0; smp = 0; ord = 0; //TODO figure out how to get ptn 
            bpm0 = 0; spd0 = 0; st0 = 0; mvol = 0; rowsperbeat = 0; hltu = 0; hltd = 0;
            while (p < File.getSize()) {
                hkhd = File.read_ansiString(p,4);
                hksz = File.read_uint32(p+4,_LE);
                p += 8;
                switch (hkhd) {
                    case "NAME": t = File.read_ucsdString(p); break;
                    case "MESS": c = File.read_codePageString(p+2,File.read_uint32(p,_LE),"CP1252"); break;
                    case "BPMI": rpb = File.read_uint8(p); break;
                    case "INFO":
                        spd0 = File.read_uint8(p+4); bpm0 = File.read_uint8(p+5);
                        st0 = File.read_uint8(p+6); mvol = File.read_uint8(p+10);
                        break;
                    case "PORD": ord = File.read_uint8(p); break;
                    case "PAIN": hltu = File.read_uint8(p+1); hltd = File.read_uint8(p+2); break;
                    case "SAIN":
                        smp++;
                        q = File.read_ucsdString(p+2); if(q.trim().length) sainmsg.push(q);
                        break;
                    case "INST":
                        if(File.read_uint8(p)) ins++;
                        q = File.read_ucsdString(p+1); if(q.trim().length) instmsg.push(q);
                        break;
                    case "DONE": p = File.getSize(); break;
                }
                p += hksz;
            }
            sOption(t); sOption(c);
            sOption("ord:"+ord+" ins:"+ins+" smp:"+smp+" hlt:"+hltu+"/"+hltd+
                " RPB:"+rpb+" spd0:"+spd0+" bpm0:"+bpm0+" st.sep0:"+st0+" mixvol:"+mvol);
            sOption(instmsg.join("\n"),"ins.text:\n"); sOption(sainmsg.join("\n"),"smp.text:\n");
        }
    }
    else if(Binary.compare("FFFFFFFF",0x34) && Binary.compare("1027",0x15C)
      && Binary.compare("1027",0x164)) {
        bDetected = 1;
        sName = "BoyScout module (.BSF)";
    }
    else if(Binary.compare("'NuBEATHOVEN'",0x22)) {
        bDetected = 1;
        sName = "Beathoven Synthesizer (.BSS)";
        sVersion = "v"+File.read_ansiString(0x2D,3);
        if(Binary.isVerbose()) {
            title = File.read_ansiString(0x6C,0x100);
            auth = File.read_ansiString(0x6C+title.length+1,0x100);
            misc = File.read_ansiString(0x6C+title.length+auth.length+2,0x100);
            sOptionT(title);
            sOptionT(auth,"by: ");
            sOptionT(misc);
        }
    }
    else if(Binary.compare("'CBA'F9")) {
        bDetected = 1;
        sName = "CBA module (.CBA)";
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(4,0x20))
    }
    else if(Binary.compare("'<CUD-FM-File>'1ADEE0")) {
        //ref https://github.com/adplug/adplug/blob/master/src/cff.cpp
        bDetected = 1;
        sName = "Boom Tracker module (.CFF)";
        sVersion = "v"+File.read_uint8(0x10);
        if(File.read_uint8(0x13)) sVersion += "/packed";
        if(File.getSize() != File.read_uint16(0x11,_LE)+0x20)
            sVersion += " malformed"
    }
    else if(Binary.compare("'CHIPv'3.")) {
        //ref "chip" from the release
        bDetected = 1;
        sName = "Chip Tracker module (.CHI)";
        sVersion = "v"+File.read_ansiString(5,1)+".x"; if(File.getSize() <= 0x100) sVersion += "/malformed";
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(8,0x20));
            tempo = File.read_uint8(0x28); ord = File.read_uint8(0x29); loop =  File.read_uint8(0x30);
            ptn=0; for(i=0; i < ord; i++) { p =File.read_uint8(0x100+i); if(p > ptn) ptn = p }
            sOption("tempo:"+tempo+" ord:"+ord+" ptn:"+ptn+" loop:"+loop)
        }
    }
    else if(Binary.compare("'CTMF'")) {
        bDetected = 1;
        sName = "Creative Music File (.CMF)";
        //ref https://github.com/adplug/adplug/blob/master/src/cmf.cpp
        nV = File.read_uint16(4,_LE);
        sVersion = "v"+(nV>>8)+"."+(nV&0xFF); malformed = 0;
        pins = File.read_uint16(6,_LE); //instruments ptr
        tp = File.read_uint16(0x0E,_LE); if(tp >= pins) { tp = 0; malformed = 1 }
        ap = File.read_uint16(0x10,_LE); if(ap >= pins) { ap = 0; malformed = 2 }
        cp = File.read_uint16(0x12,_LE); if(cp >= pins) { cp = 0; malformed = 3 }
        if(malformed) sVersion += " malformed"+malformed;
        if(Binary.isVerbose()) {
            if(tp) sOptionT(File.read_ansiString(tp,0x100));
            if(ap) sOptionT(File.read_ansiString(ap,0x100),"by: ");
            if(cp) sOptionT(File.read_ansiString(cp,0x100));
        }
    }
    else if(Binary.compare("000003F3") && Binary.compare("70FF4E75'S.PHIPPS'",0x20) &&
      0 < File.read_int32(0x40,_BE) < File.getSize() && 0 < File.read_int32(0x44,_BE) < File.getSize() ) {
        bDetected = 1;
        sName = "Code Design module (.CORE)";
        if(Binary.isVerbose()) {
            title = File.read_ansiString(0x68,0x100);
            auth = File.read_ansiString(0x68+title.length+1,0x100);
            misc = File.read_ansiString(0x68+title.length+auth.length+2,0x100);
            sOptionT(title);
            sOptionT(auth,"by: ");
            sOptionT(misc);
        }
    }
    else if(Binary.compare("'CAT '................'FORM'")) {
        bDetected = 1;
        sName = "Cybertracker (not C64) module (.CT)";
    }
    else if(Binary.compare("0004'NNTRKMZX'")) {
        bDetected = 1;
        sName = "Cybertracker C64 module (.CT)";
        //ref https://noname.c64.org/download.php/ctmisc/ctfileformat-1_01.html
        sVersion = "v"+File.read_uint8(0x0B)+"."+File.read_uint8(0x0A);
        if(Binary.isVerbose()) {
            for(sng=0; sng < File.read_uint16(0x4B9,_LE); sng++)
                if(File.read_uint8(0x4BB+sng-1) == 0) break;
            if(sng) {
                sng0ord = File.read_uint8(0x4BB);
                loop0 = File.read_uint8(0x6BD);
                if(sng > 1) sOption("×"+sng+" ord0:"+sng0ord+" loop0:"+loop0);
                else sOption(" ord:"+sng0ord+" loop:"+loop0)
            }
            else sOption("empty");
        }
    }
    else if(Binary.compare("0004'NNTRKINS'")) {
        bDetected = 1;
        sName = "Cybertracker C64 instrument (.CI)";
        sVersion = "v"+File.read_uint8(0x0B)+"."+File.read_uint8(0x0A);
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(0x1A,0x10))
    }
    else if(Binary.compare("000003F3") && (Binary.findString(0,0x100,"NuDELIRIUM")>0)) {
        bDetected = 1;
        sName = "DeliTracker DELIX Custom module (.CUST)";
        sVersion = "CustomPlay";
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(Binary.findString(0,0x100,"NuDELIRIUM")+20,0x100))
    }

    else if(Binary.compare("'JCH'26026601")) {
        bDetected = 1; sName = "Edlib Tracker module samples (.S01)";
    } // the order is important
    else if(Binary.compare("'JCH'260266")) {
        //ref http://ftp.modland.com/pub/documents/format_documentation/Edlib%20Tracker%20(.edl,%20.d00,%20.d01).txt
        bDetected = 1; malformed = 0;
        sName = "Edlib Tracker module (.D00,.D01)";
        sVersion = "v"+File.read_uint8(7);
        if(File.read_uint8(6) == 4) malformed = 1;
        if(File.read_uint8(10)) malformed = 2;
        if(malformed) sVersion += "/malformed"+malformed;
        if(Binary.isVerbose()) {
            sOptionT(File.read_codePageString(0x0B,0x20,"CP850"));
            sOptionT(File.read_codePageString(0x2B,0x20,"CP850"),"by: ");
            p = File.read_uint16(0x71,_LE);
            sOptionT(File.read_codePageString(p,File.getSize()-p-2,"CP850"))
        }
    }

    else if(Binary.compare("'DBM0'")) {
        bDetected = 1;
        sName = "Digi Booster Pro module (.DBM)";
        if(Binary.isVerbose()) {
            title = File.read_ansiString(0x10,42).trim();
            if(title == "") title = File.read_ansiString(0x56,42).trim();
            if(title == "") title = File.read_ansiString(0xD8,28).trim();
            sOptionT(title)
        }
    }
    else if(Binary.compare("'DFM'1A")) {
        bDetected = 1;
        sName = "Digital FM module (.DFM)";
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(7,32))
    }
    else if(Binary.compare("'DSNGSEQU'00")) {
        bDetected = 1;
        sName = "David Hanney's module (.DH)";
    }
    else if(Binary.compare("'DIGI Booster module'")) {
        bDetected = 1;
        sName = "DIGI Booster module (.DIGI)";
        sVersion = "v"+File.read_ansiString(0x15,3);
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0x262,0x20));
            sOptionT(File.read_ansiString(0x282,0x20),"by: ");
        }
    }
    else if(Binary.compare("000003F3") && Binary.compare("70FF'NuUNCLEART'",0x20)
      && File.read_uint8(0x14) && File.read_uint32(0x2C,_BE)
      && File.read_uint32(0x30,_BE) && File.read_uint32(0x38,_BE)) {
        bDetected = 1;
        sName = "Dave 'Uncle Tom' Lowe module (.DL)";
        if(Binary.isVerbose()) {
            smpip = 0x20+File.read_uint32(0x3C,_BE);
            smpiep = 0x20+File.read_uint32(0x40,_BE);
            if(!smpiep) smp = 0;
            else smp = Math.floor((smpiep-smpip)/14);
            title = File.read_ansiString(0x20+File.read_uint32(0x50,_BE),0x100);
            auth = File.read_ansiString(0x20+File.read_uint32(0x54,_BE),0x100);
            cmt = File.read_ansiString(0x20+File.read_uint32(0x58,_BE),0x100);
            loadsz = 0x20+File.read_uint32(0x5C,_BE);
            sz = 0x20+File.read_uint32(0x60,_BE);
            sza = Hex(File.getSize()-sz); //TODO value different, why? Where does it start?
            smpsz = 0x20+File.read_uint32(0x64,_BE);
            songsz = 0x20+File.read_uint32(0x68,_BE);
            sfx = 0x20+File.read_uint32(0x6C,_BE);
            x = 1;
            d1 = 0x20+File.read_uint32(0x4C,_BE);
            if(d1) {
                a1 = d1;
                while(1) {
                    a1 += 16;
                    d1 = File.read_uint32(a1,_BE);
                    //_log("read(0x20+a1:"+Hex(a1)+") = "+Hex(d1));
                    if(!d1) break;
                    d1 -= File.read_uint8(a1+3);
                    if(!d1) break; else x++
                }
            }
            sOptionT(title);
            if(x > 1) sOption(x,"x");
            sOptionT(auth,"by: ");
            sOptionT(cmt);
            sOption("smp:"+smp+" sfx:"+sfx)//+" sz:"+sz+" a:"+sza+" smpsz:"+smpsz+" songsz:"+songsz+" loadsz:"+loadsz);
        }
    }
    else if(Binary.compare("'ALL '00")) {
        bDetected = 1;
        sName = "Delta Music module (.DM)";
    }
    else if(Binary.compare("670003B40C000001670001EC0C",6)
      && (Binary.findString(0x146,181,"DELTA MUSIC") > 0)) {
        bDetected = 1;
        sName = "Delta Music 2 module (.DM2)";
    }
    else if(Binary.compare("'DMF'0E")) {
        bDetected = 1;
        sName = "Delusion Module Format track (.DMF)";
    }
    else if(Binary.compare("'DDMF'") && Binary.compare("'CMSG'", 0x42)) {
        bDetected = 1;
        sName = "X-Tracker module (.DMF)";
        sVersion = "v"+File.read_uint8(4);
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(0xD,24));
            sOptionT(File.read_ansiString(5,8),"id: ")
    }
    else if(Binary.compare("'.DelekDefleMask.'")) {
        //ref https://web.archive.org/web/20150226185703if_/http://www.delek.com.ar:80/soft/deflemask/DMF_SPECS.txt
        // It's a pretty damn old document though...
        bDetected = 1;
        sName = "DeFleMask module (.DMF)";
        sVersion = "v"+File.read_uint8(0x10);
        if(Binary.isVerbose()) {
            switch(File.read_uint8(0x11)) { //TODO add more new chip versions
            case 0x01: sVersion += "#YMU759"; ch = 17; break;
            case 0x02: sVersion += "#Genesis (10ch)"; ch = 10; break;
            case 0x03: sVersion += "#SMS (4ch)"; ch = 4; break;
            case 0x04: sVersion += "#GameBoy (4ch)"; ch = 4; break;
            case 0x05: sVersion += "#PCEngine (6ch)"; ch = 6; break;
            case 0x06: sVersion += "#NES (5ch)"; ch = 5; break;
            case 0x07: case 0x47: sVersion += "#C64 (3ch)"; ch = 3; break;
            case 0x08: sVersion += "#YM2151 (13ch)"; ch = 13; break;
            default: ch = 4 //just 'cause
            }
            sOption(File.read_ucsdString(0x12));
            l = File.read_uint8(0x12); p = 0x12+l+1;
            sOption(File.read_ucsdString(p),"by: ");
            l = File.read_uint8(p); p += l+1+2;
            tbase = File.read_uint8(p++);
            tick1 = File.read_uint8(p++); tick2 = File.read_uint8(p++);
            Hz = File.read_uint8(p++)?"60(NTSC)":"50(PAL)";
            if(File.read_uint8(p++)) Hz = File.read_uint8(p++)+":"+File.read_uint8(p++)+":"+File.read_uint8(p++);
            else p+=3;
            //These have changed over the years it seems, TODO: RE it
            //p++; _ripm = File.read_uint8(p++);
            //arptick = File.read_uint8(p++); p += ch*_ripm;
            //ins = File.read_uint8(p++);
            sOption("tbase:"+tbase+" tck:"+tick1+":"+tick2+" freq:"+Hz); //+" ins:"+ins+" arp.tick:");
        }
    }
    else if(Binary.compare("' MUGICIAN/SOFTEYES 1990 '")) {
        bDetected = 1; //TODO change to prowizard's method for the tampered-with tracks
        sName = "Digital Mugician module (.DMU)";
        sVersion = "v1";
        if(Binary.isVerbose())
            for (var i = 0x50; i<0xC0; i+=0x10)
                sOptionT(File.read_ansiString(i,12))
    }
    else if(Binary.compare("' MUGICIAN2/SOFTEYES 1990'")) {
        bDetected = 1;
        sName = "Digital Mugician 2 module (.MUG)";
        sVersion = "v2";
        var c = 0;
        for (var i = 0x50; i<0xC0; i+=0x10) {
            t = File.read_ansiString(i,12).trim();
            if(t!="") {
                c++; sOption(t);
            }
        }
    }
    else if(Binary.compare("'DBRAWOPL'")) {
        bDetected = 1;
        sName = "DOSBox Raw OPL chiptune (.DRO)";
    }
    else if(Binary.compare("'DSM'10")) {
        bDetected = 1;
        sName = "Digital Audio Sound Interface Kit module (.DSM)";
        sOptionT(File.read_ansiString(4,32));
    }
    else if(Binary.compare("'RIFF'........'DSMFSONG'")) {
        bDetected = 1;
        sName = "Digital Sound Interface Kit module (.DSM)";
        sVersion = "RIFF";
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(0x14,32));
    }
    else if(Binary.compare("02011313 1412010B 0.")) {
        //ref https://github.com/OpenMPT/openmpt/blob/master/soundlib/Load_dsym.cpp
        // & https://sourceforge.net/p/xmp/libxmp/ci/master/tree/src/loaders/sym_load.c
        bDetected = 1;
        sName = "Digital Symphony module (.DSYM)";
        sVersion = "v"+File.read_uint8(8);
        if(Binary.isVerbose()) {
            var infolenlo = File.read_uint16(0x0E,_LE); var infolenhi = File.read_uint8(0x10);
            infolen = (infolenhi<<16) + infolenlo;
            p = 0x11;
            for(i=0; i < 63; i++)
                if((File.read_uint8(p) & 0x80)) p++;
                else p += 3;
            sOption(File.read_ucsdString(p));
            sOption("ch:"+File.read_uint8(9)+" ord:"+File.read_uint16(0x0A,_LE)
              +" trk:"+File.read_uint16(0x0C,_LE));
        }
    }
    else if(Binary.compare("'DSm'1A20")) {
        bDetected = 1;
        sName = "Dynamic Studio Pro module (.DSM)";
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(5,20));
            sOptionT(File.read_ansiString(25,20),"by: ");
        }
    }
    else if(Binary.compare("02647373")) {
        bDetected = 1;
        sName = "Digital Speech Standard audio (.DSS)";
        sVersion = "v2";
    }
    else if(Binary.compare("03647373")) {
        bDetected = 1;
        sName = "Digital Speech Standard audio (.DSS)";
        sVersion = "v3";
    }
    else if(Binary.compare("'DSFmt1'0D0A")) {
        bDetected = 1;
        sName = "DreamStation module (.DSS)";
        sVersion = "v1.0";
        if(Binary.isVerbose()) {
            pt = File.findSignature(0,TOEOF,"F0E40001")+4; //the 00/01 at the end is "show info at track load"
            if(pt < 4) pt = File.findSignature(0,TOEOF,"F0E40000")+4;
            if(pt >= 4) {
                pa = File.findSignature(pt,TOEOF,"0D0A"); t = File.read_ansiString(pt,pa-pt); pa += 2;
                pc = File.findSignature(pa,TOEOF,"0D0A"); a = File.read_ansiString(pa,pc-pa); pc += 2;
                c = File.read_ansiString(pc,File.getSize()-pc);
                sOption(t); sOption(a,"by: "); sOption(c)
            }
        }
    }
    else if(Binary.compare("'DS2F0'....'Default'")) {
        bDetected = 1;
        sName = "DreamStation II module (.DS2)";
        sVersion = "v2";
        if(Binary.isVerbose()) {
            ts=File.read_uint8(0x62); t=File.read_ansiString(0x63,ts);
            pa=0x62+ts+1; as=File.read_uint8(pa); a=File.read_ansiString(pa+1,as);
            pc=pa+as+1;  cs=File.read_uint8(pc); c=File.read_ansiString(pc+1,cs);
            sOption(t);
            sOption(a,"by: ");
            sOption(c);
        }
    }
    else if(Binary.compare("'MMU2'00")) {
        sName = "Digital Sound Studio module (.DSS)"; bDetected = 1;
        sVersion = "v1-3.0";
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(10,32));
            sOption("ord:"+File.read_int16(0x59C,_BE));
        }
    }
    else if(Binary.compare("'DTL'00")) {
        bDetected = 1;
        sName = "Drum Traker module (.DTL)";
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(4,20))
    }
    else if(Binary.compare("'D.T.'00")) {
        sv = ["S.Q.","VERS"].indexOf(File.read_ansiString(0x2A,4));
        if(sv >= 0) {
            bDetected = 1;
            sName = "Digital Tracker module (.DTM)";
            if(Binary.isVerbose()) {
                if(sv==0) sOptionT(File.read_ansiString(0x16,20))
                //let's play along with Bummtschak here
                else sOptionT(File.read_ansiString(0x16,24))
            }
        }
    }
    else if(Binary.compare("'DeFy DTM'")) {
        sName = "DeFy AdLib Tracker module (.DTM)"; bDetected = 1;
        sVersion = "v"+File.read_ansiString(9,3);
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0xD,20));
            sOptionT(File.read_ansiString(0x21,20));
        }
    }
    else if(Binary.compare("'SONG'........'NAME'")) {
        sName = "DigiTrekker module (.DTM)"; bDetected = 1;
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(0x10,20));
    }
    else if(Binary.compare("' PWD'03") && Binary.compare("'Master'",0x0E)) {
        sName = "DarkWave Studio module (.DWP)"; bDetected = 1
    }
    else if(File.getSize() >= 0x500 && Binary.compare("48E700F0 41FA.... 4CD80600")) {
        sName = 'Darius "Mark II" Zendeh module (.DZ)'; bDetected = 1;
        if(Binary.compare("4A44",0xC)) {
            sVersion = "type 1";
            if(Binary.isVerbose()) {
                p = File.findSignature(0,0x80,"0C04.... 66..41FA");
                if(p >= 0) sOption(File.read_uint16(p+2,_BE)+3,"×")
            }
        } 
        else if(Binary.compare("4A00",0xC)) sVersion = "type 2";
        else if(Binary.compare("0C00",0xC)) sVersion = "type 3";
    }
    else if(File.getSize() >= 0x500 && Binary.compare("48E778F0 41FA.... 4CD80600 0C0000FF")) {
        sName = "Darius Zendeh module (.DZ)"; sVersion = "strange"; bDetected = 1
    }
    else if(File.getSize() >= 0x500 && Binary.findSignature(0x200,0x200,"'.ZADS89.'") >= 0) {
        sName = "Mark II Sound System module (.MK2)"; bDetected = 1;
    }
    else if(Binary.compare("'EASO'")) {
        sName = "EarAche module (.EAS)"; bDetected = 1;
    }
    else if(Binary.compare("'FORM'.... ....'EMODEMIC'")) {
        sName = "Quadra Composer module (.EMOD)"; bDetected = 1;
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0x16,0x28));
            sOptionT(File.read_ansiString(0x44,0x18),"by: ");
        }
    }
    else if(Binary.compare("'E.M.S. V6.'")) {
        bDetected = 1;
        sName = "Electronic Music System module (.EMS)";
        sVersion = "v6."+File.read_ansiString(10,2)
    }
    else if(Binary.compare("'ZXAYEMUL'")) {
        // ref https://vgmrips.net/wiki/AY_File_Format
        bDetected = 1;
        sName = "AY Emul module (.EMUL)";
        sVersion = "Rel "+File.read_uint8(8)+" Plr "+File.read_uint8(9);
        if(Binary.isVerbose()) {
            psongst = 0x12 + File.read_uint16(0x12,_BE);
            title0 = File.read_ansiString(psongst + File.read_uint16(psongst,_BE),0x100);
            auth = File.read_ansiString(0x0C + File.read_uint16(0x0C,_BE),0x100);
            misc = File.read_ansiString(0x0E + File.read_uint16(0x0E,_BE),0x100);
            more = File.read_uint8(0x10);
            sOptionT(title0);
            if(more > 0) sOption(more+1,"x ");
            sOptionT(auth);
            sOptionT(misc);
        }
    }
    else if((File.getSize()>0x24 && Binary.compare("'ETracker (C) BY ESI.'",10)) ||
      (File.getSize()>0x4D4 && Binary.compare("21B384") &&
      Binary.compare("'ETracker (C) BY ESI.'",File.read_uint16(1,_LE)-0x8000+10))) {
        //kudos to horsicq for helping narrow down the bad samples in modland files 
        bDetected = 1;
        sName = "SAM Coupe E-Tracker file (.ETC)";
        if(Binary.compare("21B384")) sVersion = "&player";
    }
    else if((File.getSize() > 2048+6+6)
      && Binary.compare("00000000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 0x3E1)
      && Binary.compare("......00 ......00 ......00 ......00 ......00 ......00 ......00",0x4D4)
        ) {
        bDetected = 1;
        sName = "Euphony module (.EUP)";
        if(File.isVerbose()) {
            sOption(File.read_codePageString(0,0x20,"CP932"))
        }
    }
    else if(Binary.compare("'FAR'FE") && Binary.compare("0D0A1A",0x2C)) {
        //ref https://web.archive.org/web/20151027135146/http://hackipedia.org/File%20formats/Music/Sample%20based/text/Format%20Specifications%20(FAR,%20FSM,%20USM,%20F2R)%20by%20Daniel%20Potter.cp437.txt.utf-8.txt
        bDetected = 1; nV = File.read_uint8(0x31);
        sName = "Farandole Composer module (.FAR)";
        sVersion = "v"+ (nV>>4) +"."+ (nV&0x0F);
        if(Binary.isVerbose()) {
            sOptionT(File.read_codePageString(4,0x28,"CP850"));
            var stlen = File.read_uint16(0x60,_LE);
            sOption(File.read_codePageString(0x62,stlen,"CP850").trim().slice(0,0x100).trim()+"...");
            sOption("ord:"+File.read_uint8(stlen+0x163)
                +" ptn:"+File.read_uint8(stlen+0x162)
                +" lp:"+File.read_uint8(stlen+0x164))
        }
    }
    else if(Binary.compare("'FPT'FE") && Binary.compare("0D0A1A",0x24)) {
        //ref https://web.archive.org/web/20151027135146/http://hackipedia.org/File%20formats/Music/Sample%20based/text/Format%20Specifications%20(FAR,%20FSM,%20USM,%20F2R)%20by%20Daniel%20Potter.cp437.txt.utf-8.txt
        sName = "Farandole Composer pattern (.FPT)"; bDetected = 1;
        if(Binary.isVerbose())
            sOptionT(File.read_codePageString(4,0x20,"CP850"));
    }
    else if(Binary.compare("'FSM'FE") && Binary.compare("0A0D1A",0x24)) {
        //ref https://web.archive.org/web/20151027135146/http://hackipedia.org/File%20formats/Music/Sample%20based/text/Format%20Specifications%20(FAR,%20FSM,%20USM,%20F2R)%20by%20Daniel%20Potter.cp437.txt.utf-8.txt
        sName = "Farandole Composer sample (.FSM)"; bDetected = 1;
        if(Binary.isVerbose()) {
            sOptionT(File.read_codePageString(4,0x20,"CP850"));
            if(File.read_uint8(0x35)) type = "16bit"; else type = "8bit";
            if(File.read_uint8(0x36)&4) looped = " looped"; else looped = "";
            sVersion = type+looped;
            sOption("len:"+File.read_uint32(0x27,_LE));
        }
    }
    else if(Binary.compare("'FC14'") && (File.getSize() > 192)) {
        //ref https://github.com/tonioni/WinUAE/blob/master/prowizard/rippers/FutureComposer14.c
        bDetected = 1;
        sName = "Future Composer module (.FC)";
        sVersion = "v1.4";
        if (File.getSize() < File.read_uint32(8,_BE)+File.read_uint32(0x10,_BE)
            +File.read_uint32(0x20,_BE)+File.read_uint32(0x24,_BE)) sVersion += "/malformed"        
    }
    else if(Binary.compare("'FUCO'C1") && Binary.compare("'DIGI'",0x4404)) {
        bDetected = 1;
        sName = "Future Composer module (.BSI)";
        sVersion = "ver.BSI";
    }
    else if(Binary.compare("'FMK!'")) {
        bDetected = 1;
        sName = "FM-Kingtracker module (.FMK)";
        if(Binary.isVerbose()) {
            text = true; for(i=0; i < 0x38; i++) if(0x20 > File.read_uint8(i+4)) { text = false; break }
            if(text) {
                sOptionT(File.read_ansiString(0x04,0x1C));
                sOptionT(File.read_ansiString(0x20,0x1C),"by: ");
            }
        }
    }
    else if(Binary.compare("'FMTracker'....'The FM Tracker!'")) {
        bDetected = 1;
        sName = "FM Tracker module (.FMT)";
        sVersion = "v"+File.read_uint8(9)+"."+File.read_uint8(10);
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(0x1F,0x20));
    }
    else if(Binary.compare("'FMTRK'1A")) {
        bDetected = 1;
        sName = "FM Tracker (Adlib) module (.FMT)";
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(0x10,0x20));
    }
    else if(Binary.compare("'Funk'") && Binary.compare("FFFFFFFF",0x4D)) {
        bDetected = 1;
        sName = "Funk Tracker module (.FNK)";
        if(File.read_uint8(0x0C)==0x46)
            sVersion = "v"+File.read_ansiString(0x0D,1)+"."+File.read_ansiString(0x0E,2);
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(0x191,0x13));
    }
    else if(Binary.compare("000003F3") && File.read_uint8(0x14)
      && Binary.compare("70FF4E75'F.PLAYER'",0x20) && File.read_int32(0x40,_BE)) {
        bDetected = 1;
        sName = "Future Player module (.FP)";
    }
    else if(Binary.compare("'Module: '") && Binary.compare("';Fast Tracker v1.00'", 0x32)) {
        bDetected = 1;
        sName = "Fast Tracker module (.FTС)";
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(8,0x2A));
    }
    else if(Binary.compare("'FTMN'03")) {
        bDetected = 1;
        sName = "Face the Music module (.FTM)";
        if(Binary.isVerbose()) {
            sOptionT(File.read_codePageString(0x10,0x20,"CP1250"));
            sOptionT(File.read_codePageString(0x30,0x20,"CP1250"))
        }
    }
    else if(Binary.compare("'FMS!'..000000")) {
        bDetected = 1;
        sName = "FamiStudio module (.FMS)";
        sVersion = "v"+File.read_uint8(4)
    }
    else if(Binary.compare("'FamiTracker Module'")) {
        bDetected = 1;
        sName = "FamiTracker module (.FTM)";
        if(Binary.isVerbose()) {
            itag = Binary.findString(0x14,0x100,"INFO\x00");
            sOptionT(File.read_ansiString(itag+0x18,0x20));
            sOptionT(File.read_ansiString(itag+0x38,0x20),"by: ");
            sOptionT(File.read_ansiString(itag+0x58,0x20))
        }
    }
    else if(Binary.compare("'-Furnace '")) {
        // from https://github.com/tildearrow/furnace/blob/master/papers/format.md
        switch(File.read_ansiString(9,7)) {
            case 'module-':
                cV = 'm'; bDetected = 1; sName = "Furnace Tracker module (.FUR)"; break;
            case 'instr.-':
                cV = 'i'; bDetected = 1; sName = "Furnace Tracker instrument (.FUI)"; break;
            case 'waveta-':            
                cV = 'w'; bDetected = 1; sName = "Furnace Tracker wavetable (.FUW)"; break
            default:
                cv = "?"; bDetected = 1; sName = "unknown Furnace Tracker file"
        }
        nV = File.read_uint16(0x10,_LE);
        //ref https://github.com/tildearrow/furnace/blob/master/papers/format.md
        //they update it every 0.1 femtosecond, why not help out since you're reading this?
        if(nV < 12) sVersion = "["+nV+"]"; else
        if(nV <= 14) sVersion = "v0.2.X"; else
        if(nV <= 16) sVersion = "v0.3.X"; else
        if(nV <= 27) sVersion = "v0.4.X"; else
        if(nV < 35) sVersion = "["+nV+"]"; else
        if(nV <= 54) sVersion = "v0.5.X"; else
        if(nV < 57) sVersion = "["+nV+"]"; else
        if(nV == 75) sVersion = "v.dev75/April Fools' 0.6pre0"; else
        if(nV <= 99) sVersion = "v.dev"+nV; else
        if(nV == 100) sVersion = "v0.6pre1"; else
        if(nV == 101) sVersion = "v0.6pre1 (dev101)"; else
        if(nV == 102) sVersion = "v0.6pre1 (dev102)"; else
        if(nV <= 115) sVersion = "v.dev"+nV; else
        if(nV == 116) sVersion = "v.0.6pre1.5"; else
        if(nV <= 131) sVersion = "v.dev"+nV; else
        if(nV == 132) sVersion = "v.0.6pre2"; else
        if(nV == 133) sVersion = "v.0.6pre3"; else
        if(nV <= 140) sVersion = "v.dev"+nV; else
        if(nV == 141) sVersion = "Tournament Edition"; else
        if(nV == 142) sVersion = "v.dev"+nV; else
        if(nV == 143) sVersion = "v.0.6pre4"; else
        if(nV <= 145) sVersion = "v.dev"+nV; else
        if(nV == 146) sVersion = "v.Pro (joke edition)"; else
        if(nV <= 157) sVersion = "v.dev"+nV; else
        if(nV == 158) sVersion = "v.0.6pre5"; else
        if(nV <= 160) sVersion = "v.dev"+nV; else
        if(nV == 161) sVersion = "v.0.6pre6"; else
        if(nV == 162) sVersion = "v.0.6pre7";
        else sVersion = "["+nV+"]";
        if(cV === 'i') {
            p = File.read_uint32(0x14,_LE);
            if(p>0 && Binary.compare("'INST'",p)) {
                ity = File.read_uint16(0x10,_LE);
                switch(ity) {
                    case 0: sVersion += "/std"; break;
                    case 1: sVersion += "/FM (OPM/OPN)"; break;
                    case 2: sVersion += "/Game Boy"; break;
                    case 3: sVersion += "/C64"; break;
                    case 4: sVersion += "/Amiga|smp"; break;
                    case 5: sVersion += "/PC Engine"; break;
                    case 6: sVersion += "/AY-3-8910"; break;
                    case 7: sVersion += "/AY8930"; break;
                    case 8: sVersion += "/TIA"; break;
                    case 9: sVersion += "/SAA1099"; break;
                    case 10: sVersion += "/VIC"; break;
                    case 11: sVersion += "/PET"; break;
                    case 12: sVersion += "/VRC6"; break;
                    case 13: sVersion += "/OPLL"; break;
                    case 14: sVersion += "/OPL"; break;
                    case 15: sVersion += "/FDS"; break;
                    case 16: sVersion += "/Vritual Boy"; break;
                    case 17: sVersion += "/Namco 163"; break;
                    case 18: sVersion += "/SCC"; break;
                    case 19: sVersion += "/OPZ"; break;
                    case 20: sVersion += "/POKEY"; break;
                    case 21: sVersion += "/PC Speaker"; break;
                    case 22: sVersion += "/WonderSwan"; break;
                    case 23: sVersion += "/Lynx"; break;
                    case 24: sVersion += "/VERA"; break;
                    case 25: sVersion += "/X1-010"; break;
                    case 26: sVersion += "/VRC6(saw)"; break;
                    case 27: sVersion += "/ESS5506"; break;
                    case 28: sVersion += "/MultiPCM"; break;
                    case 29: sVersion += "/SNES"; break;
                    case 30: sVersion += "/Sound Unit"; break;
                    case 31: sVersion += "/Namco WSG"; break;
                    default: sVersion += "/unk"
                }
                if(Binary.isVerbose()) {
                    wvt = File.read_uint16(p+0x18,_LE);
                    smp = File.read_uint16(p+0x1A,_LE);
                    sOptionT(File.read_utf8String(p+0x0C,0x200));
                    sOption(" wvt:"+wvt+" smp:"+smp);
                }
            } //verbose inst
        } //inst
        if(cV === 'm' && Binary.isVerbose()) {
            p = File.read_uint32(0x14,_LE);
            if(p>0 && Binary.compare("'INFO'",p)) {
                t = File.read_utf8String(p+0x100,0x200);
                p1 = File.findSignature(p+0x100,0x200,"00")+1;
                a = File.read_utf8String(p1,0x200);
                p1 = File.findSignature(p1,0x200,"00")+1;
                ins = File.read_uint16(p+0x16,_LE);
                wvt = File.read_uint16(p+0x18,_LE);
                smp = File.read_uint16(p+0x1A,_LE);
                ptng = File.read_uint32(p+0x1C,_LE);
                freq = File.read_float(p+0x0C,_LE);
                A4freq = File.read_float(p1,_LE);
                s1spd = File.read_uint8(p+9)+"/"+File.read_uint8(p+0x0A);
                s1ptn = File.read_uint16(p+0x10);
                s1ord = File.read_uint16(p+0x12);
                sOptionT(t);
                sOptionT(a,"by: ");
                chips = []; el = false; i = 0;
                while(!el && (i<32)) {
                    switch(File.read_uint8(p+0x20+i)) {
                    case 0: el = true; break;
                    case 0x01: chips[i] = "YMU759 (17ch)"; break;
                    case 0x02: chips[i] = "Genesis (10ch comp.)"; break;
                    case 0x03: chips[i] = "SMS (SN76489) (4ch)"; break;
                    case 0x04: chips[i] = "Game Boy (4ch)"; break;
                    case 0x05: chips[i] = "PC Engine (6ch)"; break;
                    case 0x06: chips[i] = "NES (5ch)"; break;
                    case 0x07: chips[i] = "C64 (8580) (3ch)"; break;
                    case 0x08: chips[i] = "Arcade (YM2151+SegaPCM) (13ch)"; break;
                    case 0x09: chips[i] = "Neo Geo CD (YM2610) (13ch)"; break;
                    case 0x42: chips[i] = "Genesis extended (13ch)"; break;
                    case 0x43: chips[i] = "SMS (SN76489) + OPLL (YM2413) (13ch comp.)"; break;
                    case 0x46: chips[i] = "NES+VRC7 (11ch)"; break;
                    case 0x47: chips[i] = "C64 (6581) (3ch)"; break;
                    case 0x49: chips[i] = "Neo Geo CD extended (16ch)"; break;
                    case 0x80: chips[i] = "AY-3-8910 (3ch)"; break;
                    case 0x81: chips[i] = "Amiga (4ch)"; break;
                    case 0x82: chips[i] = "YM2151 (8ch)"; break;
                    case 0x83: chips[i] = "YM2612 (6ch)"; break;
                    case 0x84: chips[i] = "TIA (2ch)"; break;
                    case 0x85: chips[i] = "VIC-20 (4ch)"; break;
                    case 0x86: chips[i] = "PET (1ch)"; break;
                    case 0x87: chips[i] = "SNES (8ch)"; break;
                    case 0x88: chips[i] = "VRC6 (3ch)"; break;
                    case 0x89: chips[i] = "OPLL (YM2413) (9ch)"; break;
                    case 0x8A: chips[i] = "FDS (1ch)"; break;
                    case 0x8B: chips[i] = "MMC5 (3ch)"; break;
                    case 0x8C: chips[i] = "Namco 163 (8ch)"; break;
                    case 0x8D: chips[i] = "YM2203 (6ch)"; break;
                    case 0x8E: chips[i] = "YM2608 (16ch)"; break;
                    case 0x8F: chips[i] = "OPL (YM3526) (9ch)"; break;
                    case 0x90: chips[i] = "OPL2 (YM3812) (9ch)"; break;
                    case 0x91: chips[i] = "OPL3 (YMF262) (18ch)"; break;
                    case 0x92: chips[i] = "MultiPCM (28ch)"; break;
                    case 0x93: chips[i] = "Intel 8253 (beeper) (1ch)"; break;
                    case 0x94: chips[i] = "POKEY (4ch)"; break;
                    case 0x95: chips[i] = "RF5C68 (8ch)"; break;
                    case 0x96: chips[i] = "WonderSwan (4ch)"; break;
                    case 0x97: chips[i] = "Philips SAA1099 (6ch)"; break;
                    case 0x98: chips[i] = "OPZ (YM2414) (8ch)"; break;
                    case 0x99: chips[i] = "Pokémon Mini (1ch)"; break;
                    case 0x9A: chips[i] = "AY8930 (3ch)"; break;
                    case 0x9B: chips[i] = "SegaPCM (16ch)"; break;
                    case 0x9C: chips[i] = "Virtual Boy (6ch)"; break;
                    case 0x9D: chips[i] = "VRC7 (6ch)"; break;
                    case 0x9E: chips[i] = "YM2610B (16ch)"; break;
                    case 0x9F: chips[i] = "ZX Spectrum (beeper) (6ch)"; break;
                    case 0xA0: chips[i] = "YM2612 extended (9ch)"; break;
                    case 0xA1: chips[i] = "Konami SCC (5ch)"; break;
                    case 0xA2: chips[i] = "OPL drums (YM3526) (11ch)"; break;
                    case 0xA3: chips[i] = "OPL2 drums (YM3812) (11ch)"; break;
                    case 0xA4: chips[i] = "OPL3 drums (YMF262) (20ch)"; break;
                    case 0xA5: chips[i] = "Neo Geo (YM2610) (14ch)"; break;
                    case 0xA6: chips[i] = "Neo Geo extended (YM2610) (17ch)"; break;
                    case 0xA7: chips[i] = "OPLL drums (YM2413) (11ch)"; break;
                    case 0xA8: chips[i] = "Atari Lynx (4ch)"; break;
                    case 0xA9: chips[i] = "SegaPCM (DefleMask compat.) (5ch)"; break;
                    case 0xAA: chips[i] = "MSM6295 (4ch)"; break;
                    case 0xAB: chips[i] = "MSM6258 (1ch)"; break;
                    case 0xAC: chips[i] = "Commander X16 (VERA) (17ch)"; break;
                    case 0xAD: chips[i] = "Bubble System WSG (2ch)"; break;
                    case 0xAE: chips[i] = "OPL4 (YMF278B) (42ch)"; break;
                    case 0xAF: chips[i] = "OPL4 drums (YMF278B) (44ch)"; break;
                    case 0xB0: chips[i] = "Seta/Allumer X1-010 (16ch)"; break;
                    case 0xB1: chips[i] = "Ensoniq ES5506 (32ch)"; break;
                    case 0xB2: chips[i] = "Yamaha Y8950 (10ch)"; break;
                    case 0xB3: chips[i] = "Yamaha Y8950 drums (12ch)"; break;
                    case 0xB4: chips[i] = "Konami SCC+ (5ch)"; break;
                    case 0xB5: chips[i] = "tildearrow Sound Unit (8ch)"; break;
                    case 0xB6: chips[i] = "YM2203 extended (9ch)"; break;
                    case 0xB7: chips[i] = "YM2608 extended (19ch)"; break;
                    case 0xB8: chips[i] = "YMZ280B (8ch)"; break;
                    case 0xB9: chips[i] = "Namco WSG (3ch)"; break;
                    case 0xBA: chips[i] = "Namco 15xx (8ch)"; break;
                    case 0xBB: chips[i] = "Namco CUS30 (8ch)"; break;
                    case 0xBC: chips[i] = "MSM5232 (8ch)"; break;
                    case 0xBD: chips[i] = "YM2612 extra features extended (11ch)"; break;
                    case 0xBE: chips[i] = "YM2612 extra features (7ch)"; break;
                    case 0xBF: chips[i] = "T6W28 (4ch)"; break;
                    case 0xC0: chips[i] = "PCM DAC (1ch)"; break;
                    case 0xC1: chips[i] = "YM2612 CSM (10ch)"; break;
                    case 0xC2: chips[i] = "Neo Geo CSM (YM2610) (18ch)"; break;
                    case 0xC3: chips[i] = "YM2203 CSM (10ch)"; break;
                    case 0xC4: chips[i] = "YM2608 CSM (20ch)"; break;
                    case 0xC5: chips[i] = "YM2610B CSM (20ch)"; break;
                    case 0xC6: chips[i] = "K007232 (2ch)"; break;
                    case 0xC7: chips[i] = "GA20 (4ch)"; break;
                    case 0xDE: chips[i] = "YM2610B extended (19ch)"; break;
                    case 0xE0: chips[i] = "QSound (19ch)"; break;
                    case 0xFC: chips[i] = "Pong (1ch)"; break;
                    case 0xFD: chips[i] = "Dummy System (8ch)"; break;
                    case 0xFE: case 0xFF: chips[i] = "reserved for development"; break;
                    default: chips[i] = "unk.";
                    }
                    if(!el) i++;
                }
                sOption("chips: "+chips.join("+"));
                sOption("ticks="+freq+"Hz, A4="+A4freq+"Hz");
                sOption("ins:"+ins+" wvt:"+wvt+" smp:"+smp+" glob.ptn:"+ptng);
                sOption("1st song's spd:"+s1spd+" ptn:"+s1ptn+" ord:"+s1ord);
            } //verbose mod
        } //mod
    }
    else if(Binary.compare("'FWMP'00")) {
        bDetected = 1;
        sName = "Forgotten Worlds BGM module (.FW)";
    }
    else if(Binary.compare("'FXSM'")) {
        bDetected = 1;
        sName = "Fuxoft AY Language module (.FXM)";
    }
    else if(Binary.compare("'GBRF'")) {
        bDetected = 1;
        sName = "Gameboy Ripped Format module (.GBR)";
        t = File.read_ansiString(0x154,0x13);
        if(t != "") if(/^([a-zA-Z0-9_ -]{4,})/.test(t)) sOptions = sOptions.append(t);
    }
    else if(Binary.compare("'GBS'01")) {
        bDetected = 1;
        sName = "Gameboy Sound System module (.GBS)";
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(0x10,0x20));
        tc = File.read_uint8(4); if(tc > 0) sOption("x "+tc);
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0x30,0x20),"by: ");
            sOptionT(File.read_ansiString(0x50,0x20));
        }
    }
    else if(Binary.compare("'GDM'FE") && Binary.compare("0D0A1A'GMFS'",0x44)) {
        //ref http://modland.com/pub/documents/format_documentation/General%20Digital%20Music%20(.gdm).txt
        bDetected = 1;
        sName = "General Digital Music module (.GDM)";
        trkr = "";
        if(File.read_uint16(0x4D,_BE)==0) trkr = "2gdm";
        sVersion = "v"+ File.read_uint8(0x4B) +"."+ File.read_uint8(0x4C);
        if(trkr != "") sVersion += "/"+trkr+" v."+File.read_uint8(0x4F)+"."+File.read_uint8(0x50);
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0x04,0x20));
            sOptionT(File.read_ansiString(0x24,0x20),"by: ");
            tof = File.read_uint16(0x74,_BE);
            switch(tof) {
                case 1: sOptionT("orig: MOD"); break;
                case 2: sOptionT("orig: MTM"); break;
                case 3: sOptionT("orig: S3M"); break;
                case 4: sOptionT("orig: 669"); break;
                case 5: sOptionT("orig: FAR"); break;
                case 6: sOptionT("orig: ULT"); break;
                case 7: sOptionT("orig: STM"); break;
                case 8: sOptionT("orig: MED")
            }
            sOptionT(File.read_ansiString(File.read_uint32(0x8A,_BE),File.read_uint32(0x8D,_BE)))
        }
    }
    else if(Binary.compare("'GLUE'B8B3AABA")) {
        //TODO reverse & find calcsize
        bDetected = 1;
        sName = "GlueMon module (.GLUE)";
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(8,8));
            ins = File.read_uint8(0x7F);
            ord = File.read_uint8(0x9E); ptn = 0;
            for(i=0; i < ord; i++) { t = File.read_uint8(0x9F+i); if(t != 0xFF && ptn < t) ptn = t }
            ptn++;
            sOption("ord:"+ord+" ptn:"+ptn+" ins:"+ins)
        }
    }
    else if(Binary.compare("'NuFREDGRAY'",0x22)) {
        bDetected = 1;
        sName = "Fred Gray's module (.GRAY)";
        if(Binary.isVerbose()) {
            t = File.read_ansiString(0x50,0x100); pn = 0x50+t.length+1;
            a = File.read_ansiString(pn,0x100); pn += a.length+1;
            c = File.read_ansiString(pn,0x100);
            sOptionT(t); sOptionT(a,"by: "); sOptionT(c)
        }
    }
    else if(Binary.compare("'+SNT'")) {
        bDetected = 1;
        sName = "Beaver Sweeper module (.GTK)";
    }
    else if( /GT[2K]/.test(File.read_ansiString(0,3)) ) {
        //GTK from http://ldesoras.free.fr/src/gt2/dev_gtk.zip / formats.txt
        //GT2 from mod_gt2.cpp
        //+ input from the author Laurent "Dumbo" de Soras (http://ldesoras.free.fr)
        bDetected = 1;
        sigv = 0;
        switch(File.read_uint8(2)){
            case 0x4B: sName = "Graoumf Tracker module (.GTK)"; sVersion = "Amiga "; sigv = 1; break;
            case 0x32: sName = "Graoumf Tracker 2 module (.GT2)"; sVersion = "PC " ; sigv = 2;
        }
        v = File.read_uint8(3); sVersion += "v"+v;
        if(v < 6) switch(v){
            case 1: sVersion += "/GT v0.7"; break;
            case 2: sVersion += "/GT v0.726"; break;
            case 3: sVersion += "/GT v0.731";break;
            //lost in time
        }
        else {
             if(v == 9) sVersion+="/GT r27";
        }

        if(Binary.isVerbose()) {
            hksz = File.read_uint32(4,_BE); pn=hksz;
        }
        if(Binary.isVerbose()) {
            if(sigv == 1) { //v1
                t = File.read_ansiString(4,0x20).trim(); d = xc = "";
                c = File.read_ansiString(0x24,0xA0).trim(); //the author says he never implemented this
                ins = File.read_uint16(0xC4,_BE); lpp = File.read_uint16(0xC6,_BE);
                songlen = File.read_uint16(0xC8,_BE);
                statln = "ins:"+File.read_uint16(0xC4,_BE)+" lpp:"+File.read_uint16(0xC6,_BE)+
                  " len:"+Hex(File.read_uint16(0xCA,_BE))+" trk:"+File.read_uint16(0xC8,_BE);
            }
            else { //v2
                t = File.read_ansiString(8,0x20).trim();
                d = File.read_uint16(0xCA,_BE)+"-"+File.read_uint8(0xC9)+"-"+File.read_uint8(0xC8);
                sVersion += "/"+File.read_ansiString(0xCC,0x18).trim();
                c = File.read_ansiString(0x28,0xA0).trim();
                if(v < 6) statln = "spd:"+File.read_uint16(0xE4,_BE)+" bpm:"+File.read_uint16(0xE6,_BE);
                else statln = "";
                xc = [];
                for(i=0; i < 10;i++) {
                    //traverse some hunks... for no good reason, the author never implemented XCOM
                    //but forks exist
                    if(pn > File.getSize()) break;
                    hkhd = File.read_ansiString(pn,4); hksz = File.read_uint32(pn+4,_BE);
                    //statln+=" "+hkhd;
                    switch (hkhd) {
                      case "XCOM": xcc = File.read_uint16(pn+8,_BE);
                        xc = xc.push(File.read_ansiString(pn+10,xcc).trim());
                        break;
                    }
                    pn+=hksz;
                }
            }
            sOption(t); sOption(d); sOption(c); sOption(statln);
            if(xc.length) sOption(xc,join("\n"));
        }
    }
    else if(Binary.compare("0.'GTR'")) {
        sName = "Global Tracker (.GTR)"; bDetected = 1;
        sV = Hex(File.read_uint8(4)); sVersion = "v"+sV[0]+"."+sV[1];
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(7,0x20));
            sOption(File.read_uint8(0),"delay:");
        }
    }
    else if(Binary.compare("'GYMX'")) {
        bDetected = 1;
        sName = "Sega Genesis/Mega Drive YM2612 stream (.GYM)";
        e = File.read_ansiString(0x64,0x20).trim();
        if(e != "") sVersion = e; sVersion.append("unpacked");
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0x4,0x20));
            sOptionT(File.read_ansiString(0x24,0x20),"for: ");
            sOptionT(File.read_ansiString(0x44,0x20),"at: ");
            sOptionT(File.read_ansiString(0x84,0x20),"by: ");
            sOptionT(File.read_ansiString(0xA4,0x100));
        }
    }
    else if(Binary.compare("'NuH.DAVIES'",0x22)) {
        bDetected = 1;
        sName = "Howie Davies's module (.HD)";
        if(Binary.isVerbose()) {
            t = File.read_ansiString(0x64,0x100); pn = 0x64+t.length+1;
            a = File.read_ansiString(pn,0x100); pn += a.length+1;
            c = File.read_ansiString(pn,0x100);
            sOptionT(t);
            sOptionT(a,"by: ");
            sOptionT(c);
        }
    }
    else if(Binary.compare("'HESM'") && Binary.compare("'DATA'",0x10)) {
        bDetected = 1;
        sName = "HES module (.hes)";
        sVersion = "v"+File.read_uint8(4);
        /* TODO get what's going on! Most files are good but some just have codeseg up there...
        if(Binary.isVerbose()) {
            t = ""; a = ""; c = ""; pn=0x40; dataat = File.read_uint16(6,_BE);
            if(pn<dataat && 31<File.read_uint8(pn)<128) t = File.read_ansiString(pn,0x100);
            if(t.length+1>0x1F) pn=Math.round((pn+t.length)/0x10)*0x10;
            else pn += 0x20;
            if(pn<dataat && 31<File.read_uint8(pn)<128) a = File.read_ansiString(pn,0x100);
            if(a.length+1>0x1F) pn=Math.round((pn+a.length)/0x10)*0x10;
            else pn += 0x20;
            if(pn<dataat && 31<File.read_uint8(pn)<128) c = File.read_ansiString(pn,0x100);

            sOptionT(t); sOptionT(a,"by: "); OptionT(c); 
        }
        */
    }
    else if(Binary.compare("6000002A' **** Player by Jochen Hippel 1990 ****'")) {
        //TODO not all of them can be found out like this
        bDetected = 1;
        sName = "Jochen Hippel's 7V module (.HIP7)";
    }
    else if(Binary.compare("'COSO'") && (Binary.compare("'MMME'",0x20) ||Binary.compare("'TFMX'",0x20))) {
        bDetected = 1;
        sName = "Jochen Hippel's COSO module (.HIPC,.SOC)";
    }
    else if(Binary.compare("'HVL'00") || Binary.compare("'HVL'01")) {
        bDetected = 1;
        sName = "Hively Tracker module (.HVL)";
        sVersion = "v"+File.read_uint8(3);
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(File.read_uint16(4,_BE),0x20))
    }
    else if(Binary.compare("'IM10'",0x3C) && File.read_uint8(0x30)
        && File.read_uint8(0x31) >= 0x20 && File.read_uint8(0x32) <= 0x40
        && File.read_uint8(0x33) >= 4 && File.read_uint8(0x33) < 0x80) {
        //ref https://sourceforge.net/p/xmp/libxmp/ci/master/tree/src/loaders/imf_load.c
        bDetected = 1;
        sName = "Imago Orpheus module (.IMF)";
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0,0x20));
            sOption("tempo0:"+File.read_uint8(0x30)+" bpm0:"+File.read_uint8(0x31)
                +" ord:"+File.read_uint16(0x20,_LE)+" ptn:"+File.read_uint16(0x22,_LE)
                +" ins:"+File.read_uint16(0x24,_LE));
        }
    }
    else if(Binary.compare("'GTI5'")) {
        bDetected = 1;
        sName = "GoatTracker 2 Instrument (.INS)";
    }
    else if(Binary.compare("'IMPM'")) {
        bDetected = 1;
        sName = "Impulse Tracker module (.IT)";
        sVersion = "";
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(4,25))
    }
    else if(Binary.compare("'ISM!V1.2'")) {
        bDetected = 1;
        sName = "Sound Invasion Music System/In Stereo! module (.IS)";
        sVersion = "v"+File.read_ansiString(5,3);
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(0x24,25))
    }
    else if(Binary.compare("'IS20DF10STBL'")) {
        bDetected = 1;
        sName = "Sound Invasion Music System/In Stereo! module (.IS20)";
        sVersion = "v2.0";
    }
    else if(Binary.compare("'IXS!'")) {
        bDetected = 1;
        sName = "Ixalance module (.IXS)";
        sVersion = "v1.2";
        if(Binary.isVerbose())
          if(File.read_uint8(0x17) == 0x40)
            sOptionT(File.read_ansiString(0x18,0x20))
    }
    else if(Binary.compare("'MUSE'DEADBEAF") || Binary.compare("'MUSE'DEADBABE")) {
        sName = "Jazz Jackrabbit 2 container (.J2B)/Galaxy Sound System module";
        bDetected = 1;
        //TODO: confirm if zlib extraction available; if so, derive the module name too
    }
    else if(Binary.compare("'RIFF'........'AM  '")) {
        bDetected = 1;
        sName = "Galaxy Sound System module (.J2B)";
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(0x14,64))
    }
    else if(Binary.compare("'NuJ.FLOGEL'",0x22)) {
        bDetected = 1;
        sName = "Janko Mrsic-Flogel's module (.JMF)";
        if(Binary.isVerbose()) {
            t = File.read_ansiString(0x54,0x100); pn = 0x54+t.length+1;
            a = File.read_ansiString(pn,0x100); pn += a.length+1;
            c = File.read_ansiString(pn,0x100);
            sOptionT(t); sOptionT(a,"by: "); sOptionT(c)
        }
    }
    else if( Binary.compare("2B7C") && Binary.compare("2B7C",8)
      && Binary.compare("2B7C",0x10) && Binary.compare("2B7C",0x18)
      && Binary.compare("303C",0x20) ) {
        sName = "Jason Page's old module (.JPO)";
        bDetected = 1;
    }
    else if(Binary.compare("0239000100......6602'Nux'001839") && Binary.compare("660A13F9",0x22) ) {
        sName = "Jeroel Tel's module (.JT)";
        bDetected = 1;
    }
    else if(Binary.compare("0040....0040....0040....0040....0040....0040",0x19D1) ) {
        //unreliable for potential new modules (but there's not gonna be even one)
        bDetected = 1;
        sName = "JayTrax module (.JXS)";
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(0xA6,0x40));
    }
    else if(File.getSize() >= 1984+256 && Binary.compare("'KRIS'",0x3B8)) {
        //from //ref https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/amigasrc/players/wanted_team/ChipTracker/ChipTracker_v3.asm
        sName = "Krister Wombell's ChipTracker module (.KRIS,.MOD)"; bDetected = 1;
        if(Binary.isVerbose()) {
            sOption(File.read_ansiString(0,16));
            ptn = 0;
            a1 = 0x3BE;
            ord = File.read_uint8(0x3BC);
            for(i=0; i < (ord << 2); i++) {
                t = File.read_uint8(a1); a1 += 2;
                if(ptn < t) ptn = t
            }
            ptn++; sOption("ord:"+ord+" ptn:"+ptn);
        }
    }
    else if(Binary.compare("00000000000000FD..FFFE",0x04) && Binary.compare("F0F0F0F0F0F0F0",0x14)
    && Binary.compare("000000000000010101",0x25) && Binary.compare("'2222222'",0x44)) {
        bDetected = 1;
        sName = "Ken Silverman's Adlib module (.KSM)";
    }
    else if(Binary.compare("'cyd!song'") ) {
        //ref https://github.com/kometbomb/klystron/tree/master/src/snd/music.c , .h
        bDetected = 1;
        sName = "Klystrack module (.KT)";
        v = File.read_uint8(8); sVersion = "v"+v;
        if(Binary.isVerbose()) {
            pn = 9;
            if(v >= 6) trk = File.read_uint8(pn++); else if(v > 3) trk = 4; else trk = 3;
            timesig = File.read_uint8(pn++)+"/"+File.read_uint8(pn++);
            if(v >= 17) pn+=2; //seqstep;
            instc = File.read_uint8(pn++);  patc = File.read_uint16(pn,_LE); pn += 2;
            pn += trk*2; //seq cnt per track, ignore
            songlen = File.read_uint16(pn,_LE); pn += 2; /*loopat = File.read_uint16(pn,_LE);*/ pn += 2;
            if(v >= 12) pn++; //master_volume
            spd = File.read_uint8(pn++); spd2 = File.read_uint8(pn++);
            rate = File.read_uint8(pn++); //bpm?...
            if(v > 2) pn += 4; if(v >= 9) pn++; if(v >= 16) pn++; //flags, mulpd, ptcin

            tlen = 17; if(v >= 11) tlen = File.read_uint8(pn++);
            if(v >= 5) tlen = Math.min(tlen,65);
            sOptionT(File.read_ansiString(pn,tlen));
            sOption("trk:"+trk+" tsig:"+timesig+" bpm:"+rate+" ins:"+instc+
                " len:"+Hex(songlen)+" ptn:"+Hex(patc)+" spd:"+spd+"-"+spd2)
        }
    }
    else if(Binary.compare("'cyd!inst'") ) {
        bDetected = 1;
        sName = "Klystrack instrument (.KI)";
    }
    else if(Binary.compare("'cyd!efex'") ) {
        bDetected = 1;
        sName = "Klystrack effects (.KF?)";
    }
    else if(Binary.compare("'KSCC'") || Binary.compare("'KSSX'")) {
        bDetected = 1;
        sName = "KSS module (.KSS)"; if(Binary.compare("'KSSX'")) sVersion = "extended";
        if(Binary.isVerbose())
          if(Binary.compare("'MBM'",0x20))
            sOptionT(File.read_ansiString(0x24,0x34))
    }
    else if( Binary.compare("'ADL '0000....'MDhd'00000008000080..00000080'MThd'00000006000200..01E0'MTrk'0000....00FF03")
      || ( File.read_uint32(0,_LE)==File.getSize() && Binary.compare("'AD'",4) ) ) {
        bDetected = 1;
        sName = "Lucas Arts Adlib chiptune (.LAA)";
        if(File.read_ansiString(0,4)==="ADL ") sVersion = "new"; else sVersion = "old"
    }
    else if( Binary.compare("Liquid Module:") ||
      ( (Binary.isHeuristicScan() || Binary.compare("'NO'"))
         && extIs("liq"))
      ||  Binary.compare("21",0x01D6) && Binary.compare("21",0x0AD2) && Binary.compare("21",0x0BE6)
      && Binary.compare("FF",0x0ED4) && Binary.compare("FF",0x0EE8) ) {
        bDetected = 1;
        sName = "Liquid Tracker module (.LIQ)";
        sVersion = File.read_ansiString(0x41,0x14).trim()
        if(Binary.isVerbose()) {
            if(File.read_ansiString(0,2) == "NO")
                sOptionT(File.read_ansiString(5,0x14))
            else if(File.read_ansiString(0,3) == "Liq") {
                sOptionT(File.read_ansiString(0x0E,0x32));
                sOptionT(File.read_ansiString(0x0E,0x0F),"by: ");
            }
        }
    }
    else if(Binary.compare("'LME'00'(c)1990 Leggless/Silents UK     ") ) {
        bDetected = 1;
        sName = "Leggless module (.LME)";
    }
    else if(Binary.compare("0C'Nusa-team 89a'10610A6108610678006000",0x169)
      && Binary.compare("'dynamite89'",0x234)) {
        bDetected = 1;
        sName = "Music Assembler module (.MA)";
    }
    else if(Binary.compare("'MAD+'")) {
        bDetected = 1;
        sName = "Mlat Adlib Tracker module (.MAD)";
    }
    else if(Binary.compare("'MADG'") ) {
        bDetected = 1;
        sName = "B. Birney's PlayerPro module (.MAD)";
        if(Binary.isVerbose())
            sOption(File.read_ansiString(4,0x12))
    }
    else if(Binary.compare("D040D0404EFB")) {
        bDetected = 1;
        sName = "Mark Cooksey's module (.MC)"; sVersion = "new"
    }
    else if(Binary.compare("'MCMD'")) {
        bDetected = 1;
        sName = "MCMD module (.MCMD)"
    }
    else if(Binary.compare("'TFMX-SONG'")) {
        //TODO deal with the tags, because sometimes the field is "by blahblah",
        // and other times it's like a bitfield
        bDetected = 1;
        sName = "TFMX or TFMX ST module (MDAT.)"
    }
    else if(Binary.compare("'DMDL'..'IN'")) {
        bDetected = 1;
        sName = "Digitrakker module (.MDL)";
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0x0B,32));
            sOptionT(File.read_ansiString(0x2B,20),"by: ");
        }
    }
    else if(Binary.compare("'MED'04")) {
        bDetected = 1; sName = "Music Editor (.MED)";
    }
    else if(Binary.compare("'MMDC'")) { //before the more generic compare("'MMD'")
        bDetected = 1;
        sName = "Tony Crowther's packed MED module (.MMDC)";
    }
    else if(Binary.compare("'MED'") || Binary.compare("'MMD'")) {
        // from https://web.archive.org/web/20220109073109/http://www.textfiles.com/programming/FORMATS/med-form.txt
        // and http://fileformats.archiveteam.org/wiki/OctaMED_module_(MED)
        bDetected = 1;
        var rawv = File.read_uint8(3)-48;
        var sig = File.read_ansiString(0,4);
        switch(sig){
            case "MED2": sName = "MED module (.MED)"; sVersion = "v1.12"; break;
            case "MED3": sName = "MED module (.MED)"; sVersion = "v2.00"; break;
            case "MED4": sName = "MED module (.MED)"; sVersion = "v2.10"; break;
            case "MED\x04": sName = "MED module (.MED)"; sVersion = "v3.20"; break;
            case "MMD0": sName = "MED module (.MED)"; sVersion = "v2.1 Med MoDule 0"; break;
            case "MMD1": sName = "OctaMED Professional module (.MED)"; break;
            case "MMD2": sName = "OctaMED Professional module (.MED)"; sVersion = "v5"; break;
            case "MMD3": sName = "OctaMED Professional module (.MED)"; sVersion = "v6?"
        }
        // TODO follow up on nextmod, shorten this code
        if(Binary.isVerbose() && Binary.isDeepScan()) {
            pMMD0exp = File.read_uint32(0x20,_BE);
            songname = "";
            if(pMMD0exp > 0 && pMMD0exp < File.getSize()) {
                psongname = File.read_uint32(pMMD0exp+44,_BE);
                if(psongname) {
                    songnamelen = File.read_uint32(pMMD0exp+48,_BE);
                    if(songnamelen) {
                        songname = File.read_codePageString(psongname,songnamelen,"CP1252");
                        if(songname != "<unnamed>")
                            sOption(songname,"name: ")
                    }
                }
                pannotxt = File.read_uint32(pMMD0exp+12,_BE);
                if(pannotxt > 0) {
                    annolen = File.read_uint32(pMMD0exp+16,_BE);
                    anno = File.read_codePageString(pannotxt,annolen,"CP1252");
                    sOptions = sOptions.append("cmnt: "+anno);
                }
                pMMDInstrInfo = File.read_uint32(pMMD0exp+20,_BE);
                if(pMMDInstrInfo > 0) {
                    iinfo = File.read_codePageString(pMMDInstrInfo,40,"CP1252");
                    if(iinfo != "") {
                        sOptions = sOptions.append("ins0: "+iinfo);
                    }
                }
            } //if pMMD0exp
            if(sig === "MED\x04"){//requires ~special~ crap.
                fs1 = Math.max(File.getSize()-0x200,0);
                annot = Binary.findSignature(fs1,TOEOF,"'ANNO'00");
                if(annot >= 0) {
                    cs = File.read_uint32(annot+4,_BE);
                    sOptionT(File.read_ansiString(annot+8,cs));
                }
                else
                    sOptionT(File.read_ucsdString(0x09));
            }
        }//Verbose&DeepScan
    }
    else if(Binary.compare("'GameBoy Music Module'",0x0C)) {
        bDetected = 1;
        sName = "Gameboy Tracker module (.MGB)";
    }
    else if(Binary.compare("'MGT'11BD'MCS'")) {
        bDetected = 1;
        sName = "Megatracker module (.MGT)";
        sOptionT(File.read_ansiString(0x3A,0x20))
    }
    else if(Binary.compare("'MThd'00000006")) {
        bDetected = 1;
        sName = "MIDI music (.MID)";
    }
    else if(Binary.compare("'MKJamz'")) {
        bDetected = 1;
        sName = "MK-Jamz module (.MKJ)";
    }
    else if(Binary.compare("'MLEDMODL'000000")
      && Binary.compare("'VERS'",File.read_uint32(8,_BE)+12)) {
        bDetected = 1;
        sName = "Musicline Editor module (.ML)";
        m = File.read_uint8(File.read_uint32(8,_BE)+21);
        sVersion += ""+(m>>4)+(m&0x0F)
        p = 4; //header skipped
        t = ""; c = ""; x = 0; smp = 0; ins = 0; ptn = 0;
        while (p < File.getSize()) {
            hkhd = File.read_ansiString(p,4);
            hksz = File.read_uint32(p+4,_BE);
            p+=0x08; //chunk header = 4xfourcc + 4xsize
            switch (hkhd) {
            case "VERS":
                sVersion = "v"+File.read_uint8(p)+".";                
                  m = File.read_uint8(p+1);
                  sVersion += ""+(m>>4)+(m&0x0F);
                  break;
            case "TUNE":
                x ++; t += File.read_codePageString(p,hksz,"CP1252")+"\n"; break;
            case "INFO": //TODO smpls have hksz off
                q = 0;
                while(q < hksz) {
                    z = File.findSignature(p+q,hksz-q,"00");
                    if(z > -1) l = z-p-q;
                    else l = hksz;
                    //_log("p="+Hex(p)+" z="+Hex(z)+" l="+l+" q="+q);
                    c += File.read_codePageString(p+q,l,"CP1252")+"\n";
                    q += l+1;
                } break;
            case "PART": ptn++; break
            case "INST": ins++; break
            case "SMPL":
                smp++; p += 6; break;
            }
            p += hksz;
        }
        if(Binary.isVerbose()) {
            if(x>1) sOption(x,"×");
            sOptionT(t); sOptionT(c);
            sOption("ptn:"+ptn+" ins:"+ins+" smp:"+smp);
        }
    }
    else if(Binary.compare("'FORM'........'MMV8SDAT'................'SE'")) {
        bDetected = 1;
        sName = "Music Maker EXT module (.MM8,.MM4)";
        sVersion = "v8";
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0x1A,0x14));
            sOptionT(File.read_ansiString(0x36,0x29));
            sOption(File.read_int32(4,_BE)+8,"sz:")
        }
    }
    //TODO insert the SDATA format of Music Maker
    else if(Binary.compare("'SEI1XX'00")) { //TODO find more than 2 files to test on :)
        bDetected = 1;
        sName = "Music Maker STD instrument (.IP)";
        sVersion = "v8 old";
    }
    else if(Binary.compare("'SO31'",0x7C)) {
        bDetected = 1;
        sName = "MultiMedia Sound module (.MMS)";
    }
    else if(Binary.compare("'MO3'")) {
        bDetected = 1;
        sName = "MO3 MOD module (.MO3)";
    }
    else if(Binary.compare("'M.K.'",0x438) || Binary.compare("'M&K&'",0x438) || Binary.compare("'M!K!'",0x438)) {
        bDetected = 1;
        sName = "Generic MOD module (.MOD)";
        sVersion = File.read_ansiString(0x438,4);
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0,0x14));
            sOptionT(File.read_ansiString(0x14,0x16),"by: ")
        }
    }
    else if(Binary.compare("'RASP'",0x438)) {
        // TODO find out what format it was...
        bDetected = 1;
        sName = "Generic module (.MOD)";
        sVersion = File.read_ansiString(0x438,4);
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(0,0x14));
            sOptionT(File.read_ansiString(0x14,0x16),"by/inst: ")
    }
    else if(/FA\d\d/.test(File.read_ansiString(0x438,4))) {
        bDetected = 1;
        sName = "Digital Tracker module (.MOD)";
        sVersion = "v030";
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0,0x14));
            sOptionT(File.read_ansiString(0x14,0x16),"by/inst: ")
        }
    }
    else if(/^(\dCHN|\d\dCH)$/.test(File.read_ansiString(0x438,4))) {
        bDetected = 1;
        sName = "FastTracker module (.MOD)";
        sVersion=File.read_ansiString(0x438,4);
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0,0x14));
            sOptionT(File.read_ansiString(0x14,0x16),"by/inst: ")
        }
    }
    else if(/^(FLT[48]|EXO4$)/.test(File.read_ansiString(0x438,4))) {
        bDetected = 1;
        sName = "StarTrekker module (.MOD)";
        sVersion = File.read_ansiString(0x438,4);
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0,0x14));
            sOptionT(File.read_ansiString(0x14,0x16),"by/inst: ")
        }
    }
    else if(/^CD[0-9]1$/.test(File.read_ansiString(0x438,4))) {
        sName = "Octalyser module (.MOD)"; bDetected = 1;
        sVersion = File.read_ansiString(0x438,4);
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0,0x14));
            sOptionT(File.read_ansiString(0x14,0x16),"by/inst: ")
        }
    }
    else if(Binary.compare("000000000000'MTN'000000", 0x5B2)) {
        sName = "SoundTracker module (.MOD)"; sVersion = "v2.6"; bDetected = 1;
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0,0x14));
            sOptionT(File.read_ansiString(0x14,0x16),"by: ")
        }
    }
    else if(Binary.compare("08'MONOTONE'")) {
        //ref https://github.com/MobyGamer/MONOTONE/blob/master/MTSRC/MT_SONG.PAS
        bDetected = 1;
        sName = "MONOTONE module (.MON)";
        sVersion = "v"+File.read_uint8(0x5B);
        if(Binary.isVerbose()) {
            sOptionT(File.read_ucsdString(0x09));
            sOptionT(File.read_ucsdString(0x32));
            sOption("ptn:"+File.read_uint8(0x5C)+
                " trk:"+File.read_uint8(0x5D));
        }
    }
    else if(/SONG[0-9.]{4}(COMP|NORM)/.test(File.read_ansiString(0,12))) {
        bDetected = 1;
        sName = "Megastation track (.MS)";
        sVersion = "v"+File.read_ansiString(4,5).toLowerCase()
    }
    else if(/SNGM[0-9.]{4}(COMP|NORM)/.test(File.read_ansiString(0,12))) {
        bDetected = 1;
        sName = "Megastation MOD module (.MSM)";
        sVersion = "v"+File.read_ansiString(4,5).toLowerCase()
    }
    else if(Binary.compare("'MSOB'00")) {
        bDetected = 1;
        sName = "Medley module (.MSO)";
    }
    else if(Binary.compare("'mpu401tr'92'kk'EE'r'")) {
        bDetected = 1;
        sName = "MPU-401 Trakker Adlib module (.MTK)";
        if(Binary.isVerbose()) {
            t = File.read_ucsdString(0x18); sOptionT(t);
            sOptionT(File.read_ansiString(0x18+t.length+2),"by: ")
        }
    }
    else if(Binary.compare("'MTM'")) {
        //ref https://github.com/libxmp/libxmp/blob/master/docs/formats/Mtm-form.txt
        bDetected = 1;
        sName = "Multitracker module (.MTM)";
        v=File.read_uint8(3); sVersion = "v"+(v>>4)+"."+(v & 0x0F);
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(4,20));
            trk = File.read_uint16(24,_LE); ptn = File.read_uint8(26);
            ord = File.read_uint8(27)+1; csz = File.read_uint16(28,_LE);
            nos = File.read_uint8(30); bpt = File.read_uint8(32);
            pxc = 194+nos*37+trk*192+(ptn+1)*32*2;
            c = File.read_ansiString(pxc,csz);
            if(c.length < csz) c = c.trim()+"<...>";
            sOptionT(c);
            sOption("trk:"+(trk+1)+" ord:"+(ord+1)+" ptn:"+(ptn+1)+" smp:"+nos)
        }
    }
    else if(Binary.compare("'MT20'")) {
        bDetected = 1;
        sName = "MadTracker 2 module (.MT2)";
        v = /[0-9.]{3,5}$/.exec(File.read_ansiString(0x0A,0x20).trim());
        if(v!=null) sVersion = "v"+v;
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(0x2A,0x40))
    }
    else if(Binary.compare("'MTRAC'")) {
        bDetected = 1;
        sName = "Master Tracker Adlib module (.MTR)";
        //TODO
        // x = readBytes(0,file.findSignature(0,TOEOF,"1A"));
        // tt = File.read_ansiString(5,20).trim();

        // if(v!=null) sVersion = "v"+v;
        // if(Binary.isVerbose())
        //     sOptionT(File.read_ansiString(0x2A,0x40))
    }
    else if(Binary.compare("'MVM'00")) {
        bDetected = 1;
        sName = "MVX Module (.MVM)";
    }
    else if(Binary.compare("'MVSM1'")) {
        bDetected = 1;
        sName = "MVS Tracker module (.MUS)";
    }
    else if(Binary.compare("'MUS'1A") && (File.read_uint16(4,_LE)>=File.read_uint16(6,_LE))) {
        bDetected = 1;
        sName = "DOOM music module (.MUS)";
        if(Binary.isVerbose())
            sOption(File.read_uint16(4,_LE),"len:")
    }
    else if(Binary.compare("'MXM'00")) {
        bDetected = 1;
        sName = "Cubic Tiny XM module (.MXM)";
    }
    else if(Binary.compare("'MXTX'00")) {
        bDetected = 1;
        sName = "MaxTrax module (.MXTX)";
    }
    else if(Binary.compare("'TWNNSNG1'00")) { // looks like the first ProTrekker was called this
        bDetected = 1;
        sName = "Noise Trekker module (.NTK)";
        sVersion = "v1";
        if(Binary.isVerbose())
            sOption(File.read_ansiString(9,20))
    }
    else if(Binary.compare("'TWNNSNG'..00")) {
        bDetected = 1;
        sName = "ProTrekker module (.PTK)";
        sVersion = "v"+File.read_ansiString(0x7,1);
        if(Binary.isVerbose()) // this stuff has compression in most versions, TODO?
            if(sVersion == "v6") sOption(File.read_ansiString(9,20))
    }
    else if(Binary.compare("'NESM'1A") || Binary.compare("'NSFE'")) {
        //ref https://web.archive.org/web/20180817053626/http://wiki.nesdev.com/w/index.php/NSF
        sName = "Nintendo Sound Format module (.NSF,.NSFe)";
        bDetected = 1;
        sig = File.read_ansiString(0,4);
        if(sig === "NSFE") filever="NSFE"
        else if(File.read_uint8(5) == 2) filever="NSF2"
        else filever = "NSF";
        sVersion = filever; 
        INFOready = false; NEND=false; hkhd=""; pn=4;
        nsf2jump = -1; palntsc=-1; spd=""; vrc7repl=0;
        playtime = Number(0); g=""; t=""; a=""; c=""; taut=[]; tlbl=[]; xc="";
        if(filever === "NSFE") {
            if(Binary.isVerbose()) //no base header, find INFO first
              while(pn < File.getSize()){
                hksz = File.read_uint32(pn,_BE); hkhd = File.read_ansiString(pn+4,4);
                if(hkhd==="INFO") break;
                else pn+=hksz+8;
            }
            nsf2jump=0;
        }
        else { //NSF v1/2 have a hardplaced header, let's read that
            bDetected = 1;
            sVersion = filever;
            if(Binary.isVerbose()) {
                palntsc = File.read_uint8(0x7A); 
                chip=File.read_uint8(0x7B);
                tc=File.read_uint8(6); t=File.read_ansiString(0x0E,0x20);
                a=File.read_ansiString(0x2E,0x20); c=File.read_ansiString(0x4E,0x20);
            }
            INFOready = true;
            nsf2jump=File.read_uint8(0x7D)<<16+File.read_uint8(0x7E)<<8+File.read_uint8(0x7F);
            pn+=nsf2jump; //NSF v1 files ALSO can have this jump... orz
        }
        // at this point we're standing at the first hunk unless it's a pure NSF, and at "INFO" for NSFe
        if(nsf2jump >= 0 && Binary.isVerbose())
            while(pn<File.getSize() && !NEND) {
                hksz = File.read_uint32(pn,_LE); hkhd = File.read_ansiString(pn+4,4); pn+=8;
                switch (hkhd) {
                    case "NEND": //end of hunks
                        NEND=true; break;
                    case "INFO": //really shouldn't happen with nsf1/2
                        if(INFOready) break;
                        palntsc = File.read_uint8(pn+6);
                        chip = File.read_uint8(pn+7);
                        tc = File.read_uint8(pn+7);
                        INFOready = true; break;
                    case "RATE":
                        spd = "rate :: NTSC: "+File.read_uint16(pn,_LE)+" ticks";
                        palspd = File.read_uint16(pn+2,_LE);
                        if(palspd > 0) spd += ", PAL: "+palspd+" ticks";
                        dendyspd = File.read_uint16(pn+4,_LE);
                        if(dendyspd > 0) spd += ", Dendy: "+dendyspd+" ticks";
                        break;
                    case "VRC7":
                        vrc7repl = File.read_uint8(pn); break;
                    case "time":
                        for(i=0; i*4 < hksz; i++) {
                            if(i*4 >= hksz) curtime=-1
                            else curtime = File.read_int32(pn+i*4,_LE);
                            if(curtime < 0) curtime = 2*60000; //default time: 2 minutes :V
                            playtime += curtime/1000;
                        } break;
                    case "auth":
                        apn = 0;
                        g = File.read_ansiString(pn,0x100); apn+=g.length+1;
                        a = File.read_ansiString(pn+apn,0x100); apn+=a.length+1;
                        c = File.read_ansiString(pn+apn,0x100); apn+=c.length+1;
                        c += ", rip: "+File.read_ansiString(pn+apn,0x100);
                        break;
                    case "taut":
                        if(Binary.isDeepScan()) {
                            apn = 0;
                            while(apn < hksz) {
                                trkauth = File.read_ansiString(pn+apn,hksz-apn); apn += trkauth.length+1;
                                taut.push(trkauth)
                            }
                        } break;
                    case "tlbl":
                        if(Binary.isDeepScan()) {
                            apn = 0;
                            while(apn < hksz) {
                                trklbl = File.read_ansiString(pn+apn,hksz-apn); apn += trklbl.length+1;
                                tlbl.push(trklbl)
                            }
                        } break;
                    case "text":
                        if(Binary.isDeepScan())
                            xc = File.read_ansiString(pn,hksz);
                }
                pn += hksz;
            }
        if(Binary.isVerbose() && INFOready) {
            switch(palntsc) {
                case 0: sVersion += " NTSC"; break;
                case 1: sVersion += " PAL"; break;
                case 2: sVersion += " NTSC/PAL"
            }
            if(chip&0x01) sVersion += "#VRC6";
            if(chip&0x02) switch(vrc7repl) {
                case 1: sVersion += "#YM2413"; break;
                default: sVersion += "#VRC7" }
            if(chip&0x04) sVersion += "#FDS";
            if(chip&0x08) sVersion += "#MMC5";
            if(chip&0x10) sVersion += "#Namco163";
            if(chip&0x20) sVersion += "#Sunsoft5B";
            sOptionT(t);
            if(tc > 1) sOption("x "+tc);
            sOptionT(a,"by: ");
            sOptionT(c);
        }
        if(Binary.isVerbose()) {
            if(playtime > 1)
              sOption(new Date(Math.round(playtime*1000)).toISOString().substr(11, 8),"Playtime: ");
            if(Math.max(tlbl.length,taut.length)>0) sOption("[Tracks]");
            for (i=0; i < Math.max(tlbl.length,taut.length); i++) {
                if(i < tlbl.length) ttlbl = tlbl[i];
                else ttlbl = "#"+(i+1);
                if(i < taut.length) ttaut = " by: "+taut[i]
                else ttaut = "";
                sOption(ttlbl+ttaut)
            }
            if(xc != "") sOption(xc,"[Commentary]: ")
        }
    }
    else if(Binary.compare("'OKTASONG'")) {
        bDetected = 1;
        sName = "Oktalyzer module (.OKTA)";
        if(Binary.isVerbose()) {
            sOption("[Sample names]");
            for(i=0x20; i <= 0x100; i+=0x20)
                sOptionT(File.read_ansiString(i,0x14))
        }
    }
    else if(Binary.compare("'Onyx Music File'1A")) {
        // ref ftp://http.modland.com/pub/documents/format_documentation/Onyx%20Music%20File%20(.omf).txt
        bDetected = 1;
        sName = "Onyx Music File (.OMF)";
        if(Binary.isVerbose()) {
            ch = File.read_uint8(0x192)+1;
            ptn = File.read_uint8(0x193)+1;
            ord = File.read_uint8(0x194)/2+1;
            t = File.read_ansiString(0x195,0x1F);
            if(t == "") {
                sn=[];
                for(i=0; i < 31; i++) {
                    s = File.read_ansiString(0x1B4+i*28,21);
                    if(s != "") sn.push(s)
                }
                t = sn.join("\n")
            }
            sOptionT(t);
        }
    }
    else if(Binary.compare("'Org-02'")) {
        bDetected = 1;
        sName = "Organya module (.ORG)";
        sVersion = "v1";
    }
    else if(Binary.compare("'Org-03'")) {
        bDetected = 1;
        sName = "Organya module (.ORG)";
        sVersion = "v2";
    }
    else if(Binary.compare("'OBISYNTHPACK'")) {
        bDetected = 1;
        sName = "Synth Pack module (.OSP)";
    }
    else if(Binary.compare("'PACG'")) {
        bDetected = 1;
        sName = "SBStudio module (.PAC)";
        if(File.read_uint32(4)+8 != File.getSize()) sVersion = "malformed";
        if(Binary.isVerbose()) {
            p = 8; //header skipped
            t=''; v='';
            while (p<File.getSize()) {
                hkhd = File.read_ansiString(p,4);
                hksz = File.read_uint32(p+4,_LE);
                p+=0x08; //chunk header = 4xfourcc + 4xsize
                switch (hkhd) {
                    case "SONA": t = File.read_codePageString(p,hksz,"CP850"); break;
                    case "PAOR": v = File.read_codePageString(p,hksz,"CP850"); break;
                    case "END ": p = File.getSize(); break
                }
                p += hksz;
            }
            sOptionT(t); sOption(v,"via: ")
        }
    }
    else if(Binary.compare("'PLM'1A6010")) {
        bDetected = 1;
        sName = "Disorder Tracker 2 module (.PLM)";
        sVersion = "v2";
        smp = File.read_uint8(0x5C); ptn = File.read_uint8(0x5D); ord = File.read_uint16(0x5E,_LE);
        sz = 0x61; ofs = 0;
        for(i=0; i < ord+ptn+smp; i++) { z = File.read_uint32(i*4+sz,_LE); if(z > ofs) ofs = z }
        sz += 4*ord+4*ptn+4*smp;
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(6,0x30));
            sOption("ch:"+File.read_uint8(0x36)+" bpm0:"+File.read_uint8(0x3A)
                +" spd0:"+File.read_uint8(0x3B)+" ord:"+ord+" ptn:"+ptn+" smp:"+smp);
        }
    }
    else if(Binary.compare("'PLX'00")) {
        bDetected = 1;
        sName = "Palladix Adlib module (.PLX)";
    }
    else if(Binary.compare("FFFFE002E102")) {
        bDetected = 1;
        sName = "POKEYNoise chiptune (.PN)";
    }
    else if(Binary.compare("'PRT'")) {
        bDetected = 1;
        sName = "PreTracker module (.PRT)";
        nV = File.read_uint8(3);
        if(nV < 25) sVersion = "v<0.3"; else
        if(nV == 25) sVersion = "v0.3~0.866"; else
        if(nV == 26) sVersion = "v0.87~0.92"; else
        if(27<=nV && nV<30) sVersion = "v.[0.93~1.5)"; else
        if(nV == 30) sVersion = "v1.5+"; else
          sVersion = "v.TODO";
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0x14,0x14));
            sOptionT(File.read_ansiString(0x28,0x14),"by: ");
            trks = File.read_uint8(0x5A); if(trks>31) sVersion += "/malformed";
            sOption("trks:"+File.read_uint8(0x5A)+
                " ord:"+File.read_uint8(0x5F)+
                " ptn:"+File.read_uint8(0x5D)+"("+File.read_uint8(0x5E)+")"+
                " restart:"+File.read_uint8(0x5C))
        }
    }
    else if(Binary.compare("'PSA'00") && 0x34 < File.read_uint32(0x28,_BE) < File.getSize()
      && 0x34 < File.read_uint32(0x2C,_BE) < File.getSize()
      && 0x34 < File.read_uint32(0x30,_BE) < File.getSize()) {
        bDetected = 1;
        sName = "Professional Sound Artists module (.PSA)";
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0x4,0x14));
            //ref https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/amigasrc/players/wanted_team/PSA/PSA_v2.asm
            d2 = File.read_uint32(0x28,_BE);
            x = (d2-56) >> 3; if(x > 1) sOption(x,"×");
            d3 = File.read_uint32(0x2C,_BE); d0 = File.read_uint32(0x30,_BE);
            ins = ((d3-d2) >> 6); d3 = ins;
            synsmp = 0; smp = 0; allsmpsz = 0; d7 = 3;
            while(d3) { //hop
                ts = File.read_uint32(d2,_BE); //ins size?
                if(ts) {
                    if(ts < d7) {
                        d7 = ts;
                        smpsz = (File.read_uint16(d2,_BE)+4) << 1;
                        allsmpsz += smpsz;
                        smp++
                    }
                } else synsmp++; //synth
                d2 += 64; d3--
            }
            sz = File.read_uint32(36,_BE); songsz = sz-allsmpsz; ptn = (songsz-d0) >> 10;
            sOption("ptn:"+ptn+" ins:"+ins+" smp:"+smp+" synsmp:"+synsmp+" songsz:"+songsz+" sz:"+sz)
        }
    }
    else if(Binary.compare("'PSC V'........' COMPILATION OF '")) {
        bDetected = 1; sVersion = "v"+File.read_ansiString(5,4);
        sName = "Pro Sound Creator module (.PSC)";
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0x19,0x14));
            sOptionT(File.read_ansiString(0x31,0x14),"by: ")
        }
    }
    else if(Binary.compare("'PSF'")) {
        //ref https://gist.github.com/SaxxonPike/a0b47f8579aad703b842001b24d40c00
        nV = File.read_uint8(3);
        if(nV>=0) {
            bDetected = 1;
            sName = "Playstation Sound Format module (.";
            switch(nV) {
                case 0x01: sName += "PSF,.MINIPSF)"; sVersion = "Playstation"; break;
                case 0x03: sName += "PSF2,.MINIPSF2)"; sVersion = "Playstation 2"; break;
                case 0x11: sName += "SSF,.MINISSF)"; sVersion = "Saturn"; break;
                case 0x12: sName += "DSF,.MINIDSF)"; sVersion = "Dreamcast"; break;
                case 0x21: sName += "USF,.MINIUSF)"; sVersion='Ultra64'; break;
                case 0x22: sName += "GSF,.MINIGSF)"; sVersion='Gameboy'; break;
                case 0x23: sName += "SNSF,.MINISNSF)"; sVersion='Super Nintendo'; break;
                case 0x24: sName += "2SF,.MINI2SF)"; sVersion='Nintendo DS'; break;
                case 0x41: sName += "QSF,.MINIQSF)"; sVersion='Capcom Q-Sound'
            }
            if(Binary.isVerbose()) {
                //fs1 = Math.max(File.getSize()-0x200,0); fs2 = Math.min(File.getSize(),0x200);
                //ptags = Binary.findSignature(fs1,fs2,"'[TAG]'")+5;
                ptags = File.read_uint32(8,_LE)+0x15; sig2 = false;
                if(0x15<ptags<File.getSize()) sig2 = File.read_ansiString(ptags-5,5) === "[TAG]";
                if(!sig2) { //coincides with pv==2
                    ptags = File.read_uint32(4,_LE)+0x15;
                    if(0x15<ptags<File.getSize()) sig2 = File.read_ansiString(ptags-5,5) === "[TAG]";
                }
                if(sig2) {
                    tags = File.read_codePageString(ptags,File.getSize()-ptags,"UTF8").trim();
                    a=""; g=""; t=""; y=""; l="";
                    tagl = tags.split('\n');
                      for (i=0; i<tagl.length;i++) {
                        tag = tagl[i].split("=");
                        switch (tag[0]) {
                            case "length": l = tag[1]; break;
                            case "title": t = tag[1]; break;
                            case "game": g = tag[1]; break;
                            case "artist": a = tag[1]; break;
                            case "copyright": if(a=="") a = tag[1]; break;
                            case "year": y = tag[1]; break;
                            case "dsfby","psfby","ssfby": if(a=="") a = tag[1]; break;
                        }
                      }
                    sOption(t);
                    sOption(a,"by: ")
                    sOption(y,"'");
                    sOption(g,"for: ");
                    sOption(l,"len ");
                }
                else sVersion += " library";
            }
            if(File.getSize() < 0x300) sVersion += " header"
        }
    }
    else if(Binary.compare("'PSM '") || Binary.compare("'PSM'FE")) {
        bDetected = 1;
        sName = "Epic Megagames MASI module (.PSM)";
        if(Binary.isVerbose()) {
            pt = File.findString(0,50,"MAINSONGTITL");
            if(pt>0) {
                ts = File.read_uint32(pt+12);
                sOptionT(File.read_ansiString(pt+16,ts));
            }
        }
    }
    else if(Binary.compare("'PSG'1A")) { sName = "fMSX/x128 PSG chiptune (.PSG)"; bDetected = 1 }
    else if(Binary.compare("'EPSG'1A")) {
        //ref https://web.archive.org/web/20070919070829/http://maxheadroom.no-ip.com/ay/formats_epsg.php
        sName = "Z80 Stealth Extended PSG chiptune (.EPSG)"; bDetected = 1; hw = File.read_uint8(5);
        switch(hw) {
        case 0: sVersion = "ZX Spectrum 128k"; break;
        case 1: "Pentagon"; break; 
        }
        if(hw<2 && !File.compare("00000000 000000000000",6)) sVersion += "/malformed"
    }
    else if(Binary.compare("'PSG2'")) {
        //ref https://web.archive.org/web/20070919070829/http://maxheadroom.no-ip.com/ay/formats_epsg.php
        sName = "PSG2 chiptune (.PSG2)"; bDetected = 1; 
    }
    else if(Binary.compare("'psm1'00", 0x08)) {
        sName = "Pro Sound Maker module (.PSM)"; sVersion = "compiled"; bDetected = 1; malformed = 0;
        posp = File.read_uint16(0,_LE); if(posp<0x0D || posp>File.getSize()) malformed = 1;
        smpp = File.read_uint16(2,_LE); if(smpp<0x0D || smpp>File.getSize()) malformed = 1;
        ornp = File.read_uint16(0,_LE); if(ornp<0x0D || ornp>File.getSize()) malformed = 1;
        ptnp = File.read_uint16(0,_LE); if(ptnp<0x0D || ptnp>File.getSize()) malformed = 1;
        if(Binary.isVerbose()) {
            t = posp; if(smpp < t) t = smpp; if(ornp < t) t = ornp; if(ptnp < t) t = ptnp;
            if(t-0x0D) sOptionT(File.read_ansiString(0x0D,Math.min(t-0x0D,128)),"msg: ");
            ord = 0; t = posp;
            while(File.read_uint8(t)<0xFF && t<File.getSize()) {
                ord++; t += 2;
            }
            loop = 0xFF; if(File.read_uint8(t) == 0xFF) loop = File.read_uint8(t+1); else malformed = 2;
            if(loop == 0xFF) loop = "none";
            sOption("ord:"+ord+" loop:"+loop)
        }
        if(malformed) sVersion += "/malformed"+malformed;
    }
    else if(Binary.compare("'PSY'..'SONG")) {
        bDetected = 1;
        sName = "Psycle module (.PSY)";
        sV = File.read_ansiString(3,1);
        sVersion = "v"+sV;
        if(Binary.isVerbose()) {
            switch(sV) {
                case "2":
                //ref https://sourceforge.net/p/psycle/code/HEAD/tree/trunk/psycle-core/src/psycle/core/psy2filter.cpp
                    sOptionT(File.read_codePageString(0x08,0x20,"CP1252"));
                    sOptionT(File.read_codePageString(0x28,0x20,"CP1252"),"by: ");
                    sOptionT(File.read_codePageString(0x48,0x80,"CP1252"));
                    bpm = File.read_int32(0xC8,_LE);
                    ord = File.read_int32(0x0191,_LE);
                    sOption("bpm:"+bpm+" ord:"+ord);
                    break;
                case "3":
                //ref https://sourceforge.net/p/psycle/code/HEAD/tree/trunk/psycle-core/src/psycle/core/psy3filter.cpp
                    nV = File.read_int32(8);
                    sVersion+="/"+nV;
                    p = 0x10+File.read_uint32(0x0C); //chunk header = 4xfourcc + 4xver + 4xsize
                    hkn = File.read_uint32(0x10,_LE);
                    t=''; a=''; c=''; trk=0; bpm=0; ptnlns=0; ptn=0; mac=0; ins=0; eins=0;
                    while (hkn > 0) {
                        hkhd = File.read_ansiString(p,4);
                        hkn--;
                        cV = File.read_uint32(p+4,_LE);
                        hksz = File.read_uint32(p+8,_LE);
                        p+=0x0C;
                        switch (hkhd) {
                            case "INFO":
                                p1 = p;
                                if((cV & 0xFF00)==0) {
                                    t = File.read_codePageString(p1,128,"CP1252"); p1+=t.length+1;
                                    a = File.read_codePageString(p1,64,"CP1252"); p1+=a.length+1;
                                    c = File.read_codePageString(p1,0xFFFF,"CP1252"); p1+=c.length+1;
                                    if(cV == 0) hksz=t.length+a.length+c.length+3 //bug workaround
                                }
                                break;
                            case "SNGI":
                                if((cV & 0xFF00) == 0) {
                                    trk=File.read_int32(p,_LE);
                                    if(cV==0) hksz = 11*4+trk*2; //bug workaround
                                    bpm=File.read_int16(p+4,_LE) + File.read_int16(p+6,_LE)/100.0;
                                }
                                break;
                            case "SEQD":
                                if((cV & 0xFF00) == 0)
                                    seqlen=File.read_int32(p+4,_LE);
                                break;
                            case "PATD":
                                if((cV & 0xFF00) == 0) {
                                    _idx = File.read_int32(p,_LE);
                                    ptnlns = File.read_int32(p+4,_LE);
                                    ptnn = File.read_ansiString(p+0x0C,0x20);
                                    p1=p+0x0C+ptnn.length+1;
                                    ptnsz = File.read_int32(p1,_LE);
                                    ptn++; p1+=4;
                                    if((cV == 0) && (p1+ptnsz == p+hksz+4)) hksz += 4; //bug workaround
                                }
                                break;
                            case "MACD":
                                mac++;
                                //bugfix impossible here, let's pretend it won't happen and move on
                                break;
                            case "INSD":
                                ins++;
                                break;
                            case "EINS":
                                if((cV & 0xFFFF0000) == 0x10000) {
                                    eins = File.read_uint32(p,_LE)
                                    //and again, pretending there's no bug (and no samples)
                                }
                                break;
                        }
                        p += hksz;
                    }
                    sOptionT(t); sOptionT(a,"by: "); sOptionT(c);
                    sOption("bpm:"+bpm+" trk:"+trk+" ptnlns:"+ptnlns+
                        " mac:"+mac+" ptn:"+ptn+"/idx:"+_idx+" ins:"+ins+" eins:"+eins);
                    break;
                case "4":
                //ref https://sourceforge.net/p/psycle/code/HEAD/tree/trunk/psycle-core/src/psycle/core/psy4filter.cpp
                    sVersion+="/future";
                    //yet another zipped-xmls format
            }
        }
    }
    else if(Binary.compare("''")) {
        bDetected = 1; sVersion = "v.VT2";
        sName = "ProTracker 3 module (.PT3)";
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0x1E,0x20));
            sOptionT(File.read_ansiString(0x42,0x20),"by: ")
        }
    }
    else if(Binary.compare("'PTCOLLAGE-'") || Binary.compare("'PTTUNE--20'")) {
        //ref source code / pxtnService.cpp, pxtnDescriptor.cpp
        bDetected = 1;
        v1=File.read_ansiString(2,1);
        if(v1=="T") { var rough = 10; //used for clocking
            sName = "pxtone tune (.PTTUNE)" }
        else {  var rough = 1;
            sName = "pxtone project (.PTCOP)" }
        dt = File.read_ansiString(10,6);
        if(dt<="050227") { sV = "v.x1x"; nV = 1 }
        else if(dt<="050608") { sV = "v.x2x"; nV = 2 }
        else if(dt<="060115") { sV = "v.x3x"; nV = 3 }
        else if(dt<="060930") { sV = "v.x4x"; nV = 4 }
        else if(dt<="071119") { sV = "v5"; nV = 5 }
        d = dt.substr(0,2)+"-"+dt.substr(2,2)+"-"+dt.substr(4,2);
        sVersion = sV+"/20"+d;
        if(Binary.isVerbose()) {
            switch(nV) {
                case 1: case 2: p = 0x10; break;
                case 3: case 4: p = 0x14; break;
                default: p=0x14
            }
            t=""; c=""; bclock = 0; bnum = 0; btempo = 0; bps = 0; bEnd = false;
            while((!bEnd) && (p<File.getSize())) {
                hkhd = File.read_ansiString(p,8); hksz = File.read_uint32(p+8,_LE);
                switch (hkhd) {
                    case "PROJECT=":
                        t = File.read_codePageString(p+12,0x10,"Shift_JIS");
                        btempo = File.read_float32(p+0x1C,_LE).toFixed(0);
                        bclock = File.read_int16(p+0x20,_LE);
                        bnum = File.read_int16(p+0x22,_LE);
                        break;
                    case "evenMAST":
                        if(File.read_uint16(p+12,_LE)!=3)
                            sVersion+= "/unk";
                        else {
                            var p_ = File.findSignature(p+3,0x100,"'textNAME'")-12;
                            if(p_ > -12) p = p_-hksz;
                            else {
                                p_ = File.findSignature(p+3,0x100,"'textCOMM'")-12;
                                if(p_ > -12) p = p_-hksz;
                            }
                        }
                        break; //not gonna parse what vari-read gives me
                    case "MasterV5":
                        bclock = File.read_int16(p+12,_LE)*rough;
                        bnum = File.read_int8(p+14);
                        btempo = File.read_float32(p+15,_LE).toFixed(0);
                        break;
                    case "Event V5": //this is so incredibly slow!!! And yet, no way around it
                        var evtn = File.read_uint32(p+12,_LE);
                        hksz = 4;
                        for(e=0; e<evtn; e++) { //hksz is broken in this chunk so it's like this 
                            for(i=0; i < 5; i++) { hksz++; if(File.read_uint8(p+11+hksz) < 0x80) break }
                            hksz += 2;
                            for(i=0; i < 5; i++) { hksz++; if(File.read_uint8(p+11+hksz) < 0x80) break }
                        }
                        break;
                    case "textNAME":
                        t = File.read_codePageString(p+12,hksz,"Shift_JIS"); break;
                    case "textCOMM":
                        c = File.read_codePageString(p+12,hksz,"Shift_JIS"); break;
                    case "END=====": case "pxtoneND":
                        bEnd = true; break
                }
                p += 12+hksz
            }
            if(t != "no name") sOption(t);  sOptionT(c);
            if(bclock+btempo+bnum > 0)
                sOption("btempo:"+btempo+" bclock:"+bclock+" bnum:"+bnum)
        }
    }
    else if(Binary.compare("'PTNOISE-'")) {
        bDetected = 1;
        sName = "pxtone Noise instrument (.PTNOISE)"
    }
    else if(Binary.compare("'PTVOICE-'")) {
        bDetected = 1;
        sName = "pxtone Voice instrument (.PTVOICE)"
    }
    else if(Binary.compare("'TWNNSNG6'")) {
        bDetected = 1;
        sName = "ProTrekkr module (.PTK)";
        sVersion = "v<2"
    }
    else if(Binary.compare("'PROTREK'")) {
        bDetected = 1;
        sName = "ProTrekkr module (.PTK)";
        sVersion = "v2"
    }
    else if(Binary.compare("'TWNNSNG1'")) {
        bDetected = 1;
        sName = "NoiseTrekkr module (.NTK)"; //looks like the old name of protrekkr
    }
    else if(Binary.compare("'PTMF'",0x2C) && Binary.compare("1A",0x1C)) {
        // ref  https://web.archive.org/web/20151027135201if_/http://hackipedia.org/File%20formats/Music/Sample%20based/text/Poly%20Tracker%20module%20format.cp437.txt.utf-8.txt
        bDetected = 1;
        sName = "Poly Tracker module (.PTM)";
        sV = Hex(File.read_uint16(0x1D,_LE));
        sVersion = "v"+sV.substr(0,1)+"."+sV.substr(1,2);
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0,0x1C));
            malformed = false;
            ch = File.read_uint16(0x26,_LE); if(!ch || ch > 32) malformed = true;
            ord = File.read_uint16(0x20,_LE); if(ord>256) malformed = true;
            ins = File.read_uint16(0x22,_LE); if(!ins || ins > 255) malformed = true;
            ptn = File.read_uint16(0x24,_LE); if(!ptn || ptn > 128) malformed = true;
            if(malformed) sVersion += "/malformed";
            sOption("ch:"+ch+" ins:"+ins+" ptn:"+ptn+" ord:"+ord)
        }
    }
    else if(Binary.compare("'FORM'.. .. .. ..'MODLVERS'")){
        bDetected = 1;
        sName = "ProTracker IFF module (.PTM)";
        sVersion = File.read_ansiString(0x18,File.read_uint32(0x10,_BE)-0x10);
        if(Binary.isVerbose()) {
            p = File.findSignature(0x1E,0x200,"'INFO'");
            if(p > 0) sOptionT(File.read_ansiString(p+8,0x20));
            p = File.findSignature(p+File.read_uint32(p+4,_BE),0x200,"'CMNT'");
            if(p > 0) sOptionT(File.read_ansiString(p+8,File.read_uint32(p+4,_BE)))
        }
    }
    else if(Binary.compare("'RAD by REALiTY!!'")) {
        //partial ref https://www.3eality.com/Public/Releases/RAD/radv2_0a.zip source/validate20.cpp
        // & https://www.3eality.com/Public/Releases/RAD/radv1_1a.zip player.asm
        bDetected = 1;
        sName = "Reality Adlib Tracker module (.RAD)";
        sV = File.read_uint8(0x10).toString(16);
        sVersion = "v"+sV[0]+"."+sV[1]; malformed = 0;
        if(Binary.isVerbose()) {
            al = File.read_uint8(0x11);
            fbpm = (sV > "20") && (al&0x20); // in v2.1, if the bpm flag is set, bpm != 125 and is the next byte
            if((sV=="10" && (al&0x80)) || (sV >= "20")) { //desc present
                l = 0x12; if(fbpm) l+=2;
                desc = ""; maxdesc = 250; cutoff = false;
                r = File.findSignature(l,File.getSize()-32-l,"00"); p = r+1;
                if(r < 0) { maxdesc = 0; malformed = 1 }
                else if(r > l+maxdesc) { r = l+maxdesc; cutoff = true }
                tmp = readBytes(l,r-l);
                for(i=0; desc.length < maxdesc; i++)
                    switch(tmp[i]) {
                    case 0: i = r-l; break;
                    case 1: desc += "\n"; break;
                    default:
                        if(tmp[i] < 0x20) for(j=0; j<tmp[i] && desc.length<=maxdesc; j++) desc += " ";
                        else desc += String.fromCharCode(tmp[i])
                    }
                if(cutoff) { desc+="..." } sOption(desc);
            } else p = 0x12;
            spd0 = al&0x1F;
            if(fbpm) bpm = File.read_uint16(0x12,_LE); else bpm = 125;
            ins = 0;
            while(1) {
                insn = File.read_uint8(p++); if(!insn || p>File.getSize()) break;
                ins++;
                if(sV == "10") p += 11;
                else if(sV == "21") {
                    nmlen = File.read_uint8(p);
                    p += nmlen+1;
                    rm = File.read_uint8(p); riff = rm&0x80; midi = (rm&7)==7;
                    if(midi) p += 7; else p += 24;
                    if(riff) p += File.read_uint16(p,_LE)+2;
                } else malformed = 2;
            }
            ord = File.read_uint8(p++); p += ord;
            ptn = 0; for(i=0; i < 32; i++) if(File.read_uint16(p+i*2,_LE)) ptn++; p += 64;
            if(!ord || ord>128) malformed = 4;
            if(!ptn) malformed = 5; if(!ins) malformed = 3;
            if(sV > "20") { riffs = 0;
                while(1) {
                    riffn = File.read_uint8(p++);
                    if(riffn==0xFF || p>File.getSize()) break;
                    riffs++; p += File.read_uint16(p)
                }
                sOption("spd0:"+spd0+" bpm:"+bpm+" ord:"+ord+" ptn:"+ptn+" ins:"+ins+" riffs:"+riffs)
            }
            else sOption("spd0:"+spd0+" bpm:"+bpm+" ord:"+ord+" ptn:"+ptn+" ins:"+ins)

            if(malformed) sVersion += "/malformed"+malformed
        }
    }
    else if(Binary.compare("'RAWADATA'") && File.getSize()>10) {
        bDetected = 1;
        sName = "Raw OPL Capture chiptune (.RAW)";
        if(Binary.isVerbose() && (Binary.isDeepScan() || File.getSize()<0xFFFF)) { //may take a sec
            //taken from https://github.com/adplug/adplug/blob/master/src/raw.cpp
            p = 10; len = (File.getSize()-10) >> 1;
            tagdata = false; t = ""; a = ""; d = ""; next = 0;
            for(i=0; i < len && p < File.getSize(); i++) {
                x = (tagdata ? 0xFFFF : File.read_uint16(p));
                p += 2;
                if(!tagdata && x==0xFFFF) { //trying to stop at the RAW EOF data marker
                    tagcode = File.read_uint8(p++);
                    if(tagcode == 0x1A) tagdata = true; //tag marker found
                    else if(!tagcode) { //old comment (music archive 2004)
                        d = File.read_ansiString(p,1023); p += 1023; tagdata = true }
                    else p--;
                }
            }
_log("after-for "+Hex(p)+", tagdata? "+tagdata);
            if(tagdata) { //searching for tags
                t = File.read_ansiString(p,40); p += 40;
                if(File.read_uint8(p++) != 0x1B) { //if not, skip "author"
                    p--;
                    if(File.read_uint8(p) >= 0x20) { //older version tag, eg. stunts.raw
                        a = File.read_ansiString(p,60); p += 60;
                        d = File.read_ansiString(p,1023); p += 1023;
                        next = 2; //end_section
                    } else p--;
                    next = 1; //desc_section
                }
                if(!next) {
                    a = File.read_ansiString(p,40); p += 40
                }
                if(next == 1) { next = 0;
                    if(File.read_uint8(p++) != 0x1C) next = 2;
                    if(!next) {
                        d = File.read_ansiString(p,1023); p += 1023
                    }
                }
            }
            sOption(t); sOption(a,"by: "); sOption(d)
        } //isDeepVerbose
        if(Binary.isVerbose()) sOption(File.read_uint16(8,_LE),"clkspd:")
    }
    else if(Binary.compare("00407F40 00C081C0") && Binary.compare("41FAFFEE",0x38)) {
        //from https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/amigasrc/players/wanted_team/RobHubbard_ST/src/Rob Hubbard ST_v2.asm
        sName = "Rob Hubbard ST module (.RHO)"; sVersion = "v1.1"; bDetected = 1;
        if(Binary.isVerbose()) {
            a2 = 180; malformed = false;
            do { //findplay
                t = File.read_uint16(a2,_BE); a2 += 2;
            } while(a2 < File.getSize() && t != 0x4E75);
            if(a2 > File.getSize()) { malformed = true; break }
            playp = a2;
            do { //findend
                t = File.read_uint16(a2,_BE); a2 += 2;
            } while(a2 < File.getSize() && t != 0xDFFC);
            if(a2 > File.getSize()) { malformed = true; break }
            a2 += 4; endp = a2;
            do { //findinit
                t = File.read_uint16(a2,_BE); a2 += 2;
            } while(a2 < File.getSize() && t != 0x4E75);
            if(a2 > File.getSize()) { malformed = true; break }
            do { //findIt1
                t = File.read_uint16(a2,_BE); a2 += 2;
            } while(a2 < File.getSize() && t != 0x7E02);
            if(a2 > File.getSize()) { malformed = true; break }
            songp = a2+File.read_uint16(a2+2,_BE)+2;
            d0 = File.read_uint32(songp,_BE)/12;
            if(d0 > 1) sOption(d0,"×");
            d0 = d0*3-1; d5 = 0;
            a1 = a3 = songp;
            while(d0 >= 0) {
                a1 = songp;
                a1 += File.read_uint32(a3,_BE); a3 += 4;
                while(a1 < File.getSize()) {
                    d1 = File.read_uint32(a1,_BE); a1 += 4;
                    if(!d1) break;
                    if(d1 > d5) d5 = d1
                }
                d0--
            }
            a1 = songp+d5;
            do {
                t = File.read_uint8(a1); a1++
            } while(a1 <= File.getSize() && t != 0x87)
            sz = a1; // - moduleptr, 0 here
            if(a1 > File.getSize()) { malformed = true; break }
            sOption(sz,"sz:")
            if(malformed) sVersion += "/malformed";
        }
    }
    else if(Binary.compare("'RNS0'") && Binary.compare("'>>> Chunk Start <<<'", 0x09)) {
        sName = "Renoise module (.RNS)"; bDetected = 1;
        sV = File.read_ansiString(3,4); sVersion = "v"+sV;
        if(sV < "05") sVersion += "/RN<1.1.1";
        else if(sV === "05") sVersion += "/RN1.1.1";
        else if(sV < "015") sVersion += "/RN<1.2.7";
        else if(sV === "015") sVersion += "/RN1.2.7";
        else if(sV < "018") sVersion += "/RN<1.5.2";
        else if(sV === "018") sVersion += "/RN1.5.2";
        else sVersion += "/RN>1.5.2"
        if(Binary.isVerbose()) {
            p = 8;
            while (p < File.getSize()) {
                p = File.findSignature(p+1,TOEOF,"'>>> Chunk Start <<<'");
                if(p == -1)
                    break;
                p += 20;
                if(File.read_ansiString(p,10) == "Header V00") {
                    sOptionT(File.read_codePageString(p+20,20,"CP1252"));
                    sOptionT(File.read_codePageString(p+40,20,"CP1252"),"by: ");
                    sOptionT(File.read_codePageString(p+60,20,"CP1252"),"style: ");
                    break;
                }
                else if(File.read_ansiString(p,10) == "Header V01") {  p += 20;
                    sz = File.read_uint32(p); sOptionT(File.read_codePageString(p+4,sz,"CP1252")); p+=sz+4;
                    sz = File.read_uint32(p); sOptionT(File.read_codePageString(p+4,sz,"CP1252"),"by: "); p+=sz+4;
                    sz = File.read_uint32(p); sOptionT(File.read_codePageString(p+4,sz,"CP1252"),"style: ");
                    break;
                }
                else if(File.read_ansiString(p,10) == "Header V02") {  p += 20;
                    sz = File.read_uint32(p); sOptionT(File.read_codePageString(p+4,sz,"CP1252")); p+=sz+4;
                    sz = File.read_uint32(p); sOptionT(File.read_codePageString(p+4,sz,"CP1252"),"by: "); p+=sz+4;
                    sz = File.read_uint32(p); sOptionT(File.read_codePageString(p+4,sz,"CP1252"),"style: "); p+=sz+4+5;
                    sz = File.read_uint32(p); sOptionT(File.read_codePageString(p+4,sz,"CP1252"));
                    break;
                }
                p = File.findSignature(p+1,TOEOF,"''>>>  Chunk End  <<<'");
                if(p == -1) break
            }
        }
    }
    else if(extIs("xrns") && Binary.compare("'PK'0304")) {
        //TODO when ZIP parsing is available
        bDetected = 1;
        sName = "Renoise module (.XRNS)"; sVersion = "xml"
        //versions vs doc_version:
        // 10: 1.9.1    14: 2.0.0    15: 2.1.0    21: 2.5.1    22: 2.6.1    30: 2.7.0, 2.7.1, 2.7.2
        // 37: 2.8.2    54: 3.0.1    63: 3.1.0    65: 3.3.2    66: 3.4.2
    }
    else if(extIs("xrdp") && File.findString(0,0x100,"<FilterDevicePreset")>=0) {
        bDetected = 1;
        sName = "Renoise filter device preset (.XRDP)";
        p=File.findString(20,0x100,"doc_version=");
        if(p<0) sVersion = "malformed";
        else {
            sVp = File.read_ansiString(p,0x10); sVersion = "v"+/doc_version=\"(\d*)\"/.exec(sVp)[1]
        }
    }
    else if(extIs("xrni") && Binary.compare("'PK'0304")) {
        //TODO when ZIP parsing is available
        bDetected = 1;
        sName = "Renoise instrument (.XRNI)"; sVersion = "xml"
    }
    else if(extIs("xrno") && (File.findString(0,0x100,"<SampleModulationSet")>=0)) {
        bDetected = 1;
        sName = "Renoise sample modulation set (.XRNO)";
        p = File.findString(15,0x100,"doc_version=");
        if(p < 0) sVersion = "malformed";
        else {
            sVp = File.read_ansiString(p,0x10); sVersion = "v"+/doc_version=\"(\d*)\"/.exec(sVp)[1]
        }
    }
    else if(extIs("xrnt") && (File.findString(0,0x100,"<RenoiseDeviceChain")>=0)) {
        bDetected = 1;
        sName = "Renoise effect chain (.XRNT)";
        p = File.findString(15,0x100,"doc_version=");
        if(p < 0) sVersion = "malformed";
        else {
            sVp = File.read_ansiString(p,0x10); sVersion = "v"+/doc_version=\"(\d*)\"/.exec(sVp)[1]
        }
    }
    else if(extIs("xrnt") && Binary.compare("'PK'0304")) {
        bDetected = 1;
        sName = "Renoise effect chain (.XRNT)"; sVersion = "v<3.0"
    }
    else if(extIs("xrnz") && (File.findString(0,0x100,"<InstrumentPhrase")>=0)) {
        bDetected = 1;
        sName = "Renoise instrument phrase (.XRNZ)";
        p = File.findString(15,0x100,"doc_version=");
        if(p < 0) sVersion = "malformed";
        else {
            sVp = File.read_ansiString(p,0x10); sVersion = "v"+/doc_version=\"(\d*)\"/.exec(sVp)[1]
        }
    }
    else if(Binary.compare("'ofTAZ!'")) {
        bDetected = 1;
        sName = "Extra Simple Music module (.XSM)";
    }
    else if(Binary.compare("'NuRIFFRAFF'",0x22)) {
        bDetected = 1;
        sName = "Riff Raff module (.RIFF)";
        if(Binary.isVerbose()) {
            t = File.read_codePageString(0x64,0x100,"CP1252");
            a = File.read_codePageString(0x64+t.length+1,0x100,"CP1252");
            c = File.read_codePageString(0x64+t.length+a.length+2,0x100,"CP1252");
            sOptionT(t); sOptionT(a,"by: "); sOptionT(c)
        }
    }
    else if(Binary.compare("'RON_KLAREN_SOUNDMODULE!'00", 0x28)) {
        bDetected = 1;
        sName = "Ron Klaren module (.RK)";
    }
    else if(Binary.compare("00000400") && Binary.compare("000000000000000000000000000000000000000000000000000000000000000000000000000000'Tempo'00", 0x8F)) {
        bDetected = 1;
        sName = "Visual Composer module (.ROL)";
    }
    else if(Binary.compare("'RTMM '")) {
        bDetected = 1;
        sName = "Real Tracker module (.RTM)";
        sVersion = "v"+File.read_ansiString(0x37,7);
        if(Binary.isVerbose()) {
            sOptionT(File.read_codePageString(5,0x20,"CP1252"));
            sOptionT(File.read_codePageString(0x3E,0x20,"CP1252"),"by: ");
            sOptionT(File.read_codePageString(0x8C,0x20,"CP1252"),"orig.: ")
        }
    }
    if(Binary.compare("00000000 00000200",0x0C) && Binary.compare("00")
      && File.read_uint16(0x18,_LE) === File.read_uint16(0x40,_LE)
      && Binary.compare("00'ST-Module.'", 0x4B7)) {
        sName = "Amstrad CPC Soundtrakker module (.STK)"; bDetected = 1;
        datasz = File.read_uint16(0x18,_LE); sz = datasz + 0x80;
        if(sz != File.getSize()) sVersion = "malformed";
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(1,8));
            sOption("sz:"+sz)
    }
    else if(Binary.compare("00000000 00000200",0x0C) && Binary.compare("00")
      && File.read_uint16(0x18,_LE) === File.read_uint16(0x40,_LE)
      && File.read_ansiString(1,8) === File.read_ansiString(0xB10,8)) {
        sName = "Amstrad CPC Soundtrakker 128K module (.128)"; bDetected = 1;
        datasz = File.read_uint16(0x18,_LE); sz = datasz + 0x80;
        if(sz != File.getSize()) sVersion = "malformed";
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(1,8));
            inst = []; ins = 0;
            for(i=0; i < 16; i++) if(![0,0x20].indexOf(File.read_uint8(0xB18+8*i))) {
                ins++; inst.push(File.read_ansiString(0xB18+8*i,8).trim())
            } //TODO confirm that that's how to count the instruments
            sOption(inst);
            sOption("ins:"+ins+" sz:"+sz)
    }
    else if(Binary.compare("00'ST-Module.'",0x437)) {
        sName = "Amstrad CPC Soundtrakker module (.STK)"; bDetected = 1;
        sVersion = "headerless"
    }
    else if(Binary.compare("'SCRM'", 0x2C)) {
        //ref https://moddingwiki.shikadi.net/wiki/S3M_Format
        // & https://github.com/OpenMPT/openmpt/blob/master/soundlib/S3MTools.h & Load_s3m.cpp
        bDetected = 1;
        _V = Hex(File.read_uint16(0x28,_LE));
        sVersion = "v"+_V.substr(1,1)+"."+_V.substr(2,2);
        if(_V === "1300") sVersion = "v3.00"; else //because they're weird duh
        if(_V === "1320") sVersion = "v3.20"; else
        if(_V === "1301") sVersion = "v3.01";
        switch(_V.substr(0,1)) {
            case "1": sName = "ScreamTracker 3 module (.S3M)"; break;
            case "2": sName = "Imago Orpheus module (.S3M)"; break;
            case "3": sName = "Impulse Tracker module (.S3M)"; break;
            case "4":
                if(_V === "4100") {
                    sName = "BeRoTracker module (.S3M)"; sVersion = "v.2004-2012" }
                else
                    sName = "Schism Tracker module (.S3M)";
                break;
            case "5":
                if(_V=== "4754") {
                    sName = "GraoumfTracker module (.S3M)"; sVersion = "" }
                else
                    sName = "OpenMPT module (.S3M)"; break;
            case "6": sName = "BeRoTracker module (.S3M)"; break;
            case "7": sName = "CreamTracker module (.S3M)"; break;
            case "C":
                if(_V === "CA00") {
                    sName = "Camoto/libgamemusic module (.S3M)"; sVersion = ""; break }
            default: sName = "ScreamTracker-compatible module (.S3M)";
        }
        if(Binary.isVerbose()) {
            malformed = "";
            if(!Binary.compare("1A",0x1C)) malformed+=":sg";
            z1 = File.read_uint16(0x1E); if(z1>0) malformed+=":0";
            ords = File.read_uint16(0x20,_LE); if((ords%2) == 1) malformed+=":od";
            ins = File.read_uint16(0x22,_LE); ptn = File.read_uint16(0x24,_LE);
            gvol = File.read_uint8(0x30); spd = File.read_uint8(0x31);
            tmp = File.read_uint8(0x32); mvol = File.read_uint8(0x33);
            if(malformed.length>0) sVersion += "/malformed"+malformed;
            sOptionT(File.read_codePageString(0,0x1C,"CP1252"));
            ch = 1 + (mvol >> 7); mvol &= 0x7F;
            sOption("ch:"+ch+" ord:"+ords+" ptn:"+ptn+" ins:"+ins
                +" gvol:"+gvol+" mvol:"+mvol+" r/s:"+(tmp/spd).toFixed(1));
        }
    }
    else if(Binary.compare("'!Scream!'", 0x14)) {
        bDetected = 1;
        sName = "ScreamTracker 2 module (.STM)";
        if(Binary.isVerbose())
            sOptionT(File.read_codePageString(0,0x14,"CP1252"))
    }
    else if(Binary.compare("'S98'3.")) {
        //ref https://www.purose.net/befis/download/lib/t98/ins98131s.zip / s98spec1.txt,
        //    http://www.purose.net/befis/download/kmp/old/s98spec2.txt,
        //    https://github.com/rururutan/s98spec3/blob/master/s98spec3-ja.txt
        bDetected = 1;
        sName = "S98 tune (.S98)";
        sV = File.read_ansiString(3,1); sVersion = "v"+sV;
        if(Binary.isVerbose()) {
            a=""; c="";s=""; g=""; t=""; y="";
            switch(sV) {
                case "0": case "1": case "2":
                    p = File.read_uint32(0x10,_LE);
                    if(p > 0)
                        sOptionT(File.read_ansiString(p,0x40));
                    pk = File.read_uint32(0x0C,_LE);
                    if(pk) sVersion += " compressed";
                    break;
                case "3":
                    ptags = File.read_uint32(0x10,_LE);
                    if(ptags > 6 && File.read_ansiString(ptags,5)=="[S98]") {
                        ptags+=5;
                        bUTF8 = File.compare("EFBBBF",ptags); //if BOM's there
                        if(bUTF8) tags = File.read_utf8String(ptags+3,0x200); //test whether this parses BOM too
                        else tags = File.read_codePageString(ptags,0x200,"Shift_JIS");
                        tagl = tags.split('\x0A');
                        for (i=0; i < tagl.length; i++) {
                            tag = tagl[i].split("=");
                            switch (tag[0]) {
                                case "title": case "ｔｉｔｌｅ": t = tag[1]; break;
                                case "game": case "ｇａｍｅ": g = tag[1]; break;
                                case "system": case "ｓｙｓｔｅｍ": s = tag[1]; break;
                                case "artist": case "ａｒｔｉｓｔ": a = tag[1]; break;
                                case "year": case "ｙｅａｒ": y = tag[1]; break;
                                case"copyright": case "ｃｏｐｙｒｉｇｈｔ": if(a=="") a = tag[1]; break;
                                case"s98by": case "ｓ９８ｂｙ": if(a=="") a = tag[1]; break;
                                case"comment": case "ｃｏｍｍｅｎｔ": c = tag[1]; break;                        
                            }
                        }
                        sOption(t); sOption(a,"by: "); sOption(y,"'");
                        sOption(g,"for: "); sOption(s,"on: "); sOption(c);
                        dev = File.read_uint32(0x1C,_LE); if(!dev) dev = 1;
                        if(dev > 64) sVersion += "/malformed";
                        sOption("devices: "+dev)
                        break
                    } //if correct tag
            }//switch sV
        }//isVerbose
    }
    else if(Binary.compare("'SOARV1.0STBL'")) {
        //TODO unify all SAs, rewrite the check, and extract the lengths using this source:
        // https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/amigasrc/players/wanted_team/Sonic_Arranger/Sonic Arranger_v1.asm
        sName = "Sonic Arranger module (.SA)"; bDetected = 1;
        sVersion = "v1.0"
    }
    else if(Binary.compare("4EFA002A 4EFA06FC 4EFA077C")) {
        sName = "Sonic Arranger module (.SA)"; bDetected = 1; sVersion = "old"
    }
    else if(Binary.compare("4EFA002A 4EFA06E4 4EFA0764")) {
        sName = "Sonic Arranger module (.SA)"; sVersion = "v.E464"; bDetected = 1
    }
    else if(Binary.compare("4EFA001A 4EFA06C6 4EFA073A")) {
        sName = "Sonic Arranger module (.SA)"; sVersion = "v.C63A"; bDetected = 1
    }
    else if(Binary.compare("'SAP'0D0A")) {
        bDetected = 1;
        sName = "Slight Atari Player module (.SAP)";
        if(Binary.isVerbose()) {
            malformed = false; t=""; a=""; dt=""; tp=""; tm="";
            p = File.findSignature(3,TOEOF,"0D0AFFFF");
            if(p == 0) malformed=true;
            else {
                taghunk = File.read_ansiString(5,p);
                if(taghunk.length > 5) {
                    tags = taghunk.split("\x0D\x0A");
                    for(i=0; i < tags.length; i++) {
                        tagdiv = tags[i].indexOf(" ");
                        tagl = tags[i].substr(0,tagdiv);
                        tagr = tags[i].substr(tagdiv+1,tags[i].length);
                        switch(tagl) {
                            case "NAME": if(tagr != '"<?>"') t = tagr.substr(1,tagr.length-2); break;
                            case "AUTHOR": if(tagr != '"<?>"') a = tagr.substr(1,tagr.length-2); break;
                            case "DATE": if(tagr != '"<?>"') dt = tagr.substr(1,tagr.length-2); break;
                            case "TYPE": sVersion = "v."+tagr; break;
                            case "TIME": tm = tagr; break
                        }
                    }
                }
            }
            if(malformed) sVersion += "/malformed";
            sOption(t); sOption(a,"by: "); sOption(dt,"'"); sOption(tm,"len: ")
        }
    }
    else if(Binary.compare("'SAdT'")) {
        //ref http://www.adlibtracker.net/files/at2_sourcecode_09-09-2019.zip
        // in /adt2play/iloaders.inc -> sat_file_loader
        bDetected = 1; nV = File.read_uint8(4); sVersion = "v"+nV;
        if(nV < 8)  sName = "Surprise! AdLib Tracker module (.SAT)";
        else sName = "Surprise! AdLib Tracker 2 module (.SA2)";
        if(Binary.isVerbose()) {
            if(nV < 5) {
                instnp = 0x15A;
                ptn = File.read_uint16(0x448,_LE);
                ord = File.read_uint8(0x44A);
                ticks = FIle.read_uint8(0x44C)
            } else { //v5,6, 8,9 are the same
                instnp = 0x1D6;
                ptn = File.read_uint16(0x446,_LE);
                ord = File.read_uint8(0x448);
                ticks = File.read_uint8(0x44A)
            }
            inst=[];
            for(i=0; i < 3 /*31*/; i++) //that's enough title info
                inst.push(File.read_ucsdString(instnp+i*17).trim());
            t = inst.join(" ").trim(); if(t != "") t+="...";
            sOption(t); sOption("rate,Hz:"+ticks+" ord:"+ord+" ptn:"+ptn)
        }
    }
    else if(Binary.compare("'SC68 Music-file'")) {
        bDetected = 1;
        sName = "SC68 module (.SC68)";
        if(Binary.isVerbose()) {
            hdrl = File.read_ansiString(0,0x100).length+1; 
            p = hdrl; //header skipped
            t=''; a=''; cp=''; st=''; df=-1; x=0; ef=false; mn = [];
            while (p < File.getSize()) {
                hkhd = File.read_ansiString(p,4);
                hksz = File.read_uint32(p+4,_LE);
                p += 0x08; //chunk header = 4xfourcc + 4xsize
                switch (hkhd) {
                    case "SC68": if(hksz+hdrl != File.getSize()) sVersion = "malformed"; hksz = 0; break;
                    case "SCFN": t = File.read_codePageString(p,hksz,"CP1252"); break;
                    case "SCDF": df = File.read_uint32(p,_LE)+1; break;
                    case "SCMN":
                        mn.push(File.read_codePageString("CP1252",p,hksz));
                        if(st=="" || df==mn.length)
                            st = mn[mn.length-1];
                        break;
                    case "SCAN": a = File.read_codePageString(p,hksz,"CP1252"); break;
                    case "SCCN": cp = File.read_codePageString(p,hksz,"CP1252"); break;
                    case "SCEF": ef = true; p = File.getSize(); break
                }
                p += hksz;
            }
            sOptionT(t); if(mn.length > 1) sOption(mn.length,"×");
            sOptionT(mn.join(";"));
            sOptionT(a,"by: "); sOptionT(cp,"(c)");
            if(!ef) sVersion = "malformed"
        }
    }
    else if(Binary.compare("'shro'020000")) {
        bDetected = 1;
        sName = "Mario Paint's Shroom module (.SHO)";
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(7,0x20));
            sOptionT(File.read_ansiString(0x27,0x20),"by: ")
        }
    }
    else if(Binary.compare("0000001C000000040000", 0x06)
      && Binary.compare("'SIDMON II - THE MIDI VERSION'", 0x3A)) {
        bDetected = 1;
        sName = "SidMon II module (.SID2)";
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(7,0x20));
            sOptionT(File.read_ansiString(0x27,0x20),"by: ")
        }
    }
    else if(Binary.compare("'PSID'") || Binary.compare("'RSID'")) {
        bDetected = 1;
        v1 = File.read_ansiString(0,1);
        if(v1 == "P")  sName = "PlaySID chiptune (.SID, .PSID)";
        else sName = "RealSID chiptune (.SID, .RSID)";
        v2 = File.read_uint16(4,_BE);
        sVersion = "v"+Hex(v2);
        malformed = 0;
        x = File.read_uint16(0x0E,_BE);
        if(x<1 || x>256) malformed = 1;
        else if(x > 1) sOption(x,"×");
        startSong = File.read_uint16(0x10,_BE);
        if(startSong > x) malformed = 2;
        dataOfs = File.read_uint16(0x06,_BE);
        if((v2==1 && dataOfs!=0x0076) || (v2==2 && dataOfs!=0x007C))
            malformed = 3;
        loadAddr = File.read_uint16(0x08,_BE);
        if(v1=="R" && loadAddr>0 && (loadAddr<0x07E8)) malformed = 4;
        initAddr = File.read_uint16(0x0A,_BE);
        if(v1=="R" &&
           ( initAddr<0x07E8 || (0xA000<=initAddr && initAddr<0xC000) || 0xD000<=initAddr))
            malformed = 5;
        flags = File.read_uint16(0x76,_BE);
        if(v1=="R" && ((flags&2) >> 1) && initAddr>0)
            malformed = 6;
        switch((flags&0x30)>>4) {
            case 1: sVersion += "/6581"; break;
            case 2: sVersion += "/8580"; break;
            case 3: sVersion += "/6581&8580"; break;
            default: sVersion += "/unk.chip"
        }
        switch((flags&0x0C)>>2) {
            case 1: sVersion += "/PAL"; break;
            case 2: sVersion += "/NTSC"; break;
            case 3: sVersion += "/PAL&NTSC"; break;
        }
        sidn = (dataOfs-0x7C)/2+1;
        if(sidn > 1) sVersion += "/"+sidn+"SID";
        if(malformed > 0) sVersion += "/malformed"+malformed;
        if(Binary.isVerbose()) {
            t = File.read_codePageString(0x16,0x20,"CP1252"); if(t == "<?>") t = ""; sOptionT(t);
            a = File.read_codePageString(0x36,0x20,"CP1252"); if(a == "<?>") a = ""; sOptionT(a,"by: ");
            c = File.read_codePageString(0x56,0x20,"CP1252"); if(c == "<?>") c = ""; sOptionT(c);
        }
    }
    else if(Binary.compare("00 FF00FF00 9100FF00 FF008000 92..00967F 01", 0x07)
      && Binary.compare("9908", 0x1542)) {
        bDetected = 1;
        sName = "Sound Images Generation 2 module (.SIG)";
    }
    else if(Binary.compare("0100FEFF09000000'ALIM3'")) {
        bDetected = 1;
        sName = "Skale Tracker module (.SKM)";
        if(Binary.isVerbose()) sOptionT(File.read_ansiString(0x19));
    }
    else if(Binary.compare("'SMOD'") && (File.getSize()>112)) {
        //ref https://github.com/tonioni/WinUAE/blob/master/prowizard/rippers/FutureComposer13.c
        bDetected = 1;
        sName = "Future Composer module (.SMOD)";
        sVersion = "v1.0~3";
        if((File.getSize() < File.read_uint32(8,_BE)) || (File.getSize() < File.read_uint32(0x10,_BE))
          || (File.getSize() < File.read_uint32(0x18,_BE)) || (File.getSize() < File.read_uint32(0x20,_BE)))
            sVersion += "/malformed"
    }
    else if(Binary.compare("6000000A60000090600000'xM'F900DFF00047FA07FC'=|'000F0096'=|'00FF009E700641EBFFF810FC000051C8FFFA41EB0006'p-'117C00000034117C00000068117C0000009C10FC000051C8FFE87600162B00DF1743FFFB610001E241EBFFFA1082176B00DD00DB08B9000100BFE001'J+'00E1660808F9000100BFE001'NuG'FA078C1740FFFD1740FFFC177C0001FFFE'NuM'F900DFF0007E0347FA07'pK'FA07'l3'EB00D200DFF096'7|'000000D0177C000000DA'Jm'001A661041EB00E6'-H'00A0'=|'000100A4600C'=m'001A00A4'-m'001C00A0'J+'FFF8660E'J+'FFF96604610000B2610001E4DDFC00000010DBFC000000'4Q'CFFFBC33EB00D000DFF096'7|'820000D0'7|'000000D44DF900DFF0007E0347FA06F24BFA06EE'J+'FFF8660461000200610003D8DDFC00000010DBFC000000'4Q'CFFFE46100008C'0+'00D0806B00D233C000DFF096'7k'00D400D2'J+'FFFD6706'S+'FFFD'`4'102BFFFC12000201007F'g('1741FFFD4A006B0C'J+'00D9671A'S+'00D960140C2B004000D96608177C0000FFFC6004'R+'00D9'Nur'007000122BFFFA41EB02E8D1ED000010301800D1FC000004001B70180000'0r'00122B00DEC2C041EB1068D288'+A'0016'Nuv'00162BFFFB142BFFFA122BFFF9102BFFF8'J+'00DA6706122B00DE55015200B02B00DB'f6p'005401B22B00DE'f,r'00B42B00D767045202'` R'03B62B00E06616162B00DF177C0000FFFC176B00DD00DB177C000000D961121743FFFB1742FFFA1741FFF91740FFF8'NuA'EB00E843EB00D6780212F03800D1FC000000'@Q'CCFFF41A'08'0043EB00'1x'03D1FC0000004012B03800D3FC000000'4Q'CCFFEE'J+'FFFE'fRJ'056B08177C0000FFFC")) {
        bDetected = 1;
        sName = "Sound Master II module (.SMPRO)";
        sVersion = "v1";
    }
    else if(Binary.compare("'<track'") && (Binary.findString(6,0x100,"rowhighliohtingminor=")>0)) {
        bDetected = 1;
        sName = "Picatune module v1 (.SMUFI) or v2 (.PT2)";
        if(Binary.isVerbose()) {
            s = File.read_utf8String(0,0x100);
            t = /.*name="([^"]*)".*/.exec(s);
            if(t != null) sOptionT(t[1]);
            a = /.*author="([^"]*)".*/.exec(s);
            if(a != null) sOptionT(a[1],"by: ");
            spd = /.*speed="([^"]*)".*/.exec(s);
            bpm = /.*bpm="([^"]*)".*/.exec(s);
            if(spd != null) sVersion+=" spd: "+spd[1];
            if(bpm != null) sVersion+=" bpm: "+bpm[1];
        }
    }
    else if(Binary.compare("'SNGs'")) {
        bDetected = 1; sName = "Sound Club module (.SN)"; sVersion = "v1";
        if(Binary.isVerbose()) sOptionT(File.read_ansiString(0x0F));
    }
    else if(Binary.compare("'SN2'") && Binary.compare("'NAM'",0x1F)) {
        bDetected = 1; sName = "Sound Club module (.SN)"; sVersion = "v2";
        if(Binary.isVerbose()) sOptionT(File.read_ansiString(0x26,File.read_uint32(0x22,_LE)));
    }
    else if(Binary.compare("'SNDH'", 0x0C)) {
        bDetected = 1; sName = "Atari ST chiptune (.SNDH)"; sVersion = "unpacked";
        if(Binary.isVerbose()) {
            p = 0x10; t=""; a="";
            for(i=0; i < 8; i++) {
                x = File.read_ansiString(p,File.getSize()-p);
                if(x.length > 4) {
                    tag = x.substr(4,x.length);
                    switch(x.substr(0,4)) {
                        case "##01": i=100; break;
                        case "TITL": if(tag.substr(0,7) != "Unknown") t = tag; break;
                        case "COMM": if(tag.substr(0,7) != "Unknown") a = tag; break
                    }
                }
                p += x.length+1
            }
            sOptionT(t); sOptionT(a,"by: ")
        }
    }
    else if(Binary.compare("'FMC!'")) {
        bDetected = 1;
        sName = "Faust Music Creator module (.SNG)";
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(4,20));
    }
    else if(/GTS[25!]/.test(File.read_ansiString(0,4))) {
        bDetected = 1;
        sName = "GoatTracker module (.SNG)";
        if([0x32,0x35].indexOf(File.read_uint8(3)) >= 0) sVersion = "v2"
        else sVersion = "v1";
        if(Binary.isVerbose()) {
            sOptionT(File.read_codePageString(4,0x20,"CP1250"));
            tc = File.read_uint8(0x64);
            if(tc > 1) sOption(tc,"x ");
            sOptionT(File.read_codePageString(0x24,0x20,"CP1250"),"by: ");
            sOptionT(File.read_codePageString(0x44,0x20,"CP1250"))
        }
    }
    else if(Binary.compare("'ObsM'")) {
        bDetected = 1;
        sName = "Jonne Valtonen's SNG Player module (.SNG)";
        if(File.read_uint8(0x0B)) sVersion += "compressed";
        len = File.read_uint16(4,_LE); if(len>File.getSize()) sVersion += "malformed";
        if(Binary.isVerbose()) {
            //ref https://github.com/adplug/adplug/blob/master/src/sng.cpp
            start = File.read_uint16(6,_LE);
            loop = File.read_uint16(8,_LE); delay = File.read_uint16(0x0A,_LE);
            sOption("len:"+Hex(len)+" start:"+Hex(start)+" loop:"+Hex(loop)+" delay:"+delay)
        }
    }
    else if(Binary.compare("'RJP'3.'SMOD'")) {
        bDetected = 1;
        sVersion = "v"+File.read_ansiString(3,1)
        sName = "Richard Joseph's module (.SNG)";
    }
    else if(Binary.compare("'SYNC'") || Binary.compare("'SYNB'")) {
        bDetected = 1;
        sVersion = "ver."+File.read_ansiString(3,1)
        sName = "Synder SNG-player module (.SNG)";
        if(Binary.isVerbose()) sOption(File.read_ansiString(0x10,0x200))
    }
    else if(Binary.compare("'SYND'....'S0'")) {
        bDetected = 1;
        sVersion = "ver."+File.read_ansiString(3,1)
        sName = "Synder Tracker module (.SNG)"; //TODO unpack & read tags
        //if(Binary.isVerbose()) sOption(File.read_ansiString(0x10,0x200))
    }
    else if(Binary.compare("'SYND'") || Binary.compare("'SYNF'") || Binary.compare("'SYNH'")) {
        bDetected = 1;
        sVersion = "ver."+File.read_ansiString(3,1)
        sName = "Synder SNG-player Stereo module (.SNG)";
        if(Binary.isVerbose()) sOption(File.read_ansiString(0x10,0x200))
    }
    else if(Binary.compare("'RJP'3. 0000 0000")) {
        bDetected = 1;
        sVersion = "v"+File.read_ansiString(3,1)
        sName = "Richard Joseph's module instruments (.INS)";
    }
    else if(Binary.compare("'SNES-SPC700 Sound File Data'")) {
        // ref http://snesmusic.org/files/spc_file_format.txt   and snippets from
        // http://www.alpha-ii.com/Source/SAmp310s.rar/snes/id666.cpp, .h 
        sName = "Nintendo SNES SPC module (.SPC)";
        sVersion = "v0."+File.read_uint8(0x24); bDetected = 1;
        if(Binary.isVerbose()) {
            id666inhdr = File.read_uint8(0x23)==0x1A;
            t=""; a=""; c=""; g=""; dumper=""; emu="";
            preferBin = false;
            if(id666inhdr){
                t = File.read_ansiString(0x2E,0x20);
                g = File.read_ansiString(0x4E,0x20);
                dumper = File.read_ansiString(0x6E,0x10);
                dumpdate = File.read_ansiString(0x9E,11);
                emu = File.read_uint8(0xD2);
                if(emu>=0x30 && emu<=0x39)
                    emu -= 0x30;
                switch(emu) {
                    case 1: emu = "ZSNES"; break;
                    case 2: emu = "Snes9x"; break;
                    case 3: emu = "ZST2SPC"; break;
                    case 4: emu = "ETC"; break;
                    case 5: emu = "SNEShout"; break;
                    case 6: emu = "ZSNESW"; break;
                    default: emu = "" 
                }
                c = File.read_ansiString(0x7E,0x20);
                slen = File.read_ansiString(0xA9,3); lp=File.read_ansiString(0xAC,4);
                if((slen+lp+dumpdate).length < 5) {
                    chnDis = File.read_uint8(0xD1);
                    if(chnDis == 1 && emu == "") bin = true; else bin = preferBin;
                } else if( /[0-9/]*/.test(slen+lp+dumpdate) ) { //id666 text format
                    songlen = Number(slen); //in seconds
                    a = File.read_ansiString(0xB1,0x20);
                } else {
                    bin = true;
                    //check songlen bitness
                    songlen = File.read_uint8(0xA9)<<16+File.read_uint8(0xAA)<<8+File.read_uint8(0xAB); //in seconds
                    a = File.read_ansiString(0xB0,0x20);
                }
            }
            else
                t = File.read_ansiString(0x30,0x14);
            sOption(t); sOption(g,"for: "); sOption(a,"by: "); sOption(c);
            if(emu != "") sVersion += " "+emu;
        }
    }
    else if(Binary.compare("'SONG'") && Binary.isDeepScan()) {
        //ref https://github.com/kometbomb/prototracker/blob/master/doc/FORMAT.TXT
        secsz = File.read_uint32(4,_BE);
        v = File.read_uint8(8); sVersion = "v"+v;
        trk = File.read_uint8(9); pn = 0xA; 
        fxc = 0; if(v >= 17) { fxc = File.read_uint8(pn); pn++ }
        t = File.read_ansiString(pn,0x100);
        if(Binary.compare("'SEQU'",pn+t.length+1+2)) {
            bDetected = 1;
            sName = "ProtoTracker module (.SONG)";
            sOptions = sOptions.append(t);
            sVersion += " trk:"+trk;
            if(fxc>0) sVersion += " fx:"+fxc
        }
    }
  if(!bDetected) {
    if(Binary.compare("'STK'..'.'..'SONG")) {
        sName = "Starkos module (.SKS)"; sVersion = "v"+File.read_ansiString(3,3); bDetected = 1;
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0x14,0x20));
            sOptionT(File.read_ansiString(0x0A,0x0A),"by: ")
        }
    }
    if(Binary.compare("'Nu!SOPROL!'", 0x22)) {
        sName = "Sound Programming Language module (.SPL)"; bDetected = 1;
        if(Binary.isVerbose()) {
            t = File.read_ansiString(0x58,0x100);
            a = File.read_ansiString(0x58+t.length+1,0x100);
            c = File.read_ansiString(0x58+t.length+a.length+2,0x100);
            sOptionT(t); sOptionT(a,"by: "); sOptionT(c)
        }
    }
    if(Binary.compare("'SPM'0.")) {
        //ref http://aminet.net/mus/edit/stonefree1.lha
        sName = "Stonetracker tune file (.SPM)"; bDetected = 1; sVersion = "v"+File.read_uint8(3);
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(4,0x20));
            //TODO find pointer and read the extra stuff
        }
    }
    if(Binary.compare("'SPS'0.0.")) {
        sName = "Stonetracker samples file (.SPS)"; bDetected = 1; sVersion = "v"+File.read_uint8(3);
        if(Binary.isVerbose()) {
            smp=File.read_uint8(5);
            sOption(smp,"smp:")
            for(i=0; i < Math.min(10,smp); i++)
                sOptionT(File.read_ansiString(0x20*i+6,8))
        }
    }
    else if(Binary.compare("'SPU'00") || Binary.compare("'SPU1'") ||
        (Binary.findSignature(File.getSize()-6,TOEOF,"1D80FF"))>-1) {
        bDetected = 1; sName = "Eternal SPU music RAM log (.SPU)";
        if(Binary.compare("'SPU'")) {
            if(!File.read_uint8(3)) sVersion = "v0"; else sVersion = "v1"; }
        else sVersion = "headerless";
        if(Binary.isVerbose() && (sVersion != "headerless")) {
            game = File.read_codePageString(4,0x40,"Shift_JIS");
            title = File.read_codePageString(0x44,0x40,"Shift_JIS");
            sOptionT(title); sOptionT(game, "game: ");
            artist = File.read_codePageString(0x84,0x20,"Shift_JIS"); sOptionT(artist,"by: ");
            cmt = File.read_codePageString(0xA4,0xF00,"Shift_JIS"); sOptionT(cmt);
        }
    }
    else if(Binary.compare("'SPEEDY-SYSTEM'")) {
        bDetected = 1; sName = "Speedy System module (.SS)"; sVersion = "v1"
    }
    else if(Binary.compare("'ZXAYST11'")) {
        sName = "Sound Tracker module (.ST1, .ST11)"; sVersion = "v1.1/uncompiled";
        bDetected = 1;
        if(Binary.isVerbose()) {
            t_= File.read_uint8(0x17); t = File.read_ansiString(0x18,t_-1).trim();
            if(t != "Some SoundTracker Song") sOption(t);
        }
    }
    else if(Binary.compare("'KSA SOFTWARE COMPILATION OF '",0x0A) && (File.getSize()<0x2800)) {
        sName = "Sound Tracker Pro module (.STP)"; sVersion = "compiled"; bDetected = 1;
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(0x26,0x19)); sOption("tempo: "+File.read_uint8(0))
    }
    else if(Binary.compare("'STP3'")) {
        sName = "Soundtracker Pro II module (.STP)"; bDetected = 1;
    }
    else if(Binary.compare("48E7FFFE 4DFA.... 4A2E001.")) {
        bDetected = 1; sName = "SUNtronic module (.SUN)";
    }
    else if(Binary.compare("'SVOX'00000000")) {
        bDetected = 1; sName = "SunVox module (.SUNVOX)";
        if(Binary.isVerbose()) {
            p=8;
            t=''; bpm=0; spd=0; tme=0; ptn=0; blk=0;
            while (p < File.getSize()) {
                hkhd = File.read_ansiString(p,4); p += 4;
                hksz = File.read_uint32(p,_LE); p += 4;
                switch(hkhd) {
                    case "VERS":
                        nV = File.read_uint32(p,_LE); aV=[];
                        for(i=0; i < 4; i++) aV[3-i] = (nV>>(8*i))%256; 
                        sVersion += "v"+aV.join("."); break;
                    case "BVER":
                        nB = File.read_uint32(p,_LE);
                        if(nB != nV) { aV = [];
                            for(i=0; i < 4; i++) aV[3-i] = (nB>>(8*i))%256; 
                            sVersion += "/v"+aV.join(".");
                        }
                        break;
                    case "NAME": t = File.read_ansiString(p,hksz); break;
                    case "BPM ": bpm = File.read_uint32(p,_LE); break;
                    case "SPED": spd = File.read_uint32(p,_LE); break;
                    case "TIME": tme = File.read_uint32(p,_LE); break;
                    case "SNAM": blk++; break;
                    case "PDTA": ptn++; break;
                }
                p += hksz;
            }
            sOptionT(t);
            if(bpm > 0) sOption(bpm,"bpm:"); if(spd > 0) sOption(spd,"spd:");
            if(tme > 0) sOption(tme,"time:"); if(ptn > 0) sOption(ptn,"ptn:"); if(blk > 0) sOption(blk,"blk:");
        }
    }
    else if(Binary.compare("'SymM'")) {
        //ref https://github.com/OpenMPT/openmpt/blob/master/soundlib/Load_symmod.cpp
        bDetected = 1; sName = "Symphonie module (.SYMMOD)";
        sVersion = "v"+File.read_uint32(4,_BE);
        if(Binary.isVerbose()) {
            p=8;
            t=''; ef=false; ch=0; len=0; extsmp=false; pro=false;
            while (p<File.getSize()) {
                if(ef) break;
                hkhd = File.read_int32(p,_BE); hkhx = Hex(File.read_uint32(p,_BE)); hksz=4;
                p += 0x04; //chunk header = 4xtype (the following will change by chunk type)
                switch (hkhd) {
                    case -16: pklen=File.read_uint32(p,_BE); hksz+=pklen; o=4; //InfoText RLE-COMPRESSED YO
                      if(pklen>=10 && Binary.compare(p+o,"'PACK'FFFF")) { o+=6;
                        _log("yes we're FUCKING doing this. The algo's 100% from openMPT");
                        unplen = File.read_uint32(p+o,_BE); o+=4;
                        maxlen = pklen-10; if(4294967295/170 >= maxlen) maxlen += 170; else maxlen = 4294967295;
                        if(unplen > maxlen) unplen = maxlen;
                        done = false; ofs = 0; left = unplen;
                        while(!done && o<hksz) {
                            tp = File.read_int8(p+o); o++;
                            switch(tp) {
                            case 0:
                                l = File.read_uint8(p+o); o++;
                                if(left >= l) {
                                    t += File.read_ansiString(p+o,l);
                                    o += l; left -= l;
                                } else done=true;
                                break;
                            case 1:
                                l = FIle.read_uint8(p+o); o++;
                                dw = File(read_ansiString(p+o,4)); o += 4;
                                if(left >= (l*4) && (o<pklen)) {
                                    left -= l*4;
                                    while(l--) t += dw;
                                } else done=true;
                                break;
                            case 2:
                                dw = File(read_ansiString(p+o,4)); o += 4;
                                if(left >= l*4 && o<pklen) {
                                    unp += dw+dw;
                                    left -= 8;
                                } else done = true;
                                break;
                            case 3:
                                l = File.read_uint8(p+o); o++;
                                if(left >= l) left-=l;
                                else done = true;
                                break;
                            case -1: done = true; break;
                            default: sVersion += "/malformed"; done = true; break;
                            }//switch
                        }
                      } else //if no RLE sig:
                      t=File.read_codePageString(p+o,hksz,"CP1252"); break;
                    case -1: ch = File.read_int32(p,_BE); break; //NumChannels
                    case -2: len = File.read_int32(p,_BE); if(len > 1024) len = "malformed"; break; //TrackLength
                    case -3: case -4: case -5: break;
                    case -7: extsmp = true; break; //ExternalSamples
                    case 10: case 11: case 12: pro=true; break; //Sample Boost/Detune/Phase
                    case -6: tmp = Math.round(1.24*Math.min(File.read_int32(p,_BE),800)); break; //Tempo
                    case -12: hksz = 0; break; //EmptySample
                    case -10: case -11: case -13: case -14: case -15: case -17: case -18:
                    case -19: case -20: case -21: hksz+=File.read_int32(p,_BE); break;
                    default: _log(Hex(p,8)+": "+hkhd+"/"+hkhx+" ("+Hex(hksz,8)+"): ?!?!?!?!?!");
                }
                p += hksz;
            }
        }
        sOption(t); sOption(ch,"ch:"); sOption(len,"len:"); sOption(tmp,"tmp:");
        if(extsmp) sOption("extsmp"); if(pro) sVersion+="/Pro"
    }
    else if(Binary.compare("'Synth'") && !Binary.compare("'esi'",5)) {
        bDetected = 1;
        sName = "Synthesis module (.SYN)";
        if(Binary.compare("'Synth'",0x1F0E)) {
            sVersion = "v"+File.read_ansiString(0x1F13,3);
            if(Binary.isVerbose()) {
                sOptionT(File.read_ansiString(0x1F32,0x1B));
                sOptionT(File.read_ansiString(0x1F4E,0x100))
            }
        } else {
            sVersion = "v"+File.read_ansiString(5,3);
            if(Binary.isVerbose()) {
                sOptionT(File.read_ansiString(0x24,0x1B));
                sOptionT(File.read_ansiString(0x40,0x100))
            }
        }
    }
    else if(Binary.compare("'SYNTRACKER-SONG:'00")) {
        bDetected = 1;
        sName = "SynTracker module (.SYNMOD)";
        if(Binary.isVerbose()) {
            t1 = File.read_codePageString(0x14,0x20,"CP1252"); sOptionT(t1,"title/inst: ");
            t2 = File.read_codePageString(0x34,0x20,"CP1252"); sOptionT(t2);
            t3 = File.read_codePageString(0x54,0x20,"CP1252"); sOptionT(t3);
        }
    }
    else if(Binary.compare("'T0AST'")) {
        // ref T0AST.src.zip/ SoundEnginePlayer.pas, synth.pas
        // Kudos to BeRo for the tracker sources
        bDetected = 1;
        sName = "The 0ok Amazing Synth Tracker module (.T0AST)";
        if(Binary.compare("'0OK'",5)) { nV = 1; sVersion = "v1"; } else
        if(Binary.compare("010001",5)) { nV = 2; sVersion = "v2"; } else
        { nV = -1; sVersion = "v.unk"; }
        if(File.isVerbose() && nV!=-1) {
            if(nV == 1) p = 0x1DA;
            else if(nV == 2) p = 0x34A;
            else break;
            drummode = File.read_uint8(p++);
            chipmode = File.read_uint8(p++);
            chs = File.read_uint8(p++); ch = 0;
            if(chs > 16) { sVersion += "/malformed"; break; }
            for(i=0; i<16; i++)
                if(File.read_uint8(p++)) { ch++; p += 3; }
            ins = 0;
            for(i=0; i<16; i++)
                if(File.read_uint8(p++)) { ins++; p += 25; }
            ord = File.read_uint16(p,_LE); p += 2+ord;
            ptn = 0; notes = 0;
            for(k=0; k<=255; k++)
                if(File.read_uint8(p++)) { //gotta do what you gotta do
                    ptn++;
                    for(i=0; i<chs; i++) {
                        j = 0;
                        while(j < 64) {
                            b = File.read_uint8(p++);
                            if(b & 0x80) { //RLE!
                                c = b & 0x7F;
                                if(c) {
                                    p++;
                                    while(c && j < 64) { notes++; j++; c--; }
                                }
                                else j++;
                            }
                            else { //just skipping the note parameters
                                if(b&0x01) p++; if(b&0x02) p++; if(b&0x04) p++;
                                if(b&0x08) p++; if(b&0x10) p++; if(b&0x20) p++;
                                if(b&0x40) {
                                    c = File.read_uint8(p++);
                                    while(c && j < 64) { notes++; j++; c--; }
                                }
                                else { notes++; j++; }
                            }
                        }
                    }
                }
            loop = File.read_uint8(p++);
            t_ = File.read_uint32(p,_LE); p += 4;
            t = File.read_ansiString(p,t_); p += t_;
            a_ = File.read_uint32(p,_LE); p += 4;
            a = File.read_ansiString(p,a_); p += a_;
            c_ = File.read_uint32(p,_LE);
            c = File.read_ansiString(p+4,c_);
            sOption(t);
            sOption(a,"by: ");
            sOption(c);
            sOption("ch:"+ch+" ins:"+ins+" ord:"+ord+" ptn:"+ptn+" notes:"+notes+" loop:"+loop); 
        }
    }
    else if(Binary.compare("'T0ASTINS")) {
        bDetected = 1; sName = "The 0ok Amazing Synth Tracker instrument file"
    }
    else if(Binary.compare("'AN COOL'")) {
        //ref ftp://ftp.scene.org/pub/resources/gotpapers/manuals/tcb_tracker_1.0_manual_1990.pdf
        bDetected = 1;
        sName = "-TCB TRACKER- module (.TCB)";
        if(Binary.isVerbose())
            sOption("ptn:"+File.read_uint32(8,_BE)+" tempo:"+File.read_uint8(0x0C));
    }
    else if(Binary.compare("'TFMD'")) {
        bDetected = 1;
        sName = "TFM Music Maker tune (.TFD)";
        if(Binary.isVerbose()) {
            p = 4;
            t = File.read_ansiString(p,0x200); //I've seen CP1251 and CP936 already, nobody seems to care
            p = File.findSignature(p,0x200,"00")+1;
            a = File.read_ansiString(p,0x200);
            p = File.findSignature(p,0x200,"00")+1;
            c = File.read_ansiString(p,0x200);
            sOptionT(t); sOptionT(a,"by: "); sOptionT(c);
        }
    }
    else if(Binary.compare("'TFMfmtV2'")) {
        bDetected = 1;
        sName = "TFM Music Maker module (.TFE)";
        if(Binary.isVerbose()) {
            p = 0x13;
            t = File.read_ansiString(p,0x40); //I've seen CP1251 and CP936 already, nobody seems to care
            p = File.findSignature(p,0x40,"00")+1;
            a = File.read_ansiString(p,0x40);
            p = File.findSignature(p,0x200,"00")+1;
            c = File.read_ansiString(p,0x200);
            sOptionT(t); sOptionT(a,"by: "); sOptionT(c);
            d1 = File.read_uint16(0x0D,_LE); d2 = File.read_uint16(0x0F,_LE);
            spd1 = File.read_uint8(8); spd2 = File.read_uint8(9);
            intlv = File.read_uint8(0x0A); ptn0len = File.read_uint8(0x060);
            sOption(
              //"created: "+Hex(d1)+", modified: "+Hex(d2)+ //TODO figure out the dates
              "save count: "+File.read_uint8(0x11));
            sOption("spd0:"+spd1+"/"+spd2+" intlv:"+intlv);
        }
    }
    else if(Binary.compare("0000050F0000050F0000050F0000050F0000050F0000050F0000050F0000050F0000050F0000050F0000050F0000050F", 0x14)
      && Binary.compare("FFFF001000000030000000", 0x181)) {
        bDetected = 1;
        sName = "The Musical Enlightenment module (.TME)"
    }
    else if(Binary.compare("'TRK01/TV.ES.'")) {
        bDetected = 1;
        sName = "RamTracker module (.TRK)";
        if(Binary.isVerbose()) {
            sOptionT(File.read_codePageString(0x0F,0x20,"CP850"));
            sOptionT(File.read_codePageString(0x2F,0x20,"CP850"),"by: ");
        }
    }
    else if(Binary.compare("'S'8F'NG.'")) {
        bDetected = 1;
        sName = "Unique Development module (UDS.+SMP.)";
    }
    else if((File.getSize() > 0x133) && Binary.compare("'MAS_UTrack_V00'")) {
        //ref https://github.com/OpenMPT/openmpt/blob/master/soundlib/Load_ult.cpp
        bDetected = 1;
        sName = "UltraTracker module (.ULT)";
        nV = File.read_uint8(0X0E);
        if(nV<0x31 || nV>0x34) sVersion = "malformed";
        else {
            sVersion = "v"+["<1.4","1.4","1.5","1.6"][nV-0x31];
            if(Binary.isVerbose()) {
                sOptionT(decAnsi(0x0F,0x20,CP437)); //TODO File.read_codePageString(0x0F,0x20,"CP437") 
                msgn = File.read_uint8(0x2F);
                if(File.getSize() < msgn*0x20+0x50) sVersion += "/malformed";
                else { msg=[];
                    sOption(File.read_uint8(msgn*0x20+0x30),"smp:");
                    for(i=0; i < msgn; i++)
                      msg[i] = decAnsi(i*0x20+0x30,0x20,CP437).trim();
                    sOption(msg.join(" "));
                }
            }
        }
    }
    else if(/(UN0[4-6].*|APUN\x01[1-6])/.test(File.read_ansiString(0,6))) {
        // ref https://github.com/sezero/mikmod/blob/master/libmikmod/loaders/load_uni.c
        bDetected = 1;
        sName = "UNIMOD module (.UNI)";
        if(File.read_ansiString(3,1) != 'N') {
            v = +File.read_ansiString(3,1);
            if(v > 6) v = File.read_uint16(4,_LE);
            sVersion = "v"+v;
        }
        else {
            sVersion = "v.APlayer";
            v = 0x100;
        }
        if(Binary.isVerbose()) {
            p = 4;
            if(v >= 6) {
                if(v == 6) p++;
                flg = File.read_uint16(p,_LE); p+=2;
                ch = File.read_uint8(p++);
                voc = File.read_uint8(p++);
                pos = File.read_uint16(p,_LE); p+=2;
                ptn = File.read_uint16(p); p+=2;
                trk = File.read_uint16(p); p+=2;
                ins = File.read_uint16(p); p+=2;
                smp = File.read_uint16(p); p+=2;
                reppos = File.read_uint16(p); p+=2;
                spd0 = File.read_uint8(p++);
                tmp0 = File.read_uint8(p++);
                vol0 = File.read_uint8(p++);
                if(v >= 0x106) { bpmlimit = File.read_uint16(p,_LE); p+=2; }
                  else bpmlimit = 32;
            }
            else {
                ch = File.read_uint8(p++);
                pos = File.read_uint16(p,_LE); p+=2;
                if(v == 5) { reppos = File.read_uint16(p,_LE); p+=2; }
                  else reppos = 0;
                ptn = File.read_uint16(p,_LE); p+=2;
                trk = File.read_uint16(p,_LE); p+=2;
                ins = File.read_uint16(p,_LE); p+=2;
                smp = 0;
                spd0 = File.read_uint8(p++);
                tmp0 = File.read_uint8(p++);
                p += 256+32; // positions+panning
                flg = File.read_uint8(p++);
            }
            ts = File.read_uint16(p,_LE);
            sOptionT(File.read_ansiString(p+2,ts));
            if(v < 0x102) {
                porig = p+2+ts;
                origs = File.read_uint16(porig,_LE);
                if(origs>0) sOptionT(File.read_ansiString(porig+2,origs),"orig: ");
                p = porig+2+origs;
                sOptionT(File.read_ansiString(p+2,File.read_uint16(p,_LE)))
            }
            sOption("ch:"+ch+" trk:"+trk+" ord:"+pos+" ptn:"+ptn+" ins:"+ins+" smp:"+smp
              +" spd0:"+spd0+" tmp0:"+tmp0)
        }
    }
    else if(Binary.compare("'VGEfmtV'3.")) {
        bDetected = 1;
        sName = "Shiru's VGM Music Maker module (.VGE)";
        sV = File.read_ansiString(7,1); sVersion = "v"+sV;
    }
    else if( Binary.compare("'Vgm '") && ( !File.read_uint32(0x14,_LE) ||
        Binary.compare("'Gd3 '",File.read_uint32(0x14,_LE)+0x14) )) {
        //ref https://vgmrips.net/wiki/VGM_Specification
        // & https://vgmrips.net/wiki/GD3_Specification
        bDetected = 1; malformed = false;
        sName = "Video Game Music chiptune (.VGM)";
        eofofs = File.read_uint32(4,_LE)+4;
        sV = Hex(File.read_uint32(8,_LE),8);
        sVersion = "v"+sV.substr(5,1)+"."+sV.substr(6,2);
        if(Binary.isVerbose()) {
            tags = []; //11 of them
            gd3p = File.read_uint32(0x14,_LE)+0x14;
            if(gd3p > 0x14)
            if(File.read_ansiString(gd3p,4) === "Gd3 ") {
                sVersion += "/Gd3 v"+(readBytes(gd3p+4,4).join("")/100);
                taglen = File.read_uint32(gd3p+8,_LE); gd3p += 12;
                if(gd3p+taglen > File.getSize()) malformed = true;
                i = 0;
                while(i < 11 && gd3p <= File.getSize()) {
                    tpos = File.findSignature(gd3p,TOEOF,"0000");
                    if(tpos >= 0) {
                        tags[i] = File.read_unicodeString(gd3p,taglen); //TODO rename to read_utf16String
                        gd3p += tags[i].length*2+2;
                    }
                    else {
                        tags[i] = ""; gd3p += 2
                    }
                    i++;
                }
                if(i < 11) malformed = true; else tagn = Math.max(0,i-1);
                sOption(slashTag(tags[0],tags[1])); sOption(slashTag(tags[6],tags[7]),"by: ");
                sOption(slashTag(tags[2],tags[3]),"for: "); sOption(slashTag(tags[4],tags[5]),"on: ");
                sOption(tags[8],"date: "); sOption(tags[9],"ripper: "); sOption(tags[10],"notes: ")
            }
            psgclk = File.read_uint32(0x0C,_LE); //TODO add a chip list?
            ym2413clk = File.read_uint32(0x10,_LE);
            rate = File.read_uint32(0x24,_LE);
            if(sV >= "v1.10") {
                ym2612clk = File.read_uint32(0x2C,_LE);
                ym2151clk = File.read_uint32(0x30,_LE)
            }
            if(eofofs < File.getSize())
                if(File.read_ansiString(eofofs,4) == "Vgm ") sOption("multisong");
                else sOption("+extra data");
            sOption(File.read_uint32(0x18,_LE),"smp: ")
        }
        dataofs = File.read_uint32(0x34,_LE);
        if((sV >= "v1.50") && (!dataofs)) malformed = true;
        if(malformed) sVersion+= "/malformed";
    }
    else if(Binary.compare("00'3T1'")) {
        bDetected = 1;
        sName = "VicTracker module (.VT)";
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0x19E,0x10));
            sOptionT(File.read_ansiString(0x1AE,0x10),"by: ");
            sOptionT(File.read_ansiString(0x1BE,0x10),"'");
        }
    }
    else if(Binary.compare("'Creative Voice File'1a1a")) {
        bDetected = 1;
        sName = "Creative Voice audio (.VOC)";
    }
    else if(Binary.findSignature(File.getSize()-0x20,TOEOF,"'VSS0'00") > -1) {
        bDetected = 1;
        sName = "Voodoo Supreme Synthesizer audio (.VSS)";
    }
    else if(Binary.compare("'Vortex Tracker II 1.0'")) {
        bDetected = 1;
        sVersion = "v"+File.read_ansiString(0x12,3).trim();
        sName = "Vortex Tracker II audio (.VT2)";
        if(Binary.isVerbose()) {
            sOptionT(File.read_codePageString(0x1E,0x20,"CP1251"));
            sOptionT(File.read_codePageString(0x42,0x20,"CP1251"),"by: ");
        }        
    }
    else if(Binary.compare("6000") && Binary.compare("48E7FFFE610000",0x04)
        && Binary.compare("4CDF7FFF'Nu'",0x0C)) {
        bDetected = 1;
        sName = "Wally Beben's module (.WB)";
    }
    else if(Binary.compare("'WSRF'",File.getSize()-0x20) && Binary.compare("EA",File.getSize()-0x10)) {
        //ref http://daifukkat.su/docs/wsman/#wsr
        bDetected = 1;
        sName = "WonderSwan chiptune (.WSR)";
        p = File.getSize()-0x20;
        sVersion = "v"+File.read_uint8(p+4);
        if(Binary.isVerbose()) {
            sOption(Hex(File.read_uint8(p+0x18)),"CartID:")
            pub = File.read_uint8(p+0x16);
            switch(pub) {
            case 0: sOption("(invalid publisher)"); break;
            case 1: sOption("Bandai"); break;
            case 2: sOption("Taito"); break;
            case 3: sOption("Tomy"); break;
            case 4: sOption("Koei"); break;
            case 5: sOption("Data East"); break;
            case 6: sOption("Asmik Ace"); break;
            case 7: sOption("Media Entertainment"); break;
            case 8: sOption("Nichibutsu"); break;
            case 0x0A: sOption("Coconuts Japan"); break;
            case 0x0B: sOption("Sammy"); break;
            case 0x0C: sOption("Sunsoft"); break;
            case 0x0D: sOption("Mebius"); break;
            case 0x0E: sOption("Banpresto"); break;
            case 0x10: sOption("Jaleco"); break;
            case 0x11: sOption("Imagineer"); break;
            case 0x12: sOption("Konami"); break;
            case 0x16: sOption("Kobunsha"); break;
            case 0x17: sOption("Bottom Up"); break;
            case 0x18: sOption("Kaga Tech"); break;
            case 0x19: sOption("Sunrise"); break;
            case 0x1A: sOption("Cyber Front"); break;
            case 0x1B: sOption("Mega House"); break;
            case 0x1D: sOption("Interbec"); break;
            case 0x1E: sOption("Nihon Application"); break;
            case 0x1F: sOption("Bandai Visual"); break;
            case 0x20: sOption("Athena"); break;
            case 0x21: sOption("KID"); break;
            case 0x22: sOption("HAL Corporation"); break;
            case 0x23: sOption("Yuki Enterprise"); break;
            case 0x24: sOption("Omega Micott"); break;
            case 0x25: sOption("Layup"); break;
            case 0x26: sOption("Kadokawa Shoten"); break;
            case 0x27: sOption("Shall Luck"); break;
            case 0x28: sOption("Squaresoft"); break;
            case 0x2B: sOption("Tom Create"); break;
            case 0x2D: sOption("Namco"); break;
            case 0x2E: sOption("Movic(?)"); break;
            case 0x2F: sOption("E3 Staff(?)"); break;
            case 0x31: sOption("Vanguard"); break;
            case 0x32: sOption("Megatron"); break;
            case 0x33: sOption("Wiz"); break;
            case 0x34: sOption("Capcom"); break;
            default: sOption("(unknown publisher)")
            }
            sOption(File.read_uint8(p+5),"1sttrk: ");
        }
    }
    else if(Binary.compare("3026b2758e66cf11a6d900aa0062ce6c")) {
        bDetected = 1;
        sName = "Windows Media (.WMV/WMA)";
    }
    else if(Binary.compare("'XAD!'")) {
        bDetected = 1;
        sName = "Exotic AdLib module (.XAD)";
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0x04,0x24));
            sOptionT(File.read_ansiString(0x28,0x24),"by: ");
        }
    }
    else if(Binary.compare("'Extended Module:'")) {
        bDetected = 1;
        sName = "Fast Tracker 2 Extended module (.XM)";
        sVersion = File.read_ansiString(0x26,0x14).trim();
        if(Binary.isVerbose())
            sOptionT(File.read_ansiString(0x11,0x14));
    }
    else if(Binary.compare("'FORM'........'XDIRINFO'")) {
        bDetected = 1;
        sName = "Extended MIDI chiptune (.XMI)";
        if(Binary.isVerbose())
            sOption(File.read_uint16(0x14,_LE),"×")
    }
    else if(Binary.compare("'YM'3.'!'") || Binary.compare("'YM3b!'")
          || Binary.compare("'YMT'3.'LeOnArD!'") || Binary.compare("'MIX1LeOnArD!'")) {
        //ref https://github.com/cpcsdk/libstsound/blob/master/Ymload.cpp
        bDetected = 1; malformed = 0; frm = 0; smp = 0; voc = 0; loop = 0; ddn = 0;
        sName = "ST-Sound chiptune (.YM)";
        sV = File.read_ansiString(0,4).replace(/!/,"");
        switch(sV) {
        case "YM1": sVersion = "YM1"; break;
        case "YM2": sVersion = "MADMAX specific"; break;
        case "YM3": sVersion = "YM-Atari"; break;
        case "YM3b": sVersion = "YM-Atari+loopinfo";
            loop=File.read_uint32(File.getSize()-4,_LE); break;
        case "YM4": sVersion = "YM-Atari extended"; break;
        case "YM5": case "YM6": sVersion = "Generic YM2149 extended"; break;
        case "MIX1": sVersion = "Atari Remix digital"; break;
        case "YMT1": case "YMT2": sVersion = "YM-Tracker"; break;
        }
        if(["YM2","YM3","YM3b"/*,"YM4"*/].indexOf(sVersion) >= 0) {//No YM4 in the wilderness, ignoring
            frm = (File.getSize-4)/14;
        }
        if(["YM5","YM6","YMT1","YMT2","MIX1"].indexOf(sV) >= 0) {
            if(File.read_ansiString(4,8)!="LeOnArD!") malformed = 1;
            if((["YM6!","YMT1","YMT2"].indexOf(sV) >=0)
                && (File.read_ansiString(File.getSize()-4)!="End!")) malformed=2;
            //if(sV==="YM4") p=0x1C; else
            if(["YM5","YM6"].indexOf(sV) >= 0) {
                ddn = File.read_uint16(0x14,_BE);
                loop = File.read_uint32(0x1C,_BE);
                p = File.read_uint16(0x20,_BE)+0x22;
                for(i=0;i<ddn;i++) {
                    ds = File.read_uint16(p,_BE); p += 2+ds;
                    if(p >= File.getSize()) {malformed = 3; break}
                }
            } else
            if(sV === "MIX1") {
                p = 0x18;
                smp = File.read_uint32(0x10,_BE);
                mixblk = File.read_uint32(0x14,_BE);
                for(i=0;i<mixblk;i++) p+=12; //u32 smpst,smplen; u16 repeat,rplfreq skipped
            } else
            if(["YMT1","YMT2"].indexOf(sV)>=0) {
                ddn = File.read_uint16(0x18,_BE);
                voc = File.read_uint16(0x0D,_BE);
                frm = File.read_uint32(0x10,_BE);
                p = 0x1E;
            }
            //read the three tags from here
            if(p>=File.getSize()) malformed = 4;
            else {
                t = p;
                t_ = File.findSignature(p,TOEOF,"00")-p;
                if(t_ >= 0) {
                    p += t_+1; a = p;
                    a_ = File.findSignature(p,TOEOF,"00")-p;
                    p += a_+1; c = p;
                    c_ = File.findSignature(p,TOEOF,"00")-p;
                    p += c_+1;
                    if(["YM5","YM6"].indexOf(sV) >= 0) {
                        frm = File.read_uint32(0x0C,_BE);
                        if(frm<<4 != File.getSize()-p-4) {
                            malformed = 5; sOption("frm/frames: "+(frm<<4)+"/"+(File.getSize()-p-4)) }
                    }
                }
            }
            if(Binary.isVerbose()) {
                sOptionT(File.read_ansiString(t,t_));
                sOptionT(File.read_ansiString(a,a_),"by: ");
                sOptionT(File.read_ansiString(c,c_));
            }
        }
        if(Binary.isVerbose()) {
            if(voc) sOption(voc,"voc:");
            if(smp) sOption(smp,"smp:");
            if(ddn) sOption(ddn, "digidrums:")
            if(frm) sOption(frm,"len:");
        }
        if(malformed) sVersion+="/malformed"+malformed;
    }
    else if(Binary.compare("'YMST'")) {
        bDetected = 1;
        sName = "MYST ST-YM module (.YMST,.YM)";
        if(Binary.isVerbose()) {
            p=4;
            for(i=0;i<48;i++) {
                p+=8; if(File.read_uint16(p-8,_BE)==0) break;
            }
            t=p;
            t_=File.findSignature(p,TOEOF,"00")-p;
            if(t_>=0) {
                p+=t_+1; a=p;
                a_=File.findSignature(p,TOEOF,"00")-p;
                p+=a_+1; c=p;
                c_=File.findSignature(p,TOEOF,"00")-p;
                //p+=c_+1 //unused
                if(Binary.isVerbose()) {
                    sOptionT(File.read_ansiString(t,t_));
                    sOptionT(File.read_ansiString(a,a_),"by: ");
                    sOptionT(File.read_ansiString(c,c_));
                }
            }
        }
    }
}

function isAnders0land() {
    //ref https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/amigasrc/players/wanted_team/Anders0land/SRC_Anders0land/Anders 0land_v1.asm
    if(!File.compare("'mpl'")) return false; //Check2
    p = File.read_uint32(4,_BE); if(p > File.getSize() || (p&1)) return false;
    songp = p+8;
    if(!File.compare("'mdt'",p)) return false;
    p += File.read_int32(p+4,_BE); if(p > File.getSize() || (p&1)) return false;
    if(!File.compare("'msm'",p)) return false;
    p += File.read_int32(p+4,_BE); if(p < File.getSize()) return false;
    sz = p;
    smpp = songp+File.read_int32(songp-4,_BE);
    smpsz = File.read_int32(smpp-4,_BE);
    smp = (File.read_int16(songp+20,_BE) - File.read_int16(songp+18,_BE)) >> 2;
    songsz = songp-8;
    x = (File.read_int16(songp+4,_BE) - File.read_int16(songp+2,_BE)) >> 2;
    p = File.read_int16(songp,_BE);
    ord = File.read_int16(songp+6,_BE)-p-File.read_int32(songp+p+12,_BE);
    return true
}
if(!bDetected && isAnders0land()) {
    bDetected = 1;
    sName = "Anders 'Zonix' 0land's Music & Player module (.HOT)";
    sVersion = "v"+File.read_ansiString(3,1);
    if(Binary.isVerbose()) {
        if(x > 1) sOption(x,"x");
        sOption("ord:"+ord+" smp:"+smp+" songsz:"+Hex(songsz)+" smpsz:"+Hex(smpsz));
        if(sz === File.getSize()) sOption("sz:"+sz);
        else sOption("sz:"+sz+" (actual:"+File.getSize()+")")
    }
}

//signature-enabled detection end


// AND NOW,
// THE HEAVIEST STUFF GOES DOWN HERE
// THE SANITY CHECK-STYLE DETECTION
// (* It's still hella fast tho, no worries)

function isASC1() { //basically ASC0 + loop pos
    //ref https://bulba.untergrund.net/Ay_Emul29.src.7z/Players.pas -> FoundASC1
    if(File.getSize() < 9) return false;
    ptntp = File.read_uint16(2,_LE); ord = File.read_uint8(8); //patterns table ptr & num of positions
    if(ptntp-ord != 9 && ptntp-ord != 72) return false;
    smptp = File.read_uint16(4,_LE); if(smptp > File.getSize()) return false; //samples table ptr
    orntp = File.read_uint16(6,_LE); if(orntp > File.getSize()) return false; //ornaments table ptr
    if(File.read_uint16(smptp,_LE) != 0x40 || File.read_uint16(orntp,_LE) != 0x40) return false;
    j3 = 0;
    for(j1=0; j1 < ord; j1++) {
        p = File.read_uint8(9+j1); if(j3 < p) j3 = p; }
    if(File.read_uint16(ptntp,_LE) != (j3+1)*6) return false;
    j = File.read_uint16(orntp+0x40-2,_LE)+orntp;
    while((j < File.getSize()) && (j < 65535) && !(File.read_uint8(j)&0x40))  j += 2;
    malformed = "";
    if(j>65534 || j>=File.getSize())
      if(Binary.isHeuristicScan()) malformed = "/malformed";
      else return false;
    sz = j+2; delay = File.read_uint8(0); loop = File.read_uint8(1);
    return true
}
if(!bDetected && Binary.isDeepScan() && isASC1()) {
    bDetected = 1; sVersion = "v1.x-2.x"+malformed;
    sName = "ASC Sound Master module (.ASC)";
    if(Binary.isVerbose()) {
        pt = File.findSignature(8,0x80,"'ASM COMPILATION OF '")+0x13;
        if(pt > 8) {
            pa = File.findSignature(pt+0x13,0x20,"' BY '");
            t = File.read_ansiString(pt,pa-pt); a = File.read_ansiString(pa+4,0x12);
            sOptionT(t); sOptionT(a,"by: ")
        }
        sOption("delay:"+delay+" loop:"+loop+" len:"+sz)
    }
}

function isASC0() {
    //ref https://bulba.untergrund.net/Ay_Emul29.src.7z/Players.pas -> FoundASC0
    if(File.getSize() < 8) return false;
    ptntp = File.read_uint16(1,_LE); ord = File.read_uint8(7); //patterns table ptr & num of positions
    if(ptntp-ord != 8 && ptntp-ord != 71) return false;
    smptp = File.read_uint16(3,_LE); if(smptp > File.getSize()) return false; //samples table ptr
    orntp = File.read_uint16(5,_LE); if(orntp > File.getSize()) return false; //ornaments table ptr
    if(File.read_uint16(smptp,_LE) != 0x40 || File.read_uint16(orntp,_LE) != 0x40) return false;
    j3 = 0;
    for(j1=0; j1 < ord; j1++) {
        p = File.read_uint8(8+j1); if(j3 < p) j3 = p; }
    if(File.read_uint16(ptntp,_LE) != (j3+1)*6) return false;
    j = File.read_uint16(orntp+0x40-2,_LE)+orntp;
    while((j < File.getSize()) && (j < 65535) && !(File.read_uint8(j)&0x40))  j += 2;
    malformed = "";
    if(j > 65534 || j >= File.getSize())
        if(Binary.isHeuristicScan()) malformed = "/malformed";
        else return false;
    sz = j+2; delay = File.read_uint8(0);
    return true
}
if(!bDetected && Binary.isDeepScan() && isASC0()) {
    bDetected = 1; sVersion = "v0.x"+malformed;
    sName = "ASC Sound Master module (.AS0)";
    if(Binary.isVerbose()) {
        pt = File.findSignature(7,0x80,"'ASM COMPILATION OF '")+0x13;
        if(pt > 7) {
            pa = File.findSignature(pt+0x13,0x20,"' BY '");
            t = File.read_ansiString(pt,pa-pt); a = File.read_ansiString(pa+4,0x12);
            sOptionT(t); sOptionT(a,"by: ")
        }
        sOption("delay:"+delay+" sz:"+sz)
    }
}

function isBPSoundMon() {
    //ref https://github.com/tonioni/WinUAE/blob/master/prowizard/rippers/BP-Soundmonitor.c
    if(File.getSize() < 0x200) return false;
    if(!Binary.compare("'V.'3.",0x1A)) return false;
    for(j=0; j < 15; j++) {
        if(File.read_uint8(32+j*32) == 0xFF) continue;
        if(File.read_uint8(63+j*32) > 0x40) return false
    }
    allsmpsz = 0;
    for(k=0; k < 15; k++)
        if(File.read_uint8(32+32*k) < 0xFF)
            allsmpsz += (File.read_uint16(56+32*k,_BE))*2;
    j = File.read_uint8(29);
    sz = allsmpsz + j*64;
    j = 0; l = File.read_uint16(30,_BE);
    if(525+l*16 > File.getSize()) return false; //might want to add a few more checks...
    for(k=0; k < l; k++) {
        p = File.read_uint16(512+16*k,_BE); if(p>j) j = p;
        p = File.read_uint16(516+16*k,_BE); if(p>j) j = p;
        p = File.read_uint16(520+16*k,_BE); if(p>j) j = p;
        p = File.read_uint16(524+16*k,_BE); if(p>j) j = p;
    }
    sz += 512 + j*48 + l*16;
    return true
}
if(!bDetected && Binary.isDeepScan() && isBPSoundMon()) {
    bDetected = 1;
    sName = "BP SoundMon module (.BP)";
    sVersion = "v"+File.read_ansiString(0x1C,1);
    if(Binary.isVerbose()) {
        sOptionT(File.read_ansiString(0,0x19));
        sOption("sz:"+sz); if(File.getSize() != sz) sVersion += "/malformed"
    }
}

function isFuchs() {
    //ref https://github.com/tonioni/WinUAE/blob/master/prowizard/rippers/FuchsTracker.c
    if(File.getSize() < 0xC0) return false;
    allsmpsz = File.read_uint32(0x0A,_BE);
    if((allsmpsz<=2) || (allsmpsz>=65535*16)) return false;
    smpdescs = 0;
    for(k=0; k<16; k++) {
        sz = File.read_uint16(0x0E+k*2,_BE);
        lpst = File.read_uint16(0x4E+k*2,_BE);
        if(sz < lpst) return false;
        if(File.read_uint8(0x2E+k*2) > 0x40) return false; //vol
        smpdescs += sz
    }
    if((smpdescs<=2) || (smpdescs>allsmpsz)) return false;
    k = 0; //last pattern
    for(j=0; j<40; j++) {
        pt = File.read_uint8(113+j*2);
        if(pt>40) return false;
        if(pt>k) k = pt
    }
    k+=1;
    k*=1024;
    if(k+200 > File.getSize()) return false;
    sz = smpdescs+k+204;
    return true
}
if(!bDetected && Binary.isDeepScan() && isFuchs()) {
    bDetected = 1;
    sName = "FuchsTracker module (.FUCHS)";
    if(Binary.isVerbose()) {
        sOption("sz:"+sz); if(File.getSize() != sz) sVersion += "/malformed"
    }
}

function isGMC() {
    //ref https://github.com/tonioni/WinUAE/blob/master/prowizard/rippers/GMC.c
    if(File.getSize() < 444) return false;
    //smp descriptions
    allsmpsz = 0; j = 0;
    for(k=0; k < 15; k++) {
        o = File.read_uint16(4+16*k,_BE)<<1; //length
        if(o > 0xFFFF) return false;
        n = File.read_uint16(12+16*k,_BE); //size
        if(n > o) return false;
        if(File.read_uint8(7+16*k) > 0x40) return false; //vol
        allsmpsz += o;
        if(o != 0) j = k+1;
    }
    if(allsmpsz <= 4) return false;
    ptntsz = File.read_uint8(0xF3); //ptn table size
    if(ptntsz > 0x64 || !ptntsz) return false;
    ptn = 0;
    for (i=0; i < 100; i++) { //ptn order table
        k = File.read_uint16(0xF4 + i * 2,_BE);
        //if (k & 0x03FF) return false; this is from another, weird source
        kshr10 = k>>10; if(kshr10<<10 != k) return false;
        if(kshr10 > ptn) ptn = kshr10;
    } ptn++;
    if(ptn > 0x64) return false;
    m = false;
    for (i=0; i < ptn; i++) { //test pattern data
        for (j = 0; j < 256; j++) {
            ofs = 0x1BC + i*0x400 + j*4;
            if(ofs > 0xFFFC || ofs > File.getSize()) return false;
            d0 = File.read_uint8(ofs); if(d0 > 3) return false;
            d2 = File.read_uint8(ofs+2)&0xF; //if(d2 > 0x90) return false; //wha-- It can't even be >15...
            d3 = File.read_uint8(ofs+3);
            if(d2 == 3 && d3 > 0x40) return false; //vol effect
            if(d2 == 4 && d3 > 0x63) return false;
            if(d2 == 5 && d3 > ptntsz+1) return false;
            if(d2 == 6 && d3 >= 0x02) return false;
            if(d2 == 7 && d3 >= 0x02) return false;
            if(d2 > 0 && File.read_uint8(ofs+1) > 0) m = true; //a non-empty note
        }
    }
    if(!m) return false;
    sz = allsmpsz + ptn*1024 + 0x1BC;
    return true
}
if(!bDetected && Binary.isDeepScan() && isGMC()) {
    bDetected = 1;
    sName = "Game Music Creator module (.GMC)";
    if(File.isVerbose()) {
        sOption("ord:"+ord+" ptn:"+ptn+" sz:"+sz); if(sz != File.getSize()) sVersion = "malformed"
    }
}


function isProTracker1() {
    //ref https://bitbucket.org/zxtune/zxtune/src/develop/src/formats/chiptune/aym/protracker1.cpp
    // & https://bulba.untergrund.net/Ay_Emul29.src.7z/Formats.pas -> FoundPT1
    if(File.getSize() < 0x66) return false;
    tempo = File.read_uint8(0); if((tempo < 2) || (tempo > 15)) return false; //delay
    ptntp = File.read_uint16(0x43,_LE); if(ptntp >= File.getSize()) return false; //patterns table pointer
    numofpos = File.read_uint8(1);// if(len == 0) return false; //numofpositions, can be corrupted?
    loop = File.read_uint8(2);
    j = 0; j1 = 65535;
    for(i=0; i < 0x10; i++) { //samples pointers
        sp = File.read_uint16(3+i*2,_LE); if(sp > File.getSize()) return false;
        if(j < sp) j=sp;
        op = File.read_uint16(0x23+i*2,_LE); if(op > File.getSize()) return false;
        if(op != 0 && j1 > op) j1 = op
    }
    if((j1 < 0x67) || (j < 0x67) || (j > 65534) || (j > File.getSize())
      || (j + File.read_uint8(j) * 3 + 2 != j1)) return false;
    j = 0;
    for(i=0; i < 0x10; i++) { //ornaments pointers
        op = File.read_uint16(0x23+i*2,_LE); if(op > File.getSize()) return false;
        if(j < op) j = op
    }
    if(j<0x67) return false;
    len = j+0x40; if(len>65536) return false; if(len>File.getSize()+1) return false;
    j = 0x63;
    while(j <= ptntp && File.read_uint8(j) < 0xFF) j++;
    if(j+1 != ptntp) return false;
    ord = j-0x63; if(loop > ord) return false;
    return true
}
if(!bDetected && Binary.isDeepScan() && isProTracker1()) {
    sName = "ProTracker module (.PT1)"; sVersion = "v1.x"; bDetected = 1;
    if(Binary.isVerbose()) {
        sOptionT(File.read_ansiString(0x45,0x1E)); //musicname
        sOption("tempo:"+tempo+" ord:"+ord+" len:"+len)
    }
}

function isProTracker2() {
    //ref https://bitbucket.org/zxtune/zxtune/src/develop/src/formats/chiptune/aym/protracker2.cpp
    // & https://bulba.untergrund.net/Ay_Emul29.src.7z/Players.pas -> FoundPT2
    if(File.getSize() < 132) return false; //the smallest actual mod in all collections is 521 long
    tmp = File.read_uint8(0); if(tmp<2 || tmp>15) return false;
    ord = File.read_uint8(1); if(!ord) return false;
    loop = File.read_uint8(2); if(loop > ord) return false;
    smp0 = File.read_uint16(3,_LE); orn0 = File.read_uint16(0x43,_LE);
    if(orn0-smp0>File.getSize()+2 || orn0<smp0) return false;
    ptnp = File.read_uint16(0x63,_LE); if(ptnp<0x65 || ptnp>File.getSize()) return false;
    for(i=0; i < 0x30; i++) { //sample pointers and ornament pointers
        p = File.read_uint16(3+i*2,_LE);
        if(!p && (/*p < 0x65 ||*/ p > File.getSize()-2)) return false; // Ashnar/HBKSA2.pt2 .___.
    }
    if(File.read_uint8(0x64) > 1) return false;
    for(ptn=0; ptn <= 0xFF; ptn++) {
        if(0x83+ptn > File.getSize()-2) return false;
        posn = File.read_uint8(0x83+ptn);
        if(posn == 0xFF) break;
    }
    if(!ptn || ptn>0xFF) return false; //how can it be >0xFF...
    return (ord == ptn)
}
if(!bDetected && Binary.isDeepScan() && isProTracker2()) {
    sName = "ProTracker module (.PT2)"; sVersion = "v2.x"; bDetected = 1;
    if(Binary.isVerbose()) {
        if(smp0>0x82 && orn0>0x82 && ptn>0x82)
            sOptionT(File.read_ansiString(0x65,0x1E));
        sOption("tmp:"+tmp+" ord:"+ord+" ptn:"+ptn)
    }
}

function isProTracker3() { //PT3's detection, ALSO sanity checks because SOME people -_-
    //ref https://bitbucket.org/zxtune/zxtune/src/develop/src/formats/chiptune/aym/protracker3_compiled.cpp
    ftn = File.read_uint8(0x63); //0=Pro Tracker, 1=Sound Tracker, 2=ASM or PSC, 3=RealSound.
    tmp = File.read_uint8(0x64); if((tmp<3)||(tmp>63)) return false;
    len = File.read_uint8(0x65); if(len>0x55) return false;
    loop = File.read_uint8(0x66); if(loop>63) return false;
    pptn = File.read_uint16(0x67,_LE); if(pptn>File.getSize()-2) return false;
    for(i=0;i<0x30;i++) if(File.read_uint16(0x69+i*2,_LE)>File.getSize()-2) return false;
    for(ord=0;ord<=0xFF;ord++) {
        if(0xC9+ord>File.getSize()-2) return false;
        posn=File.read_uint8(0xC9+ord);
        if(posn==0xFF) break;
    }
    if((ord==0) || (ord>0xFF)) return false;
    return (ord==len)
}
if(!bDetected && Binary.isDeepScan() && isProTracker3()) {
    sName = "ProTracker module (.PT3)"; sVersion = "v3."+File.read_ansiString(0x0D,1);
    bDetected = 1;
    if(Binary.isVerbose()) {
        sOptionT(File.read_ansiString(0x1E,0x20));
        sOptionT(File.read_ansiString(0x42,0x20),"by: ")
        sOption("tmp:"+tmp+" ord:"+len)
    }
    switch(ftn) {
        case 0: sOption("Pro Tracker tuning"); break;
        case 1: sOption("Sound Tracker tuning"); break;
        case 2: sOption("ASM/PSC tuning"); break;
        case 3: sOption("RealSound tuning"); break;
        default: sOption("Unknown tuning")
    }
}

function isSoundTrackerProUnp() {
    //ref https://bitbucket.org/zxtune/zxtune/src/develop/src/formats/chiptune/aym/soundtracker.cpp
    // & https://bulba.untergrund.net/STPDocs.7z -> Xplay79f.txt
    if(File.getSize()<3009+576) //header + patterns
        return false;
    const stpsmpnum=15; p=0;
    for(smp=0;smp<15;smp++) {
        for(i=0;i<32;i++) { j = File.read_uint8(p); if(j>0x0F) return false; p++ } //levels
        for(i=0;i<32;i++) { j = File.read_uint8(p); if(j&0x20) return false; p++ } //noises
        for(i=0;i<32;i++) { p++; j = File.read_uint8(p); if(j>0x1F) return false; p++ } //additions
        for(i=0;i<2;i++) { j = File.read_uint8(p); if(j>0x1F) return false; p++ } //loops
    }
    for(i=0;i<256;i++) { j = File.read_uint8(p); if((j<1) || (j>0x20)) return false; p+=2 } //positions
    // at this point, p should be 15*0x82
    if(File.read_uint8(p)&0x80) return false;
    p++;  p+=32*17; //ornaments
    dly=File.read_uint8(p); if((dly<1) || (dly>0x0F)) return false; p++;
    pts=File.read_uint8(p); if((pts<1) || (pts>0x40)) return false;
    return true;
}
if(!bDetected && Binary.isDeepScan() && isSoundTrackerProUnp()) {
    sName = "Sound Tracker Pro module (.STF)"; sVersion  = "uncompiled/unpacked"; bDetected = 1;
}

function isSoundTrackerPro() {
    // taken from https://bulba.untergrund.net/STPDocs.7z -> stp.txt
    tmp = File.read_uint8(0); if((tmp == 0) || (tmp > 50)) return false;
    tabl1 = File.read_uint16(1,_LE); if(File.getSize()-2 < tabl1) return false;
    tabl2 = File.read_uint16(3,_LE); if(File.getSize()-2 < tabl2) return false; //pattern descriptors
    tabl3 = File.read_uint16(5,_LE); if(File.getSize()-2 < tabl3) return false; //ornament offsets
    tabl4 = File.read_uint16(7,_LE); if(File.getSize()-2 < tabl4) return false; //sample offsets
    len = File.read_uint8(tabl1); if(tabl2 != tabl1+2+len*2) return false;
    for(i=0;i<len;i++)  if(File.getSize() < File.read_uint16(tabl2+i*2,_LE)) return false;
    if(File.getSize() < tabl4+30) return false;
    for(i=0;i<15;i++)  if(File.getSize() < File.read_uint16(tabl4+i*2,_LE)) return false;

    return true;
}
if(!bDetected && Binary.isDeepScan() && isSoundTrackerPro()) {
    sName = "Sound Tracker Pro module (.STP)"; sVersion  = "uncompiled"; bDetected = 1;
    sOption("tmp:"+tmp+" ord:"+len)
}

function isSQTracker() { 
    //ref https://bulba.untergrund.net/Ay_Emul29.src.7z/Players.pas -> FoundSQT
    if(File.getSize()<17 || File.getSize()>0x3600) return false;
    //sz = File.read_uint16(0,_LE); if(File.getSize() != sz) return false; //nobody seems to check this!
    smptp = File.read_uint16(0x02,_LE); if(smptp < 10) return false; //samples table ptr
    orntp = File.read_uint16(0x04,_LE); ptntp = File.read_uint16(0x06,_LE); //ornaments & patterns table ptrs
    postp = File.read_uint16(0x08,_LE); lpp = File.read_uint16(0x0A,_LE); //positions table ptr & loop ptr
    if(orntp <= smptp+1) return false; if(ptntp < orntp) return false;
    if(postp <= ptntp) return false; if(lpp < postp) return false;
    membase = smptp-10; //to eventually realign to file, not memory
    if(lpp-membase >= File.getSize()) return false;
    j1 = postp-membase; b = File.read_uint8(j1); if(b==0) return false; //can't have 0 patterns
    ord = 0; j2 = 0;
    while(b) { //find the highest pattern #
        if(j1+7 >= File.getSize()) return false;
        ord++;
        if(j2 < (b&0x7F)) j2 = b&0x7F; j1 += 2; b = File.read_uint8(j1);
        if(j2 < (b&0x7F)) j2 = b&0x7F; j1 += 2; b = File.read_uint8(j1);
        if(j2 < (b&0x7F)) j2 = b&0x7F; j1 += 3; b = File.read_uint8(j1)
    }
    ptn = j2;
    p = File.read_uint16(smptp-membase+2,_LE);
    if(p-ptntp-2 != j2*2) return false;
    p = 12; //len = j1+7;
    j2 = File.read_uint16(12,_LE);
    for(j1 = 1; j1 <= ((orntp-smptp)>>1); j1++) {
        p += 2; j3 = File.read_uint16(p,_LE);
        if(j3-j2 != 0x62) return false;
        j2 = j3;
    }
    for(j1 = 1; j1 <= ((ptntp-orntp)>>1); j1++) {
        p += 2; j3 = File.read_uint16(p,_LE);
        if(j3-j2 != 0x22) return false;
        j2 = j3;
    }

    return true;
}
if(!bDetected && Binary.isDeepScan() && isSQTracker()) {
    sName = "Scalex Qjeta Tracker module (.SQT)"; sVersion  = "compiled"; bDetected = 1;
    sOption("ord:"+ord+" ptn:"+ptn)//+" len:"+len)
}

function isST() {
    //ref https://bulba.untergrund.net/Ay_Emul29.src.7z/Players.pas -> FoundST
    if(File.getSize() < 6) return false;
    tempo = File.read_uint8(0); if(tempo == 0 || tempo > 0x20) return false; //delay
    postp = File.read_uint16(1,_LE); if(postp<0x7E || postp>File.getSize()) return false; //positions ptr
    orntp = File.read_uint16(3,_LE); if(orntp<0x7E || orntp>File.getSize()) return false; //ornaments ptr
    ptntp = File.read_uint16(5,_LE); if(ptntp<0x7E || ptntp>File.getSize()) return false; //patterns ptr
    ord = File.read_uint8(postp);
    j2 = ptntp - orntp; if(j2 == 0) return false; //j2<0: ST, >0: S_SONIC
    fID = false;
    if(j2 > 0) { if((j2%0x21) > 0) return false; }
    else if((j2%0x21) > 0) {
        if((j1<55) || (((j1-55)%0x21) > 0)) return false;
        fID = true; //we'll check for a preset ID at the end
    }
    j = File.read_uint8(postp)*2+3;
    if(j2 < 0) { if(j+j2 != 0) return false; }
    else if(j+postp-orntp != 0) {
        if((ptntp < 82) || (j+postp-ptntp+55 != 0)) return false;
        fID = true;
    } 
    j = orntp+0x21;
    if(j > 65535 || j > File.getSize()) return false;
    while(j) { j--; if(File.read_uint8(j) > 0) return false; if(j == orntp) break }
    j = ptntp; j1 = 0; j2 = 0; ptn = 0;
    while((j+6 <= File.getSize()) && (j+6 < 65536) && (File.read_uint8(j) < 0xFF)) {
        //find the highest channel data pointer
        j++; //ptn #
        j2 = File.read_uint16(j,_LE); if(j1 < j2) j1 = j2; j += 2; //channel A data ofs
        j2 = File.read_uint16(j,_LE); if(j1 < j2) j1 = j2; j += 2; //ditto B
        j2 = File.read_uint16(j,_LE); if(j1 < j2) j1 = j2; j += 2; //ditto C
        ptn++
    }
    if((File.read_uint8(j) < 0xFF) ) return false;
    if(j1 > File.getSize()) return false;
    if(File.read_uint8(j1-1) < 0xFF) return false;
    malformed = 0; //some modules are a bit more broken! Like "- unknown/ay5.stc" which lost some of its final bytes
    while(1) { //scan through the channel data at the end of file
        if(0x83 <= File.read_uint8(j1) <= 0x8E) j1++; //I don't get what this does, no docs either
        j1++;
        if(j1 > 65535) return false;
        if(j1 > File.getSize())
            if(Binary.isHeuristicScan()) { malformed = 1; break }
            else return false; 
        if((File.read_uint8(j1) == 0xFF) || (j1 == File.getSize())) break
    }
    if(File.read_uint8(j1) == 0xFF) len = j1+1;
    // len = File.read_uint16(0x19,_LE); // because ~somebody~ used it for names
    if(fID)
      if( (File.read_ansiString(ptntp-55,29) != 'SOUND TRACKER COMPILATION OF ') &&
        (File.read_ansiString(ptntp-55,28) != 'KSA SOFTWARE COMPILATION OF ') ) return false;

    return true;
}
if(!bDetected && Binary.isDeepScan() && isST()) {
    sName = "Sound Tracker module (.STC)"; sVersion  = "v1.x"; bDetected = 1;
    if(malformed) sVersion += "/malformed"+malformed;
    sz = File.read_uint16(0x19,_LE); i_d = File.read_ansiString(7,18);
    if(['SONG BY ST COMPILE','SONG BY MB COMPILE','SONG BY ST-COMPILE',
      'SOUND TRACKER v1.1','S.T.FULL EDITION  ','SOUND TRACKER v1.3'].indexOf(i_d) >= 0)
        msg = '';
    else
        msg = i_d;
    if(sz != File.getSize()) { //the message must've hit the size field, HAPPENS
        if(Binary.isVerbose()) sOption("ord:"+ord+" ptn:"+ptn+" sz:"+len);
        if(32 <= (sz&0xFF) <= 0x7F) {
            msg += String.fromCharCode(sz&0xFF);
            if(32 <= (sz>>8) <= 0x7F) msg += String.fromCharCode(sz>>8)
        }
    } else
        //if(sz == len)
            if(Binary.isVerbose()) sOption("ord:"+ord+" ptn:"+ptn+" sz:"+sz); /*else;
        else if(Binary.isVerbose())
          sOption("ord:"+ord+" ptn:"+ptn+" sz:"+sz+" calc.sz:"+len); //keeping len in: debug
          */
    if(Binary.isVerbose()) sOptionT(msg,"msg: ");
}

function isST3() {
    //ref https://bulba.untergrund.net/Ay_Emul29.src.7z/Players.pas -> FoundST3
    if(File.getSize() < 8) return false;
    orntp = File.read_uint16(5,_LE); if(orntp > File.getSize()-6) return false; //ST3 ornaments/STC patterns table ptr
    ptntp = File.read_uint16(7,_LE); //ST3 patterns table ptr
    j1 = ptntp-orntp; if(j1 <= 0) return false;
    smptp = File.read_uint16(3,_LE); //samples table ptr
    j2 = orntp-smptp; if(j2 <= 0) return false;
    postp = File.read_uint16(1,_LE); //positions table ptr
    j3 = smptp-postp; if(j3 > File.getSize()) return false; 
    j4 = postp-9; if(j4<=0) return false;
    fID = false;
    if(j4%130) {
        if(j4 < 55 || ((j4-55)%130)) return false;
        fID = true
    }
    smp = File.read_uint8(smptp); if(!smp || smp>16) return false; // smp # , j5
    j = smp*130+9; if(fID) j += 55;
    if(posptr != j) return false;
    ord = File.read_uint8(j); if(!ord) return false; //pos # , j6
    j += ord*2+1;
    if(smptp != j && smptp != j+2) return false;
    orn = File.read_uint8(orntp); if(!orn || orn>16) return false; // orn # , j7
    j = smptp+smp*2+1+orn*32; if(orntp != j) return false;
    j += orn*2+1; if(File.read_uint16(ptntp,_LE) != j) return false;
    base = File.read_uint16(smptp+1,_LE)-9;
    if(fID) base -= 55; if(base < 0) return false;
    j = File.read_uint16(File.read_uint8(orntp+1),_LE)-base;
    if(j != smptp+j5*2+1) return false;
    for(i=j; i < j+32; i++) if(File.read_uint8(i)) return false;
    j8 = -1; j = postp+2;
    for(i=0; i<ord; i++) {
        b = File.read_uint8(j); if(b%6) return false;
        if(j8 < b) j8 = b; j += 2
    }
    len = ptntp+j8+6;
    if(len-1 < File.getSize()) return false;
    if(base+j > 65536) return false;
    if(fID && !Binary.compare("''KSA SOFTWARE COMPILATION OF ''",9)) return false;
    delay = File.read_uint8(0) //delay
    return true;
}
if(!bDetected && Binary.isDeepScan() && isST()) {
    sName = "Sound Tracker module (.ST3)"; sVersion  = "v3.0"; bDetected = 1;
    if(malformed) sVersion += "/malformed"+malformed;
    if(Binary.isVerbose()) {
        sOptionT(FIle.read_ansiString(9,55));
        sOption("delay:"+delay+" ord:"+ord+" ptn:"+ptn+" smp:"+smp+" len:"+len+" @"+Hex(base));
    }
}

function isSidMon1() {
    //ref http://asle.free.fr/prowiz/prowiz.src.zip / r/sidmon1.c
    malformed = false; n = 0;
    for(j=0;j<100;j++) {
        p = File.read_uint16(j+2,_BE);
        if(Binary.compare("' SID-MON BY R.v.VLIET'",p+2+j)) return true; //not for eg. "beat to the pulp"
    }
    if((p+2 > File.getSize()) || (p < 16)) return false;
    if((File.read_uint8(6) != 0xFF) || (File.read_uint8(7) != 0xD4)) return false;
    n = File.read_uint16(2+p-2,_BE);
    o = File.read_uint16(2+p-6,_BE);
    j = File.read_uint16(2+p-10,_BE);
    if((p+n+6  > File.getSize()) || (p+o+6 > File.getSize())) return false;
    if((n <= o) && (n != 1)) return false;
    if(n == 1) {
        pt = p+2+o; if(pt+4 > File.getSize()) return true;
        pt += 4; l = 1; n = o-j;
        while(l < n) {
            l = File.read_uint32(pt,_BE);
            if((pt+4 > File.getSize()) || (!l)) return true;
            pt += 4;
        }
        pt -= 4
    }
    else {
        n += p+2;
        p = File.read_uint16(n+2,_BE); if((n+p > File.getSize()) || (p%32)) return false;
        if(!p) {
            for(;;p+=32) {
                if(p+36 > File.getSize()) return false;
                j = File.read_uint32(n+p+4,_BE);
                k = File.read_uint32(n+p+8,_BE);
                l = File.read_uint32(n+p+12,_BE);
                if((j > k) || (k >= l)) break
            }
        }
        o = 0;
        for(j=0; j < p/32; j++) {
            k = File.read_uint16(p+14+j*32,_BE);
            if(k > o) o = k
        }
        n += o+4;
        if(n > File.getSize()) malformed = true;
    }
    return true;
}
if(!bDetected && isSidMon1()) {
    sName = "SIDMON module (.SID)"; sVersion  = "v1"; bDetected = 1;
    if(malformed) sVersion += "/malformed";
    if(Binary.isVerbose()) {
        if(n) sOption("sz:"+n);
        else sOption("at pos. "+Hex(j))
    }
}

function isSoundtrackerMOD() {
    //ref http://asle.free.fr/prowiz/prowiz.src.zip / r/SoundTracker.c
    if(File.getSize() < 555) return false;
    allsmpsz = 0;
    for(k=0; k < 15; k++) {
        j = File.read_uint16(42+k*30,_BE)*2;
        if((File.read_uint8(44+k*30) > 0x0F) || (File.read_uint8(45+k*30) > 0x40)) return false;
        m = File.read_uint16(46+k*30,_BE);
        n = File.read_uint16(48+k*30,_BE);
        allsmpsz += j;
//_log("4:k="+k+" j="+j+" m="+m+" n="+n);
        if(j > 0xFFFF || m > 0xFFFF || n > 0xFFFF) return false;
        if(n > j+2) return false;
        if(j && m >= j) return false;
        if(m && !n) return false;
        if(j && j==m) return false;
        if(m && !j) return false;
    }
//_log("5:allsmpsz="+allsmpsz);
    if(allsmpsz < 8) return false;
    ord = File.read_uint8(470);
//_log("6:ord="+ord);
    if(!ord) return false;
    malformed = false;
    if(ord > 127) malformed = 1; //← - unknown/2010.mod plays just fine with ord = 128, buuut
    k = 0; ord_ = 0;
    for(j=0; j < 128; j++) {
        x = File.read_uint8(472+j);
        if(x) ord_++;
        if(x > k) k = x;
        if(x > 127) return false;
    }
    k++; ord_++;
//_log("7:k="+k+" ord_="+ord_);
    if(k*1024+600 > File.getSize()) return false;
    for(j=0; j < k*256; j++) {
        x = File.read_uint8(600+j*4);
        if((x&0xF0) > 0x10) return false;
//_log("8:"+Hex(600+j*4)+" x="+Hex(x));
        if((x&0x0F) > 0x03) return false;
//_log("9:");
        x1 = File.read_uint8(601+j*4);
        l = (x&0x0F)*256 + x1;
//_log("10: l="+Hex(l));
        if(l && (l < 0x71)) return false;
        x2 = File.read_uint8(602+j*4);
//_log("11: x="+Hex(x)+" x1="+Hex(x1)+ " x2="+Hex(x2));
        if( (x || x1) && !(x2 & 0xF0) )
            if(Binary.isHeuristicScan()) malformed = 2;
            else return false; //2010.mod breaks this too and still plays!
//_log("12:");
    }
    sz = allsmpsz+k*1024+600;
    return true;
}
if(!bDetected && isSoundtrackerMOD()) {
        sName = "SoundTracker module (.STK,.MOD)"; bDetected = 1;
        if(malformed) sVersion = "malformed#"+malformed;
        if(Binary.isVerbose()) {
            sOptionT(File.read_ansiString(0,0x14));
            //sOptionT(File.read_ansiString(0x14,0x16),"ins0: ");
            sOption("sz:"+sz+" ord:"+ord+"/"+ord_+" ptn:"+k)
        }
    }

function isADXAHX() { //non-module! sanity check a bit because 8000 is too broad
    if(!Binary.compare("8000")) return false;
    fmt = File.read_uint8(4);
    if([2,3,4,0x10,0x11].indexOf(fmt)<0) return false;
    if(File.read_uint8(6)!=4) return false; //4 bit per sample only
    if([1,2].indexOf(File.read_uint8(7))<0) return false; //1/2 ch only
    nV = File.read_uint8(0x12);
    if([3,4,5].indexOf(nV)<0) return false;
    return true;
}
if(!bDetected && Binary.isDeepScan() && isADXAHX()) {
    //from https://wiki.multimedia.cx/index.php/CRI_ADX_file
    bDetected = 1;
    sVersion = "";
    if([2,3,4].indexOf(fmt) >= 0)
        sName = "CRI ADX 4-bit ADPCM audio (.ADX)";
    else if([0x10,0x11].indexOf(fmt) >= 0)
        sName = "CRI AHX 4-bit ADPCM audio (.AHX)";
    switch(nV) {
        case 3: sVersion = "v3"; break;
        case 4: sVersion = "v4"; break;
        case 5: sVersion = "v4NL"
    }
    switch(fmt) {
        case 2: sVersion+=" PPC"; break;
        case 3: sVersion+=" std"; break;
        case 4: sVersion+=" exSc"; break;
        case 0x11: sVersion+=" AHX" }
    if(File.read_uint8(0x13) > 0) sVersion += " encrypted";
    if(Binary.isVerbose()) {
        sOption(File.read_ansiString(pcprt,6));
        pcprt = File.read_uint16(2,_BE)-2;
        sOption("blk: "+File.read_uint8(5));
        sOption("ch: "+File.read_uint8(7));
        sOption("sr: "+File.read_uint32(8,_BE)+"Hz");
        sOption("smp: "+File.read_uint32(0x0C,_BE));
    }
}

function isDigiIllu() {
    //ref https://github.com/tonioni/WinUAE/blob/master/prowizard/rippers/DigitalIllusion.c
    if(File.getSize()<17) return false;
    smp = File.read_uint16(0,_BE); if(smp > 31) return false; //num of samples
    ptntp = File.read_uint32(2,_BE); if(ptntp < smp*8+2) return false; //pattern table ptr
    ptndp = File.read_uint32(6,_BE);  if(ptndp-ptntp > 0x80) return false; //pattern data ptr
    smpdp = File.read_uint32(10,_BE); if(smpdp > 0xFFFF) return false; //sample data ptr
    if(ptndp <= ptntp || smpdp <= ptntp || smpdp <= ptndp) return false;
    if(ptntp > File.getSize() || ptndp > File.getSize() || smpdp > File.getSize()) return false;
    allsmpsz = 0; l = 0;
    for(j=0; j < smp; j++) {
        smpsz = File.read_uint16(j*8+14,_BE)<<1; if(smpsz > 0xFFFF) return false;
        lstart = File.read_uint16(j*8+18,_BE)<<1; if(lstart > 0xFFFF || lstart > smpsz) return false;
        lsz = File.read_uint16(j*8+20,_BE)<<1;
        if(lsz > 0xFFFF || lsz > smpsz+2 || lstart+lsz > smpsz+2 || (lstart && lsz <= 2)) return false;
        if((lstart || lsz > 2) && !smpsz) return false;
        if(File.read_uint8(16+j*8) > 0xF || File.read_uint8(17+j*8) > 0x40) return false; //fine & vol checks
        allsmpsz += smpsz
    }
    if(allsmpsz <= 2) return false;
    for(i=ptntp; i < ptndp-1; i++)
        if(File.read_uint8(i) > 0x80) return false;
    if(File.read_uint8(ptndp-1) < 0xFF) return false;
    sz = allsmpsz + File.read_uint32(10,_BE);
    return true
}
if(!bDetected && Binary.isDeepScan() && isDigiIllu()) {
    sName = "Digital Illusions packed module (.DI)"; bDetected = 1;
    if(Binary.isVerbose()) {
        sOption("sz:"+sz); if(sz != File.getSize()) sVersion = "malformed"
    }
}

function isPMD() {
    // ref https://raw.githubusercontent.com/ValleyBell/MidiConverters/master/pmd_SeqFormat.txt
    // & https://web.archive.org/web/20220928062748/https://lithcore.cn/2318/
    if(File.getSize() < 37) return false;
    nV = File.read_uint8(0); if(nV < 0xFF) if(nV > 0x0F) return false;
    for(i=0; i < 13; i++) {
        p = File.read_uint16(1+i*2,_LE);
        if((p && p < 0x1A)  || p+1 > File.getSize()) return false
    }
    extrap = File.read_uint16(0x19,_LE)-3; if(File.read_uint8(extrap+3) != 0xFE) return false;
    extra_type = File.read_uint8(extrap+2); if(extra_type < 0x40 || extra_type > 0x4F) return false;
    if(extra_type < 0x42) ttype = "PCP/P86";
    else if(extra_type<0x48) ttype = "PPS";
    else if(nV==0xFF) ttype = "PPZ"; else ttype = "FM Towns";
    extra = File.read_uint16(extrap,_LE)+1; if((extra > 0 && extra < extrap) || extra > File.getSize()) return false;
    for(i=0; i < 4; i++) {
        p = File.read_uint16(extra+i*2,_LE);
        if(p < 27 || p+1 > File.getSize()) return false
    }
    return true
}
if(/*!bDetected && */Binary.isDeepScan() && isPMD() ) {
    bDetected = 1;
    sName = "Professional Music Driver module (.M,M2)";
    sVersion = "v"+nV+" t"+Hex(extra_type).substr(0,2)+":"+ttype+" tagptrs:"+Hex(extra);
    if(Binary.isVerbose()) {
        fnames = [];
        if(extra_type >= 0x48) {
            n = File.read_codePageString(File.read_uint16(extra,_LE)+1,0x100,"Shift_JIS"); extra+=2;
            if(n != "") fnames.push("PPZ:"+n)
        }
        if(extra_type >= 0x42) {
            n = File.read_codePageString(File.read_uint16(extra,_LE)+1,0x100,"Shift_JIS"); extra+=2;
            if(n != "") fnames.push("PPS:"+n)
        }
        n = File.read_codePageString(File.read_uint16(extra,_LE)+1,0x100,"Shift_JIS"); extra+=2;
        if(n != "") fnames.push("PPC/P86:"+n);
        title = File.read_codePageString(File.read_uint16(extra,_LE)+1,0x100,"Shift_JIS");
        if(title == "\x1A") title = "";
        artist = File.read_codePageString(File.read_uint16(extra+2,_LE)+1,0x100,"Shift_JIS");
        if(artist == "\x1A") artist = "";
        arenji = File.read_codePageString(File.read_uint16(extra+4,_LE)+1,0x100,"Shift_JIS");
        if(arenji == "\x1A") arenji = "";
        rem = File.read_codePageString(File.read_uint16(extra+6,_LE)+1,0x100,"Shift_JIS");
        if(rem == "\x1A") rem = "";
        sOption(title);
        sOption(artist,"by: ");
        sOption(arenji,"mixed by: ");
        sOption(rem);
        sOption(fnames.join(", "),"fn: ")
    }
}

function isRobHubbardRH() {
    //from https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/amigasrc/players/wanted_team/RobHubbard/src/RobHubbard_v7.asm
    //the FX files not included -- TODO
    if(!Binary.compare("6000.... 6000.... 6000.... 6000.... 6000....  41FA.... ........ 4E7541FA"))
        return false; //Check2
    a2 = 0x40; d4 = 8;
    do { //loop2
        if(File.read_uint16(a2,_BE) == 0x2418) break;
        a2 += 2; d4--
    } while(d4);
    if(!d4) return false; //found2
    smp = d3 = File.read_uint8(a2-1)+1;
    a2 = 0x36; d4 = 5;
    do { //loop3
        if(File.read_uint16(a2,_BE) == 0x41FA) break;
        a2 += 2; d4--
    } while(d4);
    if(!d4) return false; //found3
    a2 += 2;
    a4 = a2;
    d4 = a2+File.read_uint16(a2,_BE)+2; //minus a3 = moduleptr, 0 in our case
    if(File.read_uint16(a4+2,_BE) == 0xD1FC) d4 += 0x40;
    a3 = d4-2; //again +moduleptr; then moduleptr[a6] = a3 (puts in sampleptr); a6 += 4;
    d5 = 0; a2 = a3;
    do { //loop4
        d1 = File.read_uint32(a3,_BE);
        if(d1 > 0x10000) return false;
        d1 += 6;
        d5 += d1;
        a3 += d1;
        d3--
    } while(d3);
    if(File.read_uint16(a3,_BE) != 0x4E71) return false; //at the EOF now
    a3 = 0; a0 = 130+a3;
    d0 = 10;
    do { //loop
        if(File.read_uint16(a0,_BE) == 0x41EB) { a0 += 2; break }
        a0 += 2; d0--;
    } while(d0);
    if(!d0) return false; //else found
    d1 = 0;
    d2 = File.read_uint16(a0,_BE);
    a3 += d2;
    do { //hop
        a3 += 18; d1++;
    } while(File.read_uint16(a3,_BE));
    d2 = a2-a3;
    do { //petla
        b = File.read_uint8(a3,_BE);
        if(b != 0x84)
            if(b != 0x85)
                { a3++; d2--; if(d2 < 0) break; else continue }
        d0++; a3++; d2--
    } while(d2 >= 0);
    songsz = d4;
    sz = d4+d5;
    steps = d0;
    x = d1;
    return true;
}
if(!bDetected && Binary.isDeepScan() && isRobHubbardRH()) {
    sName = "Rob Hubbard's module (.RH)"; sVersion = "v1.4"; bDetected = 1;
    if(Binary.isVerbose()) {
        if(x > 1) sOption(x,"×");
        sOption("smp:"+smp+" sz:"+sz+" songsz:"+songsz+" steps:"+steps)
    }
}

function isPuma() {
    //from https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/amigasrc/players/wanted_team/PumaTracker/src/PumaTracker_v2.asm
    //ref http://lclevy.free.fr/amiga/exotic/puma_str.txt
    if(File.read_uint8(12)) return false;
    ord = File.read_uint8(13)+1;
    a0 = 0x50+ord*14; //patterns table
    if(a0 >= File.getSize()) return false;
    if(!File.compare("'patt'",a0)) return false; a0 += 4;
    d1 = 32;
    while(a0 < File.getSize()) {
        t = File.read_uint8(a0+3); if(!t) return false;
        d1 -= t; if(d1 < 0) return false; if(!d1) break;
        a0 += 4
    }
    if (!File.compare("'patt'",a0+4)) return false; //Check2 finishes here
    a0 = smp = d0 = d4 = 0;
    ptn = File.read_uint16(0xE,_BE);
    synsmp = File.read_uint16(0x10,_BE); //"number of sound data"
    loop = File.read_uint16(0x12,_BE);
    a1 = 0x14; //+moduleptr = smp start offsets
    for(d2 = 0; d2 < 10; d2++) { //NextSamp
        smpp = File.read_uint32(a1,_BE); a1 += 4;
        if(!smpp) continue; //-> NoSamp
        else smp++;
        if(!d4 || smpp >= d4) d4 = smpp; //d4 <- maxsmpp
    } //NoSamp
    a1 = 0; //moduleptr
    if(!d4) { //jump to .Samples it if d4 != 0
        d1 = synsmp;
        a1 += 80;
        while (d1 >= 0) { // .FindSample
            if(a1 > File.getSize())
                if(Binary.isHeuristicScan())
                    { sz = -1; malformed = true; return true } //too short
                else return false;
            t = File.compare("'in'",a1); a1 += 2; if(!t) continue;
            t = File.compare("'st'",a1); a1 += 2; if(!t) continue;
            d1--;
        }
        sz = a1
    } else { // .Samples
        a2 = a1+0x3C; //0x3C is the ofs of samples lengths in words
        a1 += 0x14;
        sz = 0; //max smp end
        for(d2 = 0; d2 < 10; d2++) {// .FindSize
            smpsz = File.read_uint32(a1,_BE); a1 += 4;
            d1 = File.read_uint16(a2,_BE); a2 += 2;
            if(d1&1) d1 --;
            d1 += d1+smpsz;
            if(sz < d1) sz = d1;
        }
    }
    if(sz > File.getSize())
        if(Binary.isHeuristicScan()) { malformed = true; return true } //too short
        else return false;
    songsz = d4;
    return true;
}
if(!bDetected && Binary.isDeepScan() && isPuma()) {
    sName = "PumaTracker module (.PUMA)"; sVersion = "v1.1"; bDetected = 1;
    if(malformed) sVersion += "/malformed";
    if(Binary.isVerbose()) {
        sOption(File.read_ansiString(0,0x0C).trim());
        sOption("ord:"+ord+" ptn:"+ptn+" smp:"+smp+" synsmp:"+synsmp
            +" lp:"+loop+" sz:"+sz)
    }
}

function isSeanConran() {
    //from https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/amigasrc/players/wanted_team/SeanConran/src/Sean Conran_v3.asm
    //Check2
    if(File.compare("0FFF0FE2") || File.compare("10000FE2")) {
        if(!File.compare("0FC40FA7 0F8B0F6E",4)) return false; //test1
        p = 0x124; //start searching for initp from here
        a0 = 8;
    }
    else
        if(File.compare("0F1C0F0E 0F000EF2 0EE40ED6")) {
            p = 0x1C4;
            a0 = 0xA8; //skip to LastCheck
        }
        else return false;
    do { //InitPlayer.FindInit
        t = File.read_uint32(p,_BE); if(!t) return false;
        p += 2; if(p > File.getSize()) return false
    } while([0x45FA,0x43F9,0x41F9].indexOf(t>>16) < 0);
    initp = p-2;
    //LastCheck
    a0 += 0x11C;
    for(d1 = 0; d1 < 0x80; d1++) { //CheckSFX
        if(File.compare("7F7F7F7F",a0) || File.compare("FFFF",a0)) return false;
        a0 += 2
    }
    // a0 = GetListData(0);
    x = IntAddress = 0; Twin = false;
    do { //Next
        t = File.read_uint16(p,_BE);
        p += 2; if(p > File.getSize()) return false
    } while([0x7000,0x7200].indexOf(t) < 0);
    if(t === 0x7000) { //OneSub
        x = 1;
        // do { //FindSongs
        //     t = File.read_uint16(p,_BE); p += 2; if(p > File.getSize()) return false
        // } while(t != 0x41FA);
        // FirstPos = p+File.read_int16(p,_BE);
    }
    else { //t=0x7200
        while(!x && p < File.getSize()) {
            if(File.compare("00000000",p)) return false;
            if(File.compare("21C80070",p)) { //OK4
                // t = p-4; IntAddress = t+File.read_int16(t,_BE);
                p += 2;
                if(File.compare("00003B76",0x24C)) Twin = true;
            } else {
                if(File.compare("43FA",p)) {
                    t = p+2+File.read_int16(p+2,_BE); //OK0
                    // songsp = t;
                    x = (File.read_int16(t,_BE)-t) >> 3;
                }
                else if(File.compare("43EA",p)) {
                    t = File.read_int16(p+2,_BE); //OK2
                    // songsp = t;
                    x = (File.read_int16(t,_BE)-t) >> 3;
                }
                else p += 2
            }
        }
        if(!x || p >= File.getSize()) return false
    }
    // there are more checks... although they aren't really necessary here
    return true
}
if(!bDetected && Binary.isDeepScan() && isSeanConran()) {
    sName = "Sean Conran module (.SCR)"; sVersion = "v1.2"; bDetected = 1;
    if(Twin) sVersion += "/Megatwins"
    if(Binary.isVerbose()) {
        if(x > 1) sOption(x,"x");
    }
}

function isBenDaglish() {
    //from https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/amigasrc/players/wanted_team/BennDaglish/Benn Daglishv3.asm
    if(!File.compare("6000....6000.... ....6000")) return false; //Check2
    d1 = File.read_int16(0x02,_BE); if(d1 <= 0 || (d1&1) || d1 > File.getSize()) return false;
    a0 = a1 = a3 = d1+2;
    d1 = File.read_int16(0x06,_BE); if(d1 <= 0 || (d1&1) || d1 > File.getSize()) return false;
    d1 = File.read_int16(0x0C,_BE); if(d1 <= 0 || (d1&1) || d1 > File.getSize()) return false;
    if(!File.compare("3F006100",a1)  || !File.compare("3D7C",a1+6) 
      || !File.compare("41FA",a1+12)) return false;

    d0 = 0x7F;
    while(d0) //.l6
        if(File.compare("D040D040 D04041FA",a0)) {
            a0 += 8;
            a1 = a0+File.read_int16(a0,_BE); //note the value's signed
            break;
        }
        else {
            a0 += 2; d0--; if(!d0 || a0 > File.getSize()) return false
        }
    x = 0;
    BD_L7: while(1) {
        d2 = 4;
        while(d2) {
            d0 = File.read_uint16(a1,_BE) & 0xFC00;
            a1 += 2; if(a1 > File.getSize()) return false;
            if(d0) { // .not_subsong
                x--; //last subsong
                if(x < 0) x == 0;
                break BD_L7
            }
            else d2--
        }
        x++
    }
    x++;

    //size calc
    // incorrect on some files like 3d galax.bd or super cars.bd
    // but that's what EaglePlayer has, UADE debugger-tested
    d5 = d6 = 0;
    d0 = 0x80;
    while(d0) { //.l9
        t = File.read_uint16(a0,_BE);
        a0 += 2; if(a0 > File.getSize()) return false;
        if(t === 0x41FA) break; else d0--
    } if(!d0) return false;
    smpi1 = a0+File.read_uint16(a0,_BE); //.ok6 .. SampleInfo1
    a0 = 12+File.read_int16(12,_BE);
    d0 = 0x80; //.l10
    while(d0) { d0--;
        if(File.compare("D040D040 41FA",a0)) break;
        else a0 += 2;
        if(a0 > File.getSize()) return false
    }
    if(d0) { //.ok7
        a0 += 6;
        d0 = File.read_int16(a0,_BE);
        if(d0&1) a0 = 0;
        else {
            a0 += d0;
            if(File.read_int16(a0,_BE)) a0 = 0
        }
    } else a0 = 0;
    smpi2 = a0; //.ok8

    a0 = smpi1;
    while(1) { //.com1
        d0 = File.read_uint32(a0,_BE);
        a0 += 4; if(a0 > File.getSize()) return false;
        // Interestingly, the UAE emu sets flags on "move"!
        // So ↓ is a d0 check, would've probably been a0 on a real machine 
        if(!d0) break;
        if(d0 >> 16) { a0 -= 4; break }
    }
    a0 -= 8; //.ok9
    smp1 = (a0 - smpi1) >> 2;
    d0 = smpi2;
    if(d0) {
        a0 = d0;
        while(1) { //.com2
            d0 = File.read_uint32(a0,_BE);
            a0 += 4; if(a0 > File.getSize()) return false;
            if(!d0) break;
            if(d0 >> 16){ a0 += 4; break }
        }
        a0 -= 8; //.ok10
        smp2 = (a0 - smpi2) >> 2;
    }
    else smp2 = 0;
    //.one_smp_info

    // calc size #1
    d3 = smp1;
    a2 = smpi1+File.read_int32(smpi1,_BE); //rel.ptr to smpinfo1 table #0?
    d1 = File.read_int32(a2,_BE);
    d2 = File.read_uint16(a2+8,_BE);
    i = d4 = 0;
    do { //.l11
        i++; if(i === smp1) break;
        a2 = smpi1+File.read_int32(smpi1+(i<<2),_BE);
          if(a2 < 20 || a2 > File.getSize()) return false;
        d4 = File.read_int32(a2,_BE);
        if(d1 > d4) continue;
        if(d1 != d4) {
            if(d4 != File.read_int32(a2+4,_BE))
                d6 = File.read_uint16(a2+10,_BE);
            else d6 = 0;
            d5 = File.read_uint16(a2+8,_BE);
        } else {
            d5 = File.read_uint16(a2+8,_BE);
            if(d2 > d5) continue;
        }
        d1 = d4; d2 = d5
    } while(i < smp1);

    //.ok11
    d2 += d6;
    sz = smpi1+d1+(d2<<1);

    // calc size #2
    if(smpi2) {
        d3 = smp2 << 2;
        a2 = smpi2+File.read_int32(smpi2,_BE);
        d1 = File.read_int32(a2,_BE);
        d2 = File.read_uint16(a2+8,_BE);
        i = d6 = 0;
        do {
            i += 4; if(i === d3) break;
            a2 = smpi2+File.read_int32(smpi2+i,_BE);
            if(a2 < 20 || a2 > File.getSize()) return false;
            d4 = File.read_int32(a2,_BE);
            if(d1 > d4) continue;
            if(d1 != d4) {
                if(d4 != File.read_int32(a2+4,_BE))
                    d6 = File.read_uint16(a2+10,_BE);
                else d6 = 0;
                d5 = File.read_uint16(a2+8,_BE);
            } else {
                d5 = File.read_uint16(a2+8,_BE);
                if(d2 > d5) continue;
            }
            d1 = d4; d2 = d5
        } while(i < d3);

        d2 += d6;
        a1 = smpi1 + d1 + (d2<<1);
        if(sz < a1) sz = a1;
    }

    return true
}
if(!bDetected && Binary.isDeepScan() && isBenDaglish()) {
    sName = "Ben Daglish's module (.BD)"; sVersion = "v1.2"; bDetected = 1;
    if(Binary.isVerbose()) {
        if(x > 1) sOption(x,"x");
        if(sz != File.getSize())
            sOption("smp:"+smp1+"+"+smp2+" sz:"+sz+" (actual "+File.getSize()+")");
        else sOption("smp:"+smp1+"+"+smp2+" sz:"+sz)
    }
}

function isAndrewParton() {
    //from https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/amigasrc/players/wanted_team/Andrew Parton/SRC_AndrewParton/Andrew Parton_v2.asm
    if(!File.compare("'BANK'")) return false;
    for(i=0; i < 20; i++)
        if(File.read_uint32(4+(i<<2),_BE) >= 0x200000) return false;
    for(i=0; i < 40; i++)
        if(File.read_uint32(0x54+(i<<2),_BE) >= 0x10000) return false;
    p = 0x54; q = 4; smp = 0;
    smpt = [];
    s = 0x1E4;
    for(i=0; i < 20; i++) {
        t = File.read_uint32(q,_BE); q += 4;
        if(t) {
            smpt.push(File.read_ansiString(s,16).trim());
            smp++; s += 16 + File.read_uint32(p,_BE);
        }
        p += 4
    }
    smpsz = s;
    malformed = false;
    while(s < File.getSize()) {
        t = File.read_uint8(s); s += 1;
        if(t === 0xFF) break;
    }
    if(s > File.getSize())
        if(Binary.isHeuristicScan()) malformed = true;
        else return false;
    if(File.read_uint8(s) === 0x2F) { sz = s+1; songsz = sz-smpsz }
    else {sz = s; malformed = true }
    return true
}
if(!bDetected && Binary.isDeepScan() && isAndrewParton()) {
    sName = "Andrew Parton's module (.BYE)"; sVersion = "v1.2"; bDetected = 1;
    if(malformed) sVersion += "/malformed";
    if(Binary.isVerbose())
        sOption("smp:"+smp+" songsz:"+songsz+" smpsz:"+smpsz+" sz:"+sz)
}

function isAshleyHogg() {
    //from https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/amigasrc/players/wanted_team/Ashley Hogg/SRC_AshleyHogg/Ashley Hogg_v1.asm
    p = 0;
    for(i=0; i < 4; i++) {
        if(!File.compare("6000",p)) return false; p += 2;
        d2 = File.read_int16(p,_BE); if(d2 <= 0 || (d2&1)) return false; p += 2
    }
    if(File.compare("6000",p)) { //new check
        p += 2;
        d2 = File.read_int16(p,_BE); if(d2 <= 0 || (d2&1)) return false; p += 2;
        if(!File.compare("6000",p)) return false; p += 2;
        d2 = File.read_int16(p,_BE); if(d2 <= 0 || (d2&1)) return false;
        p += d2; 
        if(!File.compare("48E7FFFE 6100",p)) return false; p += 6;
        p += File.read_int16(p,_BE);
        if(!File.compare("4DF9 00DFF000",p)) return false;
        sV = "new";
    } else //old check
        if(File.compare("303C0000 662233C0",p))
            sV = "old";
        else return false;

    if(sV === "new") { //new format
        a2 = special = 0x1C;
        a0 = File.read_int16(2,_BE);
        title = File.read_ansiString(special,File.findString(special,a0-a2,"  ")-a2).trim();
        //skipped a cycle that replaces twin spaces with enters in the info
        do {
            t = File.read_uint16(a0,_BE); a0 += 2;
        } while(t != 0x45FA || a0 > File.getSize());
        a2 = a0; a0 += File.read_int16(a0,_BE);
        if(a0 > File.getSize()-2)
            if(Binary.isHeuristicScan()) malformed = true; else return false;
        d0 = File.read_int16(a0,_BE);
        x = d0 >> 2;
        a0 += d0 + File.read_int16(a0-2,_BE);
        do {
            if(a0 > File.getSize()-2)
                if(Binary.isHeuristicScan()) malformed = true; else return false;
            t = File.read_int16(a0,_BE); a0 += 2;
        } while(t != 0x03F2);
        sz = a0;
        info = 'title: "'+title+'" sz:'+sz
    }
    else { //old format
        special = 0;
        a2 = 16;
        a0 = 2; a0 += File.read_uint16(a0,_BE);
        do { t = File.read_int16(a0,_BE); a0 += 2; } while(t != 0x1970 || a0 > File.getSize());
        a1 = a0-4; a1 += File.read_int16(a1,_BE);
_log("2: a0:"+Hex(a0)+" a1:"+Hex(a1));
        do { t = File.read_int16(a0,_BE); a0 += 2; } while(t != 0x41FA || a0 > File.getSize());
        a0 += File.read_int16(a0,_BE);
_log("3: a0:"+Hex(a0));
        x = (a1-a0) >> 4;
        do { t = File.read_uint16(a2,_BE); a2 += 2; } while(t != 0xC2FC || a0 > File.getSize());
        a2 += 4; smpip = a2+File.read_uint16(a2,_BE);
        do { t = File.read_uint16(a2,_BE); a2 += 2; } while(t != 0x47FA || a0 > File.getSize());
        a0 = a2; a2 += File.read_uint16(a2,_BE);
        songsz = a2;
        do { t = File.read_uint16(a0,_BE); a0 += 2; } while(t != 0x49FA || a0 > File.getSize());
        do { t = File.read_uint16(a0,_BE); a0 += 2; } while(t != 0x49FA || a0 > File.getSize());
        a0 += File.read_uint16(a0,_BE);
        smp = (a0-smpip)/0x2C;
        d1 = 0; a1 = smpip;
        a3 = 0x54F3; //value copied from a debugging session ¯\(。⊿°)/¯
        do { //NextInfo
            d2 = File.read_int32(a1+0x20,_BE);
            if(d2 >= 0 && d1 <= d2) { d1 = d2; a3 = a1 }
            a1 += 0x2C
        } while(a0 > a1);
        d0 = File.read_uint16(a3+0x28,_BE);
        d1 += d0+d0;
        smpsz = d1;
        sz = songsz+smpsz;
        info = "smp:"+smp+" songsz:"+Hex(songsz)+" smpsz:"+Hex(smpsz)+" sz:"+sz
    }
    return true
}
if(!bDetected && Binary.isDeepScan() && isAshleyHogg()) {
    sName = "Ashley Hogg's module (.ASH)"; sVersion = sV; bDetected = 1;
    if(malformed) sVersion += "/malformed";
    if(Binary.isVerbose()) {
        if(x > 1) sOption(x,"x");
        sOption(info)
     }
}

function isCinemaware() {
    //from https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/amigasrc/players/wanted_team/Cinemaware/Cinemaware.asm
    if(!File.compare("'IBLK'")) return false;
    d2 = File.read_uint8(4);
    if(!d2 || d2 > 0x80) return false;
    a1 = 0x16+0x8A*d2;
    aseq = File.findSignature(a1,0x104,"'ASEQ'");
    if(aseq < 0 || (aseq&1)) return false;
    p = aseq+4; sz = 0; malformed = false;
    do {
        sz += 5;
        if(sz+p > File.getSize())
            if(File.isHeuristicScan()) { malformed = true; break }
            else return false;
    } while(!File.compare("102F00",sz+p-3));
    sz += p; ord = Math.floor((sz-p)/100);
    return true
}
if(!bDetected && Binary.isDeepScan() && isCinemaware()) {
    sName = "Cinemaware module (.CIN)"; bDetected = 1;
    if(malformed) sVersion = "malformed";
    if(Binary.isVerbose()) {
        sOption("ord:"+ord+" sz:"+sz+ " (sans ext.samples)")
    }
}

function isCustomMade() {
    //ref https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/amigasrc/players/wanted_team/CustomMade/CustomMade_v1.asm
    if(File.getSize() < 3000) return false;
    if(File.compare("6000.... 6000") || File.compare("4EF9.... ....4EF9")
      || File.compare("4EB9.... ....4EF9")) {
        a1 = 8; var found = false;
        do {
            if(File.compare("42280030 42280031 42280032",a1)) found = true;
            a1 += 2
        } while(!found && a1 < 0x198);
    }
    if(!found) return false;
    else if(!Binary.isVerbose()) return true;
    //otherwise let's dig in for smp, synthsmp, and subsongs!
    a0 = d5 = 0; d7 = 0x800; org = 0; smpi = 0; songst = 0;
    malformed = false;
    L = "lp"; //it's even more mind-boggling if rewritten in if..else
    i_lp: while(d7) {
        switch(L) {
        case "lp": // @d366
            if(!File.compare("D04149FA",a0)) { L = "2"; break }
            d0 = File.read_int16(a0+4,_BE); a1 = a0+d0+4;
            Table = a1; L = "lp_c"; break;
        case "2": // play / ptntab  @d37e
            if(File.compare("48E7F8FC",a0)) { L = "2.0"; break }
            if(!File.compare("48E7FFFE",a0)) { L = "3"; break }
        case "2.0": // @d38e
            d6 = a3;
            if(!d6 || org) d6 = 20;
            else {
                a1 = a0-a3; /*play-oldplay*/ d5 -= a1; /*nowadr-dx*/ org = d5
            }
            while(d6 >= 0) { // 2.lp
                t = File.read_uint16(a0,_BE); a0 += 2;
                if(t === 0x41FA) {
                    d0 = File.read_int16(a0,_BE); // 2.2: @d3ae
                    songst = a1 = a0+d0; break // from 2.lp
                }
                d6--
            }
            L = "lp_c"; break;
        case "3": // @d3bc
            if(!File.compare("E94847F0",a0)) { L = "4"; break } //ptoff
            d1 = File.read_int16(a0+4,_BE); L = "lp_c"; break;
        case "4": // @ d3cc
            if(!File.compare("00BFD500",a0)) { L = "6"; break} //oldplay
            tmrval = (File.read_uint8(a0-1) << 8) + File.read_uint8(a0+7);
            _log("tmrval:"+Hex(tmrval));
            //tmrval = d0;
            if(File.compare("4E71",a0+20)) { L = "lp_c"; break }
            if(File.compare("21FC",a0+28)) a3 = File.read_uint32(a0+30,_BE);
            else if(File.compare("C000",a0+32)) a3 = File.read_uint32(a0+32,_BE);
            else a3 = File.read_uint32(a0+22,_BE);
            L = "lp_c"; break;
        case "6": // @ d410
            if(!File.compare("42A8001C",a0)) { L = "7"; break } //smpinfo
            d0 = File.read_int16(a0+6,_BE); smpi = a1 = a0+d0+6;
            L = "lp_c"; break;
        case "7":
            if(File.compare("E44843FA",a0)) { L = "7.1"; break } //oldvoc1
            if(!File.compare("E448207B",a0)) { L = "8"; break } //oldvoc1
        case "7.1": // @d438
            d6 = a4; if(!d6) { L = "lp_c"; break }
            d0 = File.read_int16(a0+4,_BE); // @d43c
            a4 -= File.read_int32(a0+d0+4,_BE); //voc0-oldvoc0
            if(!org) { d5 -= a4; org = d5 }
            L = "lp_c"; break;
        case "8": // @d44e
            if(File.compare("48E700F0",a0)) { //voc0
                d0 = File.read_int16(a0+6,_BE); // @d456
                a4 = a0+d0+6;
            }
        case "lp_c": // @d45e
            a0 += 2; if(File.compare("1AC01940",a0)) break; // -> ex
            d7--; L = "lp"
        }
    }
    songst += d1; // ex @d46c
    a1 = songst;
    x = 0;
    while(1) { //Find
        if(File.compare("DFF0A0",a1+1)) break;
        if(a1 > File.getSize()) { malformed = true; return true }
        x++; a1 += 16
    }

    a1 = smpi; smp = synsmp = 0;
    while(!File.read_uint32(a1+28,_BE)) {
        a2 = File.read_uint32(a1,_BE)-org;
        a24 = File.read_uint16(a2+4,_BE);
        if(a24 === 2 || a24 === 16) smp++; else synsmp++;
        a1 += 32
    }
    return true
}

if(!bDetected && Binary.isDeepScan() && isCustomMade()) {
    sName = "Ivo Zoer & Ron Klaren's CustomMade module (.CM)"; bDetected = 1;
    if(Binary.isVerbose()) {
        if(x > 1) sOption(x,"x");
        sOption("smp+syn:"+smp+"+"+synsmp+" timer:"+tmrval)
        //" Origin:"+Hex(org)+" SongsTab:"+Hex(songst)+" SamplesInfo:"+Hex(smpi)+" Table:"+Hex(Table))
    }
}

function isDaveLoweNew() {
    //from https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/amigasrc/players/wanted_team/DaveLoweNew/src/Dave Lowe New.s
    // ref Dave Lowe New_v2.asm
    a1 = 0; d1 = File.read_int16(0,_BE);
    if(d1 === 4) { if(!File.read_uint32(0x18,_BE))  a1 += 4 }
    else if(d1 === 8)  a1 += 4;
    else return false;
    a1 += 4; a2 = a1;
    for(d2=0; d2 < 4; d2++) { //FirstCheck
        if(File.read_int16(a1,_BE)) return false; a1 += 2;
        d1 = File.read_int16(a1,_BE); a1 += 2; if(d1 <= 0 || (d1&1)) return false;
    }
    for(d0=0; d0 < 4; d0++) { //SecondCheck
        a1 = d1 = File.read_int32(a2,_BE); a2 += 4; 
        d2 = File.read_int32(a1,_BE);
        if(File.read_int16(a1,_BE)) return false; a1 += 2;
        d1 = File.read_int16(a1,_BE); a1 += 2;
        if(d1 <= 0 || (d1&1)) return false;
        a1 = d2;
        t = File.read_int16(a1,_BE);
        if(t === 0x30) { a1 += 2; t = File.read_int16(a1,_BE); }
        if(t === 12) {
            a1 += 6;
            t = File.read_int16(a1,_BE); a1 += 2;
            if(t === 4) break;
        }
    }
    d2 = File.read_int32(a1,_BE); if(File.read_int16(d2,_BE) != 1) return false;
    a1 = a2 = d2 >> 16; if(a1) return false;
    fmt = 1;
    if(!File.read_uint32(0x18,_BE)) {
        fmt = 0;
        x = (File.read_int16(2,_BE)-8) >> 5
    }
    else {
        x = 0; p = File.read_uint16(0,_BE);
        while(p < File.getSize()) {
            t = File.read_int16(p,_BE); p += 2; if(t) break;
            t = File.read_int16(p,_BE); p += 2; if(!t || (t&1)) break;
            x++
        }
        x >>= 2
    }
    malformed = 0; sz = 0; a1 = d2;
    while(a1 < File.getSize()) {
        a2 = a1; a1 -= 14;
        if(File.read_int16(a1,_BE) != 1) break
    }
    //smpi = a2;
    t = File.read_int16(a2-2,_BE);
    if(t != 8 && t != 0) a2 += 14;
    sz = 0; smp = 0;
    while(a2 < File.getSize()) { //CheckInfo
        t = File.read_int16(a2,_BE); if(t != 1) break; else smp++;
        a2 += 2;
        d2 = File.read_int32(a2,_BE); a2 += 6; t = File.read_int32(a2,_BE); 
        if(t > d2) d2 = t;
        if(d2 > sz) sz = d2;
        a2 += 6
    }
    if(sz > File.getSize()) malformed = "/short";
    if(a2 >= File.getSize()) { malformed = "/bad smpinfo"; return true }
    sz += 0xFE;
    return true
}
if(!bDetected && Binary.isDeepScan() && isDaveLoweNew()) {
    sName = "Dave 'Uncle Art' Lowe New module (.DLN)"; bDetected = 1;
    sVersion = "f."+fmt; if(malformed) sVersion += malformed;
    if(Binary.isVerbose()) {
        if(x > 1) sOption(x,"x");
        sOption("smp:"+smp+" sz:"+sz);
        //if(sz != File.getSize()) sOptions+=" (actual "+File.getSize()+")"
    }
}

function isDesire() {
    //from https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/amigasrc/players/wanted_team/Desire/src/Desire_v1.asm
    if(File.getSize() <= 2500) return false;
    a2 = 0; a0 = 8;
    for(d1=0; d1 < 4; d1++) { if(!File.compare("00010101",a0)) return false; a0 += 16 }
    a1 = 400+a0;
    do {
        if(a0 === a1) return false;
        t = File.read_int16(a0,_BE); a0 += 2;
    } while(t != 0x49FA);
    a0 += 2;
    if(!File.compare("45F900DF F000357C 00FF009E 41FA",a0)) return false; a0 += 14;
    a0 += File.read_int16(a0,_BE);
    if(a0 != a2) return false;
    a1 = 0xF0;
    do { t = File.read_uint16(a1,_BE); a1 += 2
    } while(t != 0x49FA && a1 < File.getSize()); a1 -=2; //FindPlay
    do { t = File.read_uint16(a1,_BE); a1 += 2 //FindSongs
    } while(t != 0x47FA && a1 < File.getSize());
    a2 = a1+20; a1 += File.read_int16(a1,_BE); x = 0; a1++;
    do { //CheckSongs
        d1 = File.read_uint8(a1); a1++; if(d1) x++; else break;
    } while(d1 != File.read_uint8(a1) && a1 < File.getSize());
    do { t = File.read_uint16(a2,_BE); a2 += 2 //Find1
    } while(t != 0xE341 && a2 < File.getSize());
    do { t = File.read_uint16(a2,_BE); a2 += 2 //Find2
    } while(t != 0x47FA && a2 < File.getSize());
    smptsz = a1 = a2+File.read_int16(a2,_BE);
    do { t = File.read_uint16(a2,_BE); a2 += 2 //Find3
    } while(t != 0x47FA && a2 < File.getSize());
    a3 = a2; a2 += File.read_int16(a2,_BE); smpp = a2;
    a0 = a2; d4 = a1-a2; a2 = a1+d4; smp = 0;
    do { t = File.read_int16(a1,_BE); a1 += 2; if(t) smp++; } while(a1 < a2); //NextS,NoSamp
    do { t = File.read_uint16(a3,_BE); a3 += 2 //Find4
    } while(t != 0x47FA && a3 < File.getSize());
    a3 += 2;
    d6 = File.read_uint16(a3,_BE) & 0x0E00;
    if(d6) d6 >>= 9; else d6 = 8;
    ruch = d6; //Skip8
    d1 = File.read_int16(a0,_BE); songsz = d2 = d1 << d6;
    t= d1;d1=d2;d2 =t; d5 = 0;
    do { //NextOff
        d0 = File.read_int16(a0,_BE); a0 += 2;
        if(d0 > d2) { d2 = d0; d5 = File.read_uint16(a0+d4-2,_BE) }
    } while(a0 < smptsz);
    d2 <<= d6; d5 <<= 1; d2 += d5;
    sz = d2; smpsz = sz-songsz
    return true
}
if(!bDetected && Binary.isDeepScan() && isDesire()) {
    sName = "Desire player module (.DSR)"; bDetected = 1;
    sVersion = "v1.0"; if(malformed) sVersion += malformed;
    if(Binary.isVerbose()) {
        if(x > 1) sOption(x,"x");
        sOption("smp:"+smp+" songsz:"+Hex(songsz)+" smpsz:"+Hex(smpsz)+" sz:"+sz)
        if(sz != File.getSize()) sOptions += " (actual "+File.getSize()+")"
    }
}

function isDavidWhittaker() {
    //from uade players/DavidWhittaker
    // sfx-only not detected; feud fake.dw not detected
    // TODO reverse more to add calcsize and other variables, if it has those

    function _dw() {
        d1 = 0x80; do { t = File.compare("6100",a1); a1 += 2; d1--
        } while(d1 && !t && a1 < File.getSize());
        if(!t) return false;
        a1 += File.read_int16(a1,_BE); d1 = 0x80; //@e43c
        if(File.compare("48E7F1FE",0)) { //@e440
            a1 += 4; t = File.compare("6100",a1); a1 += 2; if(!t) return false;
            a1 += File.read_int16(a1,_BE)
        }
        do { //@e452
            if(File.compare("4E75",a1)) return false;
            if(File.compare("2F0B",a1) || File.compare("00DFF0C8",a1)) return true
            a1 += 2
        } while(d1 && a1 < File.getSize());
        return false
    }

    if(File.compare("48E7F1FE",0)) {
        if(!File.compare("6100",4)) return false;
        a1 = 6+File.read_int16(6,_BE);
        d1 = 10; //@ec3a
        do { t = File.compare("47FA",a1); a1 += 2; d1--;
        } while(d1 && !t && a1 < File.getSize());
        if(!t) return false;
        if(!_dw()) return false; // @e3d8
        fmt = 0; return true;
    }
    else if(!File.compare("08F90001",0)) {
        if(File.compare("4E714E71",0)) return false;
        t = File.compare("47FA",0); a1 = 2;
        if(t) if(!_dw()) return false; else { fmt = 1; return true }
        d1 = 4; //@e3fa..e402
        do { t = File.compare("47FA",a1); a1 += 2; d1--
        } while(d1 && !t && a1 < File.getSize());
        if(!t) return false;
        a1 += File.read_int16(a1,_BE); //@e408
        if(a1) return false;
        if(!_dw()) return false; else { fmt = 1; return true }
    }
    else { a1 += 4; if(File.compare("00BFE001",a1))
        if(_dw()) { fmt = 1; return true }
    }
    return false
}
if(!bDetected && Binary.isDeepScan() && isDavidWhittaker()) {
    sName = "David Whittaker's module (.DW)"; sVersion = "f."+fmt; bDetected = 1
}

function isFashionTracker() {
    //from https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/amigasrc/players/wanted_team/FashionTracker-v1.0/FashionTracker.asm
    if(!Binary.compare("13FC0040 ........ 4E710439 0001")
      || !Binary.compare("66F44E75 48E7FFFE",18)) return false;
    a2 = 0; malformed = false;
    while(!File.compare("2379",a2) && a2 <= 1000) a2 += 2; //FindOri
    if(a2 > 1000) //corrupt module
        if(Binary.isHeuristicScan()) malformed = "org"; else return false;
    org = File.read_uint32(a2-4,_BE);
    a2 = 0; d1 = 1;
    do { //GetValues:
        // a3 = smplen    a3+4 = smpp      a3+8 = smplp
        // a3+12 = smpn+vol      a3+16 = ptn     a3+20 = songpositions
        if(File.compare("23D1",a2)) { // L???
            smplen = File.read_int32(a2+8,_BE)-org;
            smpp = File.read_int32(a2-6,_BE)-org;
            smplp = File.read_int32(a2+24,_BE)-org;
            smpnvol = File.read_int32(a2-30,_BE)-org;
            d1 -= 6;
        }
        else if(File.compare("C0FC0400",a2)) { //NoL
            ptn = File.read_int32(a2+6,_BE)-org;
            d1 += 3;
        }
        else if(File.compare("0C790400",a2)) { //NoPa
            songpos = File.read_int32(a2+12,_BE)-org;
            len = File.read_int32(a2+34,_BE);
            d1 += 2;
        }
        a2 += 2 //NextW
    } while(a2 < 1000);
    if(d1)
        if(Binary.isHeuristicScan()) malformed = "val"; else return false;
    a1 = smpp; songsz = File.read_int32(smpp,_BE)-org;
    d0 = File.read_int32(a1-4,_BE) << 1;
    a2 = smplen; d1 = a1-a2; a1 += d1; d1 >>= 2; smp = d1;
    d1 = File.read_int32(a1-4,_BE)-org;
    sz = d0+d1; smpsz = sz-songsz;
    a1 = songpos; a2 = a1+len; ptn = 0;
    do { t = File.read_uint8(a1); if(ptn < t) ptn = t; a1++ } while(a1 < a2); //GetPat
    ptn++;
    d1 = (d0-1)*6; d0 = d1; d1 *= 0x376B;
    dur = Math.floor(d1*64/(709379-3));
    return true
}
if(!bDetected && Binary.isDeepScan() && isFashionTracker()) {
    sName = "Fashion Tracker module (.EX)"; bDetected = 1;
    sVersion = "v1.0"; if(malformed) sVersion += "/malformed."+malformed;
    if(Binary.isVerbose()) {
        sOption("ord:"+len+" ptn:"+ptn+" smp:"+smp+" songsz:"+songsz+" sz:"+sz)
    }
}

function isImagesMusicSystem() {
    //from https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/amigasrc/players/wanted_team/ImagesMusicSystem/src/Images Music System_v3.asm
    if(File.getSize() < 0x73C) return false;
    t = File.read_uint32(0x438,_BE); if(t >> 16) return false;
    t -= 0x43C; if(t <= 0) return false;
    d1h = t % 0x300; if(d1h) return false;
    ptn = d2 = Math.floor(t / 0x300);
    ord = d1 = File.read_uint8(0x3B6); if(d1&80) return false;
    a1 = 0x3B8; d3 = 0;
    do { d4 = File.read_uint8(a1); if(d4&0x80) return false; if (d3 < d4) d3 = d4; a1++;
    d1--} while(d1 >= 0);
    d2--;
    if(d2 != d3) return false;

    a1 = 42; d0 = 31; smp = d3 = 0;
    do { d1 = File.read_int16(a1,_BE); if(d1) { smp++; d3 += d1 } a1 += 30
    d0--} while(d0);
    smpsz = d3 << 1; songsz = File.read_int32(1080,_BE);
    sz = songsz+smpsz; malformed = (sz < File.getSize());
    d2 = ord; x = a0 = d0 = 0; a1 = 0x3B8;
    if(songsz === 28732 && smpsz === 12898 && File.compare("beast-busters1.st") )
        x = 11;
    // There seem to be no files to test the subsong detection on! The algo should be OK tho
    else do { //NextPos
        d1 = File.read_uint8(a1)*0x300; a0 = d1+0x43C; a3 = a0+0x300; a0++; a1++;
        do { //NextPatPos
            if(File.read_uint8(a0)&0x0F === 0x0B) { x++; break } //SubFound
            else a0 += 3
        } while(a0 < a3 && a0 < File.getSize()); d2--
    } while(d2);
    if(!x) x = 1;
    return true
}
if(!bDetected && Binary.isDeepScan() && isImagesMusicSystem()) {
    sName = "Images Music System module (.IMS)"; bDetected = 1;
    sVersion = "v1.0"; if(malformed) sVersion += "/malformed.sz";
    if(File.isVerbose()) {
        sOption(File.read_ansiString(0,20)); if(x > 1) sOption(x,"x");
        sOption("ord:"+ord+" ptn:"+ptn+" smp:"+smp+" sz:"+sz)
    }
}

function isSMUS() {
    //from https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/amigasrc/players/wanted_team/SonixMusicDriver/Sonix Music Driver_v1.asm
    a0 = a1 = 0; title = "";
    if(File.compare("'FORM'")) {
        if(!File.compare("'SMUSSHDR'",8) || !File.read_uint8(0x17) || !File.compare("'NAME'",0x18))
            return false;
        d1 = File.read_uint32(0x1C,_BE); if(d1 >> 31) return false; t_ = d1;
        d1 = (d1+1) & 0xFFFFFFFE; a1 = 0x20+d1;
        if(!File.compare("'SNX1'",a1)) return false; a1 += 4;
        d1 = File.read_uint32(a1,_BE); if(d1 >> 31) return false; a1 += 4;
        d1 = (d1+1) & 0xFFFFFFFE; a1 += d1;
        insinfp = a1;
        realsmp = []; ins = 0;
        do { //MoreIns
            if(!File.compare("'INS1'",a1)) return false; a1 += 4;
            d1 = File.read_uint32(a1,_BE); if(d1 >> 31) return false; a1 += 4;
            d1 = (d1+1) & 0xFFFFFFFE; if((d1 >> 24) > 0x3F) return false;
            if(File.read_uint8(a1+1)) return false;
            realsmp.push(File.read_uint8(a1));
            a1 += d1; ins++
        } while(!File.compare("'TRAK'",a1));
        title = File.read_ansiString(0x20,t_)
        fmt = 2; sV = "smus"
    }
    else {
        if(!(File.read_uint16(0,_BE) & 0xF0)) {
            d3 = 20; d1 = 4;
            while(d1) {
                d2 = File.read_int32(a0,_BE); if(d2 <= 0 || (d2&1)) return false;
                a0 += 4; d3 += d2; d1--
            }
            if(d3 >= File.getSize()) return false;
            a0 += 4; d1 = 4;
            while(d1) {
                t = File.read_uint16(a0,_BE); if(!(t & 8000)) return false;
                if(t != 0xFFFF) if((t >>16) > 0x84) return false;
                a0 += File.read_int32(a1,_BE); a1 += 4; d1--
            }
            if(!File.read_uint8(a0)) return false;
            fmt = 0; sV = "snx"
        }
        else { //TinyCheck
            if(File.getSize() < 333) return false;
            a1 = 0x30; if(File.read_int32(a1,_BE) != 0x140) return false;
            a1 += 4; d1 = 3;
            while(d1) { //NextPos2
                d2 = File.read_int32(a1,_BE); a1 += 4;
                if(d2 <= 0 || (d2&1) || d2 > File.getSize()) return false;
                if(File.read_int16(d2,_BE) != -1) {
                    if(File.read_int32(d2,_BE) || File.read_int16(d2+4,_BE)) return false;
                    t = File.read_uint8(d2+6,_BE); if(!(t&0x80) || t > 0x82) return false
                }
                d1--
            }
            fmt = 1; sV = "tiny"
        }
    }
    //TODO CalcSize
    return true
}
if(!bDetected && Binary.isDeepScan() && isSMUS()) {
    sName = " Sonix Music Driver module (.SMUS)"; sVersion = "f."+sV; bDetected = 1;
    if(Binary.isVerbose()) {
        if(title != "") sOption(title)
    }
}

function isAMBK() {
    //from https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/amigasrc/players/ambk/AMOS.s
    if(File.compare("'AmBk'")) a0 = p = 4; else if(File.compare("C0")) a0 = p = 0; else return false;
    if(!File.compare("80",p+4)) return false;
    if(!File.compare("'Music   '",p+8)) return false;
    p += 0x14; p += File.read_int32(p,_BE);
    if(File.read_int16(p,_BE) != 6) return false; p += 2; r = p;
    p += File.read_int16(p+2,_BE)-2;
    p = File.read_int16(p,_BE); if(p != -2) if(p) return false;

    title = File.read_ansiString(r+0x0C,0x20);
    p = r+0x1E+File.read_int16(r+0x1E,_BE); ord = -1;
    do { ord++; d1 = File.read_int16(p,_BE); p += 2; } while(p < File.getSize() && d1 >= 0);
    if(a0) d3 = 4+(File.read_int32(a0+4,_BE) & 0xFFFFFF);
    else d3 = File.read_int32(a0,_BE) & 0xFFFFFF; sz = d3+8;
    malformed = false; if(sz > File.getSize()) malformed = true;
    p = r+File.read_int16(r+6,_BE);
    ptn = 0;
    while(p < File.getSize()) { //.such
        d1 = File.read_int16(p,_BE); p += 2; if(d1 < 0) break;
        if(d1 > ptn) ptn = d1
    }
    ptn++;
    if(!File.read_int16(p,_BE)) p += 2;
    if(File.read_int16(p,_BE) != ptn) malformed = true;
    q = a0+0x20; smp = d1 = File.read_int16(q,_BE); q += 0x10;
    d7 = 0;
    while(d1 && q < File.getSize()) {
        d2 = File.read_int16(q,_BE);
        if(!d2) d2 = File.read_int16(q-6,_BE);
        d7 += d2 << 1; q += 0x20; d1--
    }
    smpsz = d7;
    songsz = sz-d7;
    return true
}
if(!bDetected && Binary.isDeepScan() && isAMBK()) {
    sName = " AMOS Music Bank module (.ABK)"; bDetected = 1;
    if(malformed) sVersion = "malformed";
    if(Binary.isVerbose()) {
        sOption(title);
        sOption("ord:"+ord+" ptn:"+ptn+" smp:"+smp+" sz:"+sz+" smpsz:"+Hex(smpsz)+" songsz:"+Hex(songsz))
    }
}

function isTuneFish4() {
    // taken from tunefish src\tunefish4player\tf4player.cpp
    ins = File.read_int16(0,_LE); if(ins > 32) return false;
    if(!File.compare("'INST'",4+ins*2)) return false; t = 8+ins*114;
    if(!File.compare("'SONG'",t)) return false;
    t += 4; songsz = 0; for(i=0; i<ins; i++) songsz += File.read_uint16(4+i*2,_LE);
    if(!File.compare("'ENDS'",t+songsz*4)) return false;
    sz = t+songsz*4+4;
    return true;
}
if(!bDetected && Binary.isDeepScan() && isTuneFish4()) {
    sName = "TuneFish module (.TF4)"; sVersion  = "v4"; bDetected = 1;
    if(Binary.isVerbose())
        sOption("ins:"+ins+" tempo:"+File.read_uint16(2,_LE)+" sz:"+sz+" songsz:"+Hex(songsz))
}



// BELOW THIS POINT ARE THE DETECTIONS THAT ARE IFFIER THAN THE REST

// like too loose and hits other known formats, or like potentially taking up unknown cycle#

// They all are in dire need of amending, and they're set to go after the other detections,
// so you won't miss the good matches because of these


function isHSC() {
    //ref https://sourceforge.net/p/xmp/libxmp/ci/master/tree/src/loaders/hsc_load.c
    if(File.getSize() < 1587+1152 || File.getSize() > 59187+1) return false;
    p = 128*12; ptn = 0; ord = -1;
    for(i=0; i < 0x33; i++) {
        bt = File.read_uint8(p+i);
        if(bt == 0xFF) break;
        if(ptn < bt) ptn = bt; ord++ }
    if(!i || !ptn || i > 0x32 || ptn > 0x30) return false; //test number of patterns
    //_log("1: i="+i+" ptn="+ptn);
    p += 0x33;
    for(i=0; i < ptn; i++) {
        for(j=0; j < 0x40; j++) {
            for(k=0; k < 9; k++) {
                n = File.read_uint8(p+j*18+k*2);
                m = File.read_uint8(p+j*18+k*2+1);
                if(m > 6 && m < 0x10 && n != 0x80) return false; //test effects 07..0F
                msn = (m&0xF0)>>4;
                if(6 < msn && msn < 10) return false; //test effects 7x..9x
                //_log("  3: i="+i+" j="+j+" k="+k+" n["+Hex(p+j*9+k*2)+"]="+Hex(n)+" m="+Hex(m)+" msn="+msn);
            }
        }
        p += 64*9*2
    }
    return true
}
if(!bDetected && Binary.isHeuristicScan() && isHSC()) {
    sName = "HSC Adlib Composer/HSC-Tracker module (.HSC)"; bDetected = 1;
    if(Binary.isVerbose()) sOption = "ord:"+ord+" ptn:"+ptn;
}

function isJamCracker() {
    //ref https://github.com/tonioni/WinUAE/blob/master/prowizard/rippers/JamCracker.c
    smp = File.read_uint8(5);
    if(!smp || (smp>0x1F)) return false;
    if(File.read_uint8(6+smp*40) > 0) return false;
    allsmpsz = 0;
    for(k=0; k<smp; k++) {
        l = File.read_uint32(38+k*40,_BE);
        if(!l || (l>File.getSize())) return false;
        allsmpsz += l;
    }
    ord = File.read_uint16(6+smp*40,_BE);
    if(ord > 0xFF) return false;
    ptns = 6+smp*40+2;
    ptn = File.read_uint16(ptns+ord*6,_BE);
    if(ptn>0xFF) return false;

    ptn0 = File.read_uint32(ptns+2,_BE);
    ptns += ord*6;
    trkdtsz = File.read_uint32(ptns-4,_BE)-ptn0;
    addlns = File.read_uint8(ptns-5)*4*8;
    sz = ptns + 2 + ptn*2 + allsmpsz + trkdtsz + addlns; //doesn't include the Xag tags
    return true
}
if(!bDetected &&
  (((!Binary.isHeuristicScan()) && Binary.compare("'BeEp'"))
  || (Binary.isHeuristicScan() && isJamCracker()))) {
    sName = "JamCracker/Pro module (.JAM,.JC)"; bDetected = 1;
    if(Binary.isVerbose() && Binary.isHeuristicScan()) {
        if(sz+19 == File.getSize()) {
            sVersion = "v1.0a (Xag)";
            sOptionT(File.read_ansiString(sz,19)); //this version adds these
            sz += 19
        }
        sOption("sz:"+sz+" ord:"+ord+" ptn:"+ptn+" smp:"+smp);
        if(sz != File.getSize()) sVersion += "/malformed"
    }
}

function isJBM() {
    //ref https://github.com/adplug/adplug/blob/master/src/jbm.cpp
    //TODO for ex. demo3.jbm has a pointer to outside of the file,
    //  and it seems to work in a player but these are sanity checks ffs... Dunno this format 
    if(File.read_uint16(0,_LE) != 2) return false;
    if(!Binary.compare("00FF01FF02FF03FF04FF05FF06FF07FF08FF09FF0AFFFD00", 0x36
)) return false; //just from the files modland has, 'cause the detection's' wonky
    seqt = File.read_uint16(4,_LE); if(!seqt || seqt < 30 || seqt >= File.getSize()) return false;
    inst = File.read_uint16(6,_LE); if(!inst || inst <= seqt || inst >= File.getSize()) return false;
    ins = (File.getSize()-inst) >> 4;
    //_log("fs="+Hex(File.getSize())+", inst="+Hex(inst)+", ins="+ins);
    mptn = 0xFFFF; ch = 0; trk=[];
    for(i=0; i < 11; i++) {
        p = File.read_uint16(10+i*2,_LE); trk[i] = p;
        if(p) { ch++;
            if(p <= seqt || p >= inst) return false;
            if(p < mptn) mptn = p
        }
    }
    //_log(trk);
    ptn = (mptn-seqt) >> 1;
    //_log("("+mptn+"-"+seqt+")/2="+ptn);
    for(i=0; i < 5/*ptn*/; i++) { //TODO make a full check when the format is more clear!
        if(trk[i]) {
            p = File.read_uint16(seqt+i*2,_LE);
            //_log(seqt+"["+i+"*2]="+Hex(p));
            if(File.read_uint16(p-1,_LE) != 0xFDFF) return false;
            if(p <= seqt || p >= inst) return false;
        }
    }
    i = File.read_uint16(2,_LE); tmr = (1193810.0 / (i ? i : 0xFFFF)).toFixed(2);
    return true
}
if(!bDetected && Binary.isHeuristicScan() && isJBM()) {
    sName = "Johannes Bjerregaard Adlib module (.JBM)"; bDetected = 1;
    if(Binary.isVerbose())
        sOption("tmr:"+tmr+" ch:"+ch+" ptn:"+ptn+" ins:"+ins)
}

function isKefrensSoundMachine() {
    //ref https://github.com/tonioni/WinUAE/blob/master/prowizard/rippers/KefrensSoundMachine.c
    if(File.getSize()<1537) return false;
    if(File.read_uint8(15) != 0x61) return false;
    for(k=0; k<15; k++)
        if(File.read_uint8(54+k*32) > 0x40) return false;
    trks = 0;
    for(k=0; k<1024; k++) {
        k_ = File.read_uint8(k+512);
        if(k_ == 0xFF) break;
        if(k_ > trks) trks = k_;
    }
    if(k == 1024) return false;
    if(trks == 0) return false;
    if(1536 + trks*192 + 64*3 > File.getSize()) return false;
    for(k=0; k<=trks; k++)
        for(l=0; l<64; l++)
            if(File.read_uint8(1536 + k*192 + l*3) > 0x24) return false;

    allsmpsz = 0;
    for(k=0; k<15; k++)
        allsmpsz += File.read_uint16(52+k*32,_BE);
    sz = (trks+1)*192 + allsmpsz + 1536;
    return true
}
if(!bDetected && Binary.isHeuristicScan() && isKefrensSoundMachine()) {
    sName = "Kefrens Sound Machine module (.KSM)"; bDetected = 1;
    if(Binary.isVerbose()) {
        sOptionT(File.read_ansiString(2,13));
        sOption("sz:"+sz+" trk:"+trks+" ptn:"+ptn+" smp:"+smp);
        if(sz != File.getSize()) sVersion = "malformed"
    }
}

function isMXDRV() {
    // fmt https://www.vector.co.jp/download/file/dos/art/fh003454.html / DOC/MDXFORM.DOC
    // ref ditto / SRC/MDX2MUS.ASM
    // useful links: https://gorry.haun.org/mx/index_e.html
    if(File.getSize() < 4+2+9*2 || File.getSize() > 0xFFFF) return false; //minimum header
    da1 = File.findSignature(0,Math.min(1024,File.getSize()),"0D0A1A");
    if(da1 < 0) return false;
    for(i = 0; i < da1; i++) {
        c = File.read_uint8(i); if(c < 0x20 && c != 0x1B) return false;
    }
    t = File.read_codePageString(0,da1,"SJIS");
    p = File.findSignature(da1,Math.min(1024,File.getSize()-da1),"00"); if(p < 0) return false;
    if(da1+3 != p)
        pdxfn = File.read_ansiString(da1+3,p);
    else pdxfn = "";
    p++; ofs = p;
    comp = false;
    if(File.read_ansiString(ofs+4,4) == "LZX ") {
        lzxsz = File.read_uint32(ofs+0x12,_BE);
        //_log("ofs="+ofs+", lzxsz = "+lzxsz+" += "+(ofs+lzxsz));
        if(lzxsz)
        comp = true; return true; // stop right there because omg no
    }

    vd = File.read_uint16(ofs,_BE);
    if(vd+p > File.getSize()) return false;
    var chn = File.read_uint16(p+2,_BE)+ofs;
    if(chn <= p+2 || chn > File.getSize()-2) return false;
    if(File.read_uint8(chn) == 0xE8) ch = 16;
    else ch = 9;
    p += 2;
    for(k=1; k<ch; k++) { //check the rest of channels
        p += 2; if(p > File.getSize()-2) return false;
        chn = File.read_uint16(p,_BE)+ofs;
        if(chn < p+2 || chn > File.getSize()-2) return false;
    }
    return true;
}
if(!bDetected && Binary.isDeepScan() && isMXDRV()) {
    sName = "X68k MXDRV module (.MDX)"; bDetected = 1;
    if(pdxfn != "") sVersion = "+ "+pdxfn;
    if(ch==16) sVersion += "#EX-PCM";
    if(comp) sVersion += "(compressed)";
    if(Binary.isVerbose()) {
        sOption(t);
    }
}

function isDMM() {
    // ref https://bitbucket.org/zxtune/zxtune/src/develop/src/formats/chiptune/digital/digitalmusicmaker.cpp
    for(i=0; i < 6; i++) if(!(0xC0 <= File.read_uint8(i*2+1) <= 0xFF)) return false;
    ptnsz = File.read_uint8(0x0C); if(ptnsz & 0x87) return false;
    ptn = -1; for(i=0; i < 0x32; i++) {
        j = File.read_uint8(0x0E+i); if(j > 0x17) return false;
        if(j > ptn) ptn = j;
    } ptn++;
    tempo = File.read_uint8(0x40); if(tempo < 3 || tempo > 30) return false;
    loop = File.read_uint8(0x41); if(loop > 0x32) return false;
    ord = File.read_uint8(0x43); if(!ord || ord > 0x32) return false;
    hss = File.read_uint8(0x44); if(hss < 2 || hss > 0x38) return false;
    malformed = false; smp = 0;
    for(i=0; i < 16; i++) {
        smpst = File.read_uint16(0x5A+i*16+9,_LE);
        smplm = File.read_uint16(0x5A+i*16+12,_LE);
        smplp = File.read_uint16(0x5A+i*16+14,_LE);
        if(smpst > smplm || smpst < 49152 || smplm < 49152) return false;
        if(smplp < 49152 || smplp > smplm || smpst > smplp
          || (smplm > 49152 && smplm-smplp < 6)) {
            malformed = true;
            if(!Binary.isHeuristicScan()) return false
        }
        if(smpst < smplm) smp++;
    }
    return true
}
if(!bDetected && Binary.isDeepScan() && isDMM()) {
    bDetected = 1; sVersion = "v1.x"; if(malformed) sVersion += "/malformed";
    sName = "Digital Music Maker module (.DMM)";
    if(Binary.isVerbose())
        sOption("tempo:"+tempo+" ord:"+ord+" ptn:"+ptn+" smp:"+smp+" loop:"+loop)
}

function isV2M() {
    //ref https://github.com/farbrausch/fr_public/blob/master/v2/v2mplayer.cpp ::InitBase
    //with kind commentary from Tammo "kb" Hinrichs
    notes = 0; chs = 0;
    if(File.getSize() < 480) return false;
    timediv = File.read_uint32(0,_LE); if(!timediv) return false;
    maxtime = File.read_uint32(4,_LE); if(!maxtime) return false;
    gdnum = File.read_uint32(8,_LE); if(!gdnum) return false;
    p = 12+10*gdnum;
    for(ch=0; ch < 16; ch++) {
        notenum = File.read_uint32(p,_LE); p += 4; notes += notenum;
        if(notenum) { chs++;
            p += 5*notenum;
            if(p > File.getSize()) return false;
            pcnum = File.read_uint32(p,_LE); p += 4+4*pcnum; //pgm change events
            if(p > File.getSize()) return false;
            pbnum = File.read_uint32(p,_LE); p += 4+5*pbnum; //pitch bends
            if(p > File.getSize()) return false;
            for(cn=0; cn < 7; cn++) {
                ccnum = File.read_uint32(p,_LE); p += 4+4*ccnum; //control changes
                if(p > File.getSize()) return false;
            }
        }
    }
    size = File.read_uint32(p,_LE); if(size > 16384) return false; //uint32 so "|| size<0" removed
    p += 4+size; if(p > File.getSize()) return false;
    size = File.read_int32(p,_LE);
    if(size > 1048576 || size<0) return false;
    p += 4+size; if(p > File.getSize()) return false;
    return true;
}
if(!bDetected && Binary.isDeepScan() && isV2M()) {
    sName = "farbrausch V2 Synthesizer module (.V2M)"; bDetected = 1;
    if(Binary.isVerbose())
        sOption = "ch:"+chs+"notes:"+notes+"timediv:"+timediv+"maxtime:"+maxtime;
    //TODO add the final tags
}

function isComposer670() {
    // from https://github.com/OpenMPT/openmpt/blob/master/soundlib/Load_c67.cpp
    if(File.getSize() < 1954+1024) return false; //7A2+400 = BA2
    spd = File.read_uint8(0);
    if(!spd || spd > 15) return false;
    ord = 0;
    for (i=0; i < 256; i++) { // check orders
        o = File.read_uint8(1698+i);
        if(o >= 128 && o != 0xFF) return false;
        if(o > ord && o != 0xFF) ord = o;
    }
    ord++;
    nonz = false;
    for (i=0; i < 32; i++) { // checking sample records
        _z = File.read_uint8(2+i*13+12); if(_z) return false;
        _t = File.read_uint32(0x1A2+i*16,_LE); if(_t) return false;
        _l = File.read_uint32(0x1A2+i*16+4,_LE); if(_l > 0xFFFFF) return false;
        _ls = File.read_uint32(0x1A2+i*16+8,_LE);
        _le = File.read_uint32(0x1A2+i*16+12,_LE);
        _z = File.read_uint8(0x3A2+i*13+12); if(_z) return false;
        if(File.read_uint8(0x542+i*11) & 0xF0) return false;
        if(File.read_uint8(0x542+i*11+5) & 0xFC) return false;
        if(File.read_uint8(0x542+i*11+10) & 0xFC) return false;
        if(_l && _le < 0xFFFFF) if(_le > _l || _ls > _le) return false;
        if(!nonz && (_l || !Binary.compare("00000000 00000000 000000",0x542+i*11)))
            nonz = true;
    }
    if(!nonz) return false;
    malformed = false;
    for (i=0; i < 128; i++) { // checking patterns
        ptnofs = File.read_uint32(0x7A2+i*4,_LE);
        ptnlen = File.read_uint32(0x9A2+i*4,_LE);
        if(ptnofs > 0xFFFFFF || (File.getSize() < 0xBA2+ptnofs+ptnlen))
            return false;
    }
    if(!malformed) malformed = (ptnlen < 3 || ptnlen > 0x1000);
    return true
}
if(!bDetected && Binary.isDeepScan() && isComposer670()) {
    sName = "CDFM/Composer 670 module (.C67)"; bDetected = 1;
    if(malformed) sVersion = "malformed";
    if(Binary.isVerbose()) sOption = "spd:"+spd+" ord:"+ord
}

function isADL() {
    //ref https://github.com/adplug/adplug/blob/master/src/adl.cpp -> CadlPlayer::load
    if(File.getSize() < 720 || File.getSize() > 0xFFFF) return false; //v1 min. size
    p = 0; nV = 4; ofs = 500 /*0x1F4*/; //track entries
    for(i=0; i < 250; i++) { //500=1F4h is the trackentries buffer
        w = File.read_uint16(p,_LE); p += 2;
        if(500 <= w && w < 0xFFFF) { //in v4, all entries are within this range
            nV = 3; ofs = 120 /*0x78*/; break
        }
    }
    p = ofs;
    if(nV < 4) {
        nprogofs = 150; //for v1
        for(i=0; i < nprogofs; i++) {
            w = File.read_uint16(p,_LE); p += 2;
            if(w) {
                if(w != 0xFFFF && w+ofs > File.getSize()) return false;
                if(w < 600) return false;
                if(w < 1000) { nV = 1; if(File.read_uint16(120,_LE) != 0x258) return false }
            }
            if(nV > 1) {
                if(File.getSize() < 1120) return false; //v2/3 min. size
                nprogofs = 250 /*0xFA*/;
                for(i=150; i < nprogofs; i++) { //check the rest of'em
                    w = File.read_uint16(p,_LE); p += 2;
                    if(w) {
                        if(w != 0xFFFF && (w+ofs > File.getSize() || ofs < nprogofs)) return false;
                        if(w && w < 1000) return false;
    }}}}
    } else { //v4
        if(File.getSize() < 2500) return false;
        nprogofs = 500;
        for(i=0; i < nprogofs; i++) { //check the rest of'em
            w = File.read_uint16(p,_LE); p += 2;
            if(w) {
                if(w != 0xFFFF && (w+ofs > File.getSize() || ofs < nprogofs)) return false;
                if(w && w < 2000) return false;
            }}}
    return true
    //whilst it'd be nice to have instruments (same len as prog ptr tbl) subsong detection...
    //... it's too much already
    //TODO false positive: modland/pmd/- unknown/Akai suishou no hitomi/ano-s01.m
}
if(!bDetected && Binary.isDeepScan() && isADL()) {
    sName = "Westwood ADL chiptune (.ADL)"; bDetected = 1;
    switch(nV) {
    case 1: sVersion = "v1"; break;
    case 3: sVersion = "v2.x"; break;
    case 4: sVersion = "v3"
    }
}

function isFLS() {
    //this detection is based purely on sanity checks
    //  AND a tiiiiiny ~bruteforce~ of membase, which is why it comes in last
    //ref https://bulba.untergrund.net/Ay_Emul29.src.7z/Players.pas -> FoundFLS
    if(File.getSize() < 6) return false;
    //because it can get SO SLOW and the biggest module known is 6652 bytes long:
    if(File.getSize() > 8192) return false;
    postp = File.read_uint16(0x00,_LE); orntp = File.read_uint16(0x02,_LE); //positions & ornaments table ptrs
    smptp = File.read_uint16(0x04,_LE); ptnp = 6; //samples table ptr & patterns
    j = postp - smptp; if(j < 0 || (j&3)) return false;
    j = orntp-16; if(j < 0) return false;
    while(1) {
        j2 = smptp+2-j;
        if(j2 > File.getSize()+6) return false; // tentatively
        if(8 <= j2 < File.getSize()) {
            j3 = File.read_uint16(j2,_LE);
            j1 = j3 - j;
            if(8 <= j1 < File.getSize()) {
                j3 = File.read_uint16(j2 - 4);
                j2 = j3 - j;
                if(6 <= j2 < File.getSize())
                    if(j1-j2 == 0x20) {
                        j2 = File.read_uint16(ptnp+2,_LE)-j;
                        if(21 < j2 < File.getSize()) {
                            j1 = File.read_uint16(ptnp,_LE)-j;
                            if(20 < j1 < File.getSize())
                                if(!File.read_uint8(j1-1)) {
                                    while((j1 <= File.getSize()) && (File.read_uint8(j1) < 0xFF)) {
                                        while(1) {
                                            bt = File.read_uint8(j1);
                                            if((bt <= 0x5F) || (bt == 0x80) || (bt == 0x81)) { j1++; break }
                                            else if(0x82 <= bt <= 0x8E) j1++;
                                            if(j1>File.getSize()) break;
                                        }
                                    }
                                }
                                if(j1+1 == j2) break;
                        }
                    }
            }
        }
        j--; if(j < 0) break;
    }
    if(j < 0) return false;
    if((postp-j > File.getSize()) || (postp-j < 16)) return false;
    sz = File.read_uint16(postp-j-2,_LE)+0x60-j;
    if(sz <= postp-j) return false;
    if(sz > File.getSize()+1) return false;
    if((smptp-j)&1) return false;
    membase = j;
    return true;
}
if(!bDetected && Binary.isDeepScan() && isFLS()) {
    sName = "Flash Tracker module (.FLS)"; sVersion = "@"+Hex(j); bDetected = 1;
    if(Binary.isVerbose()) sOption = "sz:"+sz
}



//the followng signature detectors seem shaky to me [Kae] so they're heuristic and in parallel
//_setResult(TYPE, NAME, VERSION, OPTIONS)

if(Binary.isHeuristicScan()) { //parallel block

    // Let's start with just judging by the extensions:
    if(extIs("bmf")) {//TODO
        _setResult("audio","The Brain's Easy Adlib 1.0 chiptune (.BMF)","","")
    }
    else if(extIs("mok")) { //TODO
        _setResult("audio","Silmarils module (.MOK)","","")
    }
    else if(extIs("imf") || extIs("wlf")) { //a detector is quite impossible to produce...
        if(extIs("imf"))
            freq = "560Hz (or 280Hz if Duke Nukem II)";
        else
            freq = "700Hz";
        _setResult("audio","id/Apogee Music Format chiptune (.IMF)","","freq: "+freq);
    }
    else if(extIs("svar") && Binary.compare("'PK'")) { //TODO detect in-zip
        _setResult("audio","SVArTracker module (.SVAR)","","");
    }
    else if(extIs("aks") && Binary.compare("1F8B")) { //TODO detect in-zip
        _setResult("audio","ArkosTracker module (.AKS)","","");
    }

    if(Binary.compare("0002",0x0E) && Binary.compare("0002",0x26)
        && Binary.compare("0002",0x32) && Binary.compare("0040",0x46)) {
        _setResult("audio","GT Game Systems module (.DUX)","","")
    }
    if(Binary.compare("28",3) && Binary.compare("21",0x20) && Binary.compare("FFFF",0x22)
      && Binary.compare("10",0x2B) && Binary.compare("32",0x33)) {
        _setResult("audio","Lionheart module (.LION)","","")
    }
    if(Binary.compare("2D58",0x134) && Binary.compare("183D7C",0x137)
      && Binary.compare("144DEE",0x13D) && Binary.compare("362D58",0x141)) {
        _setResult("audio","Mike Davies's module (.MD)","","")
    }

    if(Binary.compare("'SONG'", 0x3C)) {
        _setResult("audio","SoundFX module (.SFX)","","");
    }
    if(Binary.compare("00000114000001", 0x24)
      && Binary.compare("000001140000011400000114000001140000011400000114", 0x74)) {
        _setResult("audio","Sound Factory module (.PSF)","","")
    }
    else if(Binary.compare("'2a'16'I'FA",0x17)
      && Binary.compare("'2a'0C'I'FA",0x21) && Binary.compare("'Ff'EE'J@g'06')K'",0x45)) {
        _setResult("audio","Quartet PSG module (.SQT)","","")
    }

    //these are compares at 0, so they can be non-parallel, to optimise it all
    if(Binary.compare("8400")) {
        if(File.read_uint8(2) == 0xF0) sversion = "adv."; else sversion = "";
        _setResult("audio","Sierra Adlib chiptune (.SCI)",sversion,"")
    }
    else if(Binary.compare("AE")) { //TODO
        _setResult("audio","Polly Tracker module (.MOD)","","")
    }
    else if(Binary.compare("'MMME'") || Binary.compare("'TFMX'")
      || Binary.compare("60..60..48E7") || Binary.compare("60..60..41FA")
      || Binary.compare("6000....6000....48E7") || Binary.compare("6000....600...6000...6000....48E7")) {
        _setResult("audio","Jochen Hippel's ST module (.SOG)","","")
    }

    else if(Binary.compare("1C52")) {
        _setResult("audio","Sound Interface System module (.LEM)","","")
    }
    else if(Binary.compare("'NED'")) {
        _setResult("audio","Nerd Tracker ][ module (.NED)","","")
    }
    else if(Binary.compare("'MODU'")) {
        if(Binary.isVerbose())
            _setResult("audio","NovoTrade Packer module (.NTP)","",File.read_ansiString(4,16));
        else _setResult("audio","NovoTrade Packer module (.NTP)","","")
    }
    else if(Binary.compare("'Ice!'") || Binary.compare("'ICE!'")) {
    //TODO find a sanity check to narrow it down, then move it to the other sanities
        _setResult("audio","Atari ST chiptune (.SNDH)","compressed","")
    }
    else if( ([0x5941,0x4D59,0x7961,0x6D79].indexOf(File.read_uint16(0,_LE)) > 0) &&
        (1980 < File.read_uint16(0x0A,_LE) < 2050)) {
        //ref https://bulba.untergrund.net/Ay_Emul30alpha11.src.7z / Formats.pas
        fmode = 0;
        if(!File.read_uint8(2)) sversion = "1ch"; else sversion = "2ch";
        switch (File.read_uint16(0,_LE)) {
            case 0x5941: case 0x4D59: fmode = 1;
            case 0x5941: case 0x7961: sversion += " AY-3-8910/12"; break;
            case 0x4D59: case 0x6D79: sversion += " YM2149"; break;
            default: sversion += " unk.chip"
        }
        soption="";
        if(Binary.isVerbose()) {
            p=0x10;
            t = File.read_codePageString(p,Math.min(256,File.getSize()-p),"CP1251"); p+=t.length+1;
            soption = soption.append(t);
            a = File.read_codePageString(p,Math.min(256,File.getSize()-p),"CP1251"); p+=a.length+1;
            a=a.trim(); if(a.length) soption = soption.append("by: "+a);
            if(!fmode) {
                y = File.read_uint16(0x0A,_LE);
                if(y>0) soption.append("'"+y);
                pr = File.read_codePageString(p,Math.min(256,File.getSize()-p),"CP1251"); p+=pr.length+1;
                pr = pr.trim(); if(pr.length) soption = soption.append("for: "+pr);
                tn = File.read_ansiString(p,Math.min(256,File.getSize()-p)); p+=tn.length+1;
                tn = tn.trim(); if(tn.length) soption = soption.append("trk: "+tn);
                c = File.read_ansiString(p,Math.min(256,File.getSize()-p)); p+=c.length+1;
                c = c.trim(); if(c.length) soption = soption.append("in: "+c)
            }
            soption = soption.append("chip freq:"+File.read_uint32(5,_LE)+"Hz");
            soption = soption.append("int.freq:"+File.read_uint8(9)+"kHz")
        }
        _setResult("audio","Vortex Project audio (.VTX)",sversion,soption)
    }
    // everyone's fave let's-detect-by-Amiga-init-block ones grouped in here. TODO
    else if(Binary.compare("6000.... 6000.... 6000") && Binary.compare("6000", 0x0C)
      && Binary.compare("003000", 0x722) && Binary.compare("FAF1", 0x1051))  {
        _setResult("audio","Sean Connolly's module (.SCN)")
    }
    else if(Binary.compare("600000..6000....6000") && Binary.compare("177C00", 0xEA)
      && Binary.compare("2BFF", 0x1D9) && Binary.compare("000667", 0x4D4)) {
        bDetected = 1; sName = "Sound Master II module (.SM3)"; sVersion = "v3"
    }

    function isMXDRVPDX() {
        // the format is very very very basic so .ADL overlaps happen
        //and it's not possible to test more
        if(File.getSize() < 0x300 || File.getSize() > 96*8+96*65535) return false;
        sz = 0;
        for(i=0; i<96; i++) {
            p = File.read_uint32(i*8,_BE);
            if(!p) continue;
            if(p < 0x300) return false;
            sz++;
            s = File.read_uint16(i*8+4,_BE);
            if(s > 0xFFFF || p+s > File.getSize()) return false;
        }
        if(!sz) return false;
        return true
    }
    if(isMXDRVPDX()) {
        _setResult("audio","X68k MXDRV PCM resource (.PDX)","","entries:"+sz)
    }

    function isHIP() {
        //ref https://web.archive.org/web/20081006053424/http://amore68k.netfirms.com/amore_v1.01a_007.zip
        // の中のhippel.txt
        //TODO sz is always incorrect and much bigger
        a1_ = File.findSignature(7,TOEOF,"0071007100710071 007100710071");
        if(a1_ < 0) return false;
        a1 = File.findSignature(a1_+0x0C,0x100,"'TFMX'");
        if(a1 < 0) return false;
        if(File.read_ansiString(a1-0x20,4) == "COSO") return false;
        u1 = File.read_uint16(a1+4,_BE)+1; u2 = File.read_uint16(a1+6,_BE)+1;
        u3 = File.read_uint16(a1+8,_BE)+1; p1 = File.read_uint16(a1+0x0A,_BE)+1;
        s1 = File.read_uint16(a1+0x10,_BE)+1; i1 = File.read_uint16(a1+0x12,_BE);
        um = 0x40; pm = 0x0C; sm = 6; im = 0x1E;
        a2 = a1+0x20; a3 = a2+u1*um; a4 = a3+u2*um; a5 = a4+u3*um;
        a6 = a5+p1*pm; a7 = a6+s1*sm; a8 =a7+ i1*im;
        if(a8 > File.getSize()) return false;
        sz=0;
        //_log("a4:"+Hex(a4)+" a5:"+Hex(a5)+" a6:"+Hex(a6)+" a7:"+Hex(a7)+" a8:"+Hex(a8));
        for(i=0; i < i1; i++) {
            smpend = File.read_uint32(a7+i*im+0x12,_BE)+File.read_uint16(a7+i*im+0x16)*2;
            //_log("smp #"+i+"["+File.read_ansiString(a7+i*im,0x12)+"]>"+Hex(smpend));
            if(sz < smpend) sz = smpend;
        }
        sz += a8;
        if(File.read_uint8(0) != 0x60) return false; else { //asm tests
            if(!File.read_uint8(1)) { //b.short
                jinitplay = Math.max(File.read_uint8(1),File.read_uint8(3));
                if(jinitplay != 6) return false;
            } else { //b.long
                jinitplay = Math.max(File.read_uint16(3,_BE),File.read_uint16(7,_BE));
                if(jinitplay != 0xFE61 && jinitplay != 0x1A41) //only see the second one in two files
                    return false;
            }
        }
        //if(sz > File.getSize()) return false; //what a weird thing
        return true
    }
    if(Binary.isDeepScan() && isHIP()) {
        _setResult("audio","Jochen Hippel's module (.HIP)","","sz:"+sz)
    }

    function isKDM() {
        // ref http://advsys.net/ken/kdmsongs.zip/KDMSRC.ZIP/kdmwin/KDMENG.C
        if(File.getSize() < 12) return false; 
        if(File.read_uint32(0,_LE)) return false; //kdmversionum
        numnotes = File.read_uint32(4,_LE); if(!numnotes || numnotes > 8192) return false;
        numtracks = File.read_uint32(8,_LE); if(!numtracks || numtracks > 256) return false;
        sz = 12+numtracks*4+numnotes*11;
        if((sz != File.getSize()) && (sz != File.getSize()+numnotes)) return false;
        return true
    }
    if(isKDM()) {
        if(sz > File.getSize()) sversion = "no panning effects"; else sversion = "";
        if(Binary.isVerbose()) soption = "trk:"+numtracks+" notes:"+numnotes; else soption = "";
        _setResult("audio","Ken's Digital Music module (.KDM)",sversion,soption);
    }

    function isSQDigitalTracker() {
        //from https://bitbucket.org/zxtune/zxtune/src/develop/src/formats/chiptune/digital/sqdigitaltracker.cpp
        for(i=0; i < 8; i++) {
            if(File.read_uint8(0xC0+i*4)) return false;
            q = File.read_uint8(0xC0+i*4+1); if(q < 0x80 || q > 0xC0) return false;
            q = File.read_uint8(0xC0+i*4+2); if(q < 0x58 || q > 0x5F) return false;
            q = File.read_uint8(0xC0+i*4+3); if(!q || q > 0x80) return false;
        }
        for(i=0; i < 0x20; i++) {
            t_ = File.read_uint8(0x100+i);
            if(t_[i] < 0x20 || t_[i] > 0x7F) return false
        }
        t = File.read_ansiString(0x100,0x20);
        ptn = -1;
        for(i=0; i < 100; i++) {
            q = File.read_uint8(0x1A0+i); if(q > 0x1F) return false;
            if(ptn < q) ptn = q;
        } ptn++;
        if(File.read_uint8(0x204) != 0xFF) return false;
        _log(1);
        tempo = File.read_uint8(0x210);
        _log("tempo:"+tempo);
        if(tempo < 2 || tempo > 10) return false;
        len = File.read_uint8(0x212);
        _log("len:"+len);
        if(!len || len > 0x64) return false; len++;
        loop = File.read_uint8(0x211);
        _log("loop:"+loop);
        if(loop >= len) return false;
        return true
    }
    if(Binary.isDeepScan() && isSQDigitalTracker()) {
        soption = "";
        if(Binary.isVerbose()) {
            soption = soption.append(t.trim());
            soption = soption.append("tempo:"+tempo+" ord:"+len+" ptn:"+ptn+" loop:"+loop);
        }
        _setResult("audio","SQ Digital Tracker module (.SQD,.M)","",soption)
    }

    function isFredMon() {
        //ref https://zakalwe.fi/uade/uade3/uade-3.03.tar.bz2 / uade/src/frontends/common/amifilemagic.c
        if(!Binary.compare("4EFA....4EFA....4EFA....4EFA")) return false;
        for (i = 0x10; i < 256; i += 2)
            if (Binary.compare("4E7547FA ........ ........ 4E75",i)) return true
        return false
    }
    if(Binary.isDeepScan() && isFredMon()) {
        _setResult("audio","FredMon module (.FRED)","","")
    }

    function isMON() {
        if(!Binary.compare("4EFA....4EFA....4EFA")) return false;
        var t = File.read_uint16(2,_BE); if (t > File.getSize() - 9) return false;
        return Binary.compare("4BFA.... 08AD 0000",t+2)
    }
    if(Binary.isDeepScan() && isMON()) {
        _setResult("audio","Maniacs of Noise module (.MON)","","")
    }

} //isHeuristicScan parallel block

    return result(bShowType,bShowVersion,bShowOptions);
}
// https://github.com/horsicq/Detect-It-Easy signature file
// Author: Kaens TG@kaens

init("audio","Next/SUN Au waveform audio (.AU,.SND)");
includeScript("read");

function detect(bShowType,bShowVersion,bShowOptions) {

    //ref https://en.wikipedia.org/wiki/Au_file_format
    // & https://sox.sourceforge.net/AudioFormats-11.html#ss11.2
    // & http://soundfile.sapp.org/doc/NextFormat/soundstruct.h
    // & https://sox.sourceforge.net/AudioFormats-11.html
    if(!Binary.compare("'.snd'")) return false; malformed = 0;
_log("   1" );
    dataofs = File.read_uint32(4,_BE);
_log(Hex(dataofs));
    if(dataofs<0x18 || dataofs>File.getSize()) return false;
    if(dataofs<0x1C) malformed = "dtofs="+Hex(dataofs);
_log("   2");
    datasz = File.read_uint32(8,_BE);
    if(datasz != 0xFFFFFFFF && datasz > File.getSize()) malformed = "dtsz="+Hex(datasz);
    bDetected = 1;
    switch(File.read_int32(0x0C,_BE)) {
    case 0x00: sVersion = "unspecified format"; break;
    case 0x01: sVersion = "8-bit G.711 μ-law"; break;
    case 0x02: sVersion = "8-bit linear PCM"; break;
    case 0x03: sVersion = "16-bit linear PCM"; break;
    case 0x04: sVersion = "24-bit linear PCM"; break;
    case 0x05: sVersion = "32-bit linear PCM"; break;
    case 0x06: sVersion = "32-bit IEEE floating point"; break;
    case 0x07: sVersion = "64-bit IEEE floating point"; break;
    case 0x08: sVersion = "Fragmented sample data"; break;
    case 0x0A: sVersion = "DSP program"; break;
    case 0x0B: sVersion = "8-bit fixed point"; break;
    case 0x0C: sVersion = "16-bit fixed point"; break;
    case 0x0D: sVersion = "24-bit fixed point"; break;
    case 0x0E: sVersion = "32-bit fixed point"; break;
    case 0x10: sVersion = "Sound Kit's visual data"; break;
    case 0x11: sVersion = "MULAW_SQUELCH"; break;
    case 0x12: sVersion = "16-bit linear w/emphasis"; break;
    case 0x13: sVersion = "16-bit linear compressed"; break;
    case 0x14: sVersion = "16-bit linear w/emphasis compressed"; break;
    case 0x15: sVersion = "Music Kit DSP commands"; break;
    case 0x17: sVersion = "ITU-T G.721 4-bit ADPCM"; break;
    case 0x18: sVersion = "ITU-T G.722 4-bit SB-ADPCM"; break;
    case 0x19: sVersion = "ITU-T G.723 3-bit SB-ADPCM"; break;
    case 0x1A: sVersion = "ITU-T G.723 5-bit SB-ADPCM"; break;
    case 0x1B: sVersion = "8-bit G.711 A-law"; break;
    case 0x1B: sVersion = "AES"; break;
    case 0x1C: sVersion = "8-bit Delta μ-law"; break;
    default: sVersion = "unknown"
    }
    if(malformed) sVersion += ", malformed "+malformed;
    if(Binary.isVerbose()) {
        sr = (File.read_uint32(0x10,_BE)/1000).toFixed(1); ch = File.read_uint32(0x14,_BE);
        if(dataofs >= 0x1C) sOption(File.read_ansiString(0x18,Math.min(File.getSize()-0x18,0x100)));
        sOption("ch:"+ch+" s/r:"+sr+"kHz");
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP
// Status: WIP

init("audio","FMOD Sample Bank (.FSB)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=0x24)
    {
        if(Binary.compare("'FSB'.."))
        {
            var nSamples, nExtVer, nMode;
            var sID  = Binary.getString(0,4);
            sVersion = sID;
            bDetected=true;
            switch(sID)
            {
                case "FSB1": nSamples = Binary.read_int32(0x04); break;

                case "FSB2": nSamples = Binary.read_int32(0x04); break;

                case "FSB3": nSamples = Binary.read_int32(0x04); 
                             nExtVer  = Binary.read_int32(0x10);
                             nMode    = Binary.read_int32(0x14); break;

                case "FSB4": nSamples = Binary.read_int32(0x04);
                             nExtVer  = Binary.read_int32(0x10);
                             nMode    = Binary.read_int32(0x14); break;

                case "FSB5": nSamples = Binary.read_int32(0x08);
                             nExtVer  = Binary.read_int32(0x10);
                             nMode    = Binary.read_int32(0x18);
                             switch(nMode)
                             {
                                case  0x01: sOption("PCM8");        break; // 8bit integer PCM data. 
                                case  0x02: sOption("PCM16");       break; // 16bit integer PCM data.
                                case  0x03: sOption("PCM24");       break; // 24bit integer PCM data. 
                                case  0x04: sOption("PCM32");       break; // 32bit integer PCM data.
                                case  0x05: sOption("PCMFLOAT");    break; // 32bit floating point PCM data.
                                case  0x06: sOption("GCADPCM");     break; // Compressed Nintendo 3DS/Wii DSP data. 
                                case  0x07: sOption("IMA ADPCM");   break; // Compressed IMA ADPCM data.
                                case  0x08: sOption("VAG");         break; // Compressed PlayStation Portable ADPCM data.
                                case  0x09: sOption("HEVAG");       break; // Compressed PSVita ADPCM data. 
                                case  0x0A: sOption("XMA");         break; // Compressed Xbox360 XMA data.
                                case  0x0B: sOption("MP3");         break; // Compressed MPEG layer 2 or 3 data. 
                                case  0x0C: sOption("CELT");        break; // Compressed CELT data.
                                case  0x0D: sOption("AT9");         break; // Compressed PSVita ATRAC9 data. 
                                case  0x0E: sOption("XWMA");        break; // Compressed Xbox360 xWMA data.
                                case  0x0F: sOption("VORBIS");      break; // Compressed Vorbis data.
                                case  0x10: sOption("FADPCM");      break; // 
                                case  0x11: sOption("OPUS");        break; // 
                                default: bDetected=false;
                             }
                             break;
                             
                default: bDetected=false;
            }
            sOption("Samples:"+nSamples);
        }

    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// https://github.com/horsicq/Detect-It-Easy signature file
// Authors: Levis <levintaeyeon@live.com>
//         Jason Hood <jadoxa@yahoo.com.au>
//         Kaens (TG @kaens)

init("audio","WAV Audio File");

function detect(bShowType,bShowVersion,bShowOptions) {
// redoing to include the other formats, make it chunk-aware,
// and, most importantly, include OGG-in-WAV

    const _BE = true; const _LE = false; //endianness for read_uint16+
    //chunks!
    pn=0; pc=0;  hkhd=""; hksz=4; //12 skips the static header bit

function Hex(a) { return a.toString(16).toUpperCase()+"h" }
function nextChunk() {
    if(pn+hksz+8 < Binary.getSize()) {
        pn+=hksz+8; hkhd=Binary.read_ansiString(pn,4); hksz=Binary.read_uint32(pn+4,_BE);
        if (hksz%2==1) hksz++;
        pc=pn+8; //chunk's internal pointer (pn points at hkhd)
        return true;
    }
    else return false;
}

    if(Binary.getSize()>=36 && Binary.compare("'RIFF'........'WAVE'")) {
        sName = "RIFF container/WAVE";
        dcsamples = 0;
        chunks="";
        while(nextChunk()) {
            chunks+=" *"+hkhd+" ["+Hex(hksz)+"] @"+Hex(pc);
            switch(hkhd) {
                case "fmt ":
                    bDetected=1;
                    nFormat=Binary.read_uint16(pc,_LE);
                    nChannels=Binary.read_uint16(pc+2,_LE);
                    nRate=Binary.read_uint32(pc+4,_LE);
                    nBPS=Binary.read_uint16(pc+0x0E,_LE);
                    switch(nFormat) {
                        case 0x0001: sVersion="Microsoft PCM (uncompressed)"; break;
                        case 0x0002: sVersion="Microsoft ADPCM"; break;
                        case 0x0003: sVersion="Microsoft IEEE float"; break;
                        case 0x0004: sVersion="Compaq VSELP"; break;
                        case 0x0005: sVersion="IBM CVSD"; break;
                        case 0x0006: sVersion="ITU G.711 a-law"; break;
                        case 0x0007: sVersion="ITU G.711 u-law"; break;
                        case 0x0008: sVersion="Microsoft DTS"; break;
                        case 0x0009: sVersion="DRM"; break;
                        case 0x000A: sVersion="WMA 9 Speech"; break;
                        case 0x000B: sVersion="Microsoft Windows Media RT Voice"; break;
                        case 0x0010: sVersion="OKI-ADPCM"; break;
                        case 0x0011: sVersion="Intel IMA/DVI-ADPCM"; break;
                        case 0x0012: sVersion="Videologic Mediaspace ADPCM"; break;
                        case 0x0013: sVersion="Sierra ADPCM"; break;
                        case 0x0014: sVersion="Antex G.723 ADPCM"; break;
                        case 0x0015: sVersion="DSP Solutions DIGISTD"; break;
                        case 0x0016: sVersion="DSP Solutions DIGIFIX"; break;
                        case 0x0017: sVersion="Dialogic OKI ADPCM"; break;
                        case 0x0018: sVersion="Media Vision ADPCM"; break;
                        case 0x0019: sVersion="HP CU"; break;
                        case 0x001A: sVersion="HP Dynamic Voice"; break;
                        case 0x0020: sVersion="Yamaha ADPCM"; break;
                        case 0x0021: sVersion="SONARC Speech Compression"; break;
                        case 0x0022: sVersion="DSP Group True Speech"; break;
                        case 0x0023: sVersion="Echo Speech Corp."; break;
                        case 0x0024: sVersion="Virtual Music Audiofile AF36"; break;
                        case 0x0025: sVersion="Audio Processing Tech."; break;
                        case 0x0026: sVersion="Virtual Music Audiofile AF10"; break;
                        case 0x0027: sVersion="Aculab Prosody 1612"; break;
                        case 0x0028: sVersion="Merging Tech. LRC"; break;
                        case 0x0030: sVersion="Dolby AC2"; break;
                        case 0x0031: sVersion="Microsoft GSM610"; break;
                        case 0x0032: sVersion="MSN Audio"; break;
                        case 0x0033: sVersion="Antex ADPCM"; break;
                        case 0x0034: sVersion="Control Resources VQLPC"; break;
                        case 0x0035: sVersion="DSP Solutions DIGIREAL"; break;
                        case 0x0036: sVersion="DSP Solutions DIGIADPCM"; break;
                        case 0x0037: sVersion="Control Resources CR10"; break;
                        case 0x0038: sVersion="Natural MicroSystems VBX ADPCM"; break;
                        case 0x0039: sVersion="Crystal Semiconductors IMA ADPCM"; break;
                        case 0x003A: sVersion="Echo Speech ECHOSC3"; break;
                        case 0x003B: sVersion="Rockwell ADPCM"; break;
                        case 0x003C: sVersion="Rockwell DIGITALK"; break;
                        case 0x003D: sVersion="Xebec Multimedia"; break;
                        case 0x0040: sVersion="Antex G.721 ADPCM"; break;
                        case 0x0041: sVersion="Antex G.728 CELP"; break;
                        case 0x0042: sVersion="Microsoft MSG723"; break;
                        case 0x0043: sVersion="IBM AVC ADPCM"; break;
                        case 0x0045: sVersion="ITU-T G.726"; break;
                        case 0x0050: sVersion="Microsoft MPEG"; break;
                        case 0x0051: sVersion="RT23 or PAC"; break;
                        case 0x0052: sVersion="InSoft RT24"; break;
                        case 0x0053: sVersion="InSoft PAC"; break;
                        case 0x0055: sVersion="MP3"; break;
                        case 0x0059: sVersion="Cirrus"; break;
                        case 0x0060: sVersion="Cirrus Logic"; break;
                        case 0x0061: sVersion="ESS Tech. PCM"; break;
                        case 0x0062: sVersion="Voxware Inc."; break;
                        case 0x0063: sVersion="Canopus ATRAC"; break;
                        case 0x0064: sVersion="APICOM G.726 ADPCM"; break;
                        case 0x0065: sVersion="APICOM G.722 ADPCM"; break;
                        case 0x0066: sVersion="Microsoft DSAT"; break;
                        case 0x0067: sVersion="Microsoft DSAT-DISPLAY"; break;
                        case 0x0069: sVersion="Voxware Byte Aligned"; break;
                        case 0x0070: sVersion="Voxware ACB"; break;
                        case 0x0071: sVersion="Voxware AC10"; break;
                        case 0x0072: sVersion="Voxware AC16"; break;
                        case 0x0073: sVersion="Voxware AC20"; break;
                        case 0x0074: sVersion="Voxware MetaVoice"; break;
                        case 0x0075: sVersion="Voxware MetaSound"; break;
                        case 0x0076: sVersion="Voxware RT29HW"; break;
                        case 0x0077: sVersion="Voxware VR12"; break;
                        case 0x0078: sVersion="Voxware VR18"; break;
                        case 0x0079: sVersion="Voxware TQ40"; break;
                        case 0x007A: sVersion="Voxware SC3"; break;
                        case 0x007B: sVersion="Voxware SC3"; break;
                        case 0x0080: sVersion="Soundsoft"; break;
                        case 0x0081: sVersion="Voxware TQ60"; break;
                        case 0x0082: sVersion="Microsoft MSRT24"; break;
                        case 0x0083: sVersion="AT&T G.729A"; break;
                        case 0x0084: sVersion="Motion Pixels MVI-MV12"; break;
                        case 0x0085: sVersion="DataFusion G.726"; break;
                        case 0x0086: sVersion="DataFusion GSM610"; break;
                        case 0x0088: sVersion="Iterated Systems Audio"; break;
                        case 0x0089: sVersion="Onlive"; break;
                        case 0x008A: sVersion="Multitude, Inc. FT SX20"; break;
                        case 0x008B: sVersion="Infocom IT’S A/S G.721 ADPCM"; break;
                        case 0x008C: sVersion="Convedia G729"; break;
                        case 0x008D: sVersion="Congruency, Inc. (not specified)"; break;
                        case 0x0091: sVersion="Siemens SBC24"; break;
                        case 0x0092: sVersion="Sonic Foundry Dolby AC3 APDIF"; break;
                        case 0x0093: sVersion="MediaSonic G.723"; break;
                        case 0x0094: sVersion="Aculab Prosody 8kbps"; break;
                        case 0x0097: sVersion="ZyXEL ADPCM"; break;
                        case 0x0098: sVersion="Philips LPCBB"; break;
                        case 0x0099: sVersion="Studer Professional Audio Packed"; break;
                        case 0x00A0: sVersion="Maiden PhonyTalk"; break;
                        case 0x00A1: sVersion="Racal Recorder GSM"; break;
                        case 0x00A2: sVersion="Racal Recorder G720.a"; break;
                        case 0x00A3: sVersion="Racal G723.1"; break;
                        case 0x00A4: sVersion="Racal Tetra ACELP"; break;
                        case 0x00B0: sVersion="NEC AAC NEC Corporation"; break;
                        case 0x00FF: sVersion="AAC"; break;
                        case 0x0100: sVersion="Rhetorex ADPCM"; break;
                        case 0x0101: sVersion="IBM u-Law"; break;
                        case 0x0102: sVersion="IBM a-Law"; break;
                        case 0x0103: sVersion="IBM ADPCM"; break;
                        case 0x0111: sVersion="Vivo G.723"; break;
                        case 0x0112: sVersion="Vivo Siren"; break;
                        case 0x0120: sVersion="Philips Speech Processing CELP"; break;
                        case 0x0121: sVersion="Philips Speech Processing GRUNDIG"; break;
                        case 0x0123: sVersion="Digital G.723"; break;
                        case 0x0125: sVersion="Sanyo LD ADPCM"; break;
                        case 0x0130: sVersion="Sipro Lab ACEPLNET"; break;
                        case 0x0131: sVersion="Sipro Lab ACELP4800"; break;
                        case 0x0132: sVersion="Sipro Lab ACELP8V3"; break;
                        case 0x0133: sVersion="Sipro Lab G.729"; break;
                        case 0x0134: sVersion="Sipro Lab G.729A"; break;
                        case 0x0135: sVersion="Sipro Lab Kelvin"; break;
                        case 0x0136: sVersion="VoiceAge AMR"; break;
                        case 0x0140: sVersion="Dictaphone G.726 ADPCM"; break;
                        case 0x0150: sVersion="Qualcomm PureVoice"; break;
                        case 0x0151: sVersion="Qualcomm HalfRate"; break;
                        case 0x0155: sVersion="Ring Zero Systems TUBGSM"; break;
                        case 0x0160: sVersion="Microsoft Audio1"; break;
                        case 0x0161: sVersion="Windows Media Audio V2 V7 V8 V9 / DivX audio (WMA) / Alex AC3 Audio"; break;
                        case 0x0162: sVersion="Windows Media Audio Professional V9"; break;
                        case 0x0163: sVersion="Windows Media Audio Lossless V9"; break;
                        case 0x0164: sVersion="WMA Pro over S/PDIF"; break;
                        case 0x0170: sVersion="UNISYS NAP ADPCM"; break;
                        case 0x0171: sVersion="UNISYS NAP ULAW"; break;
                        case 0x0172: sVersion="UNISYS NAP ALAW"; break;
                        case 0x0173: sVersion="UNISYS NAP 16K"; break;
                        case 0x0174: sVersion="MM SYCOM ACM SYC008 SyCom Technologies"; break;
                        case 0x0175: sVersion="MM SYCOM ACM SYC701 G726L SyCom Technologies"; break;
                        case 0x0176: sVersion="MM SYCOM ACM SYC701 CELP54 SyCom Technologies"; break;
                        case 0x0177: sVersion="MM SYCOM ACM SYC701 CELP68 SyCom Technologies"; break;
                        case 0x0178: sVersion="Knowledge Adventure ADPCM"; break;
                        case 0x0180: sVersion="Fraunhofer IIS MPEG2AAC"; break;
                        case 0x0190: sVersion="Digital Theater Systems DTS DS"; break;
                        case 0x0200: sVersion="Creative Labs ADPCM"; break;
                        case 0x0202: sVersion="Creative Labs FASTSPEECH8"; break;
                        case 0x0203: sVersion="Creative Labs FASTSPEECH10"; break;
                        case 0x0210: sVersion="UHER ADPCM"; break;
                        case 0x0215: sVersion="Ulead DV ACM"; break;
                        case 0x0216: sVersion="Ulead DV ACM"; break;
                        case 0x0220: sVersion="Quarterdeck Corp."; break;
                        case 0x0230: sVersion="I-Link VC"; break;
                        case 0x0240: sVersion="Aureal Semiconductor Raw Sport"; break;
                        case 0x0241: sVersion="ESST AC3"; break;
                        case 0x0250: sVersion="Interactive Products HSX"; break;
                        case 0x0251: sVersion="Interactive Products RPELP"; break;
                        case 0x0260: sVersion="Consistent CS2"; break;
                        case 0x0270: sVersion="Sony SCX"; break;
                        case 0x0271: sVersion="Sony SCY"; break;
                        case 0x0272: sVersion="Sony ATRAC3"; break;
                        case 0x0273: sVersion="Sony SPC"; break;
                        case 0x0280: sVersion="TELUM Telum Inc."; break;
                        case 0x0281: sVersion="TELUMIA Telum Inc."; break;
                        case 0x0285: sVersion="Norcom Voice Systems ADPCM"; break;
                        case 0x0300: sVersion="Fujitsu FM TOWNS SND"; break;
                        case 0x0301: sVersion="Fujitsu (not specified)"; break;
                        case 0x0302: sVersion="Fujitsu (not specified)"; break;
                        case 0x0303: sVersion="Fujitsu (not specified)"; break;
                        case 0x0304: sVersion="Fujitsu (not specified)"; break;
                        case 0x0305: sVersion="Fujitsu (not specified)"; break;
                        case 0x0306: sVersion="Fujitsu (not specified)"; break;
                        case 0x0307: sVersion="Fujitsu (not specified)"; break;
                        case 0x0308: sVersion="Fujitsu (not specified)"; break;
                        case 0x0350: sVersion="Micronas Semiconductors, Inc. Development"; break;
                        case 0x0351: sVersion="Micronas Semiconductors, Inc. CELP833"; break;
                        case 0x0400: sVersion="Brooktree Digital"; break;
                        case 0x0401: sVersion="Intel Music Coder (IMC)"; break;
                        case 0x0402: sVersion="Ligos Indeo Audio"; break;
                        case 0x0450: sVersion="QDesign Music"; break;
                        case 0x0500: sVersion="On2 VP7 On2 Technologies"; break;
                        case 0x0501: sVersion="On2 VP6 On2 Technologies"; break;
                        case 0x0680: sVersion="AT&T VME VMPCM"; break;
                        case 0x0681: sVersion="AT&T TCP"; break;
                        case 0x0700: sVersion="YMPEG Alpha (dummy for MPEG-2 compressor)"; break;
                        case 0x08AE: sVersion="ClearJump LiteWave (lossless)"; break;
                        case 0x1000: sVersion="Olivetti GSM"; break;
                        case 0x1001: sVersion="Olivetti ADPCM"; break;
                        case 0x1002: sVersion="Olivetti CELP"; break;
                        case 0x1003: sVersion="Olivetti SBC"; break;
                        case 0x1004: sVersion="Olivetti OPR"; break;
                        case 0x1100: sVersion="Lernout & Hauspie"; break;
                        case 0x1101: sVersion="Lernout & Hauspie CELP"; break;
                        case 0x1102: sVersion="Lernout & Hauspie SBC"; break;
                        case 0x1103: sVersion="Lernout & Hauspie SBC"; break;
                        case 0x1104: sVersion="Lernout & Hauspie SBC"; break;
                        case 0x1400: sVersion="Norris Comm. Inc."; break;
                        case 0x1401: sVersion="ISIAudio"; break;
                        case 0x1500: sVersion="AT&T Soundspace Music Compression"; break;
                        case 0x181C: sVersion="VoxWare RT24 speech"; break;
                        case 0x181E: sVersion="Lucent elemedia AX24000P Music"; break;
                        case 0x1971: sVersion="Sonic Foundry LOSSLESS"; break;
                        case 0x1979: sVersion="Innings Telecom Inc. ADPCM"; break;
                        case 0x1C07: sVersion="Lucent SX8300P speech"; break;
                        case 0x1C0C: sVersion="Lucent SX5363S G.723 compliant"; break;
                        case 0x1F03: sVersion="CUseeMe DigiTalk (ex-Rocwell)"; break;
                        case 0x1FC4: sVersion="NCT Soft ALF2CD ACM"; break;
                        case 0x2000: sVersion="FAST Multimedia DVM"; break;
                        case 0x2001: sVersion="Dolby DTS"; break;
                        case 0x2002: sVersion="RealAudio 1 / 2 14.4"; break;
                        case 0x2003: sVersion="RealAudio 1 / 2 28.8"; break;
                        case 0x2004: sVersion="RealAudio G2 / 8 Cook (low bitrate)"; break;
                        case 0x2005: sVersion="RealAudio 3 / 4 / 5 Music (DNET)"; break;
                        case 0x2006: sVersion="RealAudio 10 AAC (RAAC)"; break;
                        case 0x2007: sVersion="RealAudio 10 AAC+ (RACP)"; break;
                        case 0x2500: sVersion="Reserved range to 0x2600 Microsoft"; break;
                        case 0x3313: sVersion="makeAVIS (ffvfw fake AVI sound from AviSynth scripts)"; break;
                        case 0x4143: sVersion="Divio MPEG-4 AAC audio"; break;
                        case 0x4201: sVersion="Nokia adaptive multirate"; break;
                        case 0x4243: sVersion="Divio G726 Divio, Inc."; break;
                        case 0x434C: sVersion="LEAD Speech"; break;
                        case 0x564C: sVersion="LEAD Vorbis"; break;
                        case 0x5756: sVersion="WavPack Audio"; break;
                        case 0x674F: sVersion="Ogg Vorbis (mode 1)"; break;
                        case 0x6750: sVersion="Ogg Vorbis (mode 2)"; break;
                        case 0x6751: sVersion="Ogg Vorbis (mode 3)"; break;
                        case 0x676F: sVersion="Ogg Vorbis (mode 1+)"; break;
                        case 0x6770: sVersion="Ogg Vorbis (mode 2+)"; break;
                        case 0x6771: sVersion="Ogg Vorbis (mode 3+)"; break;
                        case 0x7000: sVersion="3COM NBX 3Com Corporation"; break;
                        case 0x706D: sVersion="FAAD AAC"; break;
                        case 0x7A21: sVersion="GSM-AMR (CBR, no SID)"; break;
                        case 0x7A22: sVersion="GSM-AMR (VBR, including SID)"; break;
                        case 0xA100: sVersion="Comverse Infosys Ltd. G723 1"; break;
                        case 0xA101: sVersion="Comverse Infosys Ltd. AVQSBC"; break;
                        case 0xA102: sVersion="Comverse Infosys Ltd. OLDSBC"; break;
                        case 0xA103: sVersion="Symbol Technologies G729A"; break;
                        case 0xA104: sVersion="VoiceAge AMR WB VoiceAge Corporation"; break;
                        case 0xA105: sVersion="Ingenient Technologies Inc. G726"; break;
                        case 0xA106: sVersion="ISO/MPEG-4 advanced audio Coding"; break;
                        case 0xA107: sVersion="Encore Software Ltd G726"; break;
                        case 0xA109: sVersion="Speex ACM Codec xiph.org"; break;
                        case 0xDFAC: sVersion="DebugMode SonicFoundry Vegas FrameServer ACM"; break;
                        case 0xF1AC: sVersion="Free Lossless Audio Codec FLAC"; break;
                        case 0xFFFE: sVersion="Extensible"; break;
                        case 0xFFFF: sVersion="Development"; break;
                        default: sVersion = "Unknown"
                    }
                    break;
                case "fact":
                    dcsamples=Binary.read_uint32(pc,_LE); //the uncompressed (factual?) file size?
                case "data":
                    if(nBPS && nFormat==1 && (nBPS==8 || nBPS==16)) {
                        var nmSeconds = Math.round(Binary.readDword(pc-4)/(nBPS/8)/nRate/nChannels*1000);
                        sOption(new Date(nmSeconds).toISOString().substr(11, 8));
                    }
                    break;
                case "INFO":
                    c = Binary.getString(pc).trim();
                    if(c!="") sOptions = sOptions.append(c);
                    break;
                }
        } // end of chunks

        sOptions=sOptions.append(nRate+"Hz");
        sOptions = sOptions.append("ch: "+nChannels);
        if(nBPS) {
            sOptions=sOptions.append(nBPS+"-bit");
        }
        if(dcsamples>0) //for compressed things only
            sOptions = sOptions.append("fact:"+Math.round(dcsamples/1024/1024)+"M")
        if(chunks!="") sOptions = sOptions.append(chunks);
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>
/*
   Ref: http://mpgedit.org/mpgedit/mpeg_format/mpeghdr.htm
        http://www.codeproject.com/Articles/8295/MPEG-Audio-Frame-Header
*/

init("audio","MP3 Audio File");

includeScript("duration");

var MP3={
    aVersion:["2.5","2","1"],
    aLayer:  ["III","II","I"],
    aRatev1: [32,40,48, 56, 64, 80, 96,112,128,160,192,224,256,320,     // Layer III
              32,48,56, 64, 80, 96,112,128,160,192,224,256,320,384,     // Layer II
              32,64,96,128,160,192,224,256,288,320,352,384,416,448],    // Layer I
    aRatev2: [ 8,16,24,32,40,48, 56, 64, 80, 96,112,128,144,160,        // Layers III & II
              32,48,56,64,80,96,112,128,144,160,176,192,224,256],       // Layer I
    aFreq:   [11025,12000, 8000,                                        // v2.5
              22050,24000,16000,                                        // v2
              44100,48000,32000],                                       // v1
    aCh:     ["Stereo","Joint stereo","Dual mono","Mono"],

    header: function(nOffset)
    {
        // AAAAAAAA AAABBCCD EEEEFFGH IIJJKLMM
        var nHeader=Binary.readBEDword(nOffset);
        if((nHeader&0xFFE00000)!=~~0xFFE00000)  // AAAAAAAAAAA
        {
            return null;
        }
        var nVer=(nHeader>>>19)&3;              // BB
        if(nVer==1)                             // reserved
        {
            return null;
        }
        if(nVer>1)
        {
            --nVer;
        }
        var nLayer=(nHeader>>>17)&3;            // CC
        if(nLayer==0)                           // reserved
        {
            return null;
        }
        --nLayer;
        var nBitrateIndex=(nHeader>>>12)&15;    // EEEE
        if(nBitrateIndex==0||nBitrateIndex==15) // free/bad
        {
            return null;
        }
        --nBitrateIndex;
        var nSamplingIndex=(nHeader>>>10)&3;    // FF
        if(nSamplingIndex==3)                   // reserved
        {
            return null;
        }
        var nPadding=(nHeader>>>9)&1;           // G
        var nChannelMode=(nHeader>>>6)&3;       // II

        var nBitrate=nVer==2?this.aRatev1[nLayer*14+nBitrateIndex]
                            :this.aRatev2[(nLayer==2)*14+nBitrateIndex];
        var nFreq=this.aFreq[nVer*3+nSamplingIndex];
        var nTime;
        if(nLayer==2) // Layer I
        {
            nTime=384/nFreq;
        }
        else if(nLayer==1||nVer==2) // Layer II or v1,Layer III
        {
            nTime=1152/nFreq;
        }
        else // v2/2.5,Layer III
        {
            nTime=576/nFreq;
        }
        var bVBR=1;
        var nVBR=Binary.findString(nOffset,40,"Xing");
        if(nVBR==-1)
        {
            nVBR=Binary.findString(nOffset,40,"Info");
            bVBR=0;
        }
        if(nVBR!=-1&&(Binary.readByte(nVBR+7)&1))
        {
            nTime*=Binary.readBEDword(nVBR+8);
            nOffset=bVBR?-1:-2;
        }
        else if(Binary.compare("'VBRI'",nOffset+32))
        {
            nTime*=Binary.readBEDword(nVBR+46);
            nOffset=-1;
        }
        else
        {
            if(nLayer==2) // Layer I
            {
                nOffset+=Math.floor(12000*nBitrate/nFreq+nPadding)*4;
            }
            else
            {
                // 125 = 1000/8 = kilobits to bytes
                nOffset+=Math.floor(125*nBitrate*nTime+nPadding);
            }
        }
        return [this.aVersion[nVer],
                this.aLayer[nLayer],
                nBitrate,
                nFreq,
                this.aCh[nChannelMode],
                nTime,
                nOffset];
    }
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=128)
    {
        if(Binary.compare("'TAG'",Binary.getSize()-128))
        {
            sOptions="ID3v1";
        }
        var nOffset=0,bID3v2=0;
        if(Binary.compare("'ID3'"))
        {
            nOffset=(Binary.readByte(6)<<21)
                   |(Binary.readByte(7)<<14)
                   |(Binary.readByte(8)<<7)
                   |(Binary.readByte(9));
            nOffset+=10;
            if(sOptions=="")
            {
                sOptions="ID3v2";
            }
            else
            {
                sOptions+="&2";
            }
            bID3v2=1;
        }
        else if(Binary.compare("'WAVEfmt '........55",8))
        {
            nOffset=Binary.findString(50,50,"data")+8;
        }
        var aResult1,aResult=null;
        aResult1=MP3.header(nOffset);
        if(aResult1==null)
        {
            if(bID3v2)
            {
                // There may be some junk between the ID3 tag & the data (Win7
                // sample music files - C:\Users\Public\Music\Sample Music).
                // Since the ID3 tag is a fair indicator of an MP3, do a search
                // for v1,Layer III header.
                nOffset=Binary.findSignature(nOffset,768,"FFFB");
                aResult1=MP3.header(nOffset);
            }
            if(aResult1==null)
            {
                return "";
            }
        }
        if(aResult1[6]>0)
        {
            aResult=MP3.header(aResult1[6]);
            if(aResult==null)
            {
                return "";
            }
        }
        bDetected=1;
        // Assume version, layer & channels don't change.
        sVersion="v"+aResult1[0]+",Layer "+aResult1[1];

        if(bShowOptions)
        {
            var nFrames=1;
            var nRateSum=aResult1[2];
            var nFreqSum=aResult1[3];
            var nSeconds=aResult1[5];
            var bVBR=0,bVF=0;
            while(aResult!=null)
            {
                nFrames++;
                nRateSum+=aResult[2];
                nFreqSum+=aResult[3];
                nSeconds+=aResult[5];
                if(aResult[2]!=aResult1[2])
                {
                    bVBR=1;
                }
                if(aResult[3]!=aResult1[3])
                {
                    bVF=1;
                }
                aResult=MP3.header(aResult[6]);
            }
            sOptions=sOptions.append(Math.round(nRateSum/nFrames)+"kbps");
            if(bVBR)
            {
                sOptions+="(avg)";
            }
            sOptions=sOptions.append(Math.round(nFreqSum/nFrames)+"Hz");
            if(bVF)
            {
                sOptions+="(avg)";
            }
            sOptions=sOptions.append(aResult1[4],duration(nSeconds));
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("format","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("7ca0932f"))
    {
        bDetected=1;
        sName="R-Studio image";
        if(Binary.compare("78da",0x38)!=-1)
        {
            sOptions="compressed (zlib)";
        }
    }
    else if(Binary.compare("'$CAN'"))
    {
        switch(Binary.readByte(4))
        {
        case 0xe4: sOptions="First or single file"; break;
        case 0x60: sOptions="next file"; break;
        }
        bDetected=1;
        sName="Norton Ghost image";
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Tembo (http://tembolab.pl/products/executable-image-viewer.html)

init("format", "AAA Logo");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (Binary.getSize() >= 90)
    {
        if (Binary.compare("2CA46774"))
        {
            sVersion = "";
            sOptions = "";
            bDetected = 1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("format","Atari ST TOS executable");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("601a0000....................0000"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("format","Borland TLINK Symbol Table");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("FB52"))
    {
        sVersion=(Binary.readByte(3)+Binary.readByte(0x2)/100);

        sOptions="TDS";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Tembo (http://tembolab.pl/products/executable-image-viewer.html)

init("format", "Guitar Pro");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (Binary.getSize() > 31)
    {
        if (Binary.compare("'BCFZ'") || Binary.compare("'BCFS'"))
        {
            sVersion = "6.x";
            sName += " Tablature";
            bDetected = true;
        }
        else if (Binary.compare("'GPAR'"))
        {
            sVersion = "6.x";
            sName += " Soundbank";
            bDetected = true;
        }
        else  if (Binary.compare("18'FICHIER GUITAR PRO'20"))
        {
            sVersion = Binary.getString(0x14, 5);
            if (sVersion)
            {
                sName += " Tablature";
                bDetected = true;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file
// Author: LinXP
// Status: WIP

init("format","");
includeScript("zlib");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=0x20)
    {
        if(Binary.compare("'IDA'..0000") && Binary.compare("DDCCBBAA", 0x1A))
        {
            var nVer=Binary.read_uint16(0x1E);
            sVersion=nVer+".0";
            switch(Binary.getString(0,4))
            {
            case "IDA0":
                bDetected=true;
                sName = "IDA Database (.IDB)"
                break;
            case "IDA1":
                bDetected=true;
                sName = "IDA Database for 32-bit binary (.IDB)"
                break;
            case "IDA2":
                bDetected=true;
                sName = "IDA Database for 64-bit binary (.I64)"
                break;
            }
            if(bDetected)
            {
                switch(nVer)
                {
                   case 2: detect_zlib(Binary,Binary.read_uint32(0x06)+0x05); break;
                   case 3: detect_zlib(Binary,Binary.read_uint32(0x06)+0x05); break;
                   case 4: detect_zlib(Binary,Binary.read_uint32(0x06)+0x05); break;
                   case 5: detect_zlib(Binary,Binary.read_uint32(0x06)+0x09); break;
                   case 6: detect_zlib(Binary,Binary.read_uint32(0x06)+0x09); break;
                }
            }
        }

        else if(Binary.compare("'IDASGN'"))
        {
            bDetected=true;
            sName = "IDA FLIRT Signature Database (.SIG)"
            var nVer       = Binary.read_uint8(0x06);
            var nModules   = Binary.read_uint16(0x12);
            var nFlags     = Binary.read_uint8(0x10);
            var nLibNameSz = Binary.read_uint8(0x22);
            var nLibNameOf = 0x25;
            sVersion="v"+nVer;
            if (!nModules) {
                nModules = Binary.read_uint32(0x25);
                nLibNameOf +=4;
                if (nVer >= 10) {nLibNameOf +=4;}
            }
            sOptions="\""+Binary.getString(nLibNameOf,nLibNameSz)+"\"";

            if(Binary.isVerbose()) 
            {
                detect_zlib(Binary, nLibNameOf+nLibNameSz);
                sOption("modules:"+nModules)          // count modules
                sOption("p:"+Binary.read_uint8(0x7))  // processor id
                sOption("a:"+Binary.read_uint16(0xE)) // application type
                sOption("o:"+Binary.read_uint16(0xC)) // os type
                sOption("f:"+Binary.read_uint32(0x8)) // file format type
            }
        }

        else if(Binary.compare("'IDATIL'"))
        {
            bDetected=true;
            sName = "IDA Type Information List (.TIL)";
            sOptions="\""+Binary.getString(0xF,Binary.read_uint8(0xE))+"\"";
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("format","ISO 9660");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>0x8010)
    {
        if(Binary.compare("01'CD001'01",0x8000))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("format","Microstation Java(JMDL) Compiled Class");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=8)
    {
        if(Binary.compare("CAFEBEEF"))
        {
            var nMinor=Binary.readBEWord(4);
            var nMajor=Binary.readBEWord(6);
            if(nMajor)
            {
                switch(nMajor)
                {
                case 0x2D: sVersion="JDK 1.1"; break;
                case 0x2E: sVersion="JDK 1.2"; break;
                case 0x2F: sVersion="JDK 1.3"; break;
                case 0x30: sVersion="JDK 1.4"; break;
                }

                if((nMajor>=0x2D)&&(nMajor<=0x38))
                {
                     bDetected=1;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP

init("format","JavaScript Compiled/Bytenode (.JSC)");

var VersionHash = [
["11.8.172.17", "4aaade2a", "6e55fcb4"],
["11.3.244.8",  "88b331c0", "bc2e4000"],
["10.8.168.25", "22162e5c", "866ceba8"],
["10.2.154.26", "353c3291", "82a06935"],
["9.6.180.15",  "96a2e9d1", "77a0eea2"],
["9.6.180.14",  "efecf234", "15e726e8"],
["9.5.172.25",  "87f3c490", "7845cebc"],
["9.5.172.21",  "22b0877a", "d54c6bc9"],
["9.4.146.26",  "4f3466a4", "ee64ddac"],
["9.4.146.24",  "34bdcb66", "251899cd"],
["9.4.146.19",  "1c8f8b6a", "15375929"],
["8.6.395.17",  "4e4909d8", "a8d671f0"],
["8.6.395.16",  "2e933797", "42ff7bd2"],
["8.4.371.23",  "422a9510", "305d5cb4"],
["8.4.371.19",  "9ee57fe0", "8b279ced"],
["8.3.110.9",   "98545131", "878c72a5"],
["8.1.307.31",  "2cb9ba58", "8912ed09"],
["8.1.307.30",  "22d2f67c", "f8e02587"],
["7.9.317.25",  "e46e0ba2", "affe52ff"],
["7.9.317.23",  "327e22f1", "a5ef90cb"],
["7.8.279.23",  "f4ca7648", "2453843a"],
["7.8.279.17",  "533dd511", "2e4f9afd"],
["7.7.299.13",  "7ee98716", "8f1d647f"],
["7.7.299.11",  "f4bd9236", "defcacc7"],
["7.6.303.29",  "62a5311c", "905e664f"],
["7.4.288.27",  "8d2f9651", "84fec91f"],
["7.5.288.22",  "8176065f", "8b9ea960"],
["7.4.288.21",  "4e79ebb1", "27f6dd21"],
["7.0.276.38",  "5aa2a8c8", "261396d3"],
["7.0.276.32",  "302bcaf2", "1c3c201f"],
["6.8.275.32",  "4914c00b", "8af4d4f4"],
["6.8.275.30",  "34fd59c5", "91d1cc59"],
["6.8.275.24",  "70ff0c52", "74a2eeac"],
["6.7.288.49",  "f5e4a619", "aa47d109"],
["6.7.288.46",  "555f09bb", "6070752b"],
["6.7.288.45",  "3f06ef23", "ca0b678f"],
["6.7.288.43",  "bc67142f", "884dad18"],
["6.6.346.32",  "9ac1441d", "600024b1"],
["6.6.346.27",  "741c5f3b", "91b8852b"],
["6.6.346.24",  "cbb74c67", "3e6b9b38"],
["6.2.414.78",  "4d9d4c8d", "c2f91993"],
["6.2.414.77",  "2e12ba35", "818125c8"],
["6.2.414.72",  "90a269a0", "96890b15"],
["6.2.414.66",  "a8f60b85", "36eba645"],
["6.2.414.54",  "6ed53280", "82f11b7d"],
["6.2.414.50",  "ae6544a8", "bd692ce0"],
["6.2.414.46",  "4e617339", "81adf054"],
["6.2.414.44",  "c60a7c87", "7e207921"],
["6.2.414.32",  "42110b24", "84d039aa"],
["6.1.534.50",  "a0f6f0f4", "9e10b69f"],
["6.1.534.48",  "f14f22a0", "82467775"],
["6.1.534.47",  "79276eb0", "221a8fc5"],
["6.1.534.46",  "babe69a4", "64318412"],
["6.1.534.42",  "166f25d9", "9892d1c2"],
["6.0.287.53",  "a1bc32d4", "6fcdcd18"],
["6.0.286.52",  "2cf4293d", "a030b731"],
["5.5.372.43",  "b96063d0", "c10a0c40"],
["5.1.281.111", "bb23baab", "78f44bee"],
["4.6.85.32",   "35a37732", "ca4b83fd"],
["4.5.103.53",  "15953e0e", "b217e70b"],
["3.28.71.20",  "26145e77", "fec9a40d"],
];

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=0x20)
    {
        if(Binary.compare("DEC0", 0x02))
        {
            bDetected=true;
            for (i = 0; i < VersionHash.length; i++) {
                if(Binary.compare(VersionHash[i][1], 0x04)){
                    sVersion = "v"+VersionHash[i][0] + " x86"
                }
                else if(Binary.compare(VersionHash[i][2], 0x04)){
                    sVersion = "v"+VersionHash[i][0] + " x64"
                };
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Levis <levintaeyeon@live.com>, LinXP
// doc-ref: https://docs.oracle.com/javase/specs/jvms/se18/html/jvms-4.html
init("format","Java Class File (.CLASS)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=8)
    {
        if(Binary.compare("CAFEBABE"))
        {
            var nMinor=Binary.read_uint16(0x04,_BE);
            var nMajor=Binary.read_uint16(0x06,_BE);
            bDetected=true;
            switch(nMajor)
            {
                case 45: sVersion="JDK 1.1";     break; // February 1997
                case 46: sVersion="JDK 1.2";     break; // December 1998
                case 47: sVersion="JDK 1.3";     break; // May 2000
                case 48: sVersion="JDK 1.4";     break; // February 2002
                case 49: sVersion="Java SE 5.0"; break; // September 2004
                case 50: sVersion="Java SE 6";   break; // December 2006
                case 51: sVersion="Java SE 7";   break; // July 2011
                case 52: sVersion="Java SE 8";   break; // March 2014
                case 53: sVersion="Java SE 9";   break; // September 2017
                case 54: sVersion="Java SE 10";  break; // March 2018
                case 55: sVersion="Java SE 11";  break; // September 2018
                case 56: sVersion="Java SE 12";  break; // March 2019
                case 57: sVersion="Java SE 13";  break; // September 2019
                case 58: sVersion="Java SE 14";  break; // March 2020
                case 59: sVersion="Java SE 15";  break; // September 2020
                case 60: sVersion="Java SE 16";  break; // March 2021
                case 61: sVersion="Java SE 17";  break; // September 2021
                case 62: sVersion="Java SE 18";  break; // March 2022
                case 63: sVersion="Java SE 19";  break; // September 2022
                case 64: sVersion="Java SE 20";  break; // March 2023
                case 65: sVersion="Java SE 21";  break; // September 2023
                default: bDetected=false;
            }
            if (bDetected && Binary.isVerbose())
            {
                var nOffset = 0x08;
                var constant_pool_count = Binary.read_uint16(nOffset,_BE); nOffset+=2;
                for (pool = 1; pool < constant_pool_count; pool++) {
                    switch(Binary.read_uint8(nOffset)) // Tag
                    {
                        case  1: // CONSTANT_Utf8
                            nOffset +=1+2 + Binary.read_uint16(nOffset+1,_BE);
                            break;
                        case  3: // CONSTANT_Integer
                        case  4: // CONSTANT_Float
                            nOffset +=1+4;
                            break;
                        case  5: // CONSTANT_Long
                        case  6: // CONSTANT_Double
                            nOffset +=1+4+4;
                            break;
                        case  7: // CONSTANT_Class
                        case  8: // CONSTANT_String
                        case 16: // CONSTANT_MethodType
                            nOffset +=1+2;
                            break;
                        case 9:  // CONSTANT_Fieldref
                        case 10: // CONSTANT_Methodref
                        case 11: // CONSTANT_InterfaceMethodref
                        case 12: // CONSTANT_NameAndType
                        case 18: // CONSTANT_InvokeDynamic
                            nOffset +=1+2+2;
                            break;
                        case 15: // CONSTANT_MethodHandle_info
                            nOffset +=1+1+2;
                            break;
                        default: sOption("err unk tag:"+nOffset);
                    }
                }
                var nAccessFlagss = Binary.read_uint16(nOffset,_BE);
                if (nAccessFlagss & 0x0001)  {sOption("ACC_PUBLIC"); }
                if (nAccessFlagss & 0x0002)  {sOption("ACC_PRIVATE"); }
                if (nAccessFlagss & 0x0004)  {sOption("ACC_PROTECTED"); }
                if (nAccessFlagss & 0x0008)  {sOption("ACC_STATIC"); }
                if (nAccessFlagss & 0x0010)  {sOption("ACC_FINAL"); }
                if (nAccessFlagss & 0x0020)  {sOption("ACC_SUPER"); }
                if (nAccessFlagss & 0x0040)  {sOption("ACC_VOLATILE"); }
                if (nAccessFlagss & 0x0080)  {sOption("ACC_TRANSIENT"); }
                if (nAccessFlagss & 0x0100)  {sOption("ACC_NATIVE"); }
                if (nAccessFlagss & 0x0200)  {sOption("ACC_INTERFACE"); }
                if (nAccessFlagss & 0x0400)  {sOption("ACC_ABSTRACT"); }
                if (nAccessFlagss & 0x0800)  {sOption("ACC_STRICT"); }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file
// Author: LinXP

init("format","Lua Bytecode (.LUAC)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=8)
    {
        if(Binary.compare("1B'Lua'..00"))
        {
            bDetected=true;
            switch(Binary.read_uint8(0x04))
            {
                case 0x50: sVersion="v5.0"; break;
                case 0x51: sVersion="v5.1"; break;
                case 0x52: sVersion="v5.2"; break;
                case 0x53: sVersion="v5.3"; break;
                case 0x54: sVersion="v5.4"; break;
                default  : bDetected=false;
            }
            if(Binary.isVerbose())
            {
                switch(Binary.read_uint8(0x06))
                {
                    case  0: sOption("BigEndian");     break;
                    case  1: sOption("LittleEndian");  break;
                    default: bDetected=false;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Tembo (http://tembolab.pl/products/executable-image-viewer.html)

init("format", "NVA");

function detect(bShowType, bShowVersion, bShowOptions)
{
    if (Binary.getSize() >= 8)
    {
        if (Binary.compare("'%NVA'"))
        {
            sVersion = Binary.getString(5, 3);
            bDetected = 1;
        }
    }

    return result(bShowType, bShowVersion, bShowOptions);
}
// DIE's signature file
// doc-ref: https://en.wikipedia.org/wiki/Program_database

init("format","Microsoft Program Database (.PDB)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("'Microsoft C/C++ program database 2.00\r\n\'1A4A470000"))
    {
        sVersion="v2.00";
        bDetected=true;
    }
    else if(Binary.compare("'Microsoft C/C++ MSF 7.00\r\n'1A4453000000"))
    {
        sVersion="v7.00";
        bDetected=true;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("format","Preferred Executable Format");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("'Joy!peff'"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Levis <levintaeyeon@live.com>
// History:
// Update sign to detect version of Python from 1.0 to 3.4
// Update sign to detect version of Python from 3.4 to 3.13a1 (by LinXP)
// Full info: https://github.com/python/cpython/blob/main/Lib/importlib/_bootstrap_external.py#L463

init("format","Python Compiled Module");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=8)
    {
        if(Binary.read_uint16(0x02) == 0x0099)
        {
            bDetected=true;
            switch(Binary.read_uint32(0))
            {
            case 0x00999902: sVersion="1.0";     break;
            case 0x00999903: sVersion="1.1-1.2"; break;
            default:    bDetected=false;
            }
        }
        else if(Binary.read_uint16(0x02) == 0x0A0D)
        {
            bDetected=true;
            var Magic = Binary.read_uint16(0)
            switch(Magic)
            {
            case 20121: sVersion="1.5-1.5.2"; break;
            case 50428: sVersion="1.6";       break;
            case 50823: sVersion="2.0-2.0.1"; break;
            case 60202: sVersion="2.1-2.1.2"; break;
            case 60717: sVersion="2.2";       break;
            case 62011: sVersion="2.3a0";     break;
            case 62021: sVersion="2.3a0";     break;
            case 62011: sVersion="2.3a0";     break;
            case 62041: sVersion="2.4a0";     break;
            case 62051: sVersion="2.4a3";     break;
            case 62061: sVersion="2.4b1";     break;
            case 62071: sVersion="2.5a0";     break;
            case 62081: sVersion="2.5a0";     break;
            case 62091: sVersion="2.5a0";     break;
            case 62092: sVersion="2.5a0";     break;
            case 62101: sVersion="2.5b3";     break;
            case 62111: sVersion="2.5b3";     break;
            case 62121: sVersion="2.5c1";     break;
            case 62131: sVersion="2.5c2";     break;
            case 62151: sVersion="2.6a0";     break;
            case 62161: sVersion="2.6a1";     break;
            case 62171: sVersion="2.7a0";     break;
            case 62181: sVersion="2.7a0";     break;
            case 62191: sVersion="2.7a0";     break;
            case 62201: sVersion="2.7a0";     break;
            case 62211: sVersion="2.7a0";     break;
            case  3000: sVersion="3.0";       break;
            case  3010: sVersion="3.0";       break;
            case  3020: sVersion="3.0";       break;
            case  3030: sVersion="3.0";       break;
            case  3040: sVersion="3.0";       break;
            case  3050: sVersion="3.0";       break;
            case  3060: sVersion="3.0";       break;
            case  3061: sVersion="3.0";       break;
            case  3071: sVersion="3.0";       break;
            case  3081: sVersion="3.0";       break;
            case  3091: sVersion="3.0";       break;
            case  3101: sVersion="3.0";       break;
            case  3103: sVersion="3.0";       break;
            case  3111: sVersion="3.0a4";     break;
            case  3131: sVersion="3.0b1";     break;
            case  3141: sVersion="3.1a1";     break;
            case  3151: sVersion="3.1a1";     break;
            case  3160: sVersion="3.2a1";     break;
            case  3170: sVersion="3.2a2";     break;
            case  3180: sVersion="3.2a3";     break;
            case  3190: sVersion="3.3a1";     break;
            case  3200: sVersion="3.3a1";     break;
            case  3210: sVersion="3.3a1";     break;
            case  3220: sVersion="3.3a2";     break;
            case  3230: sVersion="3.3a4";     break;
            case  3250: sVersion="3.4a1";     break;
            case  3260: sVersion="3.4a1";     break;
            case  3270: sVersion="3.4a1";     break;
            case  3280: sVersion="3.4a1";     break;
            case  3290: sVersion="3.4a4";     break;
            case  3300: sVersion="3.4a4";     break;
            case  3310: sVersion="3.4rc2";    break;
            case  3320: sVersion="3.5a1";     break;
            case  3330: sVersion="3.5b1";     break;
            case  3340: sVersion="3.5b2";     break;
            case  3350: sVersion="3.5b3";     break;
            case  3351: sVersion="3.5.2";     break;
            case  3360: sVersion="3.6a0";     break;
            case  3361: sVersion="3.6a1";     break;
            case  3370: sVersion="3.6a2";     break;
            case  3371: sVersion="3.6a2";     break;
            case  3372: sVersion="3.6a2";     break;
            case  3373: sVersion="3.6b1";     break;
            case  3375: sVersion="3.6b1";     break;
            case  3376: sVersion="3.6b1";     break;
            case  3377: sVersion="3.6b1";     break;
            case  3378: sVersion="3.6b2";     break;
            case  3379: sVersion="3.6rc1";    break;
            case  3390: sVersion="3.7a1";     break;
            case  3391: sVersion="3.7a2";     break;
            case  3392: sVersion="3.7a4";     break;
            case  3393: sVersion="3.7b1";     break;
            case  3394: sVersion="3.7b5";     break;
            case  3400: sVersion="3.8a1";     break;
            case  3401: sVersion="3.8a1";     break;
            case  3410: sVersion="3.8a1";     break;
            case  3411: sVersion="3.8b2";     break;
            case  3412: sVersion="3.8b2";     break;
            case  3413: sVersion="3.8b4";     break;
            case  3420: sVersion="3.9a0";     break;
            case  3421: sVersion="3.9a0";     break;
            case  3422: sVersion="3.9a0";     break;
            case  3423: sVersion="3.9a2";     break;
            case  3424: sVersion="3.9a2";     break;
            case  3425: sVersion="3.9a2";     break;
            case  3430: sVersion="3.10a1";    break;
            case  3431: sVersion="3.10a1";    break;
            case  3432: sVersion="3.10a2";    break;
            case  3433: sVersion="3.10a2";    break;
            case  3434: sVersion="3.10a6";    break;
            case  3435: sVersion="3.10a7";    break;
            case  3436: sVersion="3.10b1";    break;
            case  3437: sVersion="3.10b1";    break;
            case  3438: sVersion="3.10b1";    break;
            case  3439: sVersion="3.10b1";    break;
            case  3450: sVersion="3.11a1";    break;
            case  3451: sVersion="3.11a1";    break;
            case  3452: sVersion="3.11a1";    break;
            case  3453: sVersion="3.11a1";    break;
            case  3454: sVersion="3.11a1";    break;
            case  3455: sVersion="3.11a1";    break;
            case  3456: sVersion="3.11a1";    break;
            case  3457: sVersion="3.11a1";    break;
            case  3458: sVersion="3.11a1";    break;
            case  3459: sVersion="3.11a1";    break;
            case  3460: sVersion="3.11a1";    break;
            case  3461: sVersion="3.11a1";    break;
            case  3462: sVersion="3.11a2";    break;
            case  3463: sVersion="3.11a3";    break;
            case  3464: sVersion="3.11a3";    break;
            case  3465: sVersion="3.11a3";    break;
            case  3466: sVersion="3.11a4";    break;
            case  3467: sVersion="3.11a4";    break;
            case  3468: sVersion="3.11a4";    break;
            case  3469: sVersion="3.11a4";    break;
            case  3470: sVersion="3.11a4";    break;
            case  3471: sVersion="3.11a4";    break;
            case  3472: sVersion="3.11a4";    break;
            case  3473: sVersion="3.11a4";    break;
            case  3474: sVersion="3.11a4";    break;
            case  3475: sVersion="3.11a5";    break;
            case  3476: sVersion="3.11a5";    break;
            case  3477: sVersion="3.11a5";    break;
            case  3478: sVersion="3.11a5";    break;
            case  3479: sVersion="3.11a5";    break;
            case  3480: sVersion="3.11a5";    break;
            case  3481: sVersion="3.11a5";    break;
            case  3482: sVersion="3.11a5";    break;
            case  3483: sVersion="3.11a5";    break;
            case  3484: sVersion="3.11a5";    break;
            case  3485: sVersion="3.11a5";    break;
            case  3486: sVersion="3.11a6";    break;
            case  3487: sVersion="3.11a6";    break;
            case  3488: sVersion="3.11a6";    break;
            case  3489: sVersion="3.11a6";    break;
            case  3490: sVersion="3.11a6";    break;
            case  3491: sVersion="3.11a6";    break;
            case  3492: sVersion="3.11a7";    break;
            case  3493: sVersion="3.11a7";    break;
            case  3494: sVersion="3.11a7";    break;
            case  3495: sVersion="3.11a7";    break;
            case  3500: sVersion="3.12a1";    break;
            case  3501: sVersion="3.12a1";    break;
            case  3502: sVersion="3.12a1";    break;
            case  3503: sVersion="3.12a1";    break;
            case  3504: sVersion="3.12a1";    break;
            case  3505: sVersion="3.12a1";    break;
            case  3506: sVersion="3.12a1";    break;
            case  3507: sVersion="3.12a1";    break;
            case  3508: sVersion="3.12a1";    break;
            case  3509: sVersion="3.12a1";    break;
            case  3510: sVersion="3.12a2";    break;
            case  3511: sVersion="3.12a2";    break;
            case  3512: sVersion="3.12a2";    break;
            case  3513: sVersion="3.12a4";    break;
            case  3514: sVersion="3.12a4";    break;
            case  3515: sVersion="3.12a5";    break;
            case  3516: sVersion="3.12a5";    break;
            case  3517: sVersion="3.12a5";    break;
            case  3518: sVersion="3.12a6";    break;
            case  3519: sVersion="3.12a6";    break;
            case  3520: sVersion="3.12a6";    break;
            case  3521: sVersion="3.12a7";    break;
            case  3522: sVersion="3.12a7";    break;
            case  3523: sVersion="3.12a7";    break;
            case  3524: sVersion="3.12a7";    break;
            case  3525: sVersion="3.12b1";    break;
            case  3526: sVersion="3.12b1";    break;
            case  3527: sVersion="3.12b1";    break;
            case  3528: sVersion="3.12b1";    break;
            case  3529: sVersion="3.12b1";    break;
            case  3530: sVersion="3.12b1";    break;
            case  3531: sVersion="3.12b1";    break;
            case  3550: sVersion="3.13a1";    break;
            case  3551: sVersion="3.13a1";    break;
            case  3552: sVersion="3.13a1";    break;
            case  3553: sVersion="3.13a1";    break;
            case  3554: sVersion="3.13a1";    break;
            case  3555: sVersion="3.13a1";    break;
            case  3556: sVersion="3.13a1";    break;
            case  3557: sVersion="3.13a1";    break;
            case  3558: sVersion="3.13a1";    break;
            case  3559: sVersion="3.13a1";    break;
            case  3560: sVersion="3.13a1";    break;
            case  3561: sVersion="3.13a1";    break;
            case  3562: sVersion="3.13a1";    break;
            case  3563: sVersion="3.13a1";    break;
            case  3564: sVersion="3.13a1";    break;
            case  3565: sVersion="3.13a1";    break;
            case  3600: sVersion="3.14";      break;
            default:    bDetected=false;
            }
            if(Binary.isVerbose()) sOptions = "Magic tag: " + Magic;
            
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("format","Small Web Format (.SWF)");
includeScript("zlib");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=8)
    {
        switch(Binary.getString(0,3))
        {
        case "FWS":
            bDetected=true;
            sOptions="uncompressed";
            break;
        case "CWS":
            if(detect_zlib(Binary,0x08)) {bDetected=true;}
            break;
        case "ZWS":
            bDetected=true;
            sOptions="LZMA";
        }
        if(bDetected)
        {
            sVersion=Binary.read_uint8(0x03);
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP
// doc-ref: https://www.opendesign.com/files/guestdownloads/OpenDesign_Specification_for_.dwg_files.pdf
// https://help.autodesk.com/view/OARX/2018/ENU/?guid=GUID-235B22E0-A567-4CF6-92D3-38A2306D73F3
init("archive","AutoCAD Drawing (.DWG)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=9)
    {
        bDetected=true; 
        switch(Binary.getString(0,0x06))
        {
            case 'AC1001': sVersion="R2.22";    break;
            case 'AC1002': sVersion="R2.50";    break;
            case 'AC1003': sVersion="R2.60";    break;
            case 'AC1004': sVersion="R9";       break;
            case 'AC1006': sVersion="R10";      break;
            case 'AC1009': sVersion="R11/12";   break;
            case 'AC1012': sVersion="R13";      break;
            case 'AC1014': sVersion="R14";      break;
            case 'AC1015': sVersion="R2000";    break;
            case 'AC1018': sVersion="R2004";    break;
            case 'AC1021': sVersion="R2007";    break;
            case 'AC1024': sVersion="R2010";    break;
            case 'AC1027': sVersion="R2013";    break;
            case 'AC1032': sVersion="R2018";    break;
            default: bDetected=false; 
        }
        if (bDetected) {

        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("Certificate","WinAuth");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("........00020200"))
    {
        sVersion="2.0";
        sOptions="PKCS #7";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP
// doc-ref: https://www.sqlite.org/fileformat.html

init("format","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("'SQLite format 3'00"))
    {
        sName="SQLite 3 database (.SQLITE)";
        bDetected=true;
        var nTextEncoding        = Binary.read_uint32(0x38, _BE)
        var nAppID               = Binary.read_uint32(0x44, _BE);
        var nSQLiteVersionNumber = Binary.read_uint32(0x60, _BE);
        var nChangeCount         = Binary.read_uint32(0x18, _BE);

        var nMajor   = nSQLiteVersionNumber/1000000>>0;
        var nMinor   = (nSQLiteVersionNumber-nMajor*1000000)/1000>>0;
        var nRelease = nSQLiteVersionNumber-(nMajor*1000000)-(nMinor*1000)>>0;
        sVersion     = nMajor + "." + nMinor + "." + nRelease;

        switch(nTextEncoding)
        {
            case  1: sOption("UTF-8"); break;
            case  2: sOption("UTF-16LE"); break;
            case  3: sOption("UTF-16BE"); break;
            default: bDetected=false;
        }

        if(nAppID && Binary.isVerbose())
        {
            sOption("AppID:"+nAppID);
        }

        if(nChangeCount && Binary.isVerbose())
        {
            sOption("Changes:"+nChangeCount);
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("format","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("03......................00000000")||
            Binary.compare("f5......................00000000"))
    {
        sName="DBase Database (.DBF)";
        bDetected=1;
    }
    else if(Binary.compare("00010000'Standard Jet DB'00"))
    {
        sName="Microsoft Access database (.MDB)";
        bDetected=1;
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// https://github.com/horsicq/Detect-It-Easy signature file
// Authors:
//    sendersu (sendersu on exelab.ru),
//    Kaens (TG @kaens)

init("format","Microsoft Compiled HTML Help");

includeScript("read");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("'ITSF'..000000"))
    {
        bDetected = 1;
        sVersion = "v"+Binary.read_int32(4,_LE);
        sOption(Binary.read_uint32(0x14,_LE),"LangID: ");
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("format","MS Help");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("3f5f0300"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("format","PDF");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=8)
    {
        if(Binary.compare("'%PDF'"))
        {
            sVersion=Binary.getString(5,3);
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("format","RTF");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var sText=Binary.getString(0,Math.min(Binary.getSize(),8192));
    if(/^{\\rt/m.test(sText))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: nicholasmckinney

init("shellcode","Donut", "0.9.2");


function detect(bShowType,bShowVersion,bShowOptions)
{
	bDetected = 0;
	
	// https://github.com/TheWover/donut/blob/dafea1702ce2e71d5139c4d583627f7ee740f3ae/donut.c#L1235
	var bInstCall = Binary.readByte(0);
	if (bInstCall != 0xE8) {
		return result(bShowType, bShowVersion, bShowOptions);
	}
	
	if (Binary.readWord(1) != Binary.readWord(5)) {
		return result(bShowType, bShowVersion, bShowOptions);
	}
	
	var callDest = Binary.readDword(1)
	
	// https://github.com/TheWover/donut/blob/dafea1702ce2e71d5139c4d583627f7ee740f3ae/donut.c#L1239
	var popECXOffset = callDest + 5; // 1 byte for E8 (call opcode) and 4 bytes for destination offset
	
	if (Binary.readByte(popECXOffset) != 0x59) {
		return result(bShowType, bShowVersion, bShowOptions);
	}
	
	bDetected = 1;
	
	var archDetectionOffset = popECXOffset + 1;
	var archDetectBytes = Binary.readDword(archDetectionOffset) & 0x00ffffff;
	
	switch(archDetectBytes) {
		// https://github.com/TheWover/donut/blob/dafea1702ce2e71d5139c4d583627f7ee740f3ae/donut.c#L1242-L1248
		case 0x52515a:
			sOptions = "x86";
			break;
			
		// https://github.com/TheWover/donut/blob/dafea1702ce2e71d5139c4d583627f7ee740f3ae/donut.c#L1270-L1273
		case 0x48c031:
			sOptions = "x86 + AMD64";
			break;
		default:
			sOptions = "AMD64";
	}
	
	return result(bShowType, bShowVersion, bShowOptions);
}
// DIE's signature file
// Author: LinXP
// Info  : Adobe Type I Font (AFM, PFB, PFM)
// Status: WIP

init("font","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=0x0F)
    {
        if(Binary.compare("'StartFontMetrics '") && Binary.compare("'.'",0x12))
        {
            sName = "Adobe Font Metrics (.AFM)";
            sVersion = "v" + Binary.getString(0x11,0x03);
            bDetected=true;
        }

        else if(Binary.read_uint16(0) == 384 && Binary.read_uint16(Binary.getSize()-2) == 896)
        {
            sName = "Adobe Printer Font Binary (.PFB)";
            bDetected=true;
            if (Binary.isVerbose())
            {
                var sFontText=Binary.getString(0x06,0x0200);
                var aFontName=sFontText.match(/%!PS-AdobeFont-1.0: (.*?)[\r\n]/);
                if(aFontName)
                {
                    sOption(aFontName[1]);
                }
            }                  
        }

        else if(Binary.compare("0001") && Binary.getSize() == Binary.read_uint32(0x02))
        {
            sName = "Adobe Printer Font Metrics (.PFM)";
            bDetected=true;
            if (Binary.isVerbose())
            {
                sOptions = Binary.getString(0x06,0x3C);
            }
            
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}


// DIE's signature file
// Author: LinXP
// doc-ref: https://www.angelcode.com/products/bmfont/doc/file_format.html

init("font","AngelCode Bitmap Font (.FNT)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=0x30)
    {
        if(Binary.compare("'BMF'"))
        {
            bDetected=true;
            switch(Binary.read_uint8(0x03))
            {
                case 1: sVersion = "v1"; sOptionT("Binary"); break;
                case 2: sVersion = "v2"; sOptionT("Binary"); break;
                case 3: sVersion = "v3"; sOptionT("Binary"); break;
                default:  bDetected=false;
            }
            if (bDetected && Binary.isVerbose())
            {
                var nOffset = 0x04;
                
                while(nOffset < Binary.getSize()) {
                    var nBlockTypeIdentifier = Binary.read_uint8(nOffset) ; nOffset +=1;
                    var nBlockSize           = Binary.read_uint32(nOffset); nOffset +=4;
                    switch(nBlockTypeIdentifier)
                    {
                        case 1: sOptionT('"'+Binary.getString(nOffset+0xE)+'"');
                                sOptionT("Size:"+Binary.read_int16(nOffset)); // fontSize
                                break;
                        case 2: sOptionT("pages:"+Binary.read_int16(nOffset+4)+"x"+Binary.read_int16(nOffset+6)+"x"+Binary.read_int16(nOffset+8)); // scaleW, scaleH, pages
                                break;
                        case 3: break;
                        case 4: sOptionT("chars:" + nBlockSize / 20);
                                break;
                        case 5: sOptionT("kerning_pairs:" + nBlockSize / 10);
                                break;
                    }
                    nOffset += nBlockSize;
                }
            }
        }
        else if(Binary.isPlainText() && Binary.find_utf8String(0,200,"info face") >=0 && Binary.find_utf8String(0,200,"stretchH")>=0)
        {
            bDetected=true;
            if (Binary.find_utf8String(0,200,"<?xml") >=0)
            {sOptionT("XML")}
            else
            (sOptionT("Text"))
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP
// Status: WIP
// doc-ref: https://github.com/libyal/libmdmp/blob/main/documentation/Minidump%20(MDMP)%20format.asciidoc
init("format","Windows Minidump (.DMP)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=9)
    {
	
        if(Binary.compare("'MDMP'93A7"))
        {
            bDetected=true;
            if (Binary.isVerbose())
            {
//                sOptions = "{"+Binary.read_UUID(0x18)+"}";
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP
// Status: WIP

init("format","Microsoft Virtual Hard Disk (.VHD)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=0x200)
    {
        if(Binary.compare("'conectix'", Binary.getSize() - 0x200))
        {
            bDetected=true;
            nOffset = Binary.getSize() - 0x200
            sVersion="v"+  Binary.read_uint16(nOffset+0xC,_BE) + "." +  Binary.read_uint16(nOffset+0xE,_BE);
            switch(Binary.read_uint32(nOffset+0x3C,_BE))
            {
               // case  1: sOption("deprecate");    break;
                case  2: sOption("Fixed");         break;
                case  3: sOption("Dynamically");   break;
                case  4: sOption("Differencings"); break;
                default: bDetected=false;
            }
            if (bDetected)
            {
                sOption("OrginalSize:" + Binary.bytesCountToString(Binary.read_uint64(nOffset+0x28,_BE)));
                sOption("CurrentSize:" + Binary.bytesCountToString(Binary.read_uint64(nOffset+0x30,_BE)));
                if (Binary.isVerbose())
                {
                    sOption("CreaterApp:" + Binary.getString(nOffset+0x1C, 4));
                    sOption("v" + Binary.read_uint16(nOffset+0x20,_BE) + "." + Binary.read_uint16(nOffset+0x22,_BE));
                    switch(Binary.read_uint32(nOffset+0x24,_BE))
                    {
                        case  0x57693272: sOption("WI2R");      break;
                        case  0x5769326B: sOption("WINDOWS");   break;
                        case  0x57327275: sOption("W2RU");      break;
                        case  0x57326B75: sOption("W2KU");      break;
                        case  0x4D616320: sOption("MACINTOSH"); break;
                        case  0x4D163258: sOption("MACX");      break;
                        default: bDetected=false;
                    }
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP
// Status: WIP

init("archive","Windows Imaging Format");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=9)
    {
	
        if(Binary.compare("'MSWIM'000000"))
        {
            bDetected=true;
            sName +=" (.WIM)"
            if (Binary.isVerbose())
            {
                sOptions = "{"+Binary.read_UUID(0x18)+"}";
            }

            switch(Binary.read_uint16(0x12))
            {
                case 0: sOption("No compression");      break;
                case 2: sOption("XPRESS compression");  break;
                case 4: sOption("LZX compression");     break;
                case 8: sOption("LZMS compression");    break;
                default: bDetected=false; 
            }
            sOption("Part Number:" + Binary.read_uint16(0x28) + "/"+Binary.read_uint16(0x2A)); 

        }

        else if(Binary.compare("'WLPWM'000000"))
        {
            bDetected=true; 
            sName +=", wimlib (.WIM)"
        }

    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP
// Status: WIP

init("format","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=9)
    {
	
        if(Binary.compare("'XNB'"))
        {
            bDetected=true;
            sName = "Microsoft XNA Game Studio Binary Package (.XNB)"
            var nXNA_Ver = Binary.read_uint8(0x4);
            var fFlag    = Binary.read_uint8(0x5);
            switch(nXNA_Ver)
            {
                case 3: sVersion = "v3.0";    break;
                case 4: sVersion = "v3.1";    break;
                case 5: sVersion = "v4.0";    break;
                default: bDetected=false; 
            }


            /* XNA Studio platforms: 'w' = Windows, 'm' = Windows Phone 7, 'x' = X360
             * MonoGame extensions: 'i' = iOS, 'a' = Android, 'X' = MacOSX, 'P' = PS4, 'S' = Switch, etc */
            switch(Binary.read_uint8(0x3))
            {
                case 0x77: sOption("Windows");          break;
                case 0x78: sOption("Xbox 360");         break;
                case 0x6D: sOption("Windows Phone 7");  break;
                case 0x69: sOption("iOS");              break;
                case 0x61: sOption("Android");          break;
                case 0x58: sOption("MacOSX");           break;
                case 0x50: sOption("PS4");              break;
                case 0x53: sOption("Switch");           break;
                default:   sOption("UNKNOWN");
                     //    bDetected=false; 
            }

            if (Binary.isVerbose())
            {
                if ((fFlag&0x01)>>0) {sOption("hiDef")};
                if ((fFlag&0x80)>>2) {sOption("compressed")};
                if (!Binary.getSize() == Binary.read_uint32(0x5)) {sOption("wrong size!")};
            }
        }

        else if(Binary.compare("'WBND'"))
        {
            bDetected=true;
            sName = "Microsoft XACT Wave Bank (.XWB)"
        }

        else if(Binary.compare("'SDBK'"))
        {
            bDetected=true;
            sName = "Microsoft XACT Sound Bank (.XSB)"
        }

        else if(Binary.compare("'XGSF'"))
        {
            bDetected=true;
            sName = "Microsoft XACT Global Settings File (.XGS)"
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP
// Status: WIP

init("format","UnrealEngine");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=0x400)
    {
        if(Binary.compare("C1832A9E"))
        {
        bDetected=true;
        sName +="\\Unreal Package"
        var nVer    = Binary.read_uint16(0x04);
        var nLicVer = Binary.read_uint16(0x06);
        sVersion=sVersion.append(nVer, nLicVer);

        }

        else if(Binary.compare("E1126F5A", Binary.getSize() - 204))
        {
            bDetected=true;
            sName +="\\UE4 package (.PAK)"
            sVersion = Binary.read_uint32(Binary.getSize() - 200);
            switch(Binary.read_uint8(Binary.getSize() - 206))
            {
                case  0: break;
                case  1: sOptions=sOptions.append("Index Is Encrypted");  break;
                default: bDetected=false;
            }
            sOptions=sOptions.append(Binary.getString(Binary.getSize() - 160));

        }

    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP
// Status: WIP
// doc-ref: https://www.virtualbox.org/browser/vbox/trunk/src/VBox/Storage/VDICore.h

init("format","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=0x200)
    {
        if(Binary.compare("7F10DABE", 0x40))
        {
            sName="Virtual Disk Image (.VDI)";
            sVersion="v"+Binary.read_uint16(0x44) +"."+  Binary.read_uint16(0x46);
            var sImgText=Binary.getString(0);
            var aImgName=sImgText.match(/<<< (.*?)\ >>>/);
            if(aImgName)
            {
                sOptions="\"" + sOptions.append(aImgName[1]) + "\"";
                bDetected=true;
            }
            if (bDetected && Binary.isVerbose())
            {
                switch(Binary.read_uint16(0x4C))
                {
                    case  1: sOption("Normal dynamically");    break;
                    case  2: sOption("Preallocated fixed size");    break;
                    case  3: sOption("Dynamically growing for undo/commit changes");    break;
                    case  4: sOption("Dynamically growing for differencings");    break;
                }
                sOption("Size:" + Binary.bytesCountToString(Binary.read_uint64(0x0170)));
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>, LinXP

init("format","");
includeScript("zlib");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var TrueTypeTags = [];
    TrueTypeTags['BASE'] =
    TrueTypeTags['cmap'] =
    TrueTypeTags['DSIG'] =
    TrueTypeTags['EBDT'] =
    TrueTypeTags['Feat'] =
    TrueTypeTags['FFTM'] =
    TrueTypeTags['GDEF'] =
    TrueTypeTags['GPOS'] =
    TrueTypeTags['GSUB'] =
    TrueTypeTags['LTSH'] =
    TrueTypeTags['OS/2'] = 1;

    if(Binary.compare("950412de00000000")||Binary.compare("de12049500000000"))
    {
        sName="GNU Gettext Machine Object (.MO)";
        bDetected=1;
    }
    else if(TrueTypeTags[Binary.getString(0xC,4)])
    {
        sName="TrueType font (.TTF)";
        bDetected=1;
    }
    else if(Binary.compare("'{\\rtf1\\'"))
    {
        sName="Rich Text Format (.RTF)";
        bDetected=1;
    }
    else if(Binary.compare("f702018392c01c3b"))
    {
        sName="Device Independent Document (.DVI)";
        bDetected=1;
    }
    else if(Binary.compare("31be000000ab0000")||Binary.compare("32be000000ab0000"))
    {
        sName="Windows Write document (.WRI)";
        bDetected=1;
    }
    else if(Binary.compare("'MICROSOFT PIFEX'0087010000", 0x171))
    {
        sName="Microsoft Program Information (.PIF)";
        bDetected=1;
    }
    else if(Binary.compare("4c0000000114020000000000c000000000000046"))
    {
        sName="Windows Shortcut (.LNK)";
        bDetected=1;
    }
    else if(Binary.compare("'Zinc Data File Version'"))
    {
        sName="Zinc Data (.DAT)";
        bDetected=1;
    }
    else if(Binary.compare("00010000'Jet System DB  '00"))
    {
        sName="Microsoft Access Workgroup Information (.MDW)";
        bDetected=1;
    }
    else if(Binary.compare("dca5..00..................00000000")||
            Binary.compare("eca5c100..................00000000"))
    {
        sName="Microsoft Word 2 document";
        bDetected=1;
    }
    else if(Binary.compare("'OTTO'................'CFF '"))
    {
        sName="OpenType - CFF compact font (.OTF)";
        bDetected=1;
    }
    else if(Binary.compare("3cb86418caef9c95"))
    {
        sName="Qt Message (.QM)";
        bDetected=1;
    }
    else if(Binary.compare("'SIB file: TsiLang binary translation data'"))
    {
        sName="TsiLang binary translation data (.SIB)";
        bDetected=1;
    }
    else if(Binary.compare("......00..........000200")&&Binary.compare("00'LP'", 0x21))
    {
        sName="Embedded OpenType font (.EOT)";
        bDetected=1;
    }
    else if(Binary.compare("d4c3b2a1020004"))
    {
        sName="TCPDUMP's style capture (.ACP/PCAP)";
        bDetected=1;
    }
    else if(Binary.compare("'HSP'"))
    {
        sName="OS/2 help file";
        bDetected=1;
    }
    else if(Binary.compare("'LN'0200"))
    {
        sName="Quick Help";
        bDetected=1;
    }
    else if(Binary.compare("'MZIP'"))
    {
        sName="MZIP archive";
        bDetected=1;
    }
    else if(Binary.compare("'Kaydara FBX Binary  '00"))
    {
        sName="Kaydara FBX Binary (.FBX)";
        sVersion = Binary.read_uint16(0x17);
        bDetected=true;
    }
    else if(Binary.compare("89'FCP'0D0A1A0A"))
    {
        sName="High-Logic FontCreator Project (.FCP)";
        sVersion = Binary.read_uint16(0x08)+"."+ Binary.read_uint16(0x0A);
        var nZoffset =  0x14 + Binary.read_uint32(0x10) * 0x11 + 0x0C;
        detect_zlib(Binary,nZoffset);
        bDetected=true;
    }
    else if(Binary.compare("'XALZ'"))
    {
        sName="Xamarin Compressed DLL";
        sOptions=sOptions.append("LZ4 compression", "Index:" + Binary.read_uint32(0x4),  "Original size:" + Binary.read_uint32(0x8))
        bDetected=true;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Authors: hypn0 <hypn0@mail.ru>, Kaens (TG@kaens)

init("image","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("d7cdc69a0000"))
    {
        bDetected=1;
        sName="Windows MetaFile (.WMF)";
    }
    else if(Binary.compare("..0101000000011800000000"))
    {
        bDetected=1;
        sName="Targa bitmap (.TGA)";
    }
    else if(Binary.compare("00000a000000011800000000"))
    {
        bDetected=1;
        sName="Targa bitmap (.TGA)";
    }
    else if(Binary.compare("'TRUEVISION-XFILE.'", Binary.getSize()-18))
    {
        bDetected=1;
        sName="Targa bitmap (New TGA format) (.TGA)";
    }
    else if(Binary.compare("ff4fff51002f0000"))
    {
        bDetected=1;
        sName="JPEG-2000 Code Stream (.JP2)";
    }
    else if(Binary.compare("0000000C6A50....................'ftypjp2'..........'jp2'20"))
    {
        bDetected=1;
        sName="LuraWave JPEG-2000 (.JP2)";
    }
    else if(Binary.compare("'P4'0a"))
    {
        bDetected=1;
        sName="Unix Portable BitMap (.PBM)";
    }
    else if(Binary.compare("'P5'0a")||Binary.compare("'P6'0a"))
    {
        bDetected=1;
        sName="Portable BitMap Package (.PPM)";
    }
    else if(Binary.compare("01da010100"))
    {
        bDetected=1;
        sName="Silicon Graphics bitmap (.SGI)";
    }
    else if(Binary.compare("010009000003............................................'WMFC'"))
    {
        bDetected=1;
        sName="Windows Metafile (old Win 3.x format) (.WMF)";
    }
    else if(Binary.compare("01000000640000000000000000000000")&&Binary.compare("'EMF'000001", 0x29))
    {
        bDetected=1;
        sName="Windows Enhanced Metafile (.EMF)";
    }
    else if(Binary.compare("'AT&TFORM'........'DJVM'"))
    {
        bDetected=1;
        sName="DjVu image (.DJVU)";
    }

    else if(Binary.compare("WGq")) {
        bDetected=1;
        sName="Liar-soft Windows Computer Graphics image (.WCG)";
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("image","Windows Animated Cursor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=48)
    {
        if(Binary.compare("'RIFF'........'ACON'"))
        {
            var nOffset=Binary.findString(12,Binary.getSize()-12,"framicon");
            if(nOffset!=-1)
            {
                sOptions=Binary.readByte(nOffset+18)+"x"+Binary.readByte(nOffset+19);
                // Read the BPP from the first icon, as the header is unreliable.
                nOffset+=12+Binary.readDword(nOffset+30);
                sOptions=sOptions.append(Binary.readWord(nOffset+14)+"bpp");
            }
            nOffset=Binary.findSignature(12,Binary.getSize()-12,"'anih'24000000");
            if(nOffset!=-1)
            {
                var nCount=Binary.readDword(nOffset+12);
                sOptions=sOptions.append(nCount+(nCount==1?" icon":" icons"));
            }
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("image","Windows Bitmap");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=40)
    {
        if(Binary.compare("'BM'"))
        {
            if(Binary.getSize()>=Binary.readDword(2))
            {
                switch(Binary.readDword(14))
                {
                case  40: sVersion="3"; break;
                case 108: sVersion="4"; break;
                case 124: sVersion="5"; break;
                }
                if(sVersion!="")
                {
                    switch(Binary.readDword(0x1e))
                    {
                    case /*BI_RLE8*/1:
                    case /*BI_RLE4*/2: sOptions="RLE";  break;
                    case /*BI_JPEG*/4: sOptions="JPEG"; break;
                    case /*BI_PNG*/ 5: sOptions="PNG";  break;
                    }
                    nHeight=~~Binary.readDword(0x16);
                    if(nHeight<0)
                    {
                        nHeight=-nHeight;
                        sOptions=sOptions.append("top-down");
                    }
                    sOptions=sOptions.append(Binary.readDword(0x12)+"x"+nHeight,
                                             Binary.readWord(0x1c)+"bpp");
                }
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Authors: Jason Hood <jadoxa@yahoo.com.au>, Kae <TG@kaens>

init("image","Windows Cursor");

includeScript("CurIcoBPP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=40)
    {
        if(Binary.compare("00000200"))
        {
            // Find the biggest, assuming square.
            var nCount=Binary.readWord(4);
            var nWidth=0,nHeight=0,nBPP=0,sz=6+nCount*16;
            if(sz === 6 || sz > File.getSize()) return false;
            var nHotX, nHotY;
            for(var i=0;i<nCount;i++)
            {
                if(Binary.read_uint8(9+i*16)) return false;
                sz_ = Binary.read_uint32(14+i*16,_LE);
                if(!sz_ || sz_ > File.getSize()-22)
                    return false;
                sz += sz_;
                var w=Binary.readByte(6+i*16);
                if(w>nWidth)
                {
                    nWidth=w;
                    nHeight=Binary.readByte(7+i*16);
                    nBPP=getCurIcoBPP(6+i*16);
                    nHotX=Binary.readShort(10+i*16);
                    nHotY=Binary.readShort(12+i*16);
                }
                else if(w==nWidth)
                {
                    var b=getCurIcoBPP(6+i*16);
                    if(b>nBPP)
                    {
                        nBPP=b;
                        nHotX=Binary.readShort(10+i*16);
                        nHotY=Binary.readShort(12+i*16);
                    }
                }
            }
            sOptions=nWidth+"x"+nHeight;
            if(nBPP!=0)
            {
                sOptions=sOptions.append(nBPP+"bpp");
            }
            sOptions=sOptions.append("("+nHotX+","+nHotY+")");
            if(nCount>1)
            {
                sOptions=sOptions.append(nCount+" cursors");
            }
            sOptions = sOptions.append("sz:"+sz);
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP

init("image","DirectDraw Surface (.DDS)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=0x40)
    {
        if(Binary.compare("'DDS '7C000000"))
        {
            bDetected=true;
            if(Binary.isVerbose())
            {
                sOption(Binary.read_uint32(0x0C)+"x"+Binary.read_uint32(0x10));
                var sFourCC = Binary.getString(0x54,0x04);
                if(sFourCC)
                {
                     sOption("compressed: " + sFourCC);
                }
                else {
                     sOption("uncompressed");
                }
                if(Binary.read_uint32(0x1C))
                {
                     sOption("MipMap");
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file
// Author: LinXP

init("image","Encapsulated PostScript (.EPS)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=0x40)
    {
        if(Binary.compare("'%!PS-Adobe-'", 0x00) && Binary.compare("' EPSF-'", 0x0E))
        {
            sVersion=sVersion.append(Binary.getString(0x0B,0x03), Binary.getString(0x14,0x03));
            var sText=Binary.getString(0x00,0x0400)
            bDetected=true;
            if(Binary.isVerbose())
            {
                var aCreator=sText.match(/%%Creator: (.*?)[\r\n]/);
                if(aCreator)
                {
                    sOptions=sOptions.append("Creator:"+aCreator[1]);
                }
                var aPages =sText.match(/%%Pages: (.*?)[\r\n]/);
                if(aPages)
                {
                    sOptions=sOptions.append("Pages:"+aPages[1]);
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file

init("image","GIF");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=11)
    {
        if(Binary.compare("'GIF8'"))
        {
            sVersion=Binary.getString(3,3);
            sOptions=sOptions.append(Binary.readWord(6)+"x"+Binary.readWord(8),
                                     ((Binary.readByte(10)&7)+1)+"bpp");
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Authors: Jason Hood <jadoxa@yahoo.com.au>, Kae <TG@kaens>

init("image","Windows Icon");

includeScript("CurIcoBPP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("00000100")) {
        // Find the biggest, assuming square.
        var nCount=Binary.read_uint16(4,_LE);
        var nWidth=0,nHeight=0,nBPP=0,sz=6+nCount*16;
        if(sz === 6 || sz > File.getSize()) return false;
        for(var i=0;i<nCount;i++) {
            if(Binary.read_uint8(9+i*16)) return false;
            var w=Binary.read_uint8(6+i*16),h;
            var b=getCurIcoBPP(6+i*16);
            sz_ = Binary.read_uint32(14+i*16,_LE);
            if(!sz_ || sz_ > File.getSize()-22)
                return false;
            sz += sz_;
            if(w === 0) {
                var nOffset=Binary.read_uint32(18+i*16,_LE);
                if(Binary.compare("89'PNG\r\n'1A0A........'IHDR'",nOffset)) {
                    w=Binary.read_int32(nOffset+16,_BE);
                    h=Binary.read_int32(nOffset+20,_BE);
                }
                else if(Binary.compare("28000000",nOffset)) {
                    //TODO find at least one .ico that has a BMP > 256x256, and check this
                    w=abs(Binary.read_int32(nOffset+4,_BE));
                    h=abs(Binary.read_int32(nOffset+8,_BE)); //abs for top-down and otherwise weird BMPs
                }
                else return false //unknown format after all
            }
            else { _log("bmp, ht @ "+Hex(i*16+7));
                h=Binary.read_uint8(7+i*16);
            }
            if(w>nWidth) {
                nWidth=w;
                nHeight=h;
                nBPP=b;
            }
            else if(w==nWidth)
                if(b>nBPP)
                    nBPP=b;
        }
        if(!w || !h) return false;
        sOptions=sOptions.append(nWidth+"x"+nHeight,nBPP+"bpp");
        if(nCount>1)
            sOptions=sOptions.append(nCount+" icons");
        sOptions = sOptions.append("sz:"+sz)
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP
// doc-ref: http://www.libpng.org/pub/mng/spec/jng.html

init("image","JPEG Network Graphics (.JNG)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=0x40)
    {
        if(Binary.compare("8B'JNG\r\n'1A0A........'JHDR'"))
        {
            bDetected=true;
            if(Binary.isVerbose())
            {
                sOption(Binary.read_uint32(0x10,_BE)+"x"+Binary.read_uint32(0x14,_BE));
                switch(File.read_uint8(0x18))
                {
                    case  8: sOption("Gray");        break;
                    case 10: sOption("Color");       break;
                    case 12: sOption("Gray Alpha");  break;
                    case 14: sOption("Color Alpha"); break;
                    default: bDetected=false;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("image","JPEG");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=22)
    {
        if(Binary.compare("FFD8FFE0....'JFIF'00"))
        {
            bDetected=1;
            sVersion=Binary.readByte(11)+".0"+Binary.readByte(12);

            // Search for a Start Of Frame to get dimensions.
            var nOffset=2;
            while(nOffset<Binary.getSize())
            {
                var wTag=Binary.readBEWord(nOffset);
                if(wTag>=0xFFC0&&wTag<=0xFFC3)
                {
                    sOptions=Binary.readBEWord(nOffset+7)+"x"
                             +Binary.readBEWord(nOffset+5);
                    switch(Binary.readByte(nOffset+9))
                    {
                    case 1: sOptions=sOptions.append("grey");  break;
                    case 3: sOptions=sOptions.append("YCbCr"); break;
                    case 4: sOptions=sOptions.append("CMYK");  break;
                    }
                    break;
                }
                nOffset+=2+Binary.readBEWord(nOffset+2);
            }
        }
        else if(Binary.compare("FFD8FFE1....'Exif'00"))
        {
            bDetected=1;
            sVersion=Binary.readByte(11)+".0"+Binary.readByte(12);
            sOptions="EXIF";
        }
        else if(Binary.compare("FFD8FFDB"))
        {
            bDetected=1;
            sOptions="OLD";
        }        
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("image","DQT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.isJpeg())
    {
        bDetected=1;
        sOptions = Binary.getJpegDqtMD5();
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("tool","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.isJpeg())
    {
        if(Binary.isJpegChunkPresent(0xE2))
        {
            _setResult("tool", "FlashPix/ICC", "", "");
        }
        if(Binary.isJpegChunkPresent(0xE3))
        {
            _setResult("tool", "Kodak", "", "");
        }
        if(Binary.isJpegChunkPresent(0xE4))
        {
            _setResult("tool", "FlashPix", "", "");
        }
        if(Binary.isJpegChunkPresent(0xE5))
        {
            _setResult("tool", "Ricoh", "", "");
        }
        if(Binary.isJpegChunkPresent(0xE6))
        {
            _setResult("tool", "GoPro", "", "");
        }
        if(Binary.isJpegChunkPresent(0xE7))
        {
            _setResult("tool", "Spiff", "", "");
        }
        if(Binary.isJpegChunkPresent(0xE8))
        {
            _setResult("tool", "XXXXXX", "", "");
        }
        if(Binary.isJpegChunkPresent(0xE9))
        {
            _setResult("tool", "MediaJukebox", "", "");
        }
        if(Binary.isJpegChunkPresent(0xEA))
        {
            _setResult("tool", "PhotoStudio", "", "");
        }
        if(Binary.isJpegChunkPresent(0xEB))
        {
            _setResult("tool", "HDR", "", "");
        }
        if(Binary.isJpegChunkPresent(0xEC))
        {
            _setResult("tool", "Photoshop", "", "Web");
        }
        if(Binary.isJpegChunkPresent(0xED))
        {
            _setResult("tool", "Photoshop", "", "");
        }
        if(Binary.isJpegChunkPresent(0xEE))
        {
            _setResult("tool", "Adobe", "", "");
        }
        if(Binary.isJpegChunkPresent(0xEF))
        {
            _setResult("tool", "GraphicConverter", "", "");
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("camera","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.isJpeg())
    {
        sName = Binary.getJpegExifCameraName();
        
        if(sName!="")
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("image","comment");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.isJpeg())
    {
        sOptions = Binary.getJpegComment();
        
        if(sOptions!="")
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP

init("image","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=0x40)
    {
        if(Binary.compare("'«KTX 11»'0D0A1A0A"))
        {
            bDetected=true;
            sName="Khronos Texture (.KTX)";
            if(Binary.isVerbose())
            {
                sOption(Binary.read_uint32(0x24)+"x"+Binary.read_uint32(0x28));
            }
        }

        else if(Binary.compare("'«KTX 20»'0D0A1A0A"))
        {
            bDetected=true;
            sName="Khronos Texture (.KTX2)";
            if(Binary.isVerbose())
            {
                sOption(Binary.read_uint32(0x14)+"x"+Binary.read_uint32(0x18));
            }
        }

        // https://github.com/BinomialLLC/basis_universal/wiki/.basis-File-Format-and-ETC1S-Texture-Video-Specification
        else if(Binary.compare("734213004D00"))
        {
            bDetected=true;
            sName="Basis Universal GPU Texture (.BASIS)";
            if(Binary.isVerbose())
            {
                //sOption(Binary.read_uint32(0x14)+"x"+Binary.read_uint32(0x18));
            }
        }



    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file
// Author: LinXP
// doc-ref: http://www.libpng.org/pub/mng/spec/

init("image","Multiple-image Network Graphics (.MNG)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=0x40)
    {
        if(Binary.compare("8A'MNG\r\n'1A0A........'MHDR'"))
        {
            bDetected=true;
            if(Binary.isVerbose())
            {
                sOption(Binary.read_uint32(0x10,_BE)+"x"+Binary.read_uint32(0x14,_BE));
                sOption("frames:"+Binary.read_uint32(0x18,_BE));
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file
// Author: LinXP

init("image","ZSoft Paintbrush (.PCX)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=0x0E)
    {
        if(Binary.compare("0a"))
        {
            bDetected=true;
            sOption(Binary.read_uint16(0x08)+"x"+Binary.read_uint16(0x0A));
            switch(File.read_uint8(0x02))
            {
                case 0:                 break;
                case 1: sOption("RLE"); break;
                default: bDetected=false;
            }
            switch(File.read_uint8(0x03))
            {
                case 1: sOption("1bpp"); break;
                case 2: sOption("2bpp"); break;
                case 4: sOption("4bpp"); break;
                case 8: sOption("8bpp"); break;
                default: bDetected=false;
            }
            switch(File.read_uint8(0x01))
            {
                case 0: sOption("PC Paintbrush version 2.5 using a fixed EGA palette"); break;
                case 2: sOption("PC Paintbrush version 2.8 using a modifiable EGA palette"); break;
                case 3: sOption("PC Paintbrush version 2.8 using no palette"); break;
                case 4: sOption("PC Paintbrush for Windows"); break;
                case 5: sOption("PC Paintbrush version 3.0, including 24-bit images"); break;
                default: bDetected=false;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file
// Author: LinXP
// doc-ref: http://www.libpng.org/pub/png/spec/1.2/PNG-Contents.html

init("image","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=48)
    {
        if(Binary.compare("89'PNG\r\n'1A0A........'IHDR'"))
        {
            bDetected=true;
            sName = "Portable Network Graphics (.PNG)";
            sOption(Binary.read_uint32(0x10,_BE)+"x"+Binary.read_uint32(0x14,_BE));
            switch(Binary.read_uint8(0x19))
            {
                case 0: sOption("Grey");       break;
                case 2: sOption("RGB");        break;
                case 3: sOption("Indexed");    break;
                case 4: sOption("Grey+Alpha"); break;
                case 6: sOption("RGBA");       break;
                default: bDetected=false;
            }
            if(Binary.read_uint8(0x1C))
            {
                sOption("Interlaced");
            }
            if(Binary.compare("00000008'acTL'",0x21))
            {
                sName = "Animated Portable Network Graphics (.PNG)"
                sOption("frames:" + Binary.read_uint32(0x29,_BE));  
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file
// Author: LinXP
// doc-ref: https://www.adobe.com/devnet-apps/photoshop/fileformatashtml/

init("image","Adobe Photoshop");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=0x20)
    {
        if(Binary.compare("'8BPS'")) 
        {
            bDetected=true;
            switch(File.read_uint16(0x04, _BE)) // Version check
            {
                case 1: sName +=" (.PSD)";     sVersion="v1.0"; break;
                case 2: sName +=" BIG (.PSB)"; sVersion="v2.0"; break;
                default: bDetected=false;
            }
            var channelCount   = Binary.read_uint16(0x0C,_BE);
            var imageHeight    = Binary.read_uint32(0x0E,_BE);
            var imageWidth     = Binary.read_uint32(0x12,_BE);
            var bitsPerChannel = Binary.read_uint16(0x16,_BE);
            var colorMode      = Binary.read_uint16(0x18,_BE);
            sOption(imageWidth +"x"+ imageHeight);
            switch(colorMode)
            {
                case 0:  sOption("Bitmap"); break;
                case 1:  sOption("Gray-scale"); break;
                case 2:  sOption("Indexed"); break;
                case 3:  sOption("RGB"); break;
                case 4:  sOption("CMYK"); break;
                case 7:  sOption("Multichannel"); break;
                case 8:  sOption("Duotone"); break;
                case 9:  sOption("Lab"); break;
                default: bDetected=false;
            }
            sOption((channelCount * bitsPerChannel)+"-bit"); 
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file
// Author: LinXP
// doc-ref: http://powervr-graphics.github.io/WebGL_SDK/WebGL_SDK/Documentation/Specifications/PVR%20File%20Format.Specification.pdf
init("image","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var  PixelFormat = ['PVRTC 2bpp RGB', 'PVRTC 2bpp RGBA', 'PVRTC 4bpp RGB', 'PVRTC 4bpp RGBA', 'PVRTC-II 2bpp', 'PVRTC-II 4bpp',
        'ETC1', 'BC1\\DXT1', 'DXT2', 'BC2\\DXT3', 'DXT4', 'BC3\\DXT5', 'BC4', 'BC5', 'BC6', 'BC7', 'UYVY', 'YUY2', 'BW1bpp', 'R9G9B9E5 Shared Exponent', 'RGBG8888', 'GRGB8888', 
        'ETC2 RGB', 'ETC2 RGBA', 'ETC2 RGB A1', 'EAC R11', 'EAC RG11', 
        'ASTC_4x4','ASTC_5x4','ASTC_5x5','ASTC_6x5','ASTC_6x6','ASTC_8x5','ASTC_8x6','ASTC_8x8','ASTC_10x5','ASTC_10x6','ASTC_10x8','ASTC_10x10',
        'ASTC_12x10','ASTC_12x12','ASTC_3x3x3','ASTC_4x3x3','ASTC_4x4x3', 'ASTC_4x4x4','ASTC_5x4x4','ASTC_5x5x4','ASTC_5x5x5','ASTC_6x5x5','ASTC_6x6x5','ASTC_6x6x6'];

    if(Binary.getSize()>=0x34)
    {
        if(Binary.compare("'PVR'03"))
        {
            bDetected=true;
            sName="PowerVR PVR texture (.PVR)";
            if(Binary.isVerbose())
            {
                sOption(Binary.read_uint32(0x18)+"x"+Binary.read_uint32(0x1c));
                sOption(PixelFormat[Binary.read_uint64(0x08)]);
                if (Binary.read_uint32(0x10)) {sOption("Linear RGB");} else {sOption("Standard RGB");}
            }
        }


    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file
// Author: LinXP
// doc-ref: https://qoiformat.org/qoi-specification.pdf

init("image","Quite OK Image (.QOI)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=0x0E)
    {
        if(Binary.compare("'qoif'")) 
        {
            bDetected=true;
            sOptions=sOptions.append(Binary.read_uint32(0x04,_BE)+"x"+Binary.read_uint32(0x08,_BE));
            switch(File.read_uint8(0x0C))
            {
                case 3:  sOption("RGB"); break;
                case 4:  sOption("RGBA"); break;
                default: bDetected=false;
            }
            switch(File.read_uint8(0x0D))
            {
                case 0:  sOption("sRGB with linear alpha"); break;
                case 1:  sOption("all channels linear"); break;
                default: bDetected=false;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file
// Author: LinXP
// Status: WIP
// doc-ref: 

init("image","Tagged Image File Format (.TIFF)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    function ReadTagValue(nType)
    {
        var nTempValue=0, nTempOffset=0;
        switch(nType)
        {
            case 1: // eBYTE 
                break;
            case 2: // eASCII
                nTempOffset = Binary.read_uint32(nOffset+8,bEndian);
                nTempValue =  Binary.getString(nTempOffset, nCount);
                return nTempValue;
                break;
            case 3: // eSHORT
                if (nCount == 1)
                {
                    nTempValue = Binary.read_uint16(nOffset+8,bEndian);
                    return nTempValue;
                }
                else
                {
                    nTempOffset = Binary.read_uint32(nOffset+8,bEndian);
                    while(nCount--)
                    {
                        nTempValue = Binary.read_uint16(nTempOffset,bEndian); nTempOffset+=2;                        
                    }
                    return nTempValue;
                }
                break;
            case 4: // eLONG
                if (nCount == 1)
                {
                    nTempValue = Binary.read_uint32(nOffset+8,bEndian);
                    return nTempValue;
                }
                else
                {
                    nTempOffset = Binary.read_uint32(nOffset+8,bEndian);
                    while(nCount--)
                    {
                        nTempValue = Binary.read_uint32(nTempOffset,bEndian); nTempOffset+=4;                        
                    }
                    return nTempValue;
                }
                break;
            case 5: // eRATIONAL 
                break;
            case 6: // eSBYTE 
                break;
            case 7: // eUNDEF 
                break;
            case 8: // eSSHORT 
                break;
            case 9: // eSLONG 
                break;
            case 10: // eSRATIONAL 
                break;
            case 11: // eFLOAT 
                break;
            case 12: // eDOUBLE 
                break;
            }

    }

    if(Binary.getSize()>=0x0E)
    {
        bDetected=true;
        switch(Binary.read_uint32(0x00,_BE))
        {
            case 0x4D4D002A:  var bEndian=_BE; sOption("BE"); break;
            case 0x49492A00:  var bEndian=_LE; sOption("LE"); break;
            default: bDetected=false;
        }

        if(bDetected) 
        {
            var nOffset = Binary.read_uint32(0x04,bEndian);
            var nTagCount  = Binary.read_uint16(nOffset,bEndian); nOffset+=2;
            var nWidth, nHeight, nBPS, nCol,nComp;
            while(nTagCount--)
            {
                var nTag   = Binary.read_uint16(nOffset,  bEndian);
                var nType  = Binary.read_uint16(nOffset+2,bEndian);
                var nCount = Binary.read_uint32(nOffset+4,bEndian);
                switch(nTag)
                {
                case 0x100: // ImageWidth (256)
                    nWidth  = ReadTagValue(nType);
                    break;

                case 0x101: // ImageLength (257)
                    nHeight = ReadTagValue(nType);
                    break;

                case 0x102: // BitsPerSample (258)
                    nBPS = nCount * ReadTagValue(nType);
                    break;

                case 0x103: // Compression (259)
                    nComp = ReadTagValue(nType);
                    break;

                case 0x106: // PhotometricInterpretation (262)
                    nCol = ReadTagValue(nType);
                    break;

                case 271: // Make (271)
                    sOption("Make:"+ReadTagValue(nType));
                    break;

                case 50706: // DNGVersion (50706)
                    sName = "Digital Negative (.DNG)"
                    break;
                default: 

                }
                nOffset+= 0x0C;

            }


            switch(nComp)
            {
            case     1: sOption("Uncompressed"); break;
            case     2: sOption("Huffman");      break;
            case     3: sOption("Group 3");      break;
            case     4: sOption("Group 4");      break;
            case     5: sOption("LZW");          break;
            case     6: sOption("embedded JPEG (602Photo software)"); break;
            case     7: sOption("JPEG");         break;
            case 32771: sOption("Alchemy software type 6 unknown compression"); break;
            case 32773: sOption("PackBits");     break;
            case 32946: sOption("Deflate");      break;
            case 34690: sOption("LDF bitonal");  break;
            case 65000: sOption("Kodak DCR");
                        sName = "Kodak DCS Pro SLR (.DCR)";       break;
            }
            if(nWidth!=0&&nHeight!=0)
            {
                sOption(nWidth+"x"+nHeight);
            }
            sOption(nBPS+"-bit ");
            switch(nCol)
            {
                case 0: sOption("W/B");   break;
                case 1: sOption("B/W");   break;
                case 2: sOption("RGB");   break;
                case 3: sOption("index"); break;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file
// Author: LinXP
// doc-ref: http://site.xara.com/support/docs/webformat/spec/XARFormatDocument.pdf
init("image","Xar Vector graphic file (.XAR)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>=0x40)
    {
        if(Binary.compare("'XARA'A3A30D0A"))
        {
            bDetected=true;
            var sProducer        = Binary.getString(0x1F);
            var sProducerVersion = Binary.getString(0x1F+sProducer.length+1);
            var sProducerBuild   = Binary.getString(0x1F+sProducer.length+1+sProducerVersion.length+1);
            sName = sProducer + " Document (.XAR)";
            sVersion = sProducerVersion;
            if(Binary.isVerbose())
            {
                sOption("build:"+sProducerBuild);
                switch(Binary.getString(0x10,3))
                {
                    case 'CXW':  sOption("Web file"); break;
                    case 'CXN':  sOption("Paper-publishable file"); break;
                    //default: bDetected=false;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("format","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("'KDMV'01"))
    {
        bDetected=1;
        sName="VMWare image";
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("data","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("'aWAW'"))
    {
        sName="CreateInstall data";
        bDetected=1;
    }
    else if(Binary.compare("';!@Install@!UTF-8!'"))
    {
        sName="7-zip Installer data";
        bDetected=1;
    }
    else if(Binary.compare("00'TMSAMVOH'"))
    {
        sName="ActiveMark protector data";
        bDetected=1;
    }
    else if(Binary.compare("....................'MSCF'00"))
    {
        sName="Actual Installer data";
        bDetected=1;
    }
    else if(Binary.compare("'10JP'"))
    {
        sName="Adveractive Installer data";
        bDetected=1;
    }
    else if(Binary.compare("'EWETAR DATA FILE!! VER 1.00 <<<>>>'"))
    {
        sName="Aeco Systems installer data";
        bDetected=1;
    }
    else if(Binary.compare("c0ab........60ea"))
    {
        sName="ARJSFX32 data";
        bDetected=1;
    }
    else if(Binary.compare("67570402"))
    {
        sName="ARQ archive";
        bDetected=1;
    }
    else if(Binary.compare("0b0bafaf0b0ba4"))
    {
        sName="AutoPlay Media Studio installer data";
        bDetected=1;
    }
    else if(Binary.compare("'wwgT)'")||Binary.compare("..120100....0000"))
    {
        sName="ClickTeam installer data";
        bDetected=1;
    }
    else if(Binary.compare("'CK16'"))
    {
        sName="CrypKey Installer archive";
        bDetected=1;
    }
    else if(Binary.compare("........'DIMDMSCF'"))
    {
        sName="Dimd SFX data";
        sOptions="CAB";
        bDetected=1;
    }
    else if(Binary.compare("'[metadata]'"))
    {
        sName="distutils installer data";
        bDetected=1;
    }
    else if(Binary.compare("b297e169"))
    {
        sName="Envoy Packager data";
        bDetected=1;
    }
    else if(Binary.compare("'EPSF'"))
    {
        sName="Eschalon Installer archive";
        bDetected=1;
    }
    else if(Binary.compare("........'SPIS'1a'LH5'"))
    {
        sName="GPInstall data";
        sOptions="SPIS LH5";
        bDetected=1;
    }
    else if(Binary.compare("'zlb'1A")||Binary.compare("'idska32'1A"))
    {
        sName="Inno Setup Installer data";
        bDetected=1;
    }
    else if(Binary.compare("'Inno Setup Messages'"))
    {
        sName="Inno Setup uninstall data";
        bDetected=1;
    }
    else if(Binary.compare("'1CNT'"))
    {
        sName="LucasArts Update Installer data";
        bDetected=1;
    }
    else if(Binary.compare("'MPU'0d"))
    {
        sName="MP-ZipTool SFX32 data";
        bDetected=1;
    }
    else if(Binary.compare("'MPQ'1a20"))
    {
        sName="MPQ archive";
        bDetected=1;
    }
    else if(Binary.compare("'PK??NOS_PO'")||Binary.compare("'NOS_PO'"))
    {
        sName="NOS Installer data";
        bDetected=1;
    }
    else if(Binary.compare("970300000201"))
    {
        sName="Pantaray QSetup data";
        sVersion="10.x";
        bDetected=1;
    }
    else if(Binary.compare("370700000201"))
    {
        sName="Pantaray QSetup data";
        sVersion="11.x";
        bDetected=1;
    }
    else if(Binary.compare("04'PBG'"))
    {
        sName="Paquet archive";
        bDetected=1;
    }
    else if(Binary.compare("'PB'................................'7z'"))
    {
        sName="Paquet Builder";
        sOptions="7zip";
        bDetected=1;
    }
    else if(Binary.compare("'qres'"))
    {
        sName="QT installer data";
        bDetected=1;
    }
    else if(Binary.compare("4B2A9A")||Binary.compare("4B2A84"))
    {
        sName="RTPatch archive";
        bDetected=1;
    }
    else if(Binary.compare("e0e0e1e1e2e2e3e3e4e4e5e5e6e6e7e7"))
    {
        sName="Setup Factory installer data";
        sVersion="8.x, 9.x";
        bDetected=1;
    }
    else if(Binary.compare("e0e1e2e3e4e5e6"))
    {
        sName="Setup Factory installer data";
        sVersion="4.x, 5.x";
        bDetected=1;
    }
    else if(Binary.compare("67155234ff4d3642"))
    {
        sName="STATICSUP installer data";
        bDetected=1;
    }
    else if(Binary.compare("'ESIV'")||Binary.compare("'SIVM'",0xf000))
    {
        sName="Vise Installer data";
        bDetected=1;
    }
    else if(Binary.compare("'RsDl'"))
    {
        sName="WinImage SFX data";
        bDetected=1;
    }
    else if(Binary.compare("'IMP'0a"))
    {
        sName="IMP archive";
        bDetected=1;
    }
    else if(Binary.compare("'@Daisy@Lucy@xyzzy@'................1f8b08"))
    {
        sName="WinPatch Apply Program data";
        sOptions="gzip";
        bDetected=1;
    }
    else if(Binary.compare("'@Daisy@Lucy@xyzzy@'1f8b08"))
    {
        sName="WinPatch Apply Program data";
        sOptions="gzip";
        bDetected=1;
    }
    else if(Binary.compare("'***messages***'"))
    {
        sName="WinRAR Installer data";
        bDetected=1;
    }
    else if(Binary.compare("fffe2a002a002a006d0065007300730061006700650073002a002a002a00"))
    {
        sName="WinRAR Installer data";
        sVersion="5.x";
        bDetected=1;
    }
    /* else if(Binary.compare("'Rar!'"))
    {
        sName="RAR archive";
        bDetected=1;
    } */
    else if(Binary.compare("'MPV*'"))
    {
        sName="ZipCentral SFX-32 data";
        bDetected=1;
    }
    else if(Binary.compare("'[20/20]'"))
    {
        sName="PCInstall data";
        bDetected=1;
    }
    else if(Binary.compare("'ISSetupStream'"))
    {
        sName="InstallShield data";
        sVersion="18.x";
        bDetected=1;
    }
    else if(Binary.compare("'FWS'")||Binary.compare("'CWS'"))
    {
        sName="Adobe Flash";
        bDetected=1;
    }
    else if(Binary.compare("'Smart Install Maker v'"))
    {
        sName="Smart Install Maker data";
        sVersion=Binary.getString(Binary.getOverlayOffset()+0x17);
        bDetected=1;
    }
    else if(Binary.compare("....0000dcedbd"))
    {
        sName="PackageForTheWeb data";
        sOptions="InstallShield";
        bDetected=1;
    }
    else if(Binary.compare("d0cf11e0a1b11ae1"))
    {
        sName="Microsoft Compound";
        bDetected=1;
    }
    else if(Binary.compare("'00000000000000BD00000000000000010000000000000001'",0x19a0))
    {
        sName="Autodesk Self-Extract data";
        bDetected=1;
    }
    else if(Binary.compare("c0dececb8d8d8d8d"))
    {
        sName="Ghost Installer archive";
        sOptions="xored MSCF, mask: 8D";
        bDetected=1;
    }
    else if(Binary.compare("02060a0405fd59"))
    {
        sName="CreateInstall data";
        sVersion="2003.3.5";
        bDetected=1;
    }
    else if(Binary.compare("'RWMV'"))
    {
        sName="VMWare Installation Launcher data";
        bDetected=1;
    }
    else if(Binary.compare("........'GRCSETUPINFORMATION'"))
    {
        sName="Codegear Installer data";
        bDetected=1;
    }
    else if(Binary.compare("'xvm'0003"))
    {
        sName="Spoon Studio data";
        bDetected=1;
    }
    else if(Binary.compare("2f30ee1f5e4ee51e"))
    {
        sName="Advanced Installer data";
        sOptions="MS Compound-like format";
        bDetected=1;
    }
    else if(Binary.compare("'^OPT'"))
    {
        var ArcOffset=Binary.findString(Binary.getOverlayOffset(),0x50, "^ARC");
        if(ArcOffset!=-1)
        {
            if(Binary.compare("1f8b08",ArcOffset+4))
            {
                sName="Adobe SVG Installer";
                sOptions="gzip";
                bDetected=1;
            }
        }
    }
    else if(Binary.compare("07d26cbf2159abaa0100000000"))
    {
        sName="Chilkat ZIP Self-Extractor data";
        bDetected=1;
    }
    else if(Binary.compare("'IST'00"))
    {
        sName="Dolphin Virtual Machine data";
        sVersion="5.0";
        bDetected=1;
    }
    else if(Binary.compare("'@._P-DATA_.@'"))
    {
        sName="CodeFusion Wizard data";
        bDetected=1;
    }
    else if(Binary.compare("'ASWsetupFPkgFil3'"))
    {
        sName="avast! Antivirus installer data";
        bDetected=1;
    }
    else if(Binary.compare("5b3e"))
    {
        var ArcOffset=Binary.findSignature(Binary.getOverlayOffset(),0x500, "'PK'0304");
        if(ArcOffset!=-1)
        {
            sName="InstallAnywhere data";
            sOptions="zip";
            bDetected=1;
        }
    }
    else if(Binary.compare("........efbeadde'NullsoftInst'"))
    {
        sName="NSIS data";
        bDetected=1;
    }
    else if(Binary.compare("................fec1cd666ebccf01fec1cd666ebccf0100..............78da"))
    {
        sName="Internet Download Manager installer data";
        sOptions="zlib";
        bDetected=1;
    }
    else if(Binary.compare("d513e4e801000000"))
    {
        sName="Install4j installer data";
        bDetected=1;
    }
    else if(Binary.compare("efbbbf';!@Install@!UTF-8!'"))
    {
        sName="7-zip Installer data";
        bDetected=1;
    }
    else if(Binary.compare("'UM'030a00"))
    {
        sName="Sony Windows installer data";
        bDetected=1;
    }
    else if(Binary.compare("7b00320030003700320036003300370037002d00"))
    {
        sName="ADS Self Extractor data";
        bDetected=1;
    }
    else if(Binary.findSignature(Binary.getOverlayOffset(),Math.min(0x100,Binary.getOverlaySize()),"7b00320030003700320036003300370037002d00")!=-1)
    {
        sName="ADS Self Extractor data";
        bDetected=1;
    }
    else if(Binary.compare("276327631226097513180178"))
    {
        sName="Chaos Software installer data";
        bDetected=1;
    }
    else if(Binary.compare("'OWS9G1'", 0xb))
    {
        sName="Gentee installer data";
        bDetected=1;
    }
    else if(Binary.compare("'SQ5SFX'"))
    {
        sName="Squeez SFX data";
        bDetected=1;
    }
    else if(Binary.compare("'Inno Setup Setup Data'"))
    {
        sName="Inno Setup data";
        bDetected=1;
    }
    else if(Binary.findSignature(Binary.getOverlayOffset(),Math.min(0x100,Binary.getOverlaySize()),"'MSCF00000000'")!=-1)
    {
        sName="CAB archive";
        bDetected=1;
    }
    else if(Binary.findSignature(Binary.getOverlayOffset(),Math.min(0x100,Binary.getOverlaySize()),"'ISc('")!=-1)
    {
        sName="InstallShield archive";
        bDetected=1;
    }
    else if(Binary.compare("'ExcelsiorII1'"))
    {
        sName="Excelsior installer data";
        bDetected=1;
    }
    else if(Binary.compare("'InstallShield'00"))
    {
        sName="InstallShield data";
        sOptions="2.x-3.x";
        bDetected=1;
    }
    else if(Binary.compare("'wwwwI'874712"))
    {
        sName="Multimedia Fusion installer data";
        bDetected=1;
    }
    else if(Binary.compare("'PIMPFILE'00"))
    {
        sName="PIMP installer data";
        bDetected=1;
    }
    else if(Binary.compare("'tiz1'........78da"))
    {
        sName="Tarma installer data";
        sOptions="zlib";
        bDetected=1;
    }
    else if(Binary.compare("'XXataDfOnigeB'"))
    {
        sName="I-D Media installer data";
        bDetected=1;
    }
    else if(Binary.compare("'This is the end of the executable'"))
    {
        sName="SwiftView installer data";
        bDetected=1;
    }
    else if(Binary.compare("1f8b08", 0x3000))
    {
        sName="BulletProofSoft installer data";
        sOptions="gzip";
        bDetected=1;
    }
    else if(Binary.compare("'AddD'03"))
    {
        sName="SecuROM data";
        var nOffset=Binary.getOverlayOffset();
        sVersion=Binary.getString(nOffset+8);
        bDetected=1;
    }
    else if(Binary.compare("'NB09'"))
    {
        sName="CodeView 4.10 debug information";
        bDetected=1;
    }
    else if(Binary.compare("'NB11'"))
    {
        sName="CodeView 5.0 debug information";
        bDetected=1;
    }
    else if(Binary.compare("'NB10'"))
    {
        sName="PDB 2.0 file link";
        bDetected=1;
    }
    else if(Binary.compare("'RSDS'"))
    {
        sName="PDB 7.0 file link";
        bDetected=1;
    }
    else if(Binary.compare("'[(*|*)]MZ'"))
    {
        sName="Mioplanet installer executable+data"
        bDetected=1;
    }
    else if(Binary.compare("'MPV'"))
    {
        sName="DelZip SFX data";
        bDetected=1;
    }
    else if(Binary.compare("'MPU'00"))
    {
        sName="CoffeeCup SFX data";
        bDetected=1;
    }
    else if(Binary.compare("'<KRZIP FILE BEGINS HERE>'"))
    {
        sName="KRZIP archive";
        bDetected=1;
    }
    else if(Binary.compare("..........87000001........5d0000800000"))
    {
        sName="Smart Install Maker data";
        bDetected=1;
    }
    else if(Binary.compare("'RS'"))
    {
        sName="AOLSetup data";
        bDetected=1;
    }
    else if(Binary.compare("'TGCF'"))
    {
        sName="Setup-Specialist archive";
        bDetected=1;
    }
    else if(Binary.compare("a3484bbe986c4aa9"))
    {
        sName="AutoIt compiled script";
        sVersion="2.XX-3.XX";
        bDetected=1;
    }
    else if(Binary.compare("'MSCF'00000000"))
    {
        sName="CAB archive";
        bDetected=1;
    }
    else if(Binary.compare("'PK'0304"))
    {
        sName="ZIP archive";
        bDetected=1;
    }
    else if(Binary.compare("'$_BIM_CONFIG_START_$'"))
    {
        sName="Bytessence Install Maker data";
        bDetected=1;
    }
    else if(Binary.compare("........'.eh_frame'00"))
    {
        sName="BitRock installer data";
        bDetected=1;
    }
    else if(Binary.compare("09050000"))
    {
        sName="ThinApp data";
        bDetected=1;
    }
    else if(Binary.compare("BDA6EEE9F9EDEFEDE5ED"))
    {
        sName="Hamrick Software XOR-ed ZIP";
        bDetected=1;
    }
    else if(Binary.compare("000000000000000038e8020000000000"))
    {
        sName="Box Stub installer data";
        bDetected=1;
    }
    else if(Binary.compare("a7870800"))
    {
        sName="Install Factory data";
        bDetected=1;
    }
    else if(Binary.compare("a7870800"))
    {
        sName="Install Factory data";
        bDetected=1;
    }
    
    /* var ArcOffset=Binary.findSignature(Binary.getOverlayOffset(),0x400, "'|http:'");
    if(ArcOffset!=-1)
    {
        sName="Pantaray QSetup data";
        sVersion="6.x";
        bDetected=1;
    }
    var ArcOffset=Binary.findSignature(Binary.getOverlayOffset(),0x400, "'|www.'");
    if(ArcOffset!=-1)
    {
        sName="Pantaray QSetup data";
        sVersion="8.x";
        bDetected=1;
    } */

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: nicholasmckinney


// Detects hashezerade's reflective pe_to_shellcode generator
// https://github.com/hasherezade/pe_to_shellcode

init("shellcode","pe_to_shellcode");


function detect(bShowType,bShowVersion,bShowOptions)
{
    bDetected = 0;
    
    // https://github.com/hasherezade/pe_to_shellcode/blob/master/pe2shc/stub2/stub32.bin
    var stub32 = "558BEC51518D45F85350E8AA0100005984C0750883C8FFE9A4000000\
    56578B7D08B84D5A00006639070F858C0000008B773C03F7813E50450000757F8D86A0\
    00000033DB391875046AFDEB71FF76345750E8FB00000083C40C84C075046AFCEB5C39\
    9E80000000742357FFB684000000FFB680000000FF75FCFF75F8E86F00000083C41484\
    C075046AFBEB318D86C0000000391874095750E82800000059598B4628B90020000003\
    C766854E167408536A0157FFD0EB07FFD0EB036AFE585F5E5BC9C204008B4424045657\
    8B7C24108B008B74380C85F674128B0E85C9740C6A006A0157FFD183C60475EE5FB001\
    5EC3538B5C241855568B7424185703F3EB3C03C350FF5424188BE885ED74408B7E1003\
    FBEB1F79050FB7C1EB058D430203C185C074295055FF54242085C0741F890783C7048B\
    0F85C975DB83C6148B460C85C075BD85F60F95C05F5E5D5BC332C0EBF78B4424045355\
    568B08034C241457EB478B410483F808723F8D68F8D1ED6A005B74320FB7545908668B\
    C266C1E80C6685C074216683F803752B8B44241881E2FF0F00002B44241C03D6035424\
    180102433BDD72CE0349048B3185F675B3B0015F5E5D5BC332C0EBF7565768029FE66A\
    E88B0100008BF05985F67431688DBDC13F56E87C0000008BF8595985FF741E68FF1F7C\
    C956E869000000595985C0740D8B4C240C894104B0018939EB0232C05F5EC353568B74\
    240C83CAFF8A1E84DB743B8A7C24105784FF750A8D43BF3C19770380C3206A085F8BCA\
    0FBEC3D1E933C28BD181F22083B8ED24010F44D1D0FB83EF0175E3468A1E84DB75CB5F\
    F7D25E8BC25BC351515355568B742418B84D5A00005766390675618B463C8B44307885\
    C074568B54301C33FF8B4C30188954241C8B5430208B443024894C241085C974388D1C\
    328D2C308B4C241C0FB745006A018D048103C6894424188B0303C650E84FFFFFFF5959\
    3B44242074164783C50283C3043B7C241072CE33C05F5E5D5B5959C38B4424148B0003\
    C6EBEF56578B7C240C83CAFF33F60FB7076685C0745B5355807C2418000FB7C8894C24\
    1475108D41BF6683F819770783C120894C2414668B5C24146A085D8BC233CAD1E88BD0\
    81F22083B8ED80E1010F44D066D1EB66895C241483ED0174068B4C2414EBD9460FB704\
    776685C075A95D5BF7D25F8BC25EC364A1300000005356578B780C83C7148B37EB288D\
    46F885C074258B581885DB741E8378300074126A00FF7030E85AFFFFFF59593B442410\
    740C8B363BF775D433C05F5E5BC38BC3EBF800000000000000";
    
    // https://github.com/hasherezade/pe_to_shellcode/blob/master/pe2shc/stub2/stub64.bin
    var stub64 = "56488BF44883E4F04883EC20E805000000488BE65EC348895C240857\
    4883EC30488BF9488D4C2420E83702000084C0750883C8FFE9BD000000B84D5A000066\
    39070F85AA00000048635F3C4803DF813B504500000F8597000000488D8BB000000083\
    3900750AB8FDFFFFFFE9860000004C8B4330488BD7E86201000084C07507B8FCFFFFFF\
    EB6F83BB9000000000742A0F28442420488D4C2420488B93900000004C8BC7660F7F44\
    2420E89300000084C07507B8FBFFFFFFEB3C488D8BD00000008339007408488BD7E833\
    0000008B4328B9002000004803C766854B16740E4533C0488BCF418D5001FFD0EB09FF\
    D0EB05B8FEFFFFFF488B5C24404883C4305FC348895C2408574883EC208B01488BFA48\
    8B5C10184885DB741B4C8B0B4D85C974134533C0488BCF418D500141FFD14883C30875\
    E5488B5C2430B0014883C4205FC3488BC4488958084889681048897018488978204156\
    4883EC208BDA498BF04903D84C8BF1EB4A8BC84803CE41FF16488BE84885C074628B7B\
    104803FEEB2679050FB7D1EB07488D56024803D14885D27447488BCD41FF56084885C0\
    743B4889074883C708488B0F4885C975D24883C3148B430C85C075AF4885DB0F95C048\
    8B5C2430488B6C2438488B742440488B7C24484883C420415EC332C0EBE148895C2408\
    48897C2410448B09498BD84C03CA4C8BDA33FF458B114585D27459418379040872F141\
    8B51044C8BC74883EA0848D1EA7435430FB74C41080FB7C166C1E80C6685C074236683\
    F80A752681E1FF0F0000498BC34103CA482BC34903CB49FFC04801014C3BC272CB418B\
    41044C03C8EBA332C0EB02B001488B5C2408488B7C2410C348895C2408488974241057\
    4883EC20488BD9B9029FE66AE8FD010000488BF84885C07432BA8DBDC13F488BC8E893\
    000000488BF04885C0741DBAFF1F7CC9488BCFE87E0000004885C0740B48894308B001\
    488933EB0232C0488B5C2430488B7424384883C4205FC3448A09448ADA4C8BD14183C8\
    FFEB414584DB750C418D41BF3C1977044180C120BA08000000418BC8410FBEC14133C0\
    D1E9448BC14181F02083B8ED2401440F44C141D0F94883EA0175DB49FFC2458A0A4584\
    C975BA41F7D0418BC0C3488BC448895808488968104889701848897820415441564157\
    B84D5A0000448BFA4C8BC16639010F85870000004863413C8B8C088800000085C97478\
    498D040833FF8B68184885ED746A448B4820448B50244D03C8448B601C4D03D0410FB7\
    02458B194D03D883CAFF498D3484EB2741BE080000008BCA0FBEC333C2D1E98BD181F2\
    2083B8ED24010F44D1D0FB4983EE0175E249FFC3418A1B84DB75D2F7D2413BD7742D48\
    FFC74983C2024983C104483BFD72A833C0488B5C2420488B6C2428488B742430488B7C\
    2438415F415E415CC3428B04064903C0EBDC48895C240848897C2410440FB7094183C8\
    FF33FF8ADA448BD74C8BD9EB4684DB750F418D41BF6683F8197705664183C120BA0800\
    0000418BC8410FB7C14133C0D1E9448BC14181F02083B8ED2401440F44C16641D1E948\
    83EA0175DA49FFC2470FB70C53664585C975B4488B5C240841F7D0488B7C2410418BC0\
    C348895C240848896C24104889742418574883EC2065488B0425600000008BE9488B78\
    184883C720488B1F483BDF7430488D43F04885C07427488B70304885F6741E488B4860\
    4885C9740B33D2E834FFFFFF3BC57405488B1BEBD0488BC6EB0233C0488B5C2430488B\
    6C2438488B7424404883C4205FC300000000000000000000000000";
    
    var redir32_64_Start = "4D5A4552E8000000005B4883EB09534881C3";
    var redir32_Start = "4D5A4552E8000000005883E8095005";
    var redir64_Start = "4D5A4552E800000000594883E909488BC14805";
    
    var signatures = [redir32_64_Start, redir32_Start, stub32, redir64_Start, stub64];
    
    var nSize = Binary.getSize();
    
    if (nSize > 0x4000) {
        nSize = 0x4000;
    }
    
    for (var i = 0; i < signatures.length; i++) {
        if (Binary.isSignaturePresent(0, nSize, signatures[i])) {
            bDetected = 1;
            
            if (i <= 2) {
                sOptions = "x86";
            } else {
                sOptions = "AMD64";
            }
        }
    }
    
    return result(bShowType, bShowVersion, bShowOptions);
}
// DIE's signature file
// Author: nicholasmckinney


init("shellcode","Monoxgas sRDI");


// https://github.com/monoxgas/sRDI/blob/9fdd5c44383039519accd1e6bac4acd5a046a92c/Python/ShellcodeRDI.py
function detect(bShowType,bShowVersion,bShowOptions)
{
    bDetected = 0;
    
    // 32-bit and 64-bit start out with the same first 5 bytes (relative jump)
    var jumpStartOffset = Binary.findSignature(0, Binary.getSize(), "E800000000");
    
    if (jumpStartOffset < 0) {
        return result(bShowType, bShowVersion, bShowOptions);
    }
    
    var currentOffset = jumpStartOffset +5;
    
    // Possible 64-bit sRDI
    // https://github.com/monoxgas/sRDI/blob/9fdd5c44383039519accd1e6bac4acd5a046a92c/Python/ShellcodeRDI.py#L76-L80
    if (Binary.readDword(currentOffset) == 0xC8894959) {
        
        currentOffset += 4;
        
        // https://github.com/monoxgas/sRDI/blob/9fdd5c44383039519accd1e6bac4acd5a046a92c/Python/ShellcodeRDI.py#L83-L84
        if ( (Binary.readDword(currentOffset) & 0xFF) != 0xBA) {
            return result(bShowType, bShowVersion, bShowOptions);
        }
        
        currentOffset += 5; // 1 byte for MOV EDX, 4 bytes for function hash 
        
        
        // 4 bytes from rel jump for func hash 
        var setupLocation = Binary.readDword(currentOffset);
        
        if ( (setupLocation & 0xFFFFFF) != 0xC08149) {
            return result(bShowType, bShowVersion, bShowOptions);
        }
        
        currentOffset += 7; // 33 bytes for bytes compared + 4 bytes for user data location
        
        if ( (Binary.readDword(currentOffset) & 0xFFFF) != 0XB941) {
            return result(bShowType, bShowVersion, bShowOptions);
        }
        
        currentOffset += 6; // 2 bytes for mov r9d, 4 bytes for length of user data
        
        var nextBytes = "564889E64883E4F04883EC3048894C24284881C1"; // 20 bytes length
        if (!Binary.isSignaturePresent(currentOffset, 20, nextBytes)) {
            return result(bShowType, bShowVersion, bShowOptions);
        }
        
        // https://github.com/monoxgas/sRDI/blob/9fdd5c44383039519accd1e6bac4acd5a046a92c/Python/ShellcodeRDI.py#L113
        currentOffset += 24; // 20 bytes for continued setup, 4 bytes for offset to DLL
        
        if (Binary.readDword(currentOffset) != 0x202444C7) {
            return result(bShowType, bShowVersion, bShowOptions);
        }
        
        currentOffset += 8; // 4 bytes for mov, 4 bytes for flags operand
        
        if (Binary.readByte(currentOffset) != 0xE8) {
            return result(bShowType, bShowVersion, bShowOptions);
        }
        
        currentOffset += 5; // 5 bytes for rel jump
        
        // https://github.com/monoxgas/sRDI/blob/9fdd5c44383039519accd1e6bac4acd5a046a92c/Python/ShellcodeRDI.py#L127-L134
        if (!Binary.isSignaturePresent(currentOffset, 5, "4889F45EC3")) {
            return result(bShowType, bShowVersion, bShowOptions);
        }
        
        bDetected = 1;
        sOptions = "AMD64";
    } 
    // Possible 32-bit sRDI
    else if (Binary.readDword(currentOffset) == 0xE5895558) { 
    
    
        // https://github.com/monoxgas/sRDI/blob/9fdd5c44383039519accd1e6bac4acd5a046a92c/Python/ShellcodeRDI.py#L159-L171
        if (!Binary.isSignaturePresent(currentOffset, 7, "585589E589C268")) {
            return result(bShowType, bShowVersion, bShowOptions);
        }
        
        currentOffset += 11; // 7 bytes for sig above + 4 bytes for flags
    
        if ( (Binary.readDword(currentOffset) & 0xFFFFFF) != 0xC28150) {
            return result(bShowType, bShowVersion, bShowOptions);
        }
        
        currentOffset += 7; // 3 bytes for sig above + 4 bytes for user data location
        
        if (Binary.readByte(currentOffset) != 0x68) {
            return result(bShowType, bShowVersion, bShowOptions);
        }
        
        currentOffset += 5; // 5 bytes to push length of user data
        
        if (Binary.readWord(currentOffset) != 0x6852) {
            return result(bShowType, bShowVersion, bShowOptions);
        }
        
        currentOffset += 6; // 1 byte to push edx, 5 bytes to push hash of function
        
        if (Binary.readByte(currentOffset) != 0x05) {
            return result(bShowType, bShowVersion, bShowOptions);
        }
        
        currentOffset += 5; // 5 bytes to add offset of dll to eax
        
        if (Binary.readWord(currentOffset) != 0xE850) {
            return result(bShowType, bShowVersion, bShowOptions);
        }
        
        currentOffset += 6; // 1 byte to push eax, 5 bytes to rel jump to reflective loader
        
        if (!Binary.isSignaturePresent(currentOffset, 5, "83C414C9C3")) {
            return result(bShowType, bShowVersion, bShowOptions);
        }
        
        bDetected = 1;
        sOptions = "x86";
    }
    
    return result(bShowType, bShowVersion, bShowOptions);
}
// DIE's signature file

init("source","HTML");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var sText=Binary.getHeaderString();
    if(/^<(!DOCTYPE )?html/m.test(sText))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("source","Pascal");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var sText=Binary.getHeaderString();
    /* if(/^unit/im.test(sText))
    {
        bDetected=1;
    } */
    if(/^\s*program\s.*\s*uses\s/im.test(sText))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("script","Shell");

includeScript("shell-script");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(isInterpreter("sh"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("source","XML");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var sText=Binary.getHeaderString();
    // Ignore the UTF-8 BOM.
    if(/^(?:\xef\xbb\xbf)?<\?xml/.test(sText))
    {
        var aVersion=sText.match(/version="(.*?)"/);
        if(aVersion)
        {
            sVersion=aVersion[1];
        }

        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("source","C/C++");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var sText=Binary.getHeaderString();
    if(/^#ifndef (\w+).*\s+^#define \1/m.test(sText)
     ||/#\s*pragma (?:once|hdrstop)/.test(sText))
    {
        sOptions="header";
        bDetected=1;
    }
    if(/^(?:class\b|virtual\b|public:|private:|template\b)/m.test(sText))
    {
        if(!(/\sdef\s/.test(sText))) // to avoid false positives on python
        {
            sName="C++";
            bDetected=1;
        }
    }
    else
    {
        var aInclude=sText.match(/^#include ["<].*?[>"]/mg);
        if(aInclude)
        {
            bDetected=1;
            for(var i=0;i<aInclude.length;i++)
            {
                if(aInclude[i].indexOf(".")<0)
                {
                    sName="C++";
                    break;
                }
            }
        }
        else if(/^#define/m.test(sText))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// https://github.com/horsicq/Detect-It-Easy signature file
// Author: Kaens (TG @kaens)

init("format","Protein Data Bank file");

includeScript("read");

function detect(bShowType,bShowVersion,bShowOptions) {
    if(Binary.compare("'HEADER'") && (Binary.isHeuristicScan() || extIs("pdb"))){
        //ref http://www.wwpdb.org/documentation/file-format-content/format33/sect1.html
        L= ['','','','','']; ttl='';
        L[0] = Binary.read_ansiString(0, Binary.findSignature(0, 81, "0A"));
        if( /[\x20-\x7F]{65,}/.test(L[0]) ) {
            bDetected = 1;
            if(Binary.isVerbose()){
                p=L[0].length+1;
                for(i=1;i<L.length;i++){
                    L[i]=Binary.read_ansiString(p, Binary.findSignature(p, 81, "0A")-p);
                    p+=L[i].length+1;
                }
                for(i=0;i<L.length;i++){
                    switch(L[i].substr(0,6)){
                        case "HEADER":
                            sOptionT(L[i].substr(10,40),"Classification: ");
                            sOptionT(L[i].substr(62,10),"ID: "); //4 is the format, but 10 for future-proofing
                            sOptionT(L[i].substr(50,9),"dep. ");
                            break;
                        case "TITLE ":
                            ttl += ' '+L[i].substr(10,70).trim();
                            break;
                    }
                }
                sOptionT(ttl, "Title: ")
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("format","plain text");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.isPlainText())
    {
        var sText=Binary.getString(0,Math.min(Binary.getSize(),3));
        // UTF-8 BOM.
        if(/^\xef\xbb\xbf/.test(sText))
        {
            sName="UTF-8 text";
        }
        if(bShowOptions)
        {
            var size=Binary.getSize()<4096?Binary.getSize():4096;
            var pos=Binary.findByte(0,size,10);
            if(pos!=-1)
            {
                sOptions=(pos!=0&&Binary.readByte(pos-1)==13)||(pos+1<Binary.getSize()&&Binary.readByte(pos+1)==13)?"CRLF":"LF";
            }
            else if(Binary.findByte(0,size,13)!=-1)
            {
                sOptions="CR";
            }
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
init("source","python");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var sText=Binary.getHeaderString();

    if((/import\s/.test(sText)) &&(/class\s/.test(sText))&&(/self/.test(sText)))
    {
        if(/\sdef\s/.test(sText))
        {
            bDetected=1;
        }
    }


    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("script");

includeScript("shell-script");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(sInterpreter)
    {
        // Capitalize the first letter, lowercase the rest.
        sName=sInterpreter.substr(0,1).toUpperCase()+sInterpreter.substr(1).toLowerCase();
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: A.S.L - <asl@onet.eu> 2019

init("format", "MP4 Video");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.getSize()>100)
    {
        if(Binary.compare("000000..'ftyp'"))
        {
            sVersion="";
            sOptions=Binary.getString(16); // example : isomiso2avc1mp41 / isomavc1 / isom
            bDetected=1;
        }
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// Borland Delphi tests for Borland C++ first, so ensure we only do it once.

var bBorlandC;
if(typeof bBorlandC==="undefined")
{
    bBorlandC=0;
    if(PE.compare("'MZ'50000200000004000F00FFFF0000B80000000000000040001A00000000000000000000000000000000000000000000000000000000000000000000020000BA10000E1FB409CD21B8014CCD219090'This program must be run under Win32\r\n$'370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'PE'0000"))
    {
        bBorlandC=1;
    }
    else if(PE.compareEP("A1........C1E002A3"))
    {
        bBorlandC=1;
    }
    else if(PE.compareEP("EB10'fb:C++HOOK'90"))
    {
        bBorlandC=2;
    }
    else if(PE.section.length>1)
    {
        var nOffset=PE.section[1].FileOffset;
        var nSize=Math.min(1024,PE.section[1].FileSize);
        if(PE.isSignaturePresent(nOffset,nSize,"'Borland C++ - Copyright'"))
        {
            bBorlandC=1;
        }
    }
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","$pirit");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$b430cd21f6d12ea6e8....b462cd21e8....3636fb969034..c3"))
    {
        sVersion="1.x";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$aee8$$$$e4210c..fbe62190b8....fb5026509087c1"))
    {
        sVersion="1.5";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$369f9f1c..e9$$$$e8$$$$e421f80c..e6218d06....fc505089c1fb"))
    {
        sVersion="1.5";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$f8d72606b435cd2107e8$$$$1c..1c..33d226f6da12ddfcf905....f8f5f6ea"))
    {
        sVersion="1.5";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","32-bit crypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("6633c9678a81........34..2c..34..678881........6683c1..6681f9........75"))
    {
        sOptions="by SWW //DiGiTAl FaCToRY";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","4kZIP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("fcb1..e8$$$$8736....b8....d3e0482306....66d32e....280e....77..506633c0ac8a0e....80c1..66d3e0"))
    {
        sOptions="by pascal //Digital Nightmare";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","8086 Forth 83");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$8cc88ed88ed08ec0a1....b0..a3....2d....a3....2d....8be8bb....031e....892f2d....a3....bb....031e....89078be0be....e9"))
    {
        sVersion="2.1.0";
        sOptions="1985";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","A3E (text2com)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("1e33c050be....81c6....b8....8ec0bf....b9....f3a5cb"))
    {
        sOptions="1992 by JHSoft";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","ABK-Scrambler");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("b430cd2186e03d....73..cd209c06b8....50cf"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","A.C.E. Scrambler");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("2c..fec024..34..fec824..34..bb....0c..eb$$24..0c..81eb....f6d8eb$$2c..fec0ffe3"))
    {
        sOptions="1996";
        bDetected=1;
    }
    else if(Binary.compare("24..0c..f6d8eb$$fec8bb....04..0c..f6d804..fec0f6d881eb....24..f6d8fec034..0c..04..2c..ffe3"))
    {
        sOptions="1996";
        bDetected=1;
    }
    else if(Binary.compare("34..fec834..0c..24..04..fec0bb....0c..2c..0c..81eb....eb$$fec0f6d82c..fec0f6d80c..ffe3"))
    {
        sOptions="1996";
        bDetected=1;
    }
    else if(Binary.compare("24..fec82c..bb....fec8f6d8eb$$04..81eb....0c..fec0fec80c..34..ffe3"))
    {
        sOptions="1996";
        bDetected=1;
    }
    else if(Binary.compare("24..eb$$04..bb....f6d834..fec8fec0eb$$0c..81eb....34..24..34..eb$$ffe3"))
    {
        sOptions="1996";
        bDetected=1;
    }
    else if(Binary.compare("34..fec804..24..0c..04..bb....0c..04..f6d881eb....0c..fec8f6d824..0c..ffe3"))
    {
        sOptions="1996";
        bDetected=1;
    }
    else if(Binary.compare("f6d834..2c..bb....0c..34..fec004..34..fec004..81eb....2c..34..24..eb$$04..2c..04..ffe3"))
    {
        sOptions="1996";
        bDetected=1;
    }
    else if(Binary.compare("fec0eb$$24..34..bb....f6d834..fec024..fec0f6d834..81eb....f6d80c..eb$$04..ffe3"))
    {
        sOptions="1996";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","ACiDDRAW");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$b8....cd10b4..b9....cd10e8....ba....90e8....3d....75..e9....3d....75..e9....3d....75..e9....3d....75..eb"))
    {
        sVersion="1.2";
        bDetected=1;
    }
    else if(Binary.compare("eb$$b8....cd10b4..b9....cd10e8....ba....90e8....3d....75..e9....3d....75..e9....3d....75..e9....3d....75..eb"))
    {
        sVersion="1.2";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","ANS2ALL");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e8$$$$b8....cd103c..75..80fb..73..58b8....cd21fcb8....8ec0be....bf....b9....f3a4fa"))
    {
        sVersion="1.3";
        sOptions="by ZeroCoder //XG";
        bDetected=1;
    }
    if(Binary.compare("e9$$$$2bc9b6..b2..b7..b4..cd212ad22af6b7..b4..cd10b6..32d2b7..b4..cd101e33c050"))
    {
        sOptions="by ZeroCoder //XG";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("immunizer","ARF/AV Inject");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$b8....50558bec83c4..061e90c746......c746......c646....c746......c746......8b5e..8dbf....b9"))
    {
        sVersion="2.4";
        sOptions="1995 by ARF Enterprises";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","ASC2COM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e8$$$$33c0cd333d....75..c606......b8....cd338916....c3"))
    {
        sVersion="2.02";
        sOptions="1992 by MorganSoft";
        bDetected=1;
    }
    else if(Binary.compare("e8$$$$e8$$$$b401b7..b9....cd10c3f8bb....8b073d....75..c3"))
    {
        sVersion="1.10B";
        sOptions="1989 by MorganSoft";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e8$$$$50535157bb....803f..74..33c98a0f438bfbb8....e3"))
    {
        sVersion="2.01 Compressed";
        sOptions="1992 by MorganSoft";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e8$$$$e8$$$$b4..b7..b9....cd10c3"))
    {
        sOptions="1989 by MorganSoft";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","ASIC-Basic");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$33dbb4..cd108916....cc90b0..ba....33c9b7..b4..cd1031d28916....b4..30ffcd1090"))
    {
        sVersion="5.0";
        sOptions="1994 by David Visti of 80/20 Software";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$33dbb4..cd108916....cc90b0..a2....ba....a0....3c..75..b4..b0..cd2172..a3"))
    {
        sOptions="by David Visti of 80/20 Software";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$33dbb4..cd108916....cc90fcb9....be....bf....f3a490fcb9....be....bf....f3a4"))
    {
        sVersion="3.0";
        sOptions="by David Visti of 80/20 Software";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","AVAST-Protect");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("eb$$8cc82e0306....502eff36....cb"))
    {
        sOptions="1999 by P.Baudis";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","AVPACK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("eb$$8cda0316....3916....73..b409ba....cd21c3"))
    {
        sVersion="1.22";
        sOptions="Andrei Volkov";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","AdFlt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("68....9c0fa00fa860fd6a..0fa1be....ad6664ff36....648b16....643106....6664ff36....648916....adff36"))
    {
        sVersion="2.0";
        sOptions="by EliCZ";
        bDetected=1;
    }
    else if(Binary.compare("9c0fa06660fd6a..0fa1be....ad6664ff36....648b16....668f06....643106....6664ff36....648916....668f06....adff36"))
    {
        sOptions="by EliCZ";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("crypter","Anti-Lamer Cryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$fa8cd3ba....8ed233d28ed38bdafb33c08ec026f716....eb"))
    {
        sVersion="1.0";
        sOptions="1999 by Ozzman //iHC";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Anti-hack encryption system");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("eb$$bd....33c08ec026c706........268c0e....8b46..26a3....268c0e....0e07"))
    {
        sOptions="by Rezaul Kabir //Shuvro";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","AutoCracker");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e8$$$$be....e8$$$$5133c9ac3c..74..32c8d1e1b4..8ad03c..74..cd21eb"))
    {
        sVersion="1.x";
        sOptions="1997 Dmitry Gorshkov";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","BAT2EXEC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(COM.compare("eb$$fcbd....8b....8b......8b......b44acd21a1....8986"))
    {
        sOptions="by Douglas Boling";
        sVersion="1.5";
        bDetected=1;
    }
    else if(COM.compare("fcbd....8b....8b......8b......b44acd21a1....8986"))
    {
        sOptions="by Douglas Boling";
        sVersion="1.2";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","BIN-Lock");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("eb$$31c08ec026c706........268c0e....26c706........268c0e....2ec706........2e8c0e....cccd01eb"))
    {
        sVersion="1.00";
        sOptions="by Hit-BBS Programmers crew";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","BatLite");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("eb$$e8....bb....8bf3031e....891e....81fb....73..bb....8bfb891e....031e....81c3....8be3b1..d3eb43"))
    {
        sOptions="1991-95 by Pieter A. Hintjens";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Best Protection Kit-B");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("eb$$fc8c06....e421a2....b0..e621fb33c08ed08be0be....8d3e....b9"))
    {
        sOptions="1993 by Eric Zmiro";
        bDetected=1;
    }
    else if(Binary.compare("eb$$fc8c06....e421a2....b0..e621fbf433c08ed08be0be....8d3e....b9"))
    {
        sOptions="1992 by Eric Zmiro";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Borland C++");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("8cca2e8916....b430cd218b2e....8b1e....8edaa3....8c06....891e....892e....e8....a1....8ec033c08bd88bf8b9....fcf2aee3"))
    {
        sOptions="1991";
        bDetected=1;
    }
    else if(Binary.compare("8cca2e8916....b430cd218b2e....1e2c..daa3....8c06....891e....892e....e8....a1....8ec033c08bd88bf8b9....fcf2aee3"))
    {
        sOptions="1991";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Budokan");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("bf....b9....8bc1fd3305abe2..e9"))
    {
        sOptions="by Electronic Arts, Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","C-crypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e800005d83ed..55d9d09c5825....509d5057bf....b0..aa5f58665166b9........cc"))
    {
        sVersion="1.02";
        sOptions="by De'FeinD //uCT";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","CC#3");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e800005d33db8bc3bf....893f81c3....532eff36....1f1e568d76..8bfbb9....f2a4c6"))
    {
        sOptions="by ZeroCoder //XG";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","CC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("b8....ba....3be073..b409ba....cd21b8....cd218bdc81eb....83e3..fcbe....8bfbb9....f3a48bc3b1..d3e88cc903c15033c050cb"))
    {
        sVersion="1.0";
        sOptions="1991 by B.Vorontsov";
        bDetected=1;
    }
    else if(Binary.compare("ba....b430cd213c..73..33c00650cbb9....b8....eb$$05....fc80c4..eb"))
    {
        sVersion="2.61 Beta";
        sOptions="by UniHackers";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$b9....be....8bfe5156b4..ac32c4c0c4..02e1aae2..bf....5e59f3a4be....56c3"))
    {
        sVersion="1.01";
        sOptions="by B.Vorontsov";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","CC286x2");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$eb$$e800005d81ed....eb$$bf....eb$$b0..eb$$e664eb$$b0..eb$$aaeb$$4f8d9e....eb$$538bdf"))
    {
        sVersion="2.1";
        sOptions="by Dark Stalker //UCF";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","CCC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e800005b8b4c..501736890e....8b47..1347..3347..2b47..36a3....83c6..b9....8b7f..037f..ac363006"))
    {
        sOptions="by ZeroCoder //XG";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e800005b8b4c..501736890e....8b47..3347..36a3....83c6..b9....8b7f..037f..ac363006"))
    {
        sOptions="by ZeroCoder //XG";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","CHECKPRG");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("33c0be....8bd8b9....bf....ba....474a74..ac320503d8e2"))
    {
        sOptions="1992 by Jordi Mas Hernandez";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","CNT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("'CNT'58e8$$$$5e8b4c..bf....ac3306....3306"))
    {
        sOptions="by C0NTRiVER";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","COM Sccrambler");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$fcbe....8bfeb9....515657b4..04..ac90902ac432c4aae2..5f5e5903f183ee..a5a4b8....5083eb..33c9"))
    {
        sVersion="0.1";
	sOptions="1995 by Moshe";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","COM-Protect");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$8b1e....83eb..b8....5053b430cd215b9ceb"))
    {
        sOptions="1995 by Mr.Wicked";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$565699521fe8....5d8d86....0e508f06....8f06....83c6..565f0e1fb9....b8....a3"))
    {
        sOptions="1994 by SiAC";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","COM-Protection");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$eb$$86c08ec086dbeb$$05....87db8b2e....97eb$$aaaaeb$$aaaaeb$$bb....03ddb9....03cd87cbb8"))
    {
        sOptions="by JAM //UCF";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","COM2TXT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("'XP5~~-~}P]XP-@?->@1Fq1Fx0F6,00F7,b(F8ZRu(XP2FzE,@r42fzWBxG!='"))
    {
        sOptions="1997 by GyikSoft";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","ComCrypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$b9....be....89f70e1f0e07bb....fcad31d8abe2"))
    {
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$eb$$5053575152061e572e8b36....81c6....8a5c..2e881e....8a5c"))
    {
        sVersion="1.0b";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$b9....be....89f7fcac04..aae2..b8....bf....abb0..aab8....5033c0c3"))
    {
        sOptions="1997 by HPA"
        bDetected=1;
    }
    else if(Binary.compare("b8....ffe0"))
    {
        if(Binary.compare("bb....b9....33c02e802f..43e2", Binary.readWord(1)-0x100))
        {
            sOptions="by Stone"
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","COMPACK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("BE....E8....5D83C5..55505351520E070E1F8BCE8D72..BF....D1E9FD57F3A5"))
    {
        sVersion="4.5";
        bDetected=1;
    }
    else if(Binary.compare("BE....E8....5D83C5..55505351520E070E1F8D72..bf....b9....90fd57f3a58d75..fcf98bfdc3"))
    {
        sVersion="4.5?";
        bDetected=1;
    }
    else if(Binary.compare("BE....E8....5D83C5..555053510E070E1F8BCE8D72..BF....D1E9FD57F3A5"))
    {
        sVersion="5.1";
        bDetected=1;
    }
    else if(Binary.compare("BE....E8....5D83C5..550e1f0e07505351528bce8d72..bf....d1e9fd57f3a58d75..fcf98bfdc3"))
    {
        sVersion="4.5";
        bDetected=1;
    }
    else if(Binary.compare("be....0e530e520e070e1fe800005d8bce8d72..bf....d1e9fd57f3a58d75..fcf98d7e..c3"))
    {
        sVersion="4.4";
        sOptions="1990";
        bDetected=1;
    }
    else if(Binary.compare("be....505351520e070e1fe800005d8bce8d72..bf....d1e9fd57f3a58d75..fcf98d7e..c3"))
    {
        sVersion="4.4";
        sOptions="1990";
        bDetected=1;
    }
    else if(Binary.compare("BE....E8....5D83C5..558bce8d72..bf....d1e9fd57f3a58d75..fcf98bfdc3"))
    {
        sVersion="4.5?";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","COMPROTECT (RCP)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("b8....15....72..8ac4bb....50515253555657061e50b8....58eb"))
    {
        sVersion="2.10";
        sOptions="1988-95 by Ralph Roth";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","COP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("bf....be....b9....ac3206....aae2"))
    {
        sVersion="1.0";
        sOptions="by Jack A. Orman";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("immunizer","Central Point Anti-Virus immunizer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e9$$$$e8$$$$5b81eb....5051525657558beb2ec686......268e06....061fb9....bf....8bc7fcf2ae26803d..75"))
    {
        sVersion="1993";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","CRX2COM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$8b1e....c1....81c3....e8....b4..ba....cd21bb....e8....b4..ba....cd21b8....ba....cd2173"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","Character Intro Engine");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$2e8b26....81c4....2ea1....2ea3....0e588ec08ed88bdc83c3..b1..d3eb43b4..cd21fc"))
    {
        sOptions="by //UCF";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$2e8b26....81c4....0e588ec08ed88bdc83c3..b1..d3eb43b4..cd21fc"))
    {
        sOptions="by //UCF";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","Cheat packer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("eb$$b9....ba....bf....bb....b8....be....83ec..8becfc8866..32e48976..8bf703c18bf83bfe76..fd574e4f"))
    {
        sOptions="1993 by TWIN of TRSi";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","CodeLock");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$bb....535856535981e9....31ff575a5dbe....e9"))
    {
        sVersion="4.0";
        sOptions="1993 by Dr. Detergen";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","ComProt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e800005e8bee81ed....8db6....b9....f61446e2"))
    {
        sVersion="1.0b";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","ComProtector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$b9....bb....bf....2e8a0734..fec8c0c0..2e88052e000d2e002d4743e2"))
    {
        sVersion="1.0";
        sOptions="1998 by Marco Ruhmann";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$b9....e800005b83c3..90fa8bd48be133c02e030e....2ec007..0f23f82e2b0e....2e300f0f23d8"))
    {
        sVersion="1.1";
        sOptions="1998 by Marco Ruhmann";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Comlock");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$eb$$bb....be....81c6....03f3bf....b9....f3a42e8a87....be....8bc82e300446ffc0e2"))
    {
        sVersion="0.10";
        sOptions="by Trouble Makers";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$eb$$bb....be....81c6....03f3bf....b9....f3a42e8a87....8bcbbe....2e3004fec046e2"))
    {
        sVersion="0.1x";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","CrAcKeR");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("eb$$be....8bfe5633c0be....ac02e081fe....72..5eac34..aa81fe....72"))
    {
        sVersion="0.2a";
        sOptions="by Deu$";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","CRacK2EXE/486");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("b9....bf....8035..47e2..be....8034..46803c..75..be....e8....be....e8....be....e8....bd"))
    {
        sVersion="0.02 Alfa";
        sOptions="1996 by Professor Nimnul";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Crypt by Dismember");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("0E179C58F6C4..74..EB..90B4..BE....BF....B9....68....68....68....57F3A4C3"))
    {
        sVersion="1.7";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$bf....8bf7acad918ae157ac32c4f6d0d0c412e1aae2"))
    {
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","CryptCom");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$be....56b9....c704....c644....8134....4646e2..31f631c9c3"))
    {
        sVersion="2.0";
        sOptions="by Nowhere Man";
        bDetected=1;
    }
    else if(Binary.compare("bf....57be....90b9....f3a4c3"))
    {
        sVersion="1.1";
        sOptions="by Frank Baumgartner";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","CryptGeneric");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$b430cd2180fc..72..90e9....90bb....81c3....53b0..04..51b9....e9"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","CyberWare Packer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("565056fd8bfc83ef..b9....be....fea447ffe7"))
    {
        sOptions="1997";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","DCFR");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("b8....ba....3bc4eb$$72$$5250b9....bb....8b0733c140890743e2"))
    {
        sVersion="0.0.4";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("driver","DIGPAK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$8cc88ed88ec0e8$$$$1e56be....33c08ed8c5340bf674"))
    {
        sOptions="1992 by The Audio Solutions";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$8cc88ed88ec0c706........c706........c706........b8....50e8$$$$558bec061e5657fc"))
    {
        sOptions="1991 by The Audio Solutions";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","DOC2COM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("fc8b0e....498b36....8bfeac3204aae2"))
    {
        sOptions="by Jerry DePyper";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","DOC2PAGE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$fc8a0e....32ede3..bf....b0..f3ae74..e8....ba....cd21ba....cd21e9"))
    {
        sOptions="by Th. Edel";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","DS-CRP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("b8....50c3"))
    {
        var nOffset=Binary.readWord(1)-256+8;
        if(Binary.compare("e800005d81ed....9c32e4509d9c5880e4..80fc..74..b4..509d9c5880e4..74..9deb",nOffset))
        sVersion="1.30";
        sOptions="by Dark Stalker //UCF";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Datalight/Northwest C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("eb$$fab8....b9....d3e88cc903c18ed88c06....8bd82b1e....891e....268b1e....2bd881fb....72..bb....8bd003d342b1..d3e38ed08be381eb....81fb....77"))
    {
        sVersion="3.10 S";
        sOptions="by Walter Bright";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("crypter","Deep Crypter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("90e9$$$$e80000598be981ed....81e9....be....8dbe....668b056689048dbe....8bd78bdf83c3..8a043205f6d0"))
    {
        sVersion="0.1b";
        sOptions="by PLasMoiD";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Deeper");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("90e9$$$$e8000059fa8bdc36c747......36837f....75..fb66fafb8be981ed....81e9....be....8dbe....668b05668904"))
    {
        sVersion="1.0c";
        bDetected=1;
    }
    if(Binary.compare("90e9$$$$e80000fa8bdc36c747......36837f....75..fb598be981ed....81e9....be....8dbe....668b05668904"))
    {
        sVersion="1.0a";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","Diet");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("bf....3bfc72$$fdbe....b9....f3a5fc8bf7bf....adad8be8b2..e9"))
    {
        sVersion="1.00";
        sOptions="modified";
        bDetected=1;
    }
    else if(Binary.compare("bf....3bfc72$$be....b9....fdf3a5fc8bf7bf....adad8be8b2..e9"))
    {
        sVersion="1.00, 1.00d";
        bDetected=1;
    }
    else if(Binary.compare("......bf....b9....3bfc72$$fdf3a5fc8bf7bf....adad8be8b2..e9"))
    {
        sVersion="1.02b, 1.10a";
        bDetected=1;
    }
    else if(Binary.compare("......bf....b9....3bfc72$$31dbeb$$fdf3a5fc8bf7bf....adad8be8b2..e9"))
    {
        sVersion="1.20";
        bDetected=1;
    }
    else if(Binary.compare("f99ceb$$55061e575652515350e8$$$$59b1..d3e98cc803c18ed88ec0"))
    {
        sVersion="1.44/1.45";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","Dn.COM Cruncher");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("33dbb5..8bf98be9be....57f3a4bf....c3"))
    {
        sVersion="1.2";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","E2C-Scrambler");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$fabc....c1ea..8ccd03ea8ec5bf....be....b9....bb....fdac320702c1d2c002c5aa4381fb....75..bb....e2"))
    {
        sOptions="1999 by Amokk //FTW";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","E2C (EXE2COM) by The DoP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("be....bf....b9....57f3a5c3"))
    {
        sVersion="1.00-1.02";
        bDetected=1;
    }
    else if(Binary.compare("be....bf....b9....fc57f3a5c3"))
    {
        sVersion="1.02a";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","E2C protection");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("bc....33c050b8....50ba....b8....cd21b8....cd21bf....be....b9....9081ff....74..8a050204aa46e2..eb"))
    {
        sOptions="1990 by Erik Labs";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","EPW");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$06571e565552515350bb....81c3....2e8b078ccb03c305....50b8....50cb"))
    {
        sVersion="1.2";
        sOptions="by Aland D. Jones";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","EXE2COM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$bf....be....a5a48cda83c2..50b9....ad970115e2"))
    {
        sVersion="1.0";
        sOptions="by D'B";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e800005b508cc005....8b0e....03c889....8b0e"))
    {
        sVersion="1.0";
        sOptions="by Microsoft";
        bDetected=1;
    }
    else if(Binary.compare("b3..b9....33d2be....8bfeac32c3aa434932e403d0e3..eb..3b16....75..be....8bc6b1..d3e88cdb03c30344..a3....8cc805"))
    {
        sOptions="CRC check";
        bDetected=1;
    }
    else if(Binary.compare("e8$$$$bf....be....a5a48cda83c2..0116....81c2....8ed2bc....eb"))
    {
        sOptions="by //ViP";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$bf....be....a5a48cda83c2..50b4..bb....cd21580116....81c2....8ed2"))
    {
        sOptions="0-Relocs by dR.No //ViP";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$bf....be....a5a48cda83c2..0116....81c2....8ed2bc....eb..ea"))
    {
        sOptions="0-Relocs by Sage //UCF";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e800005b81eb....8db7....bf....b9....f3a58db7....538ccf83c7..ad"))
    {
        sVersion="2.0";
        sOptions="by Paul Shpilsher";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$8cca81c2....3b16....76..ba....b409cd21cd20"))
    {
        sOptions="generic, type 1";
        bDetected=1;
    }
    else if(Binary.compare("be....8b043d....74..ba....b409cd21cd208bc6b1..d3e88cdb03c303....a3....8cc805....a3....8b44"))
    {
        sOptions="by RaskY";
        bDetected=1;
    }
    else if(Binary.compare("bf....be....b9....fcf3a4068ccb83c3..011e....011e....b9....8b54..03d381c2....8ec28b3c"))
    {
        sVersion="1.0";
        sOptions="by Milkov";
        bDetected=1;
    }
    else if(Binary.compare("bf....be....b9....fcf3a48ccb011e....011e....eb00bf....be....b9....bb....bd....fa"))
    {
        sVersion="1.0";
        sOptions="by Milkov";
        bDetected=1;
    }
    else if(Binary.compare("eb$$be....8bc6b1..d3e88cdb03c30344..89048cc805....8be88b44..b1..d3e803c50344..bb....8b1f"))
    {
        sOptions="by JauMing Tseng";
        bDetected=1;
    }
    else if(Binary.compare("e8$$$$bf....be....a5a48cda83c2..50b4..bb....cd21b9....ad970115e2"))
    {
        sVersion="1.0d";
        sOptions="1994 by D'B";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$92be....bf....fca5a48ccb83c3..b9....ad97011de2"))
    {
        sOptions="1996 by EM-Phaser";
        bDetected=1;
    }
    else if(Binary.compare("b430cd213c..73..33c00650cb"))
    {
        sOptions="by JVP";
        bDetected=1;
    }
    else if(Binary.compare("bf....be....b9....f3a48cd805....0344..8ccb9305....8be60364..8b4c..e3..5f5a"))
    {
        sName="CC";
        sVersion="2.61 beta";
        sOptions="EXE2COM";
        bDetected=1;
    }
    else if(Binary.compare("e8$$$$bf....be....a5a48cda83c2..50b4..bb....cd21580116....81c2....8ed2bc....eb"))
    {
        sOptions="by unknown";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e9$$$$8cca81c2....3b16....76..ba....b409cd21cd20"))
    {
        sOptions="generic, type 2";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","EXETools EXE2COM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e800005d8bcd83ed..bf....be....2bcff3a4b9....be....03f5e3..8cdb035e..ad8bf8011de2"))
    {
        sVersion="2.0, 2.1";
        bDetected=1;
    }
    else if(Binary.compare("68....68....68....68....68....68....5fbe....b9....f3a4c3"))
    {
        sOptions="com header from EXETools 2.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","EXETools by Dismember");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("68....68....68....be....bf....57b9....f3a4c3"))
    {
        sVersion="2.1 /E";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e800005d8bcd83ed..bf....be....2bcff3a4b9....be....03f5"))
    {
        sVersion="2.1";
        bDetected=1;
    }
    else if(Binary.compare("68....bf....8bf757b9....51b4..ac32c4c0c4..02e102f0aae2..33c0595e5f57eb"))
    {
        sVersion="2.0";
        bDetected=1;
    }
    else if(Binary.compare("68....68....68....be....bf....57b9....f3a4c3"))
    {
        sVersion="2.1 /E";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Easy!-C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("9c55568ccd83c5..8db6....56be....56cb"))
    {
        sOptions="1993 by Flight Technologys"; //spelling taken from file
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Entropy Coder");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("be....bf....b9....fdf3a447fcffe7"))
    {
        sOptions="by Sergey Lukashev";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","ExOM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("'EXOM'fabd....ffe5"))
    {
        sVersion="0.0x";
        sOptions="by Abdelaziz BELBACHiR";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","FCRYPT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$505351be....bf....8befb9....fcacd0c032c1d0c032c1aae2..595b58ffe5"))
    {
        sVersion="2.10b";
        sOptions="1992-93 by Chip & Dale SoftGroup";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","FIXCRK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("'ROMANOID'32e4b0..cd104c5abf....c606......bd....e8....c606......bf....bd....e8....bd....c606......bf"))
    {
        sOptions="by romanoid";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Fig-FORTH");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("90e9$$$$be....8cc88ed88b26....8ed08ec0fc8b2e....e8$$$$b0..ba....b4..cd21c3"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","ForthCMP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("90e9$$$$8cc88ed08ec08ed8bc....b430cd2180f8..73..ba....b409cd2131c0cd218cc881c0....8b1e....81eb....39d8"))
    {
        sOptions="1995 by Thomas Almy";
        bDetected=1;
    }
    if(Binary.compare("e9$$$$bc....c706........bd....892e....fce8....b8....cd21"))
    {
        sVersion="2.1";
        sOptions="by Thomas Almy";
        bDetected=1;
    }
    if(Binary.compare("e9$$$$bc....c706........bd....892e....b4..bb....cd21fce8"))
    {
        sVersion="2.1";
        sOptions="by Thomas Almy";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","ForthCMP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("90e9$$$$8cc88ed08ec08ed8bc....b430cd2180f8..73..ba....b409cd2131c0cd218cc881c0....8b1e....81eb....39d8"))
    {
        sOptions="1995 by Thomas Almy";
        bDetected=1;
    }
    if(Binary.compare("e9$$$$bc....c706........bd....892e....fce8....b8....cd21"))
    {
        sVersion="2.1";
        sOptions="by Thomas Almy";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","FromBAT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$be....bf....bb....c604..b9....fe04803c..77..c644....b80629cd21be....3c..74..8a04880743e2"))
    {
        sOptions="1991 by Clockwork Software";
        bDetected=1;
    }
    if(Binary.compare("e9$$$$fcbe....bf....bb....c604..b9....fe04803c..77..c644....b80629cd21be....3c..74..8a04880743e2"))
    {
        sName="BatchMaster";
        sOptions="1993 by Clockwork Software";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","GOAT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("5156505253813c....75$$424a81c3....8bdb595e585a5bb4..ba....cd21b8....cd21474f"))
    {
        sOptions="1996 by Martin Overton";
        bDetected=1;
    }
    else if(Binary.compare("50565351b8....807c....74$$8bc0585e5b59b4..ba....cd21b8....cd21474f4154"))
    {
        sOptions="1996 by Martin Overton";
        bDetected=1;
    }
    else if(Binary.compare("56515052807c....75$$81c2....8bc05e59585ab4..ba....cd21b8....cd21474f4154"))
    {
        sOptions="1996 by Martin Overton";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","GP-FORTH");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$8cc88ed8a1....a3....a1....a3....e8$$$$a1....3d....74..0306....72..a3....b1..d3e8408ccb8ec35003d8"))
    {
        sVersion="93.9-94.7";
        sOptions="1990-94 by Golden Porcupine Software";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Guardian Angel");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$06fcbe....eb$$ba....eb$$eb$$eb$$8a04eb$$eb$$eb$$d0c8eb$$2ad0eb$$32c6eb$$d1c2eb$$8804eb$$eb$$eb$$4681fe....74"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$06fcbe....8be8e4210c..eb$$e6218bc5ba....8be8e4210c..eb$$e6218bc58a0ceb"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$06fcbb....eb$$eb$$eb$$b9....8be8e42102..eb$$e6218bc58a17eb"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$06fcbb....8be8e4210c..eb$$e6218bc5ba....eb$$eb$$eb$$8a0f"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$06fcbe....eb$$......eb$$8a..8be8e4210c..eb$$e6218bc5fe"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e800005d81ed....9c588bc825....509d9c5825....3d....75..eb"))
    {
        sVersion="1.0b";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","HDKPROTC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$4851442ea1....2d....8bd805....8bf0bf....b9....f3a48bcbd1e9b8....8bf08bf8066a..07268b2e"))
    {
        sVersion="1.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","HYPDOC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e8....e8....e8....2ec606......2ec606......b9....2e8a26....b0..e8....2ec606......2ec606......2e8b3e....0e07"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","HackStop");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("fabe....ffe6"))
    {
        sVersion="1.17cr";
        bDetected=1;
    }
    else if(Binary.compare("fabd....ffe5"))
    {
        sVersion="1.13cs";
        bDetected=1;
    }
    else if(Binary.compare("fabb....ffe3"))
    {
        sVersion="1.14s";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","ICE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("eb$$be....8bfe8b0e....8b16....b8....50fcad33c2ab8bd0e2"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("immunizer","IMMUN");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$5053515256571e06e8....5e81ee....2e8936....8bfe81c7....2e8b1d2bfb83c7..81ef....8befb430cd21"))
    {
        sVersion="1.2r";
        sOptions="1993 by J.Bleuel";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Inbuild Encryption");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("b9....bb....2ed2072e281f43e2"))
    {
        sVersion="1.0";
        sOptions="by Christoph Gabler";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","IntroC0der");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("be....b9....8bfeac32c1d2c032c5aae2"))
    {
        sOptions="1995 by SkullC0der";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("crypter","J0B cryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$fa be....8d0e....2bcee8$$$$5051ba....8bda301cac32c35183c4..b9"))
    {
        sOptions="1996";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","KeyGen Crypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e800005d8d7e..575eb9....ad35....abe2"))
    {
        sVersion="1.00";
        sOptions="by Majestic";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Khrome Crypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("b9....b8....eb$$05....fc80c4..eb$$eb$$f4"))
    {
        sVersion="0.3";
        sOptions="1997 by Teraphy";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","LAME GG");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e8$$$$5eb9....314c..33c08ee003c605....faeb$$648b1e....899c....648b1e....899c....64a3....648c0e"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","LAMPROT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$8b0e....be....bf....f3a4b9....bb....8a0734..880743e2..33c033c933db33d233ff33f668....c3"))
    {
        sOptions="by gds //FH";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","LGLZ");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("bf....3bfc72$$be....b9....fdf3a4fc8bf746bf....e8"))
    {
        sVersion="1.03/04";
        sOptions="1996";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","LHA SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("eb$$fcbc....8cc805....8ec0eb$$bb....e8....061fb430cd218bd81e3c..72..368e06....33c08bf8b9....f2aeae"))
    {
        sVersion="2.05L, 2.10-2.13, 2.55";
        bDetected=1;
    }
    else if(Binary.compare("eb$$00fcbc....8cc805....8ec0eb$$bb....e8....061fb430cd218bd81e3c..72..368e06....33c08bf8b9....f2aeae"))
    {
        sVersion="2.13S";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","LHarc SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("eb$$fcbc....bb....e8....8cc82e0306....8ed88ec005....2e3b06....76..bb....e9....bf....33d28bc2b9....d1e873..35....e2..abfec275..be....bf....b8....ba....2e3a24"))
    {
        sVersion="1.13S, 1.13L";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$fcbc....bb....e8....8cc805....8ec0b8....cd21be....268816....26c706........ace8....74..263a06....74..3c..75..ace8....74..3c..75..acbf....b4..e8"))
    {
        sVersion="1.14c";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Lattice C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("fab8....05....b1..d3e88ccb03c38ed88ed0"))
    {
        if(Binary.compare("a3....bc....fbfc8cd88cc92bc1b1..d3c0a3....8126",19))
        {
            sVersion="3.0";
        }
        else if(Binary.compare("bc....fb8cd88cc92bc1b1..d3c0a3....8126",19))
        {
            sVersion="3.0";
        }
        else if(Binary.compare("bc....fbb430cd210ac075",19))
        {
            sVersion="2.1";
        }
        else if(Binary.compare("268b1e....2bd8f7c3....75..b1..d3e3eb..bb",19))
        {
            sVersion="1.01";
        }
        else if(Binary.compare("bb....2bd8f7c3....75..b1..d3e3eb..bb",19))
        {
            sVersion="1.0";
        }
        bDetected=1;
    }
    else if(Binary.compare("eb$$fab8....05....b1..d3e88ccb03c32ea3....8ed88ed0bc....fbb430cd21"))
    {
        sVersion="2.1";
        bDetected=1;
    }
    else if(Binary.compare("b8....05....b1..d3e88ccb03c38ed88ed0268b1e....2bd8f7c3....75..b1..d3e3eb"))
    {
        sVersion="1.01";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e8....8cc88ec0eb$$fab8....05....b1..d3e88ccb03c38ed88ed0bc....fbb430cd21"))
    {
        sVersion="2.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","List");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("bc....1e2bc0508926....b430cd213c"))
    {
        sOptions="by Vernon D. Buerg";
        bDetected=1;
    }
    else if(Binary.compare("bc....1e2bc0508926....e8$$$$b430cd213c"))
    {
        sVersion="6.00";
        sOptions="1985 by Vernon D. Buerg";
        bDetected=1;
    }
    else if(Binary.compare("bc....1e2bc0508926....b430cd21a2"))
    {
        sVersion="6.2a";
        sOptions="1987 by Vernon D. Buerg";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Lock-Master");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$eb$$31c0061e502d....501f0726ff77..26ff77..8f87....8f87....ffb7....ffb7....585b29c353bb....5a1f07"))
    {
        sVersion="9.0";
        sOptions="by Andrew Kacy";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","MASK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e8$$$$5557cd03fc4d41534bfa8bec836e....8b6e..fb49e8....5b81eb....50d6515256"))
    {
        sVersion="2.0";
        sOptions="1995 by JosB M. L. Lopes.";
        bDetected=1;
    }
    else if(Binary.compare("e8$$$$5557cd03fc4d41534bfa8bec8346....ff76..5d49e8....5b81eb....50d6515256"))
    {
        sVersion="2.4";
        sOptions="1995 by JosB M. L. Lopes.";
        bDetected=1;
    }
    else if(Binary.compare("e8$$$$5557cd03fc4d41534bfd50fa8bc4f7dcbc....9449fbd651521f5256"))
    {
        sVersion="2.5";
        sOptions="1995 by JosB M. L. Lopes.";
        bDetected=1;
    }
    else if(Binary.compare("e8$$$$5557cd03fc4d41534bfa8bec836e....ff76..5d49e800005b81eb"))
    {
        sVersion="2.3";
        sOptions="1995 by JosB M. L. Lopes.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","MCLock");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$909090fa29c08ec026c606......26c606......268c0e....26c606......26c606......268c0e....fbcd01"))
    {
        sVersion="1.2, 1.3";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","MESS");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("....................b9....f326ace3..eb$$ba....b409cd21cd20"))
    {
        sVersion="1.07";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","MICRO-C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("bb....b44acd21bc....be....bf....bb....b9....8a043c..74..3c..75..46eb"))
    {
        sOptions="by Dave Dunfield";
        bDetected=1;
    }
    else if(Binary.compare("bb....b44acd2133c08be0bf....b9....2bcff3aabe....bf....bb....b9....8a043c..74..46"))
    {
        sOptions="by Dave Dunfield";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("driver","MIDPAK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$bb....d1ebd1ebd1ebd1eb43b8....cd21fa8cc88ed0bc....fb8ed88ec0c706"))
    {
        sOptions="1992 by The Audio Solutions";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","MINIFORTH");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$fc33c08bd8a3....89c52d....a3....89c4b8....a3....891e....be....adffe0"))
    {
        sVersion="1.0";
        sOptions="1988 by Ted Beach";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","MSCC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$0e07be....bf....b9....f3a4b9....be....accc9803d8e2"))
    {
        sVersion="1.0a";
        sOptions="1997 by Mad $cientist";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","MakeRead");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$c706........c606......c606......e8....bf....893e....bf....893e....b4..b0..0106....578bc78b3e....fcab"))
    {
        sVersion="1.8";
        sOptions="1987";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Mavericks C0der");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$2e8b0e....49bb....fcbe....8a26....ac32c488074388c4e2..b9....ffe1"))
    {
        sVersion="1.XX";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$2e8b3e....81c7....2e8b058ac82ea3....2e8a45..2ea2....be....462e8a0432c12e88048ac83bf775..e9"))
    {
        sVersion="1.00a";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","MegaShield");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("90b8....e72133d252be....bd....b9....ad03d0d3c233c2d3ca2bd0e2"))
    {
        sVersion="1.01a";
        sOptions="by t-REX //PSA";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Microsoft C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("fab8....05....b1..d3e88ccb03c38ed88cd0a3....8bc4a3....8cd88ed0bb....8be3fb891e....b8....a3....0633c0"))
    {
        sVersion="1.04";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("library","Microsoft RTL");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("b430cd213c..73..c38cdf8b36....2e893e....2bf781fe....72..be....b8....05....73..e8....33c050e8....b8ff4ccd218be0"))
    {
        sVersion="1990";
        bDetected=1;
    }
    else if(Binary.compare("b430cd213c..73..c38cdf8b36....2e893e....2bf781fe....72..be....bb....81c3....73..e8....33c050e8....b8....cd21"))
    {
        sVersion="1992";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","MiCRoXoR");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e8$$$$bf....5e57b9....300ca4e2..c3"))
    {
        sOptions="2000 by Jibz";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","MoonRock");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("bc....bb....b1..d3eb81c3....b4..cd2172..b8....cd212e891e....2e8c06....b8....ba....cd21"))
    {
        sVersion="0.52.b01";
        sOptions="1994-2000 by Rowan Crowe";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","NH");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("be....bf....57b9....f3a4c3"))
    {
        bDetected=1;
        sOptions="by MANtiC0RE";
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","NetCode");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("'T_OOWW3=XXWX5 2PY5w3P_-l.P-KD1Ep-OLPZ-pJP-pw40PQX5fsPu'"))
    {
        sVersion="1.11";
        sOptions="by JauMing Tseng //Nide";
        bDetected=1;
    }
    else if(Binary.compare("':?7%00%CCPY-@=PZ5+"))
    {
        sVersion="1.40";
        sOptions="by JauMing Tseng //Nide";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","NetRun");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("'XPPPYZIQD[L-f6-g41GDSXu'17'@,~P^P_O,!(GU(GZ(Gnu5'"))
    {
        sVersion="3.10";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","NoAV");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$68....60be....66b8........668706....b9....51c1e9..41be....5156bf....e8"))
    {
        sOptions="by VAG";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Nodebug");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e8$$$$b430cd21b4..03f897d6405e50978b4d..ac32c1aae2"))
    {
        sVersion="1.0 part 1";
        sOptions="by JVP";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","ONLINE-HELP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$8cc805....2ea3....be....ac3c..74..72..3c..72..3c..77..4e33c033dbba....8a1c80eb..80fb..77"))
    {
        sOptions="1990 by Clockwork Software";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","OUTFORTH");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("90e9$$$$29c08ed8bb....8a0780c8..80e0..88078cc88ed08ec08ed8a3....ba....b4..b0..cd21ba....b4..b0..cd21be....8b26....8b2e....fce9"))
    {
        sOptions="1989 by Norman L. Hills";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Personal Batch File Compiler");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("eb$$90fcbd....8b....8b......8b......b44acd21a1....8986"))
    {
        sOptions="1993, 2003 by Kinglion Software Workroom";
        sVersion="1.6c";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","PC/FORTH");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("90e9$$$$29c08ed8bb....8a072ea2....80c8..80e0..8807a1....2ea3....a1....2ea3....a1....2ea3....a1....2ea3....8cc88ed08ec08ed8a3....8b26"))
    {
        sOptions="1983 by Laboratory Microsystems Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","PCOM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("be....b9....2e8a0434..2e880446e2"))
    {
        sVersion="2.8b2, 2.8b3 -e -i";
        sOptions="1999";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","PCRYPT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("'PCRYPT'ff'v3.51'00e9"))
    {
        sVersion="3.51";
        sOptions="1997 by MERLiN //DTG";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","PCVault-Protect");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("be....fcac3c..75..e9....ac3c..74..e9....eb"))
    {
        sOptions="1993 by E. Johnson";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","PKLITE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("B8....BA....3bc473..8bc42d....25....8bf8b9....be....fcf3a58bd8b1..d3eb8cd903d95333db53cb"))
    {
        sVersion="1.12, 1.20";
        bDetected=1;
    }
    else if(Binary.compare("B8....BA....3bc473..8bc42d....9025....8bf8b9....90be....fcf3a58bd8b1..d3eb8cd903d95333db53cb"))
    {
        sVersion="1.15";
        bDetected=1;
    }
    else if(Binary.compare("50B8....BA....3bc473..8bc42d....25....8bf8b9....be....fcf3a58bd8b1..d3eb8cd903d95333db53cb"))
    {
        sVersion="1.50";
        bDetected=1;
    }
    else if(Binary.compare("B8....BA....8cdb03d83b1e....73..83eb..fa8ed3bc....fb83eb..8ec353b9....33ff57be....fcf3a5cb"))
    {
        sVersion="1.00, 1.03";
        sOptions="exe2com";
        bDetected=1;
    }
    else if(Binary.compare("ba....a1....2d....8ccb81c3....3bc377..05....3bc377..b4..ba....cd21cd20"))
    {
        sVersion="1.00c";
        bDetected=1;
    }
    else if(Binary.compare("ba....b8....05....3b06....73..2d....fa8ed0fb2d....8ec050b9....33ff57be....fcf3a5cb"))
    {
        sVersion="1.1x";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","PKZip mini-sfx");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("b9....bf....2bcf32c0f3aab430cd21a3....8da5....8926....b8....e8"))
    {
        sVersion="2.04g";
        bDetected=1;
    }
    if(Binary.compare("b9....bf....2bcf32c0f3aa8da5....83e4..8926....b430cd21a3....8cd8"))
    {
        sVersion="2.50";
        sOptions="1999 by PKWARE Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","PRO-PACK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("83ec..8becbe....fce8....05....8bc8e8....8bd003c605....8bf8e8....ad88....32e489....8bf703c18bf83bfe76"))
    {
        sVersion="2.08-2.19";
        bDetected=1;
    }
    else if(Binary.compare("83ec..8becbe....fce8....05....8bc8e8....8bd003c605....8bf8e8....8946..895e..ad8866..32e48976..8bf703c18bf83bfe76"))
    {
        sVersion="2.08-2.19";
        sOptions="-m1, locked";
        bDetected=1;
    }
    else if(Binary.compare("be....fce8....05....8bc8e8....8bd003c605....8bf883c6..ad32e48bee8bf703c18bf83bfe76"))
    {
        sVersion="2.14";
        sOptions="-m2";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","PROTECT! COM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nLimit=Math.min(65536,Binary.getSize());
    if(Binary.findSignature(0,nLimit,"0c02e9......e421e9......88e0..........eb....e621e9......88c4........e9......e621eb")!=-1)
    {
        sVersion="5.5";
        bDetected=1;
    }
    else if(Binary.findSignature(0,nLimit,"e42150e9......e621e9......58e621e9......b0ffeb")!=-1)
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$ba....81f2"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$bb....81c3....eb"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$be....81ee....bb....d1cb8b04"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$bf....81ef....eb"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$be....81ee....bb....d1cb8b04"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$bf....81f7"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$ba....81c2....eb"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$bd....81f5....eb"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$bd....d1cd"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$bb....81f3"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$1efd2efe"))
    {
        sVersion="5.5";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e800005d81ed....33c08ed88bf0bf....b9....fcf3a5fd87fe8cc08ed833c08ec04f4f"))
    {
        sVersion="4.0";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$1eb430cd213c..73..cd20be....e8....e8....1f8cd88ec0"))
    {
        sVersion="6.0";
        bDetected=1;
    }
    else if(Binary.compare("e8$$$$501e060e550e1f33c08ec0fafc26a1....5026a1....50"))
    {
        sVersion="3.0/3.1";
        bDetected=1;
    }
    else if(Binary.compare("b8....50b8....50e9$$$$c606......eb$$8cc6060b01c3"))
    {
        sVersion="2.0";
        sOptions="1993";
        bDetected=1;
    }
    else if(Binary.compare("b8....50e9$$$$c606......eb$$8cc6060701c3eb"))
    {
        sVersion="1.0";
        sOptions="1993";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","PTP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("'PTP50'fafafcb430cd21fb585c582bc05257502ec606"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(Binary.compare("'PTP40'fafafcb430cd21fb585c582bc05257502ec606"))
    {
        sVersion="4.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("crypter","PU-Cryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$fce8$$$$068cc8a3....b0..bf....b9....263005fec047e2"))
    {
        sOptions="1994";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$fcb0..bf....b9....300547e2"))
    {
        sOptions="1992";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$fcb0..bf....b9....263005fec047e2"))
    {
        sOptions="1994";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$fcbc....e8$$$$068cc8a3....b0..bf....b9....263005fec047e2"))
    {
        sOptions="1994";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$bc....fce8$$$$068cc8a3....b0..bf....b9....263005fec047e2"))
    {
        sOptions="1994";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","PassCOM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$be....bf....b9....8ae1ac32c402e1aae2..68....c3"))
    {
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("crypter","Phrozen Crew cryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$eb$$be....8b3c83ef..578bf781c6....83c6..bf....a5a55f83ef..5733f6bd....33c9300a414f8bf175..5f83ff..74"))
    {
        sOptions="1998";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","ProtEXE (com)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$9c5053515256571e0655fabe....8a64..8b54..8bda81c3....8c4f..908b0f894c..8a4f..884c..8bfe8bca83e9..fcac"))
    {
        sVersion="3.0";
        sOptions="1996";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","R-Crypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$68....60bf....b9....b0..2e3005fec047e2..61c706........c606"))
    {
        sVersion="0.91";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$68....60bf....b9....b0..2e300547fec0e2..61c706........c606"))
    {
        sVersion="0.93";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$bf....57b9....c705....c645....8135....4747e2..33ffc3"))
    {
        sVersion="0.92";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","RCC II");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("fabc....ffe4"))
    {
        var nOffset=Binary.readWord(2)-256;
        if(Binary.compare("83c4..bc....60e8$$$$e8$$$$50b8....58eb",nOffset))
        {
            sVersion="0.51/386";
            bDetected=1;
        }
    }
    else if(Binary.compare("90bd....ffe5"))
    {
        var nOffset=Binary.readWord(2)-256;
        if(Binary.compare("faf7dc87ec83c4..81c4....f7dc83ec..87ecbc....50535251061eb9....b0..e6",nOffset))
        {
            sVersion="1.08h";
            bDetected=1;
        }
    }
    else if(Binary.compare("fcbe....bf....5657b9....f3a55e5f33db33d2"))
    {
        sVersion="1.08h";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","RDT_Compressor 2");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("fcbf....be....b5..57f3a5c3"))
    {
        sOptions="1997 by mr. Wicked";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","RDT_ENC 3");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(COM.compare("e9$$$$be....8bfe8bce33c08ed8c706........c606......26acba....52fe0e....74..e8....d0c8fec83206....c3"))
    {
        sOptions="by mr. Wicked";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","RELETTER");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$bc....bf....bb....8a0784c075..e9....438a073c..74..3c..74..89da438a073c..74"))
    {
        sVersion="1.0";
        sOptions="1993 by Hans J. Baer";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","RM/COBOL");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e8$$$$e8$$$$5a2e8c1e....b1..bb....81c3....f6c3..74..83c3..81e3....58fa8be3fb50d3eb52062e8e06....8bd3"))
    {
        sVersion="2.2";
        sOptions="1985 by Ryan-McFarland Corp.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","RSCC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("b1..32ff82c7..b2..b5..b3..81c2....d0c203d133d1f7d232d13097"))
    {
        sVersion="1.03";
        bDetected=1;
    }
    else if(Binary.compare("....82........81......32..80....2b..81"))
    {
        sVersion="1.04";
        bDetected=1;
    }
    else if(Binary.compare("....80........81......30..80....30..80"))
    {
        sVersion="1.04";
        bDetected=1;
    }
    else if(Binary.compare("32ed80c5..b2..b6..29ff81cf....32c980"))
    {
        sVersion="1.04";
        bDetected=1;
    }
    else if(Binary.compare("29ff81f7....33d281f2....31c981c9....f81015a64975..fa53f889ea8944"))
    {
        sVersion="1.04";
        bDetected=1;
    }
    else if(Binary.compare("2aed80cd..28c982c1..2ad282ca..bb....81c2....f7da03d102d128174383"))
    {
        sVersion="1.04";
        bDetected=1;
    }
    else if(Binary.compare("28ed82cd..2aff82cf..32db80f3..b1..33c081c0....05....d0c033c1f7d002c1f83187"))
    {
        sVersion="1.04";
        bDetected=1;
    }
    else if(Binary.compare("30c982f1..29d281ca....be....32ed82f5..81c2....d0c2f7da33d1"))
    {
        sVersion="1.03";
        bDetected=1;
    }
    else if(Binary.compare("32ff82c7..b3..30ed80c5..b1..f88197........4343e2"))
    {
        sVersion="1.03";
        bDetected=1;
    }
    else if(Binary.compare("f5bb....b8....bf....2e8037..81ff....4374..4875..90b5..1f9b"))
    {
        sVersion="1.20";
        bDetected=1;
    }
    else if(Binary.compare("33d281f2....2bdb81f3....b9....3197....83c3..497f..2a142cca3aca"))
    {
        sVersion="1.04";
        bDetected=1;
    }
    else if(Binary.compare("2bc981c1....29d281f2....33db81c3....81c2....291783c3..497f..ab"))
    {
        sVersion="1.03";
        bDetected=1;
    }
    else if(Binary.compare("b9....2bdb81cb....f880b7......434975..55fc532245..ef57f9"))
    {
        sVersion="1.03";
        bDetected=1;
    }
    else if(Binary.compare("bf....8bf7b9....b4..8a0532c480c4..aae2"))
    {
        sVersion="1.0x";
        sOptions="mutated COM like RSCC";
        bDetected=1;
    }
    else if(Binary.compare("b9....be....8bfeadd1c034..86c42ae003c7abe2"))
    {
        sVersion="1.0x";
        sOptions="mutated COM like RSCC";
        bDetected=1;
    }
    else if(Binary.compare("fc50be....bf....57b9....f3a4c3"))
    {
        sVersion="1.0x";
        sOptions="mutated COM like RSCC";
        bDetected=1;
    }
    else if(Binary.compare("eb$$fcbe....bf....57b9....f3a4bf....be....b9....c3"))
    {
        sVersion="1.0x";
        sOptions="mutated COM like RSCC";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","SCC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("fd53565b0fa1be....ad648b16....643106....648916....adff36....643306"))
    {
        sOptions="by The Cleric //LZ0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","SCRAM!");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("'SCRAM'b430cd213c..77..cd20bc....b9....8bfcb2..584cf6d82ac2d2c8feca32d181ff....73..eb"))
    {
        sVersion="0.8a1";
        sOptions="1997 by bushwoelie & ACP";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","SCRE2B");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("8cda0116....ff2e....00"))
    {
        sVersion="1.02";
        sOptions="by Graeme W. McRae";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","SCRNCH");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("eb$$bb....b44acd2181eb....73..ba....b9....e9"))
    {
        sVersion="1.02";
        sOptions="1988 by Graeme W. McRae";
        bDetected=1;
    }
    else if(Binary.compare("bb....b44acd2181eb....73..ba....b9....e9$$$$0e1fb440bb....cd21b8....cd21"))
    {
        sVersion="1.00";
        sOptions="1988 by Graeme W. McRae";
        bDetected=1;
    }
    else if(Binary.compare("bb....b44acd2181eb....73..ba....b9....e9$$$$b440bb....cd21b8....cd21"))
    {
        sVersion="1.01";
        sOptions="1988 by Graeme W. McRae";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("crypter","Shadow Com Cryptor (SDW)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$545b3bdc75..eb$$9c5b81cb....539d9c5825....75..e8"))
    {
        sVersion="1.7x";
        sOptions="by MANtiC0RE";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$545b3bdc75..eb$$9c5b81cb....539d9c5825....74..50584c4c5b33c3"))
    {
        sVersion="1.78";
        sOptions="by MANtiC0RE";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$ac2d....04..89c5e8....f514..f9362633f6"))
    {
        sVersion="1.79";
        sOptions="by MANtiC0RE";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e9$$$$e4..e8....e4..e9$$$$26fb78"))
    {
        sVersion="1.7";
        sOptions="by MANtiC0RE";
        bDetected=1;
    }
    else if(Binary.compare("b8....bd....2e8a76..80f6..80ee..2e8876..83c5..4874..eb"))
    {
        sVersion="1.80";
        sOptions="by MANtiC0RE";
        bDetected=1;
    }
    else if(Binary.compare("be....31d281c2....2e8034..83ee..83c2..74..31c005....50c3"))
    {
        sVersion="1.80";
        sOptions="by MANtiC0RE";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","SHOW IT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("bf....32db2e8a150ad274..b4..cd214780fa..75..fec380fb..75..32db53b4..cd16b4..cd165b75"))
    {
        sVersion="1.2";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","SHOW");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$b8....2b06....a3....e8$$$$bf....cd1125....3d....74..bf....893e....c3"))
    {
        sName+="V20";
        sOptions="1992-93 by Simple Software Co.";
        bDetected=1;
    }
    if(Binary.compare("e9$$$$b8....2b06....a3....e8$$$$50a0....a2....58c3"))
    {
        sOptions="1992-93 by Simple Software Co.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","SHRINK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("509cfcbe....bf....57b9....f3a48b0e....be....bf....f3a4c3"))
    {
        sVersion="1.0";
        sOptions="by Thomas G. Hanlin";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","SP-FORTH");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("8b26....8bec83ed..e9$$$$e8$$$$83ed..8976..5eadffe0"))
    {
        sVersion="1.01";
        sOptions="1992 by Stroyprogress Ltd.";
        bDetected=1;
    }
    else if(Binary.compare("8b26....8bec83ed..e9$$$$e8$$$$87ec5687ec5eadffe0"))
    {
        sVersion="1.5";
        sOptions="1993";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","SPHINX C--");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("58bc....50b44abb....cd2173..b409ba....cd21c38cc88ec0bf....be....31d2bb....ac3c..74"))
    {
        sVersion="1993";
        bDetected=1;
    }
    else if(Binary.compare("58bc....50b44abb....cd2173..c3"))
    {
        sVersion="0.203 (1994)";
        bDetected=1;
    }
    else if(Binary.compare("58bc....50b44abb....cd2173..b409ba....cd21c3"))
    {
        bDetected=1;
    }
    else if(Binary.compare("eb$$31c08ec026c706........268c0e....e9$$$$c8......b8....e8"))
    {
        bDetected=1;
    }
    else if(Binary.compare("e9....'SPHINXC--'"))
    {
        bDetected=1;
    }
    else if(Binary.compare("0e07bf....be....31d2bb....ac3c..74..3c..74..3c..74..aaac"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","Scramb");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e8$$$$5b0e1f81eb....8bc305....508bc803d12bfac3"))
    {
        sVersion="1.20";
        sOptions="by B.U.G.";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e8....5b0e1f81eb....8bc305....508bc803d12bfac3"))
    {
        sVersion="1.20";
        sOptions="by B.U.G.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Scrypt!");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e8$$$$e800005a5f578bf78bce33dbb7..acfec0f6d032c7aa86fb43c1c3..331e....331e....331e....331e"))
    {
        sVersion="0.4";
        sOptions="by DarkGrey //DTG";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e8$$$$5d81ed....b9....be....03f58bfeb4..ac32c4f6d4aae2"))
    {
        sVersion="0.4";
        sOptions="1998 by DarkGrey //DTG";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","SCRYPT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e800005d8d5e..eb$$53eb$$66bd........e9$$$$b8....eb$$cc"))
    {
        sVersion="1.0";
        sOptions="1998 by hijaq //BAC";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","SelfCrypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("8cc88ed833ffbe....bb....8a048a1132c288043c..74..4683ff..7d..47eb"))
    {
        sOptions="1999 by MCS";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","SelfProtect386");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("'=SYRIUS=DIRE=SERVICE='071a"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("crypter","Shadow COM encryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$b9....bb....be....bf....ad33c3ab86dff7d3e2..68"))
    {
        sVersion="1.0";
        sOptions="by Tailgunner";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Shadow");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$b9....bb....be....bf....ad33c3ab86dff7d3e2..68....c3"))
    {
        sVersion="1.0 beta";
        sOptions="by Tailgunner";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","Six-2-Four");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("'[ESP]'b5..8bf98be9be....57f3a4c3"))
    {
        sVersion="1.1";
        sOptions="Boogie //ESP";
        bDetected=1;
    }
    else if(Binary.compare("'PULP'83c4..fcbf....be....b5..57f3a5c3"))
    {
        sVersion="1.0";
        sOptions="Kimmy //Pulp";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","SnoopStop");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("90e9$$$$eb$$55e80000598be981ed....66608d9e....8d8e....2bcb2e8a0734..34..34..fec0f6d0"))
    {
        sVersion="1.15";
        sOptions="1998 by Trills and Technologies";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Softguard");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$8cc88ed88c06....8cc73bc774..8bfc368b052ea3....368b45..2ea3....a1....a3....a1....a3....a1....b1"))
    {
        sOptions="1984-86";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Steplock");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$0e1fb9....030e....be....d204282c46e2"))
    {
        sVersion="1.00A";
        sOptions="by Morten Pedersens";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Surpas-86 (Pascal compiler)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e9$$$$b8....05....25....b1..d3e88cca03d08eda2ea1....2bc2a3....33db2d....73..8b1e....b1..d3e333c0"))
    {
        sVersion="1.0";
        sOptions="1987 by Tixaku Pty Ltd";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("crypter","Sydex cryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("eb$$ba....b8....bb....33ed8bf8434f505952494748542053..4445582c..414c4c"))
    {
        sOptions="1987 by Sydex and C.P.Guzis";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","TCEC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("1aff5fb9....f326ace3..eb"))
    {
        sVersion="3.60";
        sOptions="by ThE CLERiC! //LZ0, EVD";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Forth Target COMpiler");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("8cc805....8ed88ed0b8....8be0a3....b8....8bf0a3....c704....2d....a3....bb....8bebe8"))
    {
        sOptions="by Tom Zimmer";
        bDetected=1;
    }
    else if(Binary.compare("8cc805....8ed88ed08ec08b1e....81c3....8bf3891e....83c3..891e....c707....81c3....8be3891e....83c3..891e....c706"))
    {
        sOptions="by Tom Zimmer";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","TPACK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("03'TUSCON'030d0a005868....60e9"))
    {
        sVersion="0.5c";
        sOptions="1996 by Max //TUSCON";
        bDetected=1;
    }
    else if(Binary.compare("68....fd60be....bf....b9....f3a48bf7bf....fc46e9"))
    {
        sVersion="0.55c";
        sOptions="1996 by Max //TUSCON";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","TPC Scramble");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$b0..bb....5351b9....2e3007fec043e2..bb....c707....c647....33c033db59c3"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","TXT2COM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e8$$$$c706........803e......75..8d36....e8....e8....e8....e8....e8....ffa7"))
    {
        sVersion="1.1";
        sOptions="1987 by Keith P. Graham";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$c706........803e......75..8d36....e8....e8....e8....e8....e8....ffa7"))
    {
        sVersion="1.1";
        sOptions="1987 by Keith P. Graham";
        bDetected=1;
    }
    else if(Binary.compare("8d26....e8$$$$b4..cd103c..74..c706........c706........3c..74..3c..74..8d16....b409cd21cd20c706"))
    {
        sVersion="2.06";
        sOptions="1989 by Keith P. Graham";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","TXTmaker");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("eb$$b4..33dbcd1080fc..74..b0..eb$$b44ccd21"))
    {
        sVersion="1.22";
        sOptions="1991 by Jack A. Orman";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("other","Text Header");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$b9....be....bf....f3a468....c3"))
    {
        sVersion="1.0";
        sOptions="from EXE2COM 9.50 by B. Vorontsov";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","The DRAW");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("eb$$b40fcd10bb....3c..74..3c..74..c606......bb....3c..74..ba....b409cd21c3"))
    {
        sVersion="4.6";
        bDetected=1;
    }
    else if(Binary.compare("eb$$b40fcd108ccb8edbbb....b4..3c..74..3c..73..bb....8a26....3c..73..8d16"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Tiny Xor [tDCE]");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$fcb8....bb....b9....be....300402c386c486df46e2..be....c704....c644....33c033db33c9ffe6"))
    {
        sVersion="0.52b";
        sOptions="by ThE DOCTOr //DiPG";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Turbo C++");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("8cca2e8916....b430cd218b2e....8b1e....8edaa3....8c06....891e....892e....e8....c43e....8bc78bd8b9....fcf2ae"))
    {
        sVersion="1990";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Turbo C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("8cca2e8916....8b2e....8b1e....8eda8c06....892e....e8....8cda2bea8b3e....81ff....73..bf....893e"))
    {
        sVersion="1988";
        bDetected=1;
    }
    else if(Binary.compare("8cca2e8916....b430cd218b2e....8b1e....8edaa3....8c06....891e....892e....c706"))
    {
        sVersion=Binary.compare("8e",42)?"1987":"1988";
        bDetected=1;
    }
    else if(Binary.compare("8cca2e8916....b430cd218b2e....8b1e....8edaa3....8c06....891e....892e....8cda"))
    {
        sOptions="1990";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$8cca2e8916....b430cd218b2e....8b1e....8edaa3....8c06....891e....892e....e8....c43e"))
    {
        sVersion="1990";
        bDetected=1;
    }
    else if(Binary.compare("fb8cca2e8916....b430cd218b2e....8b1e....8edaa3....8c06....891e....892e....c706........e8"))
    {
        sVersion="1987";
        bDetected=1;
    }
    else if(Binary.compare("8cca2e8916....e8....8cda2bea8b3e....81c7....72..b1..d3ef473bef72..833e......75..bf....3bef"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Turbo Pascal");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e8$$$$e8$$$$b430e8$$$$80fc..74..80fc..74..80fc..74..80fc..74..55"))
    {
        sVersion="3.0";
        sOptions="1985";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e8$$$$..8cc82e03....2e03....2e03....2e3b06....76"))
    {
        sVersion="3.0";
        sOptions="1985";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$eb$$e8....b8....b1..d3e88cca03d08eda2ea1....2bc2a3"))
    {
        sVersion="3.0";
        sOptions="1985";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e9$$$$b8....b1..d3e88cca03d08eda2ea1....2bc2a3"))
    {
        sVersion="3.0";
        sOptions="1985";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$c706............................8b0c39c174..4e4ef3a5"))
    {
        sVersion="3.0";
        sOptions="1985";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","TurboBAT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("ba....b4..909006b8....8ec0b9....268a26....80e4..26a0....24..3ac4909026a0....24..3ac475..e2..07e9"))
    {
        sVersion="3.10";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$fcbd....8b6e..8b66..8b5e..b4..cd21a1....8946..b8....50c646....8b5e..ffe3"))
    {
        bDetected=1;
    }
    else if(Binary.compare("9090909090909006b8....8ec0b9....268a26....80e4..26a0....24..3ac474..26a0....24"))
    {
        sOptions="unregistered";
        bDetected=1;
    }
    else if(Binary.compare("ba....b4..cd2106b8....8ec0b9....268a26....80e4..26a0....24..3ac474..26a0....24"))
    {
        sVersion="3.16-9u";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","Txt2Exe");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("bf....033e....b9....2b0e....d1e9b8....f3abb4..cd1030e4a3....b8....cd10b8....8a1e....cd10"))
    {
        sVersion="3.1b";
        sOptions="2001 by BlackLight";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","UNIFORTH");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("90e9$$$$8cc88ed88ed08ec0fc8b26....8b2e....8b3e....893e....ba....b8....cd21ba....b8....cd218b1e....8d4f..894d..8b0e....8bc1"))
    {
        sOptions="1985 by Unified Software Systems";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","UPX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("b9....be....bf....fdf3a4fcf7e19387f783ee..19ed57"))
    {
        sVersion="0.50";
        sOptions="dos/com";
        bDetected=1;
    }
    else if(Binary.compare("81fc....77..cd20b9....be....bf....bb....fdf3a4fc87f783ee"))
    {
        sVersion="0.81-1.20";
        sOptions="dos/com";
        bDetected=1;
    }
    else if(Binary.compare("b9....be....bf....bd....fdf3a4fcf7e19387f783c6..57e9"))
    {
        sVersion="0.30-0.40";
        sOptions="dos/com";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("crypter","Shitty COM Cryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$60bb....b9....300f43e2"))
    {
        sVersion="1.4";
        sOptions="by UniquE";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","UnPackStop");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("68....c3"))
    {
        var nOffset=Binary.readWord(1)-256;
        if(Binary.compare("8bc450be....bf....eb$$b8....501f58eb",nOffset))
        {
            sVersion="0.95";
            sOptions="by Szaszi (Szabo Laszlo)";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","UniCrypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("8cc805....50b8....50cb"))
    {
        sVersion="1.01";
        sOptions="1998 by V.Slinchuk";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("crypter","Unknown cryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("fa8cde8ccf8edf8ec783c7..bb....8b1f83c3..b1..d3eb2bfbe8"))
    {
        sVersion="#01";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$b9....b3..be....bf....acfec332c3aae2"))
    {
        sVersion="#02";
        sOptions="exe 0-relocs crypt";
        bDetected=1;
    }
    else if(Binary.compare("'GENERATED'00'FILE'bc....bf....8bf7b9....b3..ac34..d2c02ac3d2c832c3fec3aae2"))
    {
        sVersion="#03";
        sOptions="GENERATED FILE";
        bDetected=1;
    }
    else if(Binary.compare("3ec606......90eb$$2e8a36....8ec08cd8be....bf....2e033e....26a3....26893e....26a3....26c706........0e07"))
    {
        sVersion="#04";
        bDetected=1;
    }
    else if(Binary.compare("e8$$$$fc8bec8b4e..2bc08bf9f2aebb....03d9875e..fec58bf1ac8ad0ad8bc88bfeac32c2aae2"))
    {
        sVersion="#05";
        bDetected=1;
    }
    else if(Binary.compare("fc525756ba....b9....be....bf....52f3a52ec606......c3"))
    {
        sVersion="#06";
        bDetected=1;
    }
    else if(Binary.compare("b4..be....bf....b9....68....68....68....57f3a4c3"))
    {
        sVersion="#07";
        bDetected=1;
    }
    else if(Binary.compare("b8....05....50c3"))
    {
        var nOffset=Binary.readWord(1)+Binary.readWord(4)-256;
        if(Binary.compare("90902ea1....8bc85005....9083e9..bf....2e8035..47495083f9..74..c3",nOffset))
        {
            sVersion="#08";
            sOptions="xorer";
            bDetected=1;
        }
    }
    else if(Binary.compare("e9$$$$fd1e2efe0e....81ce....39f63bf6b1..0e0e071f1e1fb9....bd....80c1..20c9bf....d1c7124e..80d1..124d..b1"))
    {
        sVersion="#09";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$fd1e2a0980e9..80dd..0e80c6..32f780d2..0e10c5071f28cd26fe06....be....d1c6323780e2..02ae....2288"))
    {
        sVersion="#10";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e8$$$$5e83ee..2e8984....06562e8c9c....0e070e1fb430cd213c..7d..bb....03dee8....b0..b44ccd21"))
    {
        sVersion="#11";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$3bfd81e7....fc81ef....33fc1e842b0e23fb13fc85c733ff1f0e31c70723fe26fe0e....81ef....bf....31ff"))
    {
        sVersion="#12";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$1efc0e1f81df....2bfb0e81df....19d781df....89e72af4b2..072efe06....0681f7....23ff2274..02b0"))
    {
        sVersion="#13";
        bDetected=1;
    }
    else if(Binary.compare("e8$$$$eb$$8cca8eda8ec2be....bf....b9....2ec706........31c0ada3....3136....8bc18bdef7e33106....3116....a1....abe2"))
    {
        sVersion="#14";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$b9....be....bf....bb....5357ad3d....74..c1c8..bb....03d933c3abe2"))
    {
        sVersion="#15";
        sOptions="xorer";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("other","VGA font loader");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$b8....8ed8fafcbf....8b36....8e1e....b9....f3a5b8....8ed8c706........8c0e....8cc88ed8"))
    {
        sOptions="by Pete I. Kvitek";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","VSF&K protection");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$eb$$8cdb8cca8edafa8becbe....bc....bf....313c312446474c75"))
    {
        sOptions="1992";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("immunizer","Viren Schutz Schild");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e8$$$$5b81eb....1e065051525354555657061e8bebb430cd2186e03d....73..e9"))
    {
        sVersion="1993 by Ralph Roth";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","Vacsina EXE2COM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$e8....5b508cc005....8b0e....894f..8b0e....03c8894f..8b0e....894f..8b0e....03c8894f..8b3e....8b16"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Venus crypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("b9....fa8bdc8cd2bc....03e1d1e94c4c5886e9d3c033c186e9f7d050e2"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Vienna-C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("90e9$$$$8cc88ed8e8....803e......75..8a3e....883e....8b1e....891e....a3....8ec00306....8ed0a3....8b26....8b2e....be....c706"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Watcom C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$fb8cc98ec126bb....83c3..80e3..26891e....268c1e....26a1....3d....73..b8....01c383c3..80e3..8ed189dc26891e....89dad1"))
    {
        sName+="/C++16";
        sVersion="1994";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$fb8cc98ec1bb....83c3..80e3..26891e....268c1e....26a1....3d....73..b8....03d883c3..80e3..8ed18be326891e....8bd3d1ea"))
    {
        sName+="/C++16";
        sVersion="1993";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$fb8cc9bb....8ec1268c1e....26a1....3d....73..b8....03d88ed18be326891e....83c3"))
    {
        sName+="/C++16";
        sVersion="1988";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$fb8cc98ec1bb....83c3..83e3..26891e....268c1e....26a1....3d....73..b8....03d88ed18be326891e....83c3..83e3..8bd3d1ea"))
    {
        sVersion="1991";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$0e0e1f07b4..ba....cd21ba....cd21e8....803e......74..b4..ba....cd21e9"))
    {
        sName+="/C++32";
        sVersion="1995";
        bDetected=1;
    }
    else if(Binary.compare("eb$$fb8cc98ec1bb....83c3..80e3..26891e....268c1e....26a1....3d....73..b8........83c3..80e3..8ed1"))
    {
        sName="Open Watcom C/C++16";
        sVersion="2002 by Sybase, Inc.";
        bDetected=1;
    }
    else if(Binary.compare("eb$$fb8cc98ec126bb....83c3..80e3..26891e....268c1e....26a1....3d....73..b8........83c3..80e3..8ed1"))
    {
        sName="Open Watcom C/C++16";
        sVersion="2002 by Sybase, Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("crypter","WiZ Cryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$fa60561e8ed8be....bf....b8....8706....ab8cc88706....ab1f68....9c5880cc..509dfc"))
    {
        sVersion="1.00a";
        sOptions="by SP0T //UCL";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","XCK2COM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$be....e8....ad89c15156e8....be....e8"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","XE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("be....56bf....b9....fc56f3a55fe9"))
    {
        sVersion="1.42";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","XORCOPY");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$b8....bb....ba....3107434039d375..c606......c606......c606......31c031db31d2e9"))
    {
        sVersion="1.0";
        sOptions="1995 by DeiMoS";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","XPACK/LZCOM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$fa8bece8....06bf....57e8....06b8....50be....bf....cb"))
    {
        sVersion="1.67";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$fa8bece8....fb06bf....57e8....06b8....50be....bf....cb"))
    {
        sVersion="1.67.1";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$8cc805....8ec0bf....8bf7fcb9....f3a506b8....50cb"))
    {
        sVersion="1.65";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$8cc8a3....05....8ec0bf....8bf7fcb9....f3a506b8....50cb"))
    {
        sVersion="1.4";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","XcomOR by madmax");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("'MMX'e8$$$$83c5..8306......b8....5050ffe0"))
    {
        sVersion="0.xx";
        bDetected=1;
    }
    else if(Binary.compare("'MMX'668136............eb$$668136............eb"))
    {
        sVersion="0.99i, 0.99h";
        bDetected=1;
    }
    else if(Binary.compare("'MMX'b409ba....cd21e8$$$$1e6a..1f8136........8136........8b1e....a1....501f813f....75"))
    {
        bDetected=1;
    }
    else if(Binary.compare("'MMX'b8....ba....87ecbc....eb$$50b409cd2187e533edeb$$4f030de8"))
    {
        sName="XcomOR/486 by madmax";
        bDetected=1;
    }
    else if(Binary.compare("e8$$$$8006......b4..5050c3bf....57bb....8b4d..81"))
    {
        sVersion="0.99a";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","XoReR");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$ba....b9....51b0..e660fab430cd213c..73..33c00650cbbf....8b36....59e2"))
    {
        sVersion="2.l";
        sOptions="by dR.No //ViP";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$be....8bfeb9....33db80c3..ac32c3aae2"))
    {
        sVersion="1.0";
        sOptions="by dR.No //ViP";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$b8....e721b8....cd21b430cd218b2e....8b1e....bf....b9....b430cd2132..73..be....bf....b9....fcac300547e2"))
    {
        sVersion="1.0 [2nd pass]";
        sOptions="by dR.No //ViP";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$ba....b9....51b8....e721b430cd213c..73..33c00650cb"))
    {
        sVersion="2.0";
        sOptions="1998 by dR.No //ViP";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","XorCom");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$fcbe....bf....57b9....ac34..aae2..c3"))
    {
        sVersion="1.0";
        sOptions="by tFF";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Zbikowski C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("8975..8a0430e48946..408bf88a85....30e425....74..8b46..2d....eb..8b76..8a0430e42d....8346"))
    {
        sOptions="1983 by Mark Zbikowski (Microsoft Corp.)";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Zortech C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("eb$$fab8....05....b9....d3e88cc903c18ed88c06....268b1e....891e....8bd82b1e....891e....268b1e....2bd881fb....72"))
    {
        sVersion="2.10";
        sOptions="1990 by Walter Bright";
        bDetected=1;
    }
    else if(Binary.compare("eb$$fcbe....b9....8b3e....5703f981c7....57f3a45f81c7....ffe7"))
    {
        sVersion="2.00";
        sOptions="1990 by Walter Bright";
        bDetected=1;
    }
    else if(Binary.compare("eb$$8cc883c0..50b8....50cbfc8e06....b0..b9....33fff2aeae75..4747be....e8"))
    {
        sVersion="2.00";
        sOptions="1990 by Walter Bright";
        bDetected=1;
    }
    else if(Binary.compare("eb$$fab8....05....b9....d3e88cc903c1dbe38ed88c06....8bd82b1e....891e....268b1e....2bd8"))
    {
        sVersion="4.00";
        sOptions="by Walter Bright";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
includeScript("languages");

function detect(bShowType,bShowVersion,bShowOptions)
{
    handleLanguage();

    return "";
}		
var File=COM;

includeScript("result-general");
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","aPACK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("be....bf....8bcffc57f3a4c3"))
    {
        sVersion="0.98-0.99 small";
        bDetected=1;
    }
    else if(Binary.compare("8cc880c4..8ec0fcb9....be....8bfe57f3a55fbe....0668....1e078ed8cb"))
    {
        sVersion="0.82b-0.94b";
        bDetected=1;
    }
    else if(Binary.compare("8cc805....8ec0598ed051be....bf....5057fcb2..bd....50a4ffd5"))
    {
        sVersion="0.61";
        bDetected=1;
    }
    else if(Binary.compare("8cc880c4..8ec0fcb9....be....8bfe57f3a55fbe....06ba....521e078ed8cb"))
    {
        sVersion="0.82-0.94";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","aPatch");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e8$$$$fde8$$$$ffc75e83ee..e8$$$$5d8176......c646....eb"))
    {
        sVersion="0.05-0.33";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","acBBS protection p1");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$bf....b9....870581f0....86e0faeb$$e8$$$$501e33c08ed8eb$$8706....eb$$8706....8706....1f58c3"))
    {
        sOptions="1994 by p.q.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","com RLE packer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("60be....bf....8b0e....f3a4be....bf....57b9....f3a4c3"))
    {
        sOptions="by NOP/PC";
        bDetected=1;
    }
    else if(Binary.compare("fc8cc833ff05....8ec006be....b9....57f3a40e07cb"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","com-crypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("b8....ffe0"))
    {
        sOffset=Binary.readWord(1);
        if(Binary.compare("5756bf....b8....abb8....abb0..aa89feb9....31dbad01c329cb89d8abe2", sOffset-0x100))
        {
            sOptions="by BlackLight, MANtiCORE";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("crypter","Cryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$60c704....c644....b9....bf....ac32018bd64a"))
    {
        sVersion="0.04";
        sOptions="by SkullC0DEr";
        bDetected=1;
    }
    else if(Binary.compare("e800005dbf....e8$$$$fa065733ff57078d76..b9....8004..46e2"))
    {
        sOptions="by Synopsis";
        bDetected=1;
    }
    else if(Binary.compare("eb$$fdbf....ba....33c01e8ed8a3....1fb1..525e3bfa74..ac3205aae2..eb"))
    {
        sOptions="by Min-Jei-Chen";
        bDetected=1;
    }
    else if(Binary.compare("e8$$$$eb$$8cca8eda8ec2be....bf....b9....eb$$ad2ea3....2e3136....8bc18bdef7e3eb$$2e3106....2e3116....2ea1....abe2"))
    {
        sOptions="by PHOENiX";
        bDetected=1;
    }
    else if(Binary.compare("5053515756b8....508bf0b9....b0..8bfe0004f71404..46e2"))
    {
        sOptions="by FalCoN'AleX";
        bDetected=1;
    }
    else if(Binary.compare("40429c58f6c4..74..eb....b4..be....bf....b9....68....68....68....57f3a4c3"))
    {
        sOptions="by Terrible BloodSucker //FDs Group";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e80000fa9cfc505393584c4c3bc35b74..9de8....32e480c4..3065..47e2"))
    {
        sName+=' N1';
        sOptions="by ZeroCoder //XG";
        bDetected=1;
    }
    else if(Binary.compare("be....b9....ac03d8e2..81fb....74..cd19be....8bfeb9....8a26....ac32c1aae2"))
    {
        sOptions="by Kai";
        bDetected=1;
    }
    else if(Binary.compare("eb$$c606......f873..e9$$$$be....bf....0633c08ec0bb....fa268b07268917a3"))
    {
        sName+=' N2';
        sOptions="by ZeroCoder //XG";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e800002e9c589e72..fa9cfc505393584c4c3bc35b74..9de8....32e480c4"))
    {
        sOptions="by Digital Information Pirates Group (DiPG)";
        bDetected=1;
    }
    else if(Binary.compare("'PHROZEN'fa'CREW'0d....fbfdbe....ac300481fe....77..94"))
    {
        sOptions="by Phrozen Crew";
        bDetected=1;
    }
    else if(Binary.compare("0e1fb9....be....80....301c46e2..eb"))
    {
        sOptions="by Dwolf //ROK";
        bDetected=1;
    }
    else if(Binary.compare("2e8006......eb00c3"))
    {
        sName+=" #1";
        sOptions="by Misha";
        bDetected=1;
    }
    else if(Binary.compare("2e8036....28eb00c3"))
    {
        sName+=" #2";
        sOptions="by Misha";
        bDetected=1;
    }
    else if(Binary.compare("be....e8$$$$5d8bce8d72..bf....fd5747acaa86c4ac32c4aae2..8d75..fcf98d7e..c3"))
    {
        sOptions="by TGT";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$33dbb9....d1e941b8....8b97....33c28987....924343e2..68....c3"))
    {
        sOptions="by hijaq";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$0e179c58f6c4..75..b9....b8....2bc8bf....be....8a0551b9....8ae0862432c44ee2..88054759e2..e9"))
    {
        sOptions="1996 by WildRover";
        bDetected=1;
    }
    else if(Binary.compare("668d3e....66b9........678137....6683c7..e2..e9"))
    {
        sOptions="by PCY group";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$66b8........66a3....be....8bfeb9....fcad35....f7d0abe2..68....c3"))
    {
        sOptions="by Evil Genius //rPG";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$9cfafc1e06bb....b44acd21b448bb....cd218ec0be....b9....51bf....57f3a5061fb9....5e8bfe"))
    {
        sOptions="by AliS S0fT //VCrT";
        bDetected=1;
    }
    else if(Binary.compare("e8$$$$ba....b8....cd218bd8b8....33c933d2cd2191b4..cd218bdc8b072d....89078bf05603f183ee..8904"))
    {
        sVersion="#1";
        sOptions="by RAZOR 1911";
        bDetected=1;
    }
    else if(Binary.compare("eb$$e8$$$$eb$$e4210c..e62133c08ed80e50558becc746......5dfa8f06....8f06....fb9c580d....509d"))
    {
        sVersion="#2";
        sOptions="by RAZOR 1911";
        bDetected=1;
    }
    else if(Binary.compare("'SNOWPANTHER'e9$$$$................8db7....bf....b9....f3a58db7....538ccf83c7..ad09c074..91ad"))
    {
        sName+=" #1";
        sOptions="by Snow Panther //DTG";
        bDetected=1;
    }
    else if(Binary.compare("fcbe....bf....b9....90ba....c606......90ac0fb61e....03da8a2732c4aafe06....803e......75..c606"))
    {
        sOptions="by pASkuda";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$50538bdc8cd0bc....8ed49090909090909090909090909090909033e48ed4bc....909090909090909090909090909090908ed08be35b58c606"))
    {
        sOptions="by Crack Soft";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$16179c58f6c4..74..faeb..e8$$$$58"))
    {
        sVersion="1.0";
        sOptions="1999 by Alex";
        bDetected=1;
    }
    else if(Binary.compare("e8$$$$33ed83ed..2ed0....5e0e8bfe81e7....f7df03fe2e893526a1....8ec0263b06....74..f92eff35"))
    {
        sOptions="by DREAMMASTER";
        bDetected=1;
    }
    else if(Binary.compare("b8....ffe0"))
    {
        var nOffset=Binary.readWord(1)-256;
        if(Binary.compare("be....8be88bd88bf883c5..908bd04a5287d687fe5981e9....52",nOffset))
        {
            sOptions="by BlackLight, MANtiCORE";
            bDetected=1;
        }
    }
    else if(Binary.compare("'FALCON//TULACREW'0d....e9$$$$be....b9....33c0f7d03004eb..04..32e046e2"))
    {
        sOptions="by FALCON //UCL";
        bDetected=1;
    }
    else if(Binary.compare("bb....b9....be....301c02df86df46e2"))
    {
        sName+=" #1";
        sOptions="by dR.No";
        bDetected=1;
    }
    else if(Binary.compare("be....b9....b8....bb....33c34086c44b86fb93300446e2"))
    {
        sName+=" #2";
        sOptions="by dR.No";
        bDetected=1;
    }
    else if(Binary.compare("a3....eb$$5351525756b9....fa8bdc8cd2bc....03e1d1e94c4c5886e9d3c033c186e9f7d050e2"))
    {
        sOptions="by venus soft.";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$3aac....3a29fc1aa8....80cd..1e0e0e1f0726fe06....ba....be....81f6....80f9"))
    {
        sName+=" #1";
        sOptions="by LiGHt DRUiD //SOS";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$fd1e0e81de....89f63bf23aaf....03f423f61bf40a2d80f9..18dd0e071f03f433f081e6"))
    {
        sName+=" #2";
        sOptions="by LiGHt DRUiD //SOS";
        bDetected=1;
    }
    else if(Binary.compare("fcbe....8bfeac3206....8006......84c0aa75..be....e8"))
    {
        sOptions="by Sludge Vohaul //DAT";
        bDetected=1;
    }
    else if(Binary.compare("'[HPA]'b5..8bf98be9be....57f3a4c3"))
    {
        sOptions="by Hungarian Pirates Alliance [HPA]";
        bDetected=1;
    }
    else if(Binary.compare("bc....bb....b4..cd21bb....b9....8037..43e2..b409ba....cd21b8....cd21891e"))
    {
        sOptions="by .EXEcutor //SOS";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e800005b8bcc8cd2fa33c08ec08ed0bc....588947..90588947..900e8bc305....508ed28be1fb"))
    {
        sOptions="1998 by Demon Magister Protection";
        bDetected=1;
    }
    else if(Binary.compare("eb$$2ea3....8cc82e0306....502eff36....cb"))
    {
        sOptions="1991 by YMI";
        bDetected=1;
    }
    else if(Binary.compare("53515256570633c08ec0fa26a1....268b16....fb075052b8....06508cca33c08ec058fa26a3....268916....fb07"))
    {
        sOptions="1991 by Elisoft";
        bDetected=1;
    }
    else if(Binary.compare("b8....5650c3"))
    {
        var nOffset=Binary.readWord(1)-256;
        if(Binary.compare("bf....8bdeb9....8b0533c689074747434346e2..c3",nOffset))
        {
            sOptions="by PC0R$AiR //UCL";
            bDetected=1;
        }
    }
    else if(Binary.compare("908cc8515a54e9$$$$36c0e0..eb$$eb$$6a..e8$$$$58eb$$e8$$$$58eb$$e8$$$$eb$$2eeb$$eb$$665eeb$$eb$$7c"))
    {
        sName="Rowdy's Strong Protection {MtE}";
        sOptions="by Rowdy";
        bDetected=1;
    }
    else if(Binary.compare("0f011e....fbe9$$$$e90000c0c3..f8eb$$6a..c0e9..e800000f23dae8000059665e36e8"))
    {
        sName="Rowdy's Strong Protection {MtE}";
        sOptions="by Rowdy";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$5060bf....c706........c605..e8....5e5681c6....b9....5756ffe7"))
    {
        sOptions="1998 by StrangeLion";
        bDetected=1;
    }
    else if(Binary.compare("e8$$$$5f87f757b9....ac34..aae2..c3"))
    {
        sName="Wumpus soft lab cryptor";
        bDetected=1;
    }
    else if(Binary.compare("e8$$$$5eb9....ac32c12e8844..e2..e9"))
    {
        sOptions="by MXL //RIP";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$8d36....fd8d0e....81e9....d1e9add1c835....8944..e2..ff26"))
    {
        sOptions="1989 by Sydex";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$bb....b4..b0..8b0e....8a1728c230e28857..43fec0e2"))
    {
        sOptions="1999 by SLine";
        bDetected=1;
    }
    else if(Binary.compare("'(C)1997'00'by'00'PSH'0d0a..005b..3139287a..2850..81c6....33db8bfeb9....ad35"))
    {
        sOptions="1997 by PSH";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$bf....be....b9....b0..2e8a1c32c132d82e881d4647e2..e9"))
    {
        sName="SAGE-crypt";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$fcb0..bf....b9....263005fec047e2..b9....be....e8"))
    {
        sName="PU-Disk encryption";
        sOptions="1992";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$bb....8a073c..74..e8$$$$50515234..3c..74..b4..8ad0cd21e9"))
    {
        sOptions="1999 by Leon";
        bDetected=1;
    }
    else if(Binary.compare("fa'SNOW'fa'PANTHER'fabc....bf....8bf7b9....b3..ac34..d2c02ac3d2c832c3fec3aae2"))
    {
        sName+=" #2";
        sOptions="by Snow Panther //DTG";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$c704....c644....b9....5683c6..8bfeb2..b6..ac32c202d6aae2..c3"))
    {
        sOptions="1997 by Ment0R //UCL";
        bDetected=1;
    }
    else if(Binary.compare("eb$$bb....8b0f03d981c3....8be38cc88ed88ec08ed0b8....ba....cd21b3..ccb3..cc"))
    {
        sOptions="1993 by The Shadow Lord";
        bDetected=1;
    }
    else if(Binary.compare("eb$$bb....001f4beb$$001f4beb"))
    {
        sName="Crypt.Trivial.173";
        sOptions="1998 by SMT";
        bDetected=1;
    }
    else if(Binary.compare("'SFINKS_SOFT___'fafcb430cd21fb33c0502ec606......0783e9..3be175..26c706........b9"))
    {
        sOptions="by SFINKS SOFT";
        bDetected=1;
    }
    else if(Binary.compare("e8$$$$1e33c08ed8f716....eb$$f716....1f5ebf....57b9....ac34..aae2"))
    {
        sOptions="by R!SC";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$6033edbe....b4..bd....bf....ac32c4aa80c4..fec43bf575..33c0b9....f3ab61bf....ffe7"))
    {
        sOptions="by DarkGrey //DSA";
        bDetected=1;
    }
    else if(Binary.compare("'(C)1997'00'by'00'PSH'............................bc....6081c6....33db8bfeb9....ad35....c1c0..03d8abe2"))
    {
        sOptions="1997 by PSH";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","envelope");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("60ba....3bd472$$be....8bfeb9....bb....fcad33c343abe2"))
    {
        sOptions="by ROWDY, St.Petersburg";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","fds-cp");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("8cca2e8916....b4..8b2e....8b1e....8edaa3....8c06....891e....892e....eb"))
    {
        sVersion="0.04a";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("other","integrity checker");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$505351521ea1....8ed829db43833f..75..434389dab8....cd211fb9....ba....72..89c3b4..cd21"))
    {
        sOptions="1990-92 by D.A. Martynoff";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","mCrypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$1e06be....bf....b9....0e1f0e07e8$$$$33c0fa5083c4..83ec..58fb0bc075..c3"))
    {
        sVersion="0.1a";
        sOptions="1998 by //UFO CREW";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","muSIMP-83");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e9$$$$8cc88ed88ed0bc....a3....ba....e8....c606......e8....803e......75..0e17bc....e8....e8....eb"))
    {
        sVersion="4.12";
        sOptions="1985 by The SOFT WAREHOUSE";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","Packer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("bf....be....b9....fdf3a5fceb$$8bf7bf....adad8be8b2..e9"))
    {
        sOptions="by B. Vorontsov";
        bDetected=1;
    }
    else if(Binary.compare("565056fd8bfc83ef..b9....be....f3a447ffe7"))
    {
        sOptions="1997 by CyberWare";
        bDetected=1;
    }
    else if(Binary.compare("be....bd....558bce8d72..bf....d1e9fd57f3a58d75..fcf9bf....c3"))
    {
        sOptions="1997 by JES //CORE";
        bDetected=1;
    }
    else if(Binary.compare("be....bd....558bce8d72..bf....d1e9fd57f3a58d75..fcf98bfdc3"))
    {
        sVersion="1.2b";
        sOptions="1997 by JES //CORE";
        bDetected=1;
    }
    else if(Binary.compare("508cc890ba....05....3b06....72..b4..ba....cd21b8....cd21"))
    {
        sOptions="1996 by LostSoul";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("patcher","Patcher");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("bc....8cc88ec08ed8fcbe....b9....8ae180e4..ac32c48844..e2"))
    {
        sName="Patch engine";
        sOptions="by SoNiC //UTG";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$b80300cd10b409ba....cd21e8$$$$1eb8....8ed833c98a0e....fec95133d2fec68916....b4..b2..cd21"))
    {
        sName="ByteHunter patch engine";
        sOptions="by nOP & THE_q //Phrozen Crew";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$0e588ec08ed88d16....68....9d9c582d....72..33dbb9"))
    {
        sName="GPatch";
        sVersion="1.2b"
        sOptions="by JES //C.O.R.E. team";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$0e588ec08ed8e8$$$$68....9d9c582d....73..8d3e....fbc3"))
    {
        sName="GPatch";
        sVersion="1.0c"
        sOptions="by JES //C.O.R.E. team";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e8$$$$50558becc746......5d0733ffb9....fcb8....f3abc3"))
    {
        sName="Cracker";
        sOptions="by NightIce //ByTe Enf0rcerZ";
        bDetected=1;
    }
    else if(Binary.compare("eb$$c8......e8$$$$6a..07bf....268a1d263a1d74..268a1db8....99e8....f7d0f7d2b9"))
    {
        sName="AutoCRK";
        sVersion="1.2x (uncrypted)";
        sOptions="1995 by MACHiNE GUNgsTeR //BANG!";
        bDetected=1;
    }
    else if(Binary.compare("eb$$8bfc83ef..83ec..be....b9....57f3a45fffe7"))
    {
        sName="AutoCRK";
        sVersion="1.2x (crypted)";
        sOptions="1995 by MACHiNE GUNgsTeR //BANG!";
        bDetected=1;
    }
    else if(Binary.compare("c8......e8$$$$6a..07bf....268a1d263a1d74..268a1db8....99"))
    {
        sName="AutoCRK";
        sVersion="1.15";
        sOptions="1995 by MACHiNE GUNgsTeR //BANG!";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$ba....8bda438a2780fc..75..e8....3c..74..2e8b1e....83fb..75..e9"))
    {
        sName="CRK2COM";
        sVersion="1.10b";
        sOptions="1993";
        bDetected=1;
    }
    else if(Binary.compare("'/MG/'eb$$c8......e8$$$$6a..07bf....268a1d263a1d74..268a1db8....99"))
    {
        sName="AutoCRK";
        sVersion="1.20";
        sOptions="by MACHiNE GUNgsTeR //BANG!";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$e8$$$$bb....b9....8a0734..880743e2..c3"))
    {
        sName="Crack Engine";
        sVersion="0.2";
        sOptions="by Prizna //PSP";
        bDetected=1;
    }
    else if(Binary.compare("'SNT'1af8b409ba....cd2133f6bd....b8....ba....cd21a3....72..33c933d28bd8"))
    {
        sName="SNT patch";
        sOptions="//SNT";
        bDetected=1;
    }
    else if(Binary.compare("eb$$0e1fb409ba....cd21be....e8....803e......74..b4..ba....cd21eb..b4..ba....cd21b8....cd21"))
    {
        sOptions="by WOLVERiNE";
        bDetected=1;
    }
    else if(Binary.compare("bc....5406b8....cd21891e....8c06....b8....ba....cd21b8....ba....cd21071eb9....ba....b7..b8....cd10"))
    {
        sOptions="by Randall Flagg of Razor 1911";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$b8....cd10ba....e8....ba....b8....cd2173..ba....e8....ba....e8....b44ccd2193ba....e8"))
    {
        sOptions="by Nostromo";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$ba....b409cd21c706........c706........c706........c706........be....33c98a0e....80f9..74..5651"))
    {
        sName+=" #1";
        sOptions="by Drink Or Die (Dark Knight)";
        bDetected=1;
    }
    else if(Binary.compare("e9$$$$ba....b409cd2133c0cd16b4..33dbcd10feccb2..cd10c706........c706........c706........c706"))
    {
        sName+=" #2";
        sOptions="by Dark Knight";
        bDetected=1;
    }
    else if(Binary.compare("b409ba....eb$$cd21b409ba....eb$$cd21b409ba....eb$$cd21b409ba....eb"))
    {
        sOptions="by Mr. KIM";
        bDetected=1;
    }
    else if(Binary.compare("9090ba....8bfab409cd21c606......ba....b8....cd2172..93b8....33c933d2cd2172"))
    {
        sOptions="by SkorpyoN Team";
        bDetected=1;
    }
    else if(Binary.compare("9090ba....b409cd21b401cd1674..33c0cd1633c0cd163c..0f84"))
    {
        sOptions="by +DzA kRAker";
        bDetected=1;
    }
    else if(Binary.compare("9090ba....8bfab409cd21b401cd1674..33c0cd1633c0cd163c..75"))
    {
        sOptions="by +DzA kRAker";
        bDetected=1;
    }
    else if(Binary.compare("ba....b409cd21ba....b409cd21ba....b8....cd21ba....0f82....a3....ba....b409cd218b1e"))
    {
        sName="MkPatch";
        sVersion="1.0";
        sOptions="by eGIS!";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","protection");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("33db9090b9....fcad03d8e2..b9....be....8bfefcad33c3ab43e2"))
    {
        sOptions="by ROWDY, St.Petersburg";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","README.COM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("bb....b8....cd21be....fcbf....f6c2..74..f6c2..74..bf....ac3c..74..b4"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","simple ANSI viewer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("b8....bb....b9....0e1fba....cd21b8004ccd21"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","simple self-displayer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("b8....8ec0b4..b9....cd102bc92bffb8....51b9....f3ab59be....2bdb2bed2bd28bfdac"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","x3");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(Binary.compare("e8$$$$5ebf....57b9....ac34fdaae2..c3"))
    {
        sVersion="1.4";
        sOptions="by MANtiC0RE";
        bDetected=1;
    }
    else if(Binary.compare("ba....2e408b142633f6402681c6....2e1ad3"))
    {
        sVersion="1.4";
        sOptions="by MANtiC0RE";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// Detect a Cab archive.
// Author: Jason Hood <jadoxa@yahoo.com.au>

includeScript("archive");
sName="Microsoft Cabinet File";

function detect_Cab(nOffset,nSize,bShowOptions)
{
    if(nSize>48)
    {
        if(File.compare("'MSCF'00000000",nOffset))
        {
            bDetected=1;
            sVersion=File.readByte(nOffset+0x19)+".0"+File.readByte(nOffset+0x18);
            var nFilesOffset=nOffset+File.readDword(nOffset+0x10);
            var nFiles=File.readWord(nOffset+0x1C);
            var nPacked=File.readDword(nOffset+8);
            if(File.readByte(nOffset+0x1E)&4)
            {
                nOffset+=File.readDword(nOffset+0x24)+4;
            }
            switch(File.readByte(nOffset+0x2A)&15)
            {
            case 1: sOptions=sOptions.append("MSZip");   break;
            case 2: sOptions=sOptions.append("Quantum"); break;
            case 3: sOptions=sOptions.append("LZX");     break;
            }
            if(bShowOptions)
            {
                // Packed size is not stored directly, so assume the first
                // folder's data is first and just skip the names.
                nPacked-=File.readDword(nOffset+0x24);
                while(nFiles--)
                {
                    Archive.add(File.readDword(nFilesOffset),nPacked,
                                File.readByte(nFilesOffset+14)&16);
                    nFilesOffset=File.findByte(nFilesOffset+16,256,0)+1;
                    nPacked=0;
                }
                sOptions=sOptions.append(Archive.contents());
            }
            return 1;
        }
    }

    return 0;
}
// Read the bits per pixel of Windows cursors & icons from the image.

// nOffset: position of the header.
function getCurIcoBPP(nOffset)
{
    var nBPP=0;
    nOffset=Binary.readDword(nOffset+12);
    if(Binary.readDword(nOffset)==0x28)
    {
        nBPP=Binary.readWord(nOffset+14);
    }
    else if(Binary.compare("89'PNG\r\n'1A0A",nOffset))
    {
        // Just assume a PNG is going to be 8-bit RGBA.
        nBPP=32;
    }
    return nBPP;
}
// DIE's signature file

init("compiler","Borland Kylix");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(ELF.isSectionNamePresent("borland.ressym"))
    {
        bDetected=1;
    }
    else if(ELF.isSectionNamePresent("borland.reshash"))
    {
        bDetected=1;
    }
    else if(ELF.isSectionNamePresent("borland.resdata"))
    {
        bDetected=1;
    }
    else if(ELF.isSectionNamePresent("borland.resspare"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Burneye");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(ELF.compareEP("FF35........9C608B0D........E9"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","DMD");

function getDMDVersion()
{
    var sResult="";
    var nSection=ELF.getSectionNumber(".comment");
    if(nSection!=-1)
    {
        var nSectionOffset=ELF.getSectionFileOffset(nSection);
        var nSectionSize=ELF.getSectionFileSize(nSection);
        var nOffset=ELF.findString(nSectionOffset,nSectionSize,"DMD v");
        if(nOffset!=-1)
        {
            sResult = ELF.getString(nOffset+5,20);
        }
    }
    
    return sResult;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    var sDMDVersion=getDMDVersion();
    if(sDMDVersion!="")
    {
        bDetected=1;
        sVersion=sDMDVersion;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","ELFCrypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(ELF.compareEP("eb0206c6609cbe"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// Rewrited from yara (YARA-Rule by f0wl) by KDSS-Research
//

init("packer","Ezuri");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (ELF.isSectionNamePresent(".strtab") && ELF.isSectionNamePresent(".gopclntab")&& ELF.isSectionNamePresent(".noptrdata")&& ELF.isSectionNamePresent(".rodata"))
    {
        var nSection=ELF.getSectionNumber(".strtab");
   
        var nSectionOffset=ELF.getSectionFileOffset(nSection);
        var nSectionSize=ELF.getSectionFileSize(nSection);

        var nSection2=ELF.getSectionNumber(".gopclntab");
   
        var nSectionOffset2=ELF.getSectionFileOffset(nSection2);
        var nSectionSize2=ELF.getSectionFileSize(nSection2);

        var nSection3=ELF.getSectionNumber(".noptrdata");
   
        var nSectionOffset3=ELF.getSectionFileOffset(nSection3);
        var nSectionSize3=ELF.getSectionFileSize(nSection3);

        var nSection4=ELF.getSectionNumber(".rodata");
   
        var nSectionOffset4=ELF.getSectionFileOffset(nSection4);
        var nSectionSize4=ELF.getSectionFileSize(nSection4);


        var nOffset=ELF.findString(nSectionOffset,nSectionSize,"main.runFromMemory");
        var n2=ELF.findString(nSectionOffset,nSectionSize,"main.aesDec");
        var n3=ELF.findString(nSectionOffset2,nSectionSize2,"crypto/cipher.NewCFBDecrypter");
        var n4=ELF.findString(nSectionOffset4,nSectionSize4,"/proc/self/fd/%d");
        var n5=ELF.findString(nSectionOffset4,nSectionSize4,"/dev/null");
        var n6=ELF.findSignature(nSectionOffset3,nSectionSize3,"A5 63 63 C6 84 7C 7C F8");
        var n7=ELF.findSignature(nSectionOffset3,nSectionSize3,"63 7C 77 7B F2 6B 6F C5 30 01 67 2B FE D7 AB 76");

        if (nOffset!=-1 && n2!=-1  && n3!=-1 && n4!=-1  && n5!=-1 && n6!=-1 && n7!=-1 ){
            bDetected=1;
        }
        
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","FASM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(ELF.getElfHeader_shstrndx()==0)
    {
        if(ELF.getElfHeader_shnum()==0)
        {
            if(ELF.getElfHeader_shentsize())
            {
                sVersion="1.X";
                bDetected=1;
                for(var i=0;i<ELF.getNumberOfPrograms()-1;i++)
                {
                    if(ELF.getProgramFileOffset(i)==0)
                    {
                        bDetected=0;
                    }
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("library","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nOffset=ELF.findSignature(0, ELF.getSize(), "'@(#) F'");
    if(nOffset!=-1)
    {
        sName=ELF.getString(nOffset, 200).match(/\w\S*/i);
        sVersion=ELF.getString(nOffset, 200).match(/\d\S*/i);
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Levis <levintaeyeon@live.com>
// EP sigs by hypn0 <hypn0@mail.ru>
// Lazarus Free Pascal

init("compiler","Free Pascal");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(ELF.compareEP("5989e38d44....83e4..8915........a3........890d........891d........e8........8925........31ede8........c3"))
    {
        sVersion="2.6.0";
        bDetected=1;
    }
    else if(ELF.compareEP("31ED5989E3"))
    {
        bDetected=1;
    }
    else if(ELF.isSectionNamePresent(".fpc.resources"))
    {
        bDetected=1;
    }
    else if(ELF.isSectionNamePresent(".fpcdata"))
    {
        bDetected=1;
        var nSection=ELF.getSectionNumber(".fpcdata");
        var nOffset=ELF.getSectionFileOffset(nSection);
        var nSize=ELF.getSectionFileSize(nSection);
        
        if(nSize>0)
        {
            var nStringOffset=ELF.findString(nOffset,4,"FPC ");
            if(nStringOffset!=-1)
            {
                sVersion=ELF.getString(nStringOffset+4);
            }
        }
    }
    else if(ELF.isSectionNamePresent(".data"))
    {
        var nSection=ELF.getSectionNumber(".data");
        var nOffset=ELF.getSectionFileOffset(nSection);
        var nSize=ELF.getSectionFileSize(nSection);

        if(nSize>=0x100)
        {
            var nStringOffset=ELF.findString(nOffset+nSize-0x100,0x100,"FPC ");
            if(nStringOffset!=-1)
            {
                sVersion=ELF.getString(nStringOffset+4);
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("library","GLIBC");

function getMaxVersion(sValue1,sValue2)
{
    var aString1=sValue1.toString().split('.');
    var aString2=sValue2.toString().split('.');

    for(var i=0;i<3;i++)
    {
        if(aString1[i]>aString2[i])
        {
            return sValue1;
        }
        else if(aString1[i]<aString2[i])
        {
            return sValue2;
        }
    }

    return sValue2;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(ELF.isSectionNamePresent(".dynstr"))
    {
        var nSection=ELF.getSectionNumber(".dynstr");

        var nOffset=ELF.getSectionFileOffset(nSection);
        var nSize=ELF.getSectionFileSize(nSection);

        var nCurrentOffset=nOffset;
        var nCurrentSize=nSize;
        var sLIBCVersion;
        while(nCurrentSize>0)
        {
            nCurrentOffset=ELF.findString(nCurrentOffset,nSize,"GLIBC_");
            if(nCurrentOffset==-1)
            {
                break;
            }
            bDetected=1;
            sLIBCVersion=ELF.getString(nCurrentOffset+6);

            sVersion=getMaxVersion(sVersion,sLIBCVersion);

            nCurrentSize=nSize-(nCurrentOffset-nOffset+1);
            nCurrentOffset++;
        }

        sOptions=ELF.getGeneralOptions();

    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: fernandom - menteb.in

init("compiler","Go");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (ELF.isSectionNamePresent(".gosymtab") ||
        ELF.isSectionNamePresent(".gopclntab") ||
        ELF.isSectionNamePresent(".go.buildinfo") ||
        ELF.isSectionNamePresent(".note.go.buildid"))
    {
        bDetected=1;
    }

    // amd64
    if (ELF.compareEP("488d742408488b3c24b810174200ffe0b870f94100ffe0000000000000000000"))
    {
        bDetected=1;
        sVersion="1.2.2";
    }
    else if (ELF.compareEP("488d742408488b3c24b8907f4200ffe0b800564200ffe0000000000000000000"))
    {
        bDetected=1;
        sVersion="1.3 or 1.3.1";
    }
    else if (ELF.compareEP("488d742408488b3c24b8c07f4200ffe0b830564200ffe0000000000000000000"))
    {
        bDetected=1;
        sVersion="1.3.2";
    }
    else if (ELF.compareEP("488d742408488b3c24b8e07f4200ffe0b850564200ffe0000000000000000000"))
    {
        bDetected=1;
        sVersion="1.3.3";
    }
    else if (ELF.compareEP("488d742408488b3c24488d0510000000ffe00000000000000000000000000000"))
    {
        bDetected=1;
        sVersion="1.4.x or 1.5.x";
    }
    else if (ELF.compareEP("488d742408488b3c24488d0510000000ffe0cccccccccccccccccccccccccccc"))
    {
        bDetected=1;
        sVersion="1.6.x-1.9.x";
    }
    else if (ELF.compareEP("e92bc9ffffcccccccccccccccccccccc8b7c2408b8e70000000f05c3cccccccc"))
    {
        bDetected=1;
        sVersion="1.10.x";
    }
    else if (ELF.compareEP("e9cbc6ffffcccccccccccccccccccccc8b7c2408b8e70000000f05c3cccccccc"))
    {
        bDetected=1;
        sVersion="1.11.x";
    }
    else if (ELF.compareEP("e9dbc6ffffcccccccccccccccccccccc8b7c2408b8e70000000f05c3cccccccc"))
    {
        bDetected=1;
        sVersion="1.12.x";
    }
    else if (ELF.compareEP("e92bc6ffffcccccccccccccccccccccc8b7c2408b8e70000000f05c3cccccccc"))
    {
        bDetected=1;
        sVersion="1.13.x";
    }
    else if (ELF.compareEP("e92bc4ffffcccccccccccccccccccccc8b7c2408b8e70000000f05c3cccccccc"))
    {
        bDetected=1;
        sVersion="1.14.x";
    }
    else if (ELF.compareEP("e91bcbffffcccccccccccccccccccccccccccccccccccccccccccccccccccccc"))
    {
        bDetected=1;
        sVersion="1.15.x";
    }
    else if (ELF.compareEP("e95bcaffffcccccccccccccccccccccccccccccccccccccccccccccccccccccc"))
    {
        bDetected=1;
        sVersion="1.16.x";
    }
    else if (ELF.compareEP("e93bc6ffffcccccccccccccccccccccccccccccccccccccccccccccccccccccc"))
    {
        bDetected=1;
        sVersion="1.17.x";
    }
    
    // 386
    else if (ELF.compareEP("83ec088b4424088d5c240c890424895c2404e87902ffffe804000000cd030000"))
    {
        bDetected=1;
        sVersion="1.2.2";
    }
    else if (ELF.compareEP("83ec088b4424088d5c240c890424895c2404e8f977feffe804000000cd030000"))
    {
        bDetected=1;
        sVersion="1.3 or 1.3.1";
    }
    else if (ELF.compareEP("83ec088b4424088d5c240c890424895c2404e8e977feffe804000000cd030000"))
    {
        bDetected=1;
        sVersion="1.3.2";
    }
    else if (ELF.compareEP("83ec088b4424088d5c240c890424895c2404e8c977feffe804000000cd030000"))
    {
        bDetected=1;
        sVersion="1.3.3";
    }
    else if (ELF.compareEP("83ec088b4424088d5c240c890424895c2404e89932ffffe804000000cd030000"))
    {
        bDetected=1;
        sVersion="1.4.x";
    }
    else if (ELF.compareEP("83ec088b4424088d5c240c890424895c2404e809000000cd0300000000000000"))
    {
        bDetected=1;
        sVersion="1.5.x";
    }
    else if (ELF.compareEP("83ec088b4424088d5c240c890424895c2404e809000000cd03cccccccccccccc"))
    {
        bDetected=1;
        sVersion="1.6.x-1.9.x";
    }
    //e92bd8ffffccccccccccccccccccccccb8fc0000008b5c2404cd80cd03c3cccc
    else if (ELF.compareEP("e9....ffffccccccccccccccccccccccb8fc0000008b5c2404cd80cd03c3cccc"))
    {
        bDetected=1;
        sVersion="1.10";
    }
    else if (ELF.compareEP("e9ebd8ffffccccccccccccccccccccccb8fc0000008b5c2404cd80cd03c3cccc"))
    {
        bDetected=1;
        sVersion="1.10.x";
    }
    else if (ELF.compareEP("e96bdbffffccccccccccccccccccccccb8fc0000008b5c2404cd80cd03c3cccc"))
    {
        bDetected=1;
        sVersion="1.11.x";
    }
    else if (ELF.compareEP("e97b..ffffccccccccccccccccccccccb8fc0000008b5c2404cd80cd03c3cccc"))
    {
        bDetected=1;
        sVersion="1.12.x";
    }
    else if (ELF.compareEP("e99bffffccccccccccccccccccccccb8fc0000008b5c2404cd80cd03c3cccc"))
    {
        bDetected=1;
        sVersion="1.13.x";
    }
    else if (ELF.compareEP("e99bd9ffffccccccccccccccccccccccb8fc0000008b5c2404cd80cd03c3cccc"))
    {
        bDetected=1;
        sVersion="1.14.x";
    }
    else if (ELF.compareEP("e9abdcffffccccccccccccccccccccccb8010000008b5c2404cd80cd03c3cccc"))
    {
        bDetected=1;
        sVersion="1.15.x";
    }
    else if (ELF.compareEP("e9dbdcffffccccccccccccccccccccccb8010000008b5c2404cd80cd03c3cccc"))
    {
        bDetected=1;
        sVersion="1.16.x";
    }
    else if (ELF.compareEP("e92bdeffffccccccccccccccccccccccb8010000008b5c2404cd80cd03c3cccc"))
    {
        bDetected=1;
        sVersion="1.17.x";
    }

    // generic rule for amd64 and 386
    else if (ELF.compareEP("e9....ffff..................................................cccc"))
    {
        bDetected=1;
        sVersion="1.10.x-1.17.x";
    }
    
    // arm
    else if (ELF.compareEP("00009de504108de204409fe500f084e2feffffea"))
    {
        bDetected=1;
    }
    
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Hand Mill
/*
If errors pls contact HandMill on exelab.ru
*/

init("protector","HASP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(ELF.getNumberOfSections()==2)
    {
        if(ELF.isSectionNamePresent("protect")&&(ELF.getSectionFileSize(0)==0))
        {
            var nOffset=ELF.getProgramFileOffset(3);
            var nSize=ELF.getProgramFileSize(3);
            if(ELF.findString(nOffset,nSize,"hasp")!=-1)
            {
                bDetected=1;
            }
            else
            {
                var nOffset=ELF.getProgramFileOffset(1);
                var nSize=ELF.getProgramFileSize(1);
                if(ELF.findString(nOffset,nSize,"hasp")!=-1)
                {
                    bDetected=1;
                }
            }

        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
init("compiler","HP C++");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(ELF.isSectionNamePresent(".HP.init"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("boot","IBM AIX kernel loader");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(ELF.getNumberOfPrograms()>=4)
    {
        if(ELF.getProgramFileSize(1)<=0x100)
        {
            if(ELF.findString(ELF.getProgramFileOffset(1),Math.min(0x100,ELF.getProgramFileSize(1)),"IBM,RPA-Client-Config")!=-1)
            {
                bDetected=1;
            }
        }
    }
    if(ELF.findString(ELF.getProgramFileOffset(0),Math.min(0x100,ELF.getProgramFileSize(0)),"PowerPC")!=-1)
    {
        sVersion="PowerPC";
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: anonymous

init("compiler","Oracle Solaris Studio");

function getOSSVersion()
{
    var sResult="";
    var nSection=ELF.getSectionNumber(".comment");
    if(nSection!=-1)
    {
        var nSectionOffset=ELF.getSectionFileOffset(nSection);
        var nSectionSize=ELF.getSectionFileSize(nSection);
        var nOffset=ELF.findString(nSectionOffset,nSectionSize,"Sun WorkShop");
        if(nOffset!=-1)
        {
            return ELF.getString(nOffset+13,100);
        }
        nOffset=ELF.findString(nSectionOffset,nSectionSize,"acomp: Sun C");
        if(nOffset!=-1)
        {
            return ELF.getString(nOffset+13,100);
        }
        nOffset=ELF.findString(nSectionOffset,nSectionSize,"SUNWCC.h");
        if(nOffset!=-1)
        {
            return "5.X";
        }
    }

    return sResult;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(ELF.compareEP("bc1020..e003....1300....e022....a203a0..1300....e222....1300....e222....a52c20..a404a0..a40440122700....e804....80a520"))
    //SPARC instruction set
    {
        if(ELF.isSectionNamePresent(".SUNW_version"))
        {
            bDetected=1;
        }
        var sOSSVersion=getOSSVersion();
        if(sOSSVersion!="")
        {
            bDetected=1;
            sVersion=sOSSVersion;
        }
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("library","Qt");

function getQTVersion()
{
    var sResult="";
    var nSize=ELF.getSize();
    var nOffset=ELF.findString(0,nSize,"/usr/local/Trolltech/Qt-");
    if(nOffset!=-1)
    {
        sResult=ELF.getString(nOffset+24);
        var aVersion=sResult.match(/(.*)\//);
        if(aVersion)
        {
            sResult=aVersion[1];
        }
    }

    return sResult;
}

function detect(bShowType,bShowVersion,bShowOptions)
{

    if(ELF.isStringInTablePresent(".dynstr","libQtCore.so.4"))
    {
        sVersion="4.X";
        bDetected=1;
    }
    else if(ELF.isStringInTablePresent(".dynstr","libQt5Core.so.5"))
    {
        sVersion="5.X";
        bDetected=1;
    }

    if(bDetected)
    {
        var sQTVersion=getQTVersion();
        if(sQTVersion!="")
        {
            sVersion=sQTVersion;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: fernandom - menteb.in

init("compiler","Rust");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (ELF.isStringInTablePresent(".strtab","rust_panic"))
    {
        bDetected=1;
        var nSection=ELF.getSectionNumber(".debug_str");
        var nOffset=ELF.getSectionFileOffset(nSection);
        var nSize=ELF.getSectionFileSize(nSection);
        
        if(nSize>0)
        {
            var nStringOffset=ELF.findString(nOffset,6,"rustc ");
            if(nStringOffset!=-1)
            {
                sVersion=ELF.getString(nStringOffset);
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("library","SDL");

function getSDLVersion()
{
    var sResult="";
    var nSection=ELF.getSectionNumber(".dynstr");
    if(nSection!=-1)
    {
        var nOffset=ELF.getSectionFileOffset(nSection);
        var nSize=ELF.getSectionFileSize(nSection);

        var nVersionOffset=ELF.findString(nOffset,nSize,"libSDL-");
        if(nVersionOffset!=-1)
        {
            var sSDLVersion=ELF.getString(nVersionOffset);
            var aVersion=sSDLVersion.match(/libSDL-(.*).so/);
            if(aVersion)
            {
                sResult=aVersion[1];
            }
        }
    }

    return sResult;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(ELF.isStringInTablePresent(".dynstr","SDL_Init"))
    {
        bDetected=1;
    }

    if(bDetected)
    {
        sVersion=getSDLVersion();
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","UPX");

function getUPXOptions(nOffset)
{
    var nMethod=ELF.readByte(nOffset+2);
    var nLevel=ELF.readByte(nOffset+3);
    var sCompression="";
    switch(nMethod) // From http://sourceforge.net/p/upx/code/ci/default/tree/src/conf.h
    {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10: sCompression="NRV"; break;
    case 14: sCompression="LZMA"; break;
    case 15: sCompression="zlib"; break;
    }

    if(sCompression!="")
    {
        sOptions=sOptions.append(sCompression);
        if(nLevel==8)
        {
            sOptions=sOptions.append("best");
        }
        else
        {
            sOptions=sOptions.append("brute");
        }
    }
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nSize=ELF.getSize();
    if(ELF.compare("'UPX!'",nSize-0x24))
    {
        getUPXOptions(nSize-0x20);
        bDetected=1;
    }
    else if(ELF.compareEP("E8........EB0E5A585997608A542420E9........60"))
    {
        sVersion="3.X";
        bDetected=1;
    }

    var nOffset=ELF.findString(0,nSize,"$Id: UPX");
    if(nOffset!=-1)
    {
        sVersion=ELF.getString(nOffset+9,4);
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","VBCC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(ELF.getElfHeader_entry()==0) // if EP=0
    {
        var nOffset=ELF.getSectionFileOffset(1); // The first section
        if(ELF.compare("6000000048......................7c08....9001....9421....bdc1....3d......902b....3d......39ad....3960....800b....3d......90",nOffset))  //PPC instruction set
        {
            sVersion="0.7";
            bDetected=1;
        }
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
init("compiler","Watcom");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nData=ELF.getSectionNumber(".data");

    var nOffset=ELF.getSectionFileOffset(nData);
    var nSize=ELF.getSectionFileSize(nData);
    if(ELF.findString(nOffset,nSize,"WATCOM")!=-1)
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","Zig");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if((ELF.isSectionNamePresent(".rodata"))&&(ELF.isDeepScan()))
    {
        var nIndex=ELF.getSectionNumber(".rodata");
    
        var nOffset=ELF.getSectionFileOffset(nIndex);
        var nSize=ELF.getSectionFileSize(nIndex);
        
        var nVersionOffset=ELF.findSignature(nOffset,nSize,"5a49475f44454255475f434f4c4f52"); // ANSI ZIG_DEBUG_COLOR
        
        if(nVersionOffset!=-1)
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("operation system","Unix");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (ELF.isVerbose()) {
        sName = ELF.getOperationSystemName();
        sVersion = ELF.getOperationSystemVersion();
        sOptions = ELF.getOperationSystemOptions();
        
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
includeScript("languages");

function detect(bShowType,bShowVersion,bShowOptions)
{
    handleLanguage();

    return "";
}		
var File=ELF;

includeScript("result-general");
// DIE's signature file

init("compiler","gcc");

function getGCCVersion(nOffset,nSize)
{
    var sResult="";
    var nOffset=ELF.findString(nOffset,nSize,"GCC:");
    if(nOffset!=-1)
    {
        sResult=ELF.getString(nOffset+5,100);
    }
    return sResult;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(ELF.compareEP("31ed5e89e183e4..50545268........68........515668........e8"))
    {
        if(ELF.compareEP("$$$$$$$$57565383ec..8b7424..8b7c24..8b5c24..b8........85c00f84........8b0d........85c90f94c025........a3........8b5424..8b4c24..8d44....a3........8b5424..8915........90",29))
        {
            sVersion="4.7.2(exe)";
            bDetected=1;
        }
        else if(ELF.compareEP("$$$$$$$$55b8........57565383ec..85c08b7c24..8bb424........8b9c24........0f84........8b15........31c085d20f94c08b5424..8b4c24..a3........8d44....8b9424........a3........8915........6690",29))
        {
            sVersion="4.6.1(exe)";
            bDetected=1;
        }
        else if(ELF.compareEP("$$$$$$$$5589e557565383ec..8b7d..8b75..8b5d..b8........85c00f84........a1........85c00f94c025........a3",29))
        {
            sVersion="4.5.3(exe)";
            bDetected=1;
        }
        else if(ELF.compareEP("$$$$$$$$55b8........89e557565383ec..85c08b7d..8b75..8b5d..74..31c0833d..........0f94c0",29))
        {
            sVersion="4.4.6(exe)";
            bDetected=1;
        }
        else if(ELF.compareEP("$$$$$$$$55b8........89e557565383ec..85c08b7d..8b5d..74..31c08b15........85d20f94c0",29))
        {
            sVersion="4.4.5(exe)";
            bDetected=1;
        }
        else if(ELF.compareEP("$$$$$$$$55b8........89e557565383ec..85c08b....8b5d..74..31c0833d..........0f94c0",29))
        {
            sVersion="4.3.3(exe)";
            bDetected=1;
        }
        else if(ELF.compareEP("$$$$$$$$55ba........89e557565381ec........85d20f85........8b45..8b4d..8915........8d54",29))
        {
            sVersion="4.1.2(exe)";
            bDetected=1;
        }
    }
    else if(ELF.compareEP("31ed5589e583e4..8d45..83ec..50ff75..52e8$$$$$$$$5589e557565383ec..8b5d..8b7d..8d74....8935........85db7e..8b0785c074..a3........0fb610"))
    {
        sVersion="4.4.7(exe)"; //BSD
        bDetected=1;
    }
    else if(ELF.compareEP("5589e5565383ec..83e4..8b5d..89d18d74....85db8935........7e..8b45..85c074..a3........0fb610"))
    {
        sVersion="4.2.1(exe)"; //BSD
        bDetected=1;
    }
    else if(ELF.compareEP("55575653e8........81c3........83ec..8b93........8b8b........8b83........8b2a8b93........890c24895424..8b93........895424..eb"))
    {
        sVersion="4.7.2(so)";
        bDetected=1;
    }
    else if(ELF.compareEP("5589e557565383ec..83e4..8b5d..89d78d74....85db8935........7e..8b45..85c074..a3........89c10fb601"))
    {
        sVersion="3.4.6(exe)"; //BSD
        bDetected=1;
    }
    else if(ELF.compareEP("5589e557565383ec..89d18d7d..8b5f..8d74....8935........85db7e..837d....74..8b45..a3........89c28038..74..8db6........8dbf........803a..75..8d42..a3"))
    {
        sVersion="3.2.1(exe)"; //BSD
        bDetected=1;
    }
    else if(ELF.compareEP("5557565383ec..8b7424..8b6c24..8b3ec745..........c74424..........c74424..........8b078904248d4424..894424..ff57"))
    {
        sVersion="3.2(so)"; //BSD
        bDetected=1;
    }

    else if(ELF.compareEP("7c290b785421....38......9421ff..7c0803a690......3d......85......48"))
    //PowerPC instruction set
    {
        sVersion="3.2.x";
        bDetected=1;
    }
    else if(ELF.compareEP("6a..6a..8bec52b8........85c074"))
    {
        sVersion="2.95.2";
        bDetected=1;
    }
    else if(ELF.isStringInTablePresent(".strtab","gcc2_compiled."))
    {
        sVersion="2.X";
        bDetected=1;
    }
    else if(ELF.isStringInTablePresent(".dynstr","GCC_3.0"))
    {
        sVersion="3.X";
        bDetected=1;
    }
    else if(ELF.isSectionNamePresent(".gcc_except_table"))
    {
        bDetected=1;
    }
    var nSection=ELF.getSectionNumber(".comment");
    if(nSection!=-1&&sVersion=="")
    {
        var sGCCVersion=getGCCVersion(ELF.getSectionFileOffset(nSection),ELF.getSectionFileSize(nSection));
        if(sGCCVersion!="")
        {
            sVersion=sGCCVersion;
            bDetected=1;
        }
    }
    if(sVersion=="")
    {
        if(ELF.isOverlayPresent()) // TODO Check!!!
        {
            var sGCCVersion=getGCCVersion(ELF.getOverlayOffset(),Math.min(8192,ELF.getOverlaySize()));
            if(sGCCVersion!="")
            {
                sVersion=sGCCVersion; // Version mb corrupted!
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","gdc");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(ELF.isLibraryPresent("libgphobos.so.2"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","ldc");

function getLDCVersion()
{
    var sResult="";
    var nSection=ELF.getSectionNumber(".comment");
    if(nSection!=-1)
    {
        var nSectionOffset=ELF.getSectionFileOffset(nSection);
        var nSectionSize=ELF.getSectionFileSize(nSection);
        var nOffset=ELF.findString(nSectionOffset,nSectionSize,"ldc version ");
        if(nOffset!=-1)
        {
            sResult = ELF.getString(nOffset+12,20);
        }
    }
    
    return sResult;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(ELF.isLibraryPresent("libphobos2-ldc-shared.so.98") || ELF.isLibraryPresent("libdruntime-ldc-shared.so.98"))
    {
        bDetected=1;
    }
    
    var sLDCVersion=getLDCVersion();
    if(sLDCVersion!="")
    {
        bDetected=1;
        sVersion=sLDCVersion;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// FASM's PE DOS stub is tested twice - once to detect FASM as a compiler and
// again to prevent being detected as a linker (FASM has no linker).  Detect it
// once here.

var bFASM;
if(typeof bFASM==="undefined")
{
    bFASM=PE.compare("'MZ'80000100000004001000FFFF00004001000000000000400000000000000000000000000000000000000000000000000000000000000000000000800000000E1FBA0E00B409CD21B8014CCD21'This program cannot be run in DOS mode.\r\n$'0000000000000000'PE'0000");
}
// Free Pascal
// Author: Rinat Aminow <rinat84.a@gmail.com>

var bFPC;
if(typeof bFPC==="undefined")
{
    if(PE.section[".data"])
    {
        var nOffset=PE.section[".data"].FileOffset + PE.section[".data"].FileSize - 0x1024;

        bFPC=PE.findString(nOffset,0x1024,"FPC ")!=-1;
    }
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","UPX");

function getUPXOptions(nOffset)
{
    var nMethod=LE.readByte(nOffset+2);
    var nLevel=LE.readByte(nOffset+3);
   
    var sCompression="";
    switch(nMethod) // From http://sourceforge.net/p/upx/code/ci/default/tree/src/conf.h
    {
    case 2: sCompression="NRV2B_LE32"; break;
    case 3: sCompression="NRV2B_8"; break;
    case 4: sCompression="NRV2B_LE16"; break;
    case 5: sCompression="NRV2D_LE32"; break;
    case 6: sCompression="NRV2D_8"; break;
    case 7: sCompression="NRV2D_LE16"; break;
    case 8: sCompression="NRV2E_LE32"; break;
    case 9: sCompression="NRV2E_8"; break;
    case 10: sCompression="NRV"; break;
    case 14: sCompression="LZMA"; break;
    case 15: sCompression="zlib"; break;
    }

    if(sCompression!="")
    {
        sOptions=sOptions.append(sCompression);
        if(nLevel==8)
        {
            sOptions=sOptions.append("best");
        }
        else
        {
            sOptions=sOptions.append("brute");
        }
    }
}

function getUPXVersion()
{
    var nEP = LE.getEntryPointOffset();
    var nOffset1=LE.findString(nEP-1024,1024,"$Id: UPX ");
    var nOffset2=LE.findString(nEP,1024,"UPX!");
    if(nOffset2!=-1)
    {
        getUPXOptions(nOffset2+4);
    }

    if(nOffset1!=-1)
    {
        sVersion=LE.getString(nOffset1+9,4);
    }
    if((sVersion=="")&&(nOffset2!=-1))
    {
        sVersion=LE.getString(nOffset2-5,4);
    }
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(LE.compareEP("bf........6957..........061e07578db7........8dbf........b9........fdf3a5fc8d77..5f83cd..57e9"))
    {
        sOptions="for Watcom C";
        bDetected=1;
    }
    else if(LE.compareEP("bf........be........6957..........57fc31db83cd..909001db75"))
    {
        sOptions="for Watcom C";
        bDetected=1;
    }
    getUPXVersion();

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Watcom C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(LE.compareEP("eb$$fb83e4..8bdc891d........891d........66b8....66a3........bb........2bc0b430cd21a2"))
    {
        sName="Watcom C/C++32";
        sOptions="1988-93";
        bDetected=1;
    }
    else if(LE.compareEP("eb$$fb83e4..89e3891d........891d........66b8....66a3........bb........29c0b430cd21a2"))
    {
        sName="Open Watcom C/C++32";
        sOptions="1988-2002";
        bDetected=1;
    }
    else if(LE.compareEP("eb$$fb83e4..89e3891d........891d........55575666b8....cd21668cc00f00e875..0f00eb75"))
    {
        sName="Open Watcom C/C++32";
        sOptions="1988-1995";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("operation system","Windows");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (LE.isVerbose()) {
        sName = LE.getOperationSystemName();
        sVersion = LE.getOperationSystemVersion();
        sOptions = LE.getOperationSystemOptions();
        
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
includeScript("languages");

function detect(bShowType,bShowVersion,bShowOptions)
{
    handleLanguage();

    return "";
}		
var File=LE;

includeScript("result-general");
// DIE's signature file

init("operation system","Windows");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (LX.isVerbose()) {
        sName = LX.getOperationSystemName();
        sVersion = LX.getOperationSystemVersion();
        sOptions = LX.getOperationSystemOptions();
        
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
includeScript("languages");

function detect(bShowType,bShowVersion,bShowOptions)
{
    handleLanguage();

    return "";
}		
var File=LX;

includeScript("result-general");
// DIE's signature file

init("library","Carbon");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MACH.isLibraryPresent("Carbon"))
    {
        bDetected=1;
    }
    else if(MACH.isLibraryPresent("CarbonCore"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file

init("library","Cocoa");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MACH.isLibraryPresent("Cocoa"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
init("compiler","Delphi");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nSection=MACH.getSectionNumber("__rodata");
    if(nSection!=-1)
    {
        var nSectionOffset=MACH.getSectionFileOffset(nSection);
        var nSectionSize=MACH.getSectionFileSize(nSection);

        var nOffset=MACH.findSignature(nSectionOffset,nSectionSize,"'TObject'");
        if(nOffset!=-1)
        {
            sName="Embarcadero Delphi";
            sVersion="XE2-XE6"
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("library","QT");

function getVersion()
{
    var current=MACH.getLibraryCurrentVersion("QtCore");

    return ((current>>16)&0xFF)+"."+((current>>8)&0xFF)+"."+(current&0xFF);
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MACH.isLibraryPresent("QtCore"))
    {
        sVersion=getVersion();
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","UPX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MACH.getNumberOfSections()==2)
    {
        var nOffset=MACH.findString(0,MACH.getSize(),"$Id: UPX");
        if(nOffset!=-1)
        {
            sVersion=MACH.getString(nOffset+9,4);
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("library","WebKit");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MACH.isLibraryPresent("WebKit"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file

init("compiler","Zig");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if((MACH.isSectionNamePresent("__cstring"))&&(MACH.isDeepScan()))
    {
        var nIndex=MACH.getSectionNumber("__cstring");
    
        var nOffset=MACH.getSectionFileOffset(nIndex);
        var nSize=MACH.getSectionFileSize(nIndex);
        
        var nVersionOffset=MACH.findSignature(nOffset,nSize,"5a49475f44454255475f434f4c4f52"); // ANSI ZIG_DEBUG_COLOR
        
        if(nVersionOffset!=-1)
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
includeScript("languages");

function detect(bShowType,bShowVersion,bShowOptions)
{
    handleLanguage();

    return "";
}		
// DIE's signature file

init("operation system","macOS");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (MACH.isVerbose()) {
        sName = MACH.getOperationSystemName();
        sVersion = MACH.getOperationSystemVersion();
        sOptions = MACH.getOperationSystemOptions();
        
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
var File=MACH;

includeScript("result-general");
// DIE's signature file

init("compiler","gcc");

function detect(bShowType,bShowVersion,bShowOptions)
{
    /* if(MACH.isLibraryPresent("libstdc++.6.dylib"))
    {
        sOptions="libstdc++";
        bDetected=1;
    }
    else if(MACH.isLibraryPresent("libc++.1.dylib"))
    {
        sOptions="C++";
        bDetected=1;
    }
    else if(MACH.isLibraryPresent("libgcc_s.1.dylib"))
    {
        sOptions="C/C++";
        bDetected=1;
    }
    else if(MACH.isLibraryPresent("libobjc.A.dylib"))
    {
        sOptions="Objective-C";
        bDetected=1;
    } */

    if(MACH.isLibraryPresent("libgcc_s.1.dylib"))
    {
        sOptions="C/C++";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("library","java");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MACH.isLibraryPresent("libjava.dylib"))
    {
        bDetected=1;
    }
    else if(MACH.isLibraryPresent("libjvm.dylib"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// MFC is tested twice - as a library and as a compiler (to distinguish C from
// C++).  Detect it once here.

var aMFC;
if(typeof aMFC==="undefined")
{
    aMFC=PE.isLibraryPresentExp(/^MFC(\d+?)(u?)(d?)\.dll/i);
    if(!aMFC)
    {
        if(PE.section[".data"]
         &&PE.isSignatureInSectionPresent(PE.section[".data"].Number,"'CMFCComObject'"))
        {
            aMFC=1;
        }
    }
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","$pirit");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("E8....F9E8....B4..CD212D....13F2E8....2A01F5E9"))
    {
        sVersion="1.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("ACB4..CD2106B4..CD21079FE8....FC90"))
    {
        sVersion="1.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("123fe8$$$$e4..900c..36e6..ba....f9525289d126b8....36b5..3ecd16fd5a"))
    {
        sVersion="1.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("ac03d9e8$$$$e4..fb0c..fbe6..90ba....5252fd89d1b8....30ed2ecd16905a87d190b8....fb86cdf530ed3ecd16f95ac3"))
    {
        sOptions="$UPD 2.1 1996 by Night $pirit";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1c..3a1fe8....f5e8....fde8....04..9035....f8f6dff9d0d5fdfbfcc3"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$e4210c1ae6212eb9....2e51f85189c9f8b8....b5..2ecd163659fdfd87c986cd3eb5..2eb8....f9cd1659c3"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$ba....f8ec0c..36eef5b8....50f950269089c128edf9b8....cd165887c1b8....f886e93e30ed36cd1658fdc3"))
    {
        sVersion="1.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$ba....fbec0c..eeb9....51512efd89c9fdb8....b5..3ecd165987c9b8....86e9b5..f8cd1659f9c3"))
    {
        sVersion="1.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$e4212e0c..e6212eb9....5151fd89c93eb5..fcb8....fbcd162e5987c926b8....fd"))
    {
        sVersion="1.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$26e421f80c..e621f98d1e....53365389d93e30edb8....cd165b"))
    {
        sVersion="1.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("91221db4..cd21d2d1e9$$$$b4..cd21a6e8"))
    {
        sVersion="1.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b4..cd21b4..cd21e8$$$$ba....ec900c..26ee8d0e....51fd51"))
    {
        sVersion="1.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("95e8$$$$fbba....3eecfc0c..3eeefb8d0e....51512687c9b8....28ed26cd162e59fdfb87c9b8....fd88e9f8b5..cd1626592ec3"))
    {
        sVersion="1.5";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("loader","32stub for PE files");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8cc88ed88c1e....8c06....8c06....8c06....8bdc83c3..d1ebd1ebd1ebd1eb8cd003d82b1e....b8....cd21"))
    {
        sOptions="by Borland";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","ABKprot");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("B430CD2186E03D....73..9C8CC0065B595153BA....87F256CF0E1F0E07"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

includeScript("ACE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    detect_ACE(0,bShowOptions);
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","AEP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("E8$$$$E4212EA3....33C08BD85DB9....50B8....E6210FA9E6..538BDFE42123D84B0FA14B66"))
    {
        sVersion="1.00";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","AINEXE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("a1....2d....8ed0bc....8cd836a3....05....36a3....2ea1....8ad4b1..d2eafec9d3e08cd336"))
    {
        sVersion="2.1";
        bDetected=1;
    }
    else if(MSDOS.compareEP("0e07b9....be....33fffcf3a4a1....2d....8ed0bc....8cd836......05....36......2e"))
    {
        sVersion="2.3";
        bDetected=1;
    }
    else if(MSDOS.compareEP("a1....2d....8ed0bc....8cd836a3....05....36a3....2ea1....8ad4b1..d2ead3e08cd3368b2e....2e032e....fdfeca"))
    {
        sVersion="2.22";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","ALEC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("c1ed..1346..2e391cb9....f981c1....bb....81c3....2ec007..431346..4975..8e0000d518de3701e2c8......330ce8"))
    {
        sVersion="1.3";
        sOptions="1996 by rANDOM //UCF";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","ANS2ALL");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$be....bf....b9....8ccd81ed....8bdd83eb..8bd3fcfa909090909090"))
    {
        sVersion="0.9beta";
        sOptions="by ZeroCoder //XG";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("sfx","ARC SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8CC88CDB8ED88EC089......2BC3A3....89......BE....B9....BF....BA....FCAC32C28AD8"))
    {
        sVersion="1.10";
        sOptions="1986-89 by Wayne Chin and Vernon D. Buerg";
        bDetected=1;
    }
    else if(MSDOS.compareEP("558bec83ec..32c02ea2....2ea2....2ea2....8cd78ec78d7e..be....fcac3c..74..3c..76..3c..75..ac"))
    {
        sOptions="1988-89 by NoGate Consulting";
        bDetected=1;
    }
    else if(MSDOS.compareEP("558bec83ec..a1....2ea3....2ec606......8cd78ec78d7e..be....fcac3c..74..3c..76..3c..75..ac"))
    {
        sOptions="1988-89 by NoGate Consulting";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bb....8edb8c06....c706........8cd02bc3b9....d3e003c4fa8ed38be0fb05....b9....d3e8408cd303c3a3"))
    {
        sVersion="7.1";
        sOptions="1990 by System Enhancement Associates (SEA), Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("sfx","ARJ");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compare("'RJSX'",0x1c))
    {
        sVersion="old";
        bDetected=1;
    }
    else if(MSDOS.isSignaturePresent(0,Math.min(1000,MSDOS.getSize()),"'aRJsfX'"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","ASIC-Basic");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....8ed88ec033dbb4..cd108916....cc901ebf....8cc82d....8ed833c98a0e....83f9..72..b9....26be....fc"))
    {
        sVersion="5.0";
        sOptions="1994 by David Visti of 80_20 Software";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8ed88ec033dbb4..cd108916....1ebf....8cc82d....8ed833c98a0e....83f9..72..b9....26be....fc"))
    {
        sVersion="5.0";
        sOptions="1994 by David Visti of 80_20 Software";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","AVAST CRC-CHECK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$8cc82e0306....502eff36....CB"))
    {
        sVersion="7.70";
        sOptions="1999";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","AVPACK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("501E0E1F160733F68BFEB9....FCF3A506BB....53CB"))
    {
        sVersion="1.20";
        bDetected=1;
    }
    else if(MSDOS.compareEP("EB$$501E0E1F160733F68BFEB9....FCF3A506BB....53CB"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$8cda0316....8bda0316....3b16....76..ba....b409cd21cd208cd28bccfa8ed3bc....fb5251501e53b8"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Ada89");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$8cda8cc939d173$$1e0e1fb4..b0..ba....cd21b4..b0..ba....cd211f8cd9b8....8b1e....8ed88ec0"))
    {
        sOptions="1989 by RR Software, Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("converter","Adys COM2EXE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compare("'Ady'27",28))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file

init("protector","Adys Glue");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("2E........0E1FBF....33DB33C0AC"))
    {
        sVersion="1.10";
        bDetected=1;
    }
    else if(MSDOS.compareEP("2E8C06....0E0733C08ED8BE....BF....FCB9....56F3A51E075F"))
    {
        sVersion="0.10";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Aluwain");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8BEC1EE8....9D5E"))
    {
        sVersion="8.09";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","Amisetup loader");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....50b8....501e8cc88ed8e8$$$$9c5b81e3....539d9c5b81e3....81fb....74..c3"))
    {
        sOptions="by Robert Muchsel";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Anti-LAME");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("060e07bb....31c09090b9....268a0730e0268807fec443e2..078cc005....05....50b8....50b8....50c3"))
    {
        sOptions="by [ptPower";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Anti-hack encryption system");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$bd....33c08ec026c706........268c0e....8b46..26a3....268c0e....0e07"))
    {
        sOptions="by Rezaul Kabir //Shuvro";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Antilame");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fd2ad01e03fa33fe81d7....2efe06....12d30e0e0780f6..1f85fe33ff1216....b2..81d2....84e2ba....d1c232f7"))
    {
        sVersion="1.0b";
        sOptions="by Phantomlord";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","ApBasic");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$8cc02ea3....268b36....8cc88ed88ec08cc82e0106....2e0106....2ea1....2e8b16....33db2e"))
    {
        sVersion="1.2";
        sOptions="1987-89 by Comptech Software, Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$8cc02ea3....268b36....8cc88ed88ec08cc82e0106....2e0106....e8....2ea1....2e8b16....33db2e"))
    {
        sOptions="1991 by Comptech Software, Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("other","AutoHack addition");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("0e1fb409ba....cd21fa8e06....be....8b0e....83f9..74..fdd1e1"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Aztec C-86");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("bd....85ed75..8cdd2e8c1e....8b1e....2bdd81fb....76..8d9e....8cc02bd8b4..cd21bb....8ec5"))
    {
        sVersion="3.40";
        sOptions="1988";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bd....85ed75..b8....e9....2e8c1e....8ec5268c1e....bd....83c5..d1ddb1..d3ed81e5....8cc2"))
    {
        sVersion="3.40b";
        sOptions="1986";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bd....85ed75..8cdd8b1e....2bdd81fb....76..8d9e....8cc02bd8b4..cd21bb....8ec5268c1e....b1..d3e3"))
    {
        sVersion="5.2a";
        sOptions="1992";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bd....85ed75..b8....50e8....8ec5268c1e....bd....83c5..d1ddb1..d3ed81e5....8cc203ea268b1e....d3eb"))
    {
        sVersion="5.2a";
        sOptions="1992";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bd....85ed75..b8....509a........8ec5268c1e....bd....83c5..d1ddb1..d3ed81e5....8cc203ea268b1e....d3eb"))
    {
        sVersion="5.2a";
        sOptions="1992";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bd....85ed75..b0..e9....2e8c1e....8ec5268c1e....bd....83c5..d1ddb1..d3ed81e5....8cc203ea268b1e....d3eb"))
    {
        sVersion="5.2a";
        sOptions="1992";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8ed82e80........ba....75..e8....3d....75..e9$$$$8cc38edb2e891e....be....8a0c80f9..74..80f9..7e"))
    {
        sVersion="3.20x";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$3d....74..eb$$2ec606......502e891e....2e890e....2e8916....8cd82ea3....8cc02ea3....2e8936"))
    {
        sVersion="3.20x";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","BAT2EXEC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$fcbd....8b....8b......8b......b44acd21a1....8986....8b9e....ffe3"))
    {
        sVersion="1.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fcbd....8b....8b......8b......b44acd21a1....8986....8b9e....ffe3"))
    {
        sVersion="1.2";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","BSTAR_FORTH(16)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$8c0e....8c0e....a1....a3....e8....a3....a1....a3....e8....a3....a1....a3....e8....e8....8b0e....e3..1e8e06....a1"))
    {
        sVersion="0.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","BatLite");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$e8....bb....8bf3031e....891e....81fb....73..bb....8bfb891e....031e....81c3....8be3b1..d3eb43"))
    {
        sOptions="1991-95 by Pieter A. Hintjens (COM2EXE converted)";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","BetterBASIC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$fa2ec706........2e8c1e....b8....05....b1..d3e805....bb....83c3..d3eb8cc98ed1bc....2ec706........03c88ed903cb8ec1"))
    {
        sOptions="1984-86 by Summit Software Technology Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","BITLOK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$b430cd213c..72..2e8c1e....8cdb83c3..2e011e....0e1feb$$33c0eb$$bf....eb$$b9....eb$$51eb$$2bcf"))
    {
        sVersion="3.1";
        sOptions="by Yellow Rose Software Workgroup";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","BlacK FiST");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$061ee8....1f072ea1....2e8b1e....8cd12e2b0e....fa8ed1fb5053cb"))
    {
        sOptions="1993";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("extender","Blinker");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.isNE())
    {
        if(MSDOS.compare("'BLINKER'",MSDOS.getBaseOffset(0x18)))
        {
            bDetected=1;
            nOffset=MSDOS.getNEOffset(-0x1200);
            if(nOffset>0)
            {
                nOffset=MSDOS.findString(nOffset,0x1200,"Blinker ");
                if(nOffset!=-1)
                {
                    sVersion=MSDOS.getString(nOffset+8,4);
                }
            }
        }
    }
    else if(MSDOS.compareEP("e8$$$$558bec5053515256571e06fc8cc88ed8e8....bf....8845..8c"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$1e06fc8cc88ed8e8....bf....8845..8c1e....c41e....891d"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("compiler","Borland C/C++");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nOffset=0;
    if(MSDOS.compareEP("FB"))
    {
        nOffset=1;
    }
    if(MSDOS.compareEP("BA....2E8916....B430CD218B2E02008B1E2C008EDA",nOffset))
    {
        var nDataSeg=MSDOS.readWord(MSDOS.getEntryPointOffset(nOffset+1));
        nOffset=MSDOS.AddressToOffset(nDataSeg);
        bDetected=1;
    }
    else if(MSDOS.compareEP("8CCA2E8916....B430CD218B2E02008B1E2C008EDAA3"))
    {
        var nDataOfs=MSDOS.readWord(MSDOS.getEntryPointOffset(22));
        nOffset=MSDOS.AddressToOffset(0,nDataOfs-120);
        bDetected=1;
    }
    nOffset=MSDOS.findString(nOffset,64," - Copyright ");
    if(nOffset!=-1)
    {
        sVersion=MSDOS.getString(nOffset+13,4);
        if(MSDOS.compare("43",nOffset-1))
        {
            sName="Turbo C";
            if(sVersion=="(c) ")
            {
                sVersion=MSDOS.getString(nOffset+17,4);
            }
        }
        else if(MSDOS.compare("'Turbo'",nOffset-9))
        {
            sName="Turbo C/C++";
        }
        else if(sVersion=="1991")
        {
            sVersion="3.1";
        }
        else if(sVersion=="1994")
        {
            sVersion="4.X";
        }
        bDetected=1;
    }
    if(MSDOS.compareEP("b4..cd103c..74..b8....cd10ba....2e8916....8b2e....8b1e....8eda8c06....891e....892e....a1"))
    {
        sVersion="1991";
        bDetected=1;
    }
    else if(MSDOS.compareEP("ba....2e8916....b430cd218b2e....8b1e....8edaa3....8c06....891e....892e....e8"))
    {
        sVersion="1991";
        bDetected=1;
    }
    else if(MSDOS.compareEP("ba....2e8916....b430cd218b2e....8b1e....8edaa3....8c06....891e....892e....c43e....8bc78bd8"))
    {
        sVersion="1988";
        bDetected=1;
    }
//moved from Turbo C.sg
    else if(MSDOS.compareEP("BA....2E89......B4..CD218B......8B......8EDAA3....8C......89......89......C7..........E8....C4......8bc78bd8b9....26........75"))
    {
        sName="Turbo C";
        sVersion="1988";
        bDetected=1;
    }
    else if(MSDOS.compareEP("BA....2E89......B4..CD218B......8B......8EDAA3....8C......89......89......8cd22bea8b3e....81ff....73..bf....893e....b1"))
    {
        sName="Turbo C";
        sVersion="1988";
        bDetected=1;
    }
    else if(MSDOS.compareEP("BA....2E89......B4..CD218B......8B......8EDAA3....8C......89......53E8....0733FF2BDB8BC3B9....FCF2AEE3..4326......75..80"))
    {
        sName="Turbo C";
        sVersion="1990";
        bDetected=1;
    }
    else if(MSDOS.compareEP("FBBA....2E89......B430CD218B......8B......8EDAA3....8C......89......89......C706........E8....C4......8BC78BD8B9....2681"))
    {
        sName="Turbo C";
        sVersion="1987";
        bDetected=1;
    }
    else if(MSDOS.compareEP("FB8cca2E89......B430CD218B......8B......8EDAA3....8C......89......89......C706........E8....C4......8BC78BD8B9....2681"))
    {
        sName="Turbo C";
        sVersion="1987";
        bDetected=1;
    }
    else if(MSDOS.compareEP("BA....2E89......B430CD218B......8B......8EDAA3....8C......89......89......C706........8ec333c0b9....8bf88bd82681......75"))
    {
        sName="Turbo C";
        sVersion="1987";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cca2E89......B430CD218B......8B......8EDAA3....8C......89......89......C706"))
    {
        sName="Turbo C";
        sVersion="1988";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cca2E89......B430CD218B......8B......8EDAA3....8C......89......89......E8"))
    {
        sName="Turbo C";
        sVersion="1990";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cd8bb....8edb8cd38bccfa8e16....bc....fbe8....fa8ed38be1fbea"))
    {
        sName="Turbo C";
        sVersion="1988";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","Borland Pascal");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("9AFFFF00009AFFFF00005589E531C09AFFFF0000"))
    {
        sVersion="7.0*";
        bDetected=1;
    }
    else if(MSDOS.compareEP("B8....BB....8ED08BE38CD88EC00E1FA1....25....A3....E8....833E......75"))
    {
        sVersion="7.0*";
        sOptions="Protected Mode";
        bDetected=1;
    }
    else if(MSDOS.compareEP("B8....8ED88C......8CD38CC02BD88BC405....C1....03D8B4..CD210E"))
    {
        sVersion="7.0*";
        bDetected=1;
    }
    else if(MSDOS.compareEP("9a########ba....8eda8c06....33ed8bc405....b1..d3e88cd203c2a3....a3"))
    {
        sVersion="7.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("9a########ba....8eda8c06....33ede8....e8....8bc405....b1..d3e88cd203c2a3....a3....0306....a3....a3....a3....a3....8e06....26a1....a3....c706"))
    {
        sVersion="6.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("9a########06ba....8eda268b3e....8ec25b8bef83ed..1eb8....8ed8b9....2bc8d1e1"))
    {
        sVersion="6.0-7.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("9a########ba....8eda8c06....8bc405....a3....8c16....05....b1..d3e88cd203c2a3....a3"))
    {
        sVersion="6.0-7.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("9a########ba....8edae8....8c06....33ed8bc405....b1..d3e88cd203c2c706"))
    {
        sVersion="6.0-7.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("9a########5589e50ee8$$$$5589e583ec..31c0"))
    {
        sVersion="6.0-7.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("9a########ba....8eda8c06....8bc405....b1..d3e88cd203c2a3....a3....26a1....2d....a3....c706"))
    {
        sVersion="4.0-6.0";
        sOptions="1987";
        bDetected=1;
    }
    else if(MSDOS.compareEP("9a########54583bc475..9c585080cc..509d9c589d80e4..75..bb....e8....b8....cd21ba....8eda"))
    {
        sVersion="6.0-7.0";
        sOptions="1992 by Borland & Eagle Performance Software";
        bDetected=1;
    }
    else if(MSDOS.compareEP("9a........5589e5bf....0e57e8$$$$f9"))
    {
        sName="Turbo Pascal";
        sVersion="6.0-7.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("9a########b8....8ed88c06....cb"))
    {
        sName="Turbo Pascal";
        sVersion="6.0-7.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("9a########ba....8eda8c06....b430cd2186c43d....73..0e1f"))
    {
        sName="Turbo Pascal";
        sVersion="6.0-7.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("31ed9a########2e8e1e....b451cd21891e....803e......74..f706........74..e8"))
    {
        sName="Turbo Pascal";
        sVersion="6.0-7.0";
        bDetected=1;
    }
    if(MSDOS.compareEP("9a########f860f972..8bdc36c51f83c3..807f....74..807f"))
    {
        sName="Turbo Pascal";
        sVersion="6.0-7.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("9A0000"))
    {
        var nDataSeg=MSDOS.readWord(MSDOS.getEntryPointOffset(3));
        var nOffset=MSDOS.AddressToOffset(nDataSeg);
        nOffset=MSDOS.findSignature(nOffset,Math.min(1024,MSDOS.getSize()-nOffset),
                                    "'Portions Copyr	ight (c) 1983,9'..' Borland'");
        if(nOffset!=-1)
        {
            switch(MSDOS.getString(nOffset+29,1))
            {
            case "0": sVersion="5.0"; sName="Turbo Pascal"; break; // guess
            case "1": sVersion="6.0"; sName="Turbo Pascal"; break; // guess
            case "2": sVersion="7.0"; break;
            }
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","Borland RTM DPMI loader");

function getBLVersion()
{
    var sResult="";

    var nOffset=MSDOS.findString(0,MSDOS.getSize(),"RTM loader version")

    if(nOffset!=-1)
    {
        sResult=MSDOS.getString(nOffset+19);
        sResult=sResult.substr(0,sResult.indexOf(' '));
    }

    return sResult;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....8ed8b8....bb....8ed08be38926....0626......8ec0263b......74..e9"))
    {
        sVersion="1.0-1.5";
        bDetected=1;
    }

    if(bDetected)
    {
        var sBL=getBLVersion();
        if(sBL!="")
        {
            sVersion=sBL;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("debug","Borland TLINK Symbol Table Present");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareOverlay("FB52"))
    {
        sVersion=(MSDOS.readByte(MSDOS.getOverlayOffset()+0x3)+MSDOS.readByte(MSDOS.getOverlayOffset()+0x2)/100);

        sOptions="TDS";
        bDetected=1;
    }
    
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("linker","Borland TLINK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nVer=MSDOS.readWord(0x1E);
    if((nVer&0xFF)==0xFB)
    {
        sVersion=((nVer>>8)/16).toFixed(1);
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Bunny");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fae9$$$$8cc02ea3....8cd82ea3....8cd02ea3....8bc42ea3....8cc88ed88ec08ed0bc....e8"))
    {
        sVersion="4.1";
        sOptions="1993 by M.Bunjes";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","CC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....ba....3be073..b409ba....cd21b8....cd218bdc81eb....83e3..fcbe....8bfbb9....f3a48bc3b1..d3e88cc903c15033c050cb"))
    {
        sVersion="1.0";
        sOptions="1991 by B.Vorontsov";
        bDetected=1;
    }
    else if(MSDOS.compareEP("ba....b430cd213c..73..33c00650cbb9....b8....eb$$05....fc80c4..eb"))
    {
        sVersion="2.61 Beta";
        sOptions="by UniHackers";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","CEPexe");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8cdd0e070e1fbf....be....b9....fcf3a41f5f8f..8f....8f....8c....8f....8f....595f5e8cc88ec08ed8ea"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","CERBERUS");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("9C2BED8C....8C....FAE4..88....1607BF....8EDD9BF5B9....FCF3A5"))
    {
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","CII-C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$dbe3fcb8....8ed88c06....26a1....3b06....76..2b06....8cdf81c7....3bf873..8bc7be....3bf0"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("dbe3fcb8....8ed88c06....26a1....3b06....76..2b06....be....3bf073..2bc63b06....72..3b06"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$dbe3fcb8....8ed88c06....26a1....3b06....76..2b06....be....3bf073..2bc63b06....72..3b06"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","COMCRYPT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$b9....be....89f70e1f0e07bb....fcad31d8abe2"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$eb$$5053575152061e572e8b36....81c6....8a5c..2e881e....8a5c"))
    {
        sVersion="1.0b";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","COMPACK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("BE....E8....5D83....55505351520E070E1F8BCE"))
    {
        sVersion="4.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("BD....50068CCB03DD8CD24B8EDBBE....BF....8EC2B9....F3A54A4D75"))
    {
        sVersion="5.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","COMPROTECT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....15....72..8ac4bb....50515253555657061e50b8....58eb"))
    {
        sVersion="2.10";
        sOptions="1988-95 by Ralph Roth (converted to exe)";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","CONVOY++");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$2e8c06....2ea3....b8....cd2f3c..75..b8....ba....0e1fcd21b8....cd21"))
    {
        sOptions="1993 by ELIAS Copy-Protection System";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$2e8c06....2ea3....e8$$$$5056571e062e8b3e....2e8106........2e893e....0e0733c08ed833f6b9"))
    {
        sVersion="3.2";
        sOptions="1993 by ELIAS Copy-Protection System";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("immunizer","Central Point Anti-Virus");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e8$$$$5b81eb....50515256578beb1e2ec6........268e......061fb9....bf....8bc7eb"))
    {
        sVersion="1992-1993";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","CRYPACK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("EB..061E8CD805....8ED833DB0E0733FFBE....8A0726....32C48807473BFE"))
    {
        sVersion="3.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","CRYPTEXE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("EB..8BDCEB..EA........01EA83FC..74..EB"))
    {
        sVersion="1.04";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$8bdceb$$bc....eb$$83fc..74..eb$$cd20eb$$8be3"))
    {
        sVersion="1.04";
        bDetected=1;
    }
    else if(MSDOS.compareEP("2e8c1e....eb$$fa50b8....58eb$$eb$$8bdceb$$bc....eb$$83fc..eb$$74..fa"))
    {
        sVersion="1.01b";
        sOptions="1996 by DoP";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","CSCRYPT Pro");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8d36....565f81ef....b8....81ef....81c0....81f7....2e2935474781c6....e9"))
    {
        sVersion="3.30/386";
        sOptions="1995-97 by Christian Schwarz";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","CWSDPMI");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8b2e....ba....8eda8c06....2bea8b3e....81c7....b1..d3ef473bef72..bf....3bef77..8bfd8bdfd3e7"))
    {
        sVersion="0.90+ (r4)";
        sOptions="1997 by Charles W. Sandmann";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$8b2e....ba....8eda8c06....2bea8b3e....81c7....b1..d3ef473bef72..bf....3bef77..8bfd8bdfd3e7"))
    {
        sVersion="0.90+ (6b)";
        sOptions="2001 by Charles W. Sandmann";
        bDetected=1;
    }
    else if(MSDOS.compareEP("ba....8eda8cd32bdac1e3..8ed203e38c06....fcb430cd213c0373..b0..ba....e9"))
    {
        sName+=" (ELFstub)";
        sVersion="1.00";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","CauseWay DOS Extender");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fa161f26a1....83e8..8ed0fb061607be....8bfeb9....f3a407368c......8bd88cca3603......368b......fd8bc53d....76"))
    {
        sVersion="3.1x-3.4x";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$8be88cc60e1f8cc005....0106....b8....cd213c..73..b8....cd21803e......74..8cc005....0306....268b16....3bc273..8ec0a1....33ff"))
    {
        sVersion="2.64, 3.25";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","CHZ SFX (ChSFX)");

function getChSFXVersion()
{
    var sResult="";
    var nStringOffset=MSDOS.findString(0,Math.min(0x100,MSDOS.getSize()),"ChSFX");
    if(nStringOffset!=-1)
    {
        sResult=MSDOS.getString(nStringOffset+6);
        sResult = sResult.replace(/\s+$/, '');
    }

    return sResult;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("ba....e8$$$$1e0e1fe8$$$$52568bf2fcb4..eb$$ac0ac075"))
    {
        sVersion=getChSFXVersion();
        bDetected=1;
    }
    else if(MSDOS.compareEP("8d16....e8$$$$1e0e1fe8$$$$52568bf2fcb4..eb$$ac0ac075"))
    {
        sVersion=getChSFXVersion();
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Ciphator");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("9393E8$$$$586A..0E68....CF"))
    {
        sVersion="4.6";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

// CodeRunneR is an effective tool for creating new TSRs and porting existing applications to a TSR environment.
// http://www.drdobbs.com/msis-coderunner-makes-your-tsrs-run/184402267?pgno=5

init("other","CodeRunneR");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$e8$$$$fc5e8cdaa1....bd....8edd8ec5a3....b9....bf....2bcf33c02ea3....41d1e9f3ab8916"))
    {
        sOptions="1989 by Micro Systems Software, Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$e8$$$$fc5e8cda8b1e....bd....8edd8ec5b9....bf....2bcf33c02ea3....41d1e9f3ab891e"))
    {
        sOptions="1989 by Micro Systems Software, Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$e8$$$$fc5e8cdaa1....bd....8edd8ec5a3....b9....bf....2bcf33c02ea3....d1e9f3ab8916"))
    {
        sOptions="1992 by OP";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Codesafe");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$5033c08ec02ef606......74..26ff36....061e07e8....07268f06....fb2e8c1e....26ff36....268f06"))
    {
        sOptions="by EliaShim Ltd";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","ComProtector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("E9....E8....5E8BEE81......8D......B9....F61446E2..4B"))
    {
        sVersion="1.0b";
        bDetected=1;
    }
    else if(MSDOS.compareEP("E9....B9....BB....BF....2E....34..FEC8C0....2E....2E....2E....4743E2"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","ComprEXE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fc1e068cdd83c5..89e8ba....8b1e....29d3538ed88ec331f631ffb9....f3a540434a75..b8....50cb"))
    {
        sVersion="1.0";
        sOptions="by Tom Torfs";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","Compress-EXE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("9c508cdb53530e1f83c3..33ff8ec38bd3015d..015d..b9....be....fc32e4ac3c..77"))
    {
        sVersion="1.0";
        sOptions="1990 by W.ZhongHua";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Concurrent Small C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....8ed826a1....2d....80fc..72..9090b8....b1..d3e0fa8cdb8ed38be050fbb8....2d....d3e08bd8fec7fec73b..72..9090"))
    {
        sVersion="1.0";
        sOptions="1996 by Andy Yuen";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Copy Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("2EA2....5351521E06B4..1E0E1FBA....CD211F"))
    {
        sVersion="2.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("E9....505351521E0657E8....5F83EF..B4..1E0E1F"))
    {
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","CopyQM SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$b8....8ec0a1....26a3....268c1e"))
    {
        if(MSDOS.compareOverlay("'TX'"))
        {
            sVersion="3.24";
            sOptions="1996 by Sydex";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Copylock PC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("0e1fb9....bf....8135....83c7..e2"))
    {
        sOptions="1990 by Rob Northen Computing";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","CrAcKeR");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$be....8bfe5633c0be....ac02e081fe....72..5eac34..aa81fe....72"))
    {
        sVersion="0.2a";
        sOptions="by Deu$";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","CrackStop");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("B4..BB....B9....8BECCD21FAFC03....05....FFE0"))
    {
        sVersion="1.x";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bd....be....ffe6"))
    {
        sVersion="1.0b";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Cruncher");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("2E........2E......B430CD213C0373..BB....8EDB8D......B409CD210633C050CB"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","CryExe");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("E9$$$$E9$$$$E9$$$$BB....E8$$$$31EDEB$$8EDDEB$$872FE8$$$$E8$$$$55E9$$$$E9$$$$31C0EB$$EB$$E8"))
    {
        sVersion="4.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("crypter","Cryptor by Dismember");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("1E8CDA83....8EDA8EC2BB....BA....85D274..B4..33FF33F6B9....AC32C4C0....02..2E........AAE2"))
    {
        sVersion="1.3";
        bDetected=1;
    }
    else if(MSDOS.compareEP("0E179C58F6....74..E9....1EB0..E6..8CDA83....8EDA8EC2BB....BA....85D274..B4..33FF33F6B9"))
    {
        sVersion="1.7";
        bDetected=1;
    }
    else if(MSDOS.compareEP("0E179C58F6....74..EB$$b0..e6..33c9e2..b430cd213c..73..33c00650cb"))
    {
        sVersion="1.7";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fa061e8cdd83c5..2e012e....2e012e....e8....e8....1f072e8e16....2e8b26....fb2eff2e"))
    {
        sVersion="2.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$bf....8bf7acad918ae157ac32c4f6d0d0c412e1aae2"))
    {
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Crypt by LightShow //ECLIPSE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$eb$$8cc8fa8ed0bc....fb8cc0bb....83e8..8ed833f64b8ccd8cc02ea3....33c08ec026a1....2ea3....26a1"))
    {
        sVersion="1.21";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$8cc883e8..8ed833f68ccb8cc02ea3....2bc08ec08bf8b9....26ff36....26ff36....26894d..26895d..b9"))
    {
        sVersion="1.15";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$eb$$8cc8fa8ed0bc....8cc0bb....83e8..8ed833f64b8ccd8cc02ea3....5333c08ec0268c0e....26c706........1f"))
    {
        sVersion="1.20";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$8cc8fa8ed0bc....fb8cc0bb....83e8..8ed833f64b8ccd8cc02ea3....33c08ec026a1....2ea3....26a1"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$2e8b36....2e8974..8ccb8cc02e8944..2bc08ec08ed88bf82e8b4c..81c1....6a..ff36....ff36....894d..895d"))
    {
        sVersion="1.11";
        sOptions="1994";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","CryptCom");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$be....56b9....c704....c644....8134....4646e2..31f631c9c3"))
    {
        sVersion="2.0";
        sOptions="by Nowhere Man";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","CrypteXeC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("FD25....E8....3EBA....EC0C..26EE..B9....5151..87C9"))
    {
        sVersion="1.01";
        bDetected=1;
    }
    else if(MSDOS.compareEP("06b4..cd2107e8....acac3ee8....d7e9"))
    {
        sVersion="1.01";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("crypter","Cryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b2..33f6b9....2e30144649e3..eb..b8....ffe0"))
    {
        sOptions="by Rainor'99";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e8ccb8edbbb....8177......8177......8177......8177......8177......1f0eeb"))
    {
        sOptions="by Papaev V.V., Moscow";
        bDetected=1;
    }
    else if(MSDOS.compareEP("50e8$$$$5b9c5825....509d8ccb81c3....81eb....53bb....53cb"))
    {
        sOptions="1990-92 by Sergdesign";
        bDetected=1;
    }
    else if(MSDOS.compareEP("81c3....eb$$85fa85e8eb$$81c3....eb$$bb....81eb....81c3....f981e9....39f5ba....81ea....85de"))
    {
        sOptions="by eGIS! //CORE";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bd....8cdb83c3..8cd805....8ed88ec033ffbe....b9....ba....0bc975..0bd274..4ae8....eb..561e"))
    {
        sOptions="1994 by FalCoN";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$e8$$$$bf....e9$$$$31d2eb$$eb$$e9$$$$8edae9$$$$e8$$$$8715e9$$$$52eb$$31f6e8$$bb....eb$$8737e9$$$$56e9$$$$e9$$$$e8$$$$bf....bb....2e8a1789d8"))
    {
        sOptions="by Matrix Technologies";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$eb$$bf....e9$$$$29f6e8$$$$e9$$$$8edee8$$$$8735e8$$$$56e9$$$$e9$$$$31ede9$$$$bb....e9$$$$e8$$$$e9$$$$e8$$$$e9$$$$e9$$$$e8$$$$e8$$$$e8$$$$872f"))
    {
        sOptions="by Matrix Technologies";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$33ed83ed..2ed0....5e0e8bfe81e7....f7df03fe2e893526a1....8ec0263b06....74..f92eff35"))
    {
        sOptions="by DREAMMASTER";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$e8$$$$eb$$e4210c..e62133c08ed80e50558becc746......5dfa8f06....8f06....fb9c580d....509d"))
    {
        sOptions="by RaZoR 1911";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$e80000fa9cfc505393584c4c3bc35b74..9de8....32e480c4..3065..47e2"))
    {
        sName+=' N1';
        sOptions="by ZeroCoder //XG";
        bDetected=1;
    }
    else if(MSDOS.compareEP("3beb81c5....fc23eb13ec85fd1e0e33e985ee01ed23ee1f0e81d1....84e931dd073efe0e....e9"))
    {
        sOptions="1996 by RAM Scanner //CiD";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....15....72..d4..8ac4..c3....8ed8b9....f7d32e871e....ff77..ff378becc747......8c0f"))
    {
        sOptions="by Thunderbyte";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....15....72..d4..8ac4..c3..8ed8b9....f7d32e871e....ff77..ff378becc747......8c0f"))
    {
        sOptions="by Thunderbyte";
        bDetected=1;
    }
    else if(MSDOS.compareEP("2e8c1e....2e8e06....33ff33f6b9....0e1f030e....f3a406b8....500e07cb"))
    {
        sOptions="1994 by Paragon Technology Systems";
        bDetected=1;
    }
    else if(MSDOS.compareEP("87dbb8....15....72$$8cd315....72..d4..8ac483c3..8ed8b9....f7d32e87"))
    {
        sOptions="1997 by Thunderbyte";
        bDetected=1;
    }
    else if(MSDOS.compareEP("50e8$$$$5b83c3..1e06530e1f83c3..90b0..b9....2e3007fec043e2"))
    {
        sOptions="by Dr. Motorhead";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","DAEMON Protect");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("60609C8CC932C9E30C520F014C24FE5A83C20C8B1A9D61"))
    {
        sVersion="0.6.7";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","DCREXE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e8$$$$52e8$$$$5a83c2..ffe2"))
    {
        sVersion="2.0";
        sOptions="by LuCe"
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$53e8$$$$5b83c3..ffe3"))
    {
        sVersion="2.0";
        sOptions="by LuCe"
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","DIET");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("BF....3BFC72..B44CCD21BE....B9....FDF3A5FC"))
    {
        sVersion="1.00/1.00d";
        bDetected=1;
    }
    else if(MSDOS.compareEP("FC061E0E8CC801......BA....03............................00000000"))
    {
        sVersion="1.00d";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fc061e0e8cc80106....ba....03c28bd805....8edb8ec033f633ffb9....f3a54b484a79..8ec38ed8be....ad8be8b2..ea"))
    {
        sVersion=MSDOS.compareEP("64",55)?"1.10a/1.20":"1.00";
        bDetected=1;
    }
    else if(MSDOS.compareEP("BE....BF....B9....3BFC72..B44CCD21FDF3A5FC"))
    {
        sVersion="1.02b/1.10a/1.20";
        bDetected=1;
    }
    else if(MSDOS.compareEP("F89C061E5756525153500EFC8CC8BA....03D052"))
    {
        sVersion="1.44/1.45f";
        bDetected=1;
    }
    else if(MSDOS.compareEP("F99CEB$$061e5756525153500efc8cc82e0106....ba....03c28bd805....8edb8ec033f633ff"))
    {
        sVersion="1.43/1.44";
        bDetected=1;
    }
    else if(MSDOS.compareEP("F99CEB$$061e5756525153500efc8cc8ba....03d052ba....52ba....03c28bd805....8edb"))
    {
        sVersion="1.45f";
        bDetected=1;
    }
    else if(MSDOS.compareEP("061e0efc8cc80106....ba....03c28bd805....8edb8ec033f633ffb9....f3a54b484a79"))
    {
        sVersion="1.44b";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","DMC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$2e8c16....2e8926....2ea3....8cc88ed0bc....2ea1....505351525657551e060e1f8c06....a1"))
    {
        sVersion="3.5";
        sOptions="by Adlersparre & Associates"
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("loader","DOS32 loader");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8cd88ccb2bd88bc4b1..d3e803d843b4..cd218e06....8cd80e1fa3....a3....a3....fc33c033ffeb"))
    {
        sVersion="3.3";
        sOptions="1995 by Adam Seychell";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","DOS32");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("0e1ffc9c5b8bc380f4..509d9c583ae775..ba....b409cd21b44ccd218c06....26a1....a3"))
    {
        sVersion="3.3";
        sOptions="1995 by Adam Seychell";
        bDetected=1;
    }
    else if(MSDOS.compareEP("0e1f068c06....26a1....a3....8ec06633ff6633c96649fc32c0f2ae26380575..83c7"))
    {
        sVersion="3.0";
        sOptions="by Adam Seychell";
        bDetected=1;
    }
    else if(MSDOS.compareEP("0e1ffc9c5b8bc380f4..509d9c5838fc75..ba....b409cd21b44ccd21"))
    {
        sVersion="3.5c rev6";
        sOptions="1995 by Adam Seychell";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("extender","DOS/4G");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.isSignaturePresent(0,Math.min(1024,MSDOS.getSize()),"'DOS/4G'"))
    {
        bDetected=1;
    }
    else if(MSDOS.isSignaturePresent(0,Math.min(1024,MSDOS.getSize()),"'DOS4GW'")
          ||MSDOS.isSignaturePresent(MSDOS.getNEOffset()-1024,1024,"'dos4gw'"))
    {
        sName+='W';
        bDetected=1;
    }
    else if(MSDOS.compareEP("BF....8ED781C4....BE....2BF78BC6B1..D3E04836A3....368926....BE....468936....8CC32BDEF7DBB4..CD21368C"))
    {
        sOptions="1987-1993";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","DOSX16");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$b430cd213c0372..b8....ba....2bc2268b1e....2bd8b1..d3e08bc881fb....72..1e068eda8ec333f6"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$b430cd213c0372..b8....ba....2bc2268b1e....81eb....2bd8b1..d3e08bc881fb....72..1e068eda8ec333f6"))
    {
        sVersion="type 1";
        sOptions="CodeView";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$b430cd213c0372..e8$$$$56571e060e1fb8....cd213c0372..77..80fc..72..b452cd2126a1....3d"))
    {
        sVersion="type 2";
        sOptions="CodeView";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$8cc8fa8ed0bc....fb0e1f8c06....c406....a3....8c06....e8....b8....b1..d3e805....a3....e8"))
    {
        sVersion="type 3";
        sOptions="CodeView";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$b8....8ed88c06....8ed0bc....50bb....b44acd21588ec0"))
    {
        sVersion="type 4";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","DOS/16M DOS Extender");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("bf....8ed781c4....be....2bf73689......8bc6b1..d3e04836a3....be....468936....8cc32bdef7dbb44acd21368c......1607fcbf....b9....2bcf33c0"))
    {
        sOptions="1991 by Rational Systems, Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bf....8ec78ed7bc....368c......ff36....268f......be....ac8ad8b7..88388b3e....4f8ec726a1....36f726....4836a3....8e06....33c08bc8f7d18bf8f2ae26"))
    {
        sOptions="1994 by Tenberry Software Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bf....8ec78ed7bc....368c1e....ff36....368f06....be....ac8ad8b7..88388b3e....4f8ec726a1....36f726....4836a3....8e06....33c08bc8f7d18bf8f2ae26"))
    {
        sOptions="1995 by Tenberry Software";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bf....8ec78ed7bc....368c1e....ff36....368f06....be....ac8ad8b7..883816078b3e....4f8ec726a1....36f726....4836a3....8e06....33c08bc8f7d18bf8f2ae26"))
    {
        sOptions="1994 by Rational Systems, Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bf....8ec78ed7bc....368c1e....1607be....ac98508b3e....4f8ec726a1....c1e0..4836a3....8e06....33c08bc8f7d18bf8f2ae26"))
    {
        sOptions="1993 by Rational Systems, Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bf....8ed781c4....be....2bf7368926....368926....8bc6b1..d3e04836a3....be....468936....8cc32bdef7dbb4..cd21"))
    {
        sOptions="1989 by Rational Systems, Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","DOS/32A DOS Extender");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fb0e1f8c1e....8c06....8c16....26a1....a3....fce8....e8....e8....8cd0268b36....05"))
    {
        sVersion="R9-07.0101.2011";
        sOptions="1996-98, 2002 by Narech Koumar (Supernar Systems, Ltd.)";
        bDetected=1;
    }
    else if(MSDOS.compareEP("0e1f8cc08cd3a3....2bd88bc4d1e8d1e8"))
    {
        sVersion="R8-07.0101.0076";
        sOptions="1996-98, 2002 by Narech Koumar (Supernar Systems, Ltd.)";
        bDetected=1;
    }
    else if(MSDOS.compareEP("0e1f8c1e....8c06....8c16....26a1....a3....fbfce8"))
    {
        sVersion="04-20-06";
        sOptions="1996-2006 by Narech Koumar (Supernar Systems, Ltd.)";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","DSHIELD");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("06E8....5E83EE..16179C58B9....25....2E"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Deeper");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("90e9$$$$e8000059fa8bdc36c747......36837f....75..fb66fafb8be981ed....81e9....be....8dbe....668b05668904"))
    {
        sVersion="1.0c";
        bDetected=1;
    }
    if(MSDOS.compareEP("90e9$$$$e80000fa8bdc36c747......36837f....75..fb598be981ed....81e9....be....8dbe....668b05668904"))
    {
        sVersion="1.0a";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("other","DemoMaker");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("be....ad8ed833f6b8....8ec0bf....b9....ac3c..75..3a0474..e2..b8....8ed8b409ba....cd21b8....cd21"))
    {
        sVersion="1.55";
        sOptions="1993-94 by R.Janorkar";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","DexEXE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8b2e....2e8c0e....2e8c0e....83ed..8ed5bc....501eba....f91bea8ec58cc805....8ed80e06fc33f68bfe8adeb1..d3e2d2ebb8....74..b9....f3a5"))
    {
        sVersion="2.1";
        sOptions="by Kaljevic Dejan";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Digital Research C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$0e17bc....a1....8cdb0e1f891e....a3....8cc80306....a3....b9....2bdb8bf3bf....8cc803050306"))
    {
        sVersion="1.1";
        sOptions="1983";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("sfx","Disk eXPress");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareOverlay("be9b8710415302"))
    {
        if(MSDOS.compareEP("fca3....891e....49890e....bb....8c1f83e4..8967..b8....50"))
        {
            sOptions="1991-93 by Albert J. Shan";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","E-PROT 386+");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("81f8....be....90bd....2e8076....454e75"))
    {
        sVersion="1.0.3";
        sOptions="2000 by MasterBall Systems, Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","EEXE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("B430CD213C0373..BA1F000E1FB409CD21B8FF4CCD21"))
    {
        sVersion="1.12";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b430cd213c..73..0e1fb409ba....cd21b8....cd21"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","EMMXXXX0 check by Symantec");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....cd213c..73..0e1fba....b409cd210633c050cb8cd88ccbfabc....8ed3fbfc8ec3bf....be....b9....fc"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","EMX DOS Extender");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....8ed88c06....e8....e8....e8....e8"))
    {
        sVersion="0.8f-0.9d";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8ed88cd88ed0bc....e8....3c..72..26a1"))
    {
        sVersion="0.8f";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","EPW");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("06571e5655525153502e8c......8cc005....2ea3....8ed8a1"))
    {
        sVersion="1.2";
        bDetected=1;
    }
    else if(MSDOS.compareEP("06571E5655525153502E8C0608008CC083"))
    {
        sVersion="1.30";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$06571e565552515350bb....81c3....2e8b078ccb03c305....50b8....50cb"))
    {
        sVersion="1.20";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","EXARJ small");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fcbb....e8....b430cd218bd8063c..72..8e06....33c08bf8b9....f2aeae75..40af061f8bd775..e8"))
    {
        sOptions="1994 by Jakub Jelinek";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","EXE Manager");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b4301e06cd212ea3....bf....b9....33c02e....47e2..2e3b06....74..b8....cd1033c050cb"))
    {
        sVersion="3.0";
        sOptions="1994 by Solar Designer";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","EXE Packer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("1E068CC383....2E........B9....8CC88ED88BF14E8BFE"))
    {
        sVersion="7.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("EB$$1E068CC383....0E1F011E....011E....BE....B9....FCAD3BC174"))
    {
        sVersion="7.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","EXE encryption");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("501e068cc88ed88ec0e8....5b81eb....2ae4be....03f3882446fec40ae475..8b87....ba....f7e28987"))
    {
        sOptions="1992 by E.Akulow";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","EXE-Crypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("90eb$$2e8c......2e89......8cc88ed0bc....1e060e1f8cc005....8ec01ee8....1f8cc3be....2e8b......83....74"))
    {
        sVersion="1.00";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("crypter","EXE-Cryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$1e062e8c06....fc0e1fe8$$$$8cc9bb....83c5..5e2ead1e2e81"))
    {
        sOptions="1993-1995 by Rolle&Schild"
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$1e062e8c06....fc0e1ffa8bec8c4e..c746......fe0e....f972..ba....0e1fbb....8b0e"))
    {
        sOptions="1992 by RKT-LANDMARK"
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$1e062e8c06....fc0e1f8926....8306......fa8c0e....fe0e....f972..ba....0e1fbb"))
    {
        sOptions="by RKT-LANDMARK"
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","EXE-Protect");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e800005d81ed....1e06..1fb4..8db6....b9....8a1446cd21909090"))
    {
        sOptions="by Phrozen Crew";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","EXE2COM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b3..b9....33d2be....8bfeac32c3aa494332e403d0e3..eb"))
    {
        sVersion="9.50a";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$92be....bf....fca5a48ccb83c3..b9....ad97011de2"))
    {
        sOptions="1996 by EM-Phaser";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$e9$$$$8cca81c2....3b16....76..ba....b409cd21cd20"))
    {
        sOptions="generic, type 2";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$bf....be....a5a48cda83c2..50b4..bb....cd21580116....81c2....8ed2"))
    {
        sOptions="0-Relocs by dR.No //ViP";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","EXECUTRIX-COMPRESSOR");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$0e1fa3....8c1e....8c1e....268b......89......8ccbb8....05....05....2bc3a3....8cd01e5b2bc3a3....b430cd21"))
    {
        sOptions="by Knowledge Dynamics Corp";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","EXEGUARD");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("BA....BF....EB$$E8$$$$53BB....EB$$EB$$5B0E075051535653BB....EB"))
    {
        sVersion="1.3";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","EXEHigh");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8cca8b2e....8eda8c06....8cda2bea8b3e....81ff....73..bf....893e....81c7....033e....b1..d3ef47d3e7fa"))
    {
        sVersion="1.01";
        sOptions="by NoddegamrA";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","EXEPACK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8cc005....0e1fa3....0306....8ec08b0e....8bf94f8bf7fdf3a4"))
    {
        switch((MSDOS.readByte(18)<<8)|MSDOS.readByte(20))
        {
        case 0x0010: sVersion="3.65"; break;
        case 0x9910: sVersion="4.00"; break;
        case 0x1510: sVersion="4.03"; break;
        case 0x0012:
        case 0x0112: sVersion="4.06"; break;
        case 0x0014:
        case 0x2d10:
        case 0x7c10: sVersion="4.00 - 4.06"; break;
        case 0x8410: sVersion="4.0x (possibly)"; break;
        }
        bDetected=1;
    }
    else if(MSDOS.compareEP("428cc005....0e1fa3....0306....8ec08b0e....8bf94f8bf7fdf3a4"))
    {
        if(MSDOS.readByte(18)==0x00&&MSDOS.readByte(20)==0x10)
        {
            sVersion="3.65";
        }
        bDetected=1;
    }
    else if(MSDOS.compareEP("..52428be88cc005....0e1fa3....0306....8ec0..0e....8bf94f8bf7fdf3a4"))
    {
        if(MSDOS.readByte(18)==0x00&&MSDOS.readByte(20)==0x10)
        {
            sVersion="3.65";
        }
        bDetected=1;
    }
    else if(MSDOS.compareEP("8be88cc0......0e1fa3....0306....8ec08b0e........4f8bf7fdf3a4"))
    {
        if(MSDOS.readByte(20)==0x10)
        {
            sVersion="3.69";
        }
        else if(MSDOS.readByte(18)==0x00&&MSDOS.readByte(20)==0x12)
        {
            sVersion="5.31.009";
        }
        bDetected=1;
    }
    else if(MSDOS.compareEP("8be88cc0......0e1fa3....0306....06b8....06008b....8bf7fdf3a450b8....50cb"))
    {
        sVersion="5.31.009";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8bc6f7d0d3e88cda2bd073..8cd82bd2d3e003f08eda8bc7"))
    {
        sVersion="3.65";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","EXETools COM2EXE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e800005d83ed..8cda2e8996....83c2..8eda8ec22e0196....60bb....ba....85d274..b4..33ff33f6b9....ac"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","EXETools");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e800005d83ed..1e8cda83c2..8eda8ec2bb....ba....85d274..b4..33ff33f6b9....ac32c4c0c4"))
    {
        sVersion="2.1 /E";
        bDetected=1;
    }
    else if(MSDOS.compareEP("68....68....68....be....bf....57b9....f3a4c3"))
    {
        sVersion="2.1 /E";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Easy!-C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("9c55568ccd83c5..8db6....56be....56cb"))
    {
        sOptions="1993 by Flight Technologys"; //spelling taken from file
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Eliashim's CodeTrack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$502e8c06....33c08ec02ef606......74..26ff36....062e8e06....e8"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Encriptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("EB..B9....BE....BF....ACD0C8AAE2..BE....BF....ACAA"))
    {
        sVersion="1.00c";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Enkryptonator");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("1e1eb430cd21b4..3c..73..cd21be....e8....e8....e8....1f07e9"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","ExeCode");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("E9$$$$FA8CC302DF5033C02E8C16....2E8926....8ED0BC....BE....B9....33FF2EC706........32DBB0..E664AC"))
    {
        sVersion="1.0";
        sOptions="1995 by Balazs Scheidler";
        bDetected=1;
    }
    else if(MSDOS.compareEP("E9$$$$8be8ba....b409cd212ea1....8cc303c3b1..2e8b1e....f7c3....74..83c3..d3eb2e891e....be....bf....b9....f3a5"))
    {
        sVersion="1.0 unregistered";
        sOptions="1995 by Balazs Scheidler";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","ExeLITE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fc8cc80106....ba....03c28bd805....8edb8ec033ff33f6b9....f3a5484b4a75..8ec38ed8be"))
    {
        sVersion="1.00";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....bb....0e5a03c20e5053cb"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","EXELock666");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("068CC88EC0BE....26....34..26....4681......75..40B3..B3..F3"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("ba....bf....eb$$e8$$$$53bb....eb$$eb$$5beb$$0633c08ec0b8....26a3....268c0e....075052faba....b0..ee"))
    {
        sVersion="1.0x";
        sOptions="by ST!LLS0N";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","F-XLOCK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("505050535152561e8bdc8cd805....368947..36c747......8e1e....33db8b07433d....74..75..43833f..75..4343"))
    {
        sVersion="1.16";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","FACRYPT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("B9....B3..33D2BE....8BFEAC32C3AA494332E403D0E3"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("bc....c3") && MSDOS.compare("'FCP/IV'", MSDOS.getEntryPointOffset()-6))
    {
        sOptions="by FCP/IV";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","FSE by ZeNiX Yang //pCE'98");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("607d..7a..d1ce89f68bf601fb8bf731f781c7....f8f8"))
    {
        sVersion="0.6";
        bDetected=1;
    }
    else if(MSDOS.compareEP("60d1cef533de33c8c7c6....d1cee9$$$$fbf98bd029c131db"))
    {
        sVersion="0.6+";
        bDetected=1;
    }
    else if(MSDOS.compareEP("607d..7a..d1ce89f68bf601fb8bf731f781c7....f8e8"))
    {
        sVersion="0.6+";
        bDetected=1;
    }
    else if(MSDOS.compareEP("60b3..b7..7e..f5d1c2fb81e9....c7c0....bd....81c5....d1ce33c4fd79..e9"))
    {
        sVersion="0.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$6025....eb$$eb$$8cc0fa66c1cc..eb$$44bc....eb$$2ea3....66c1cc..e9"))
    {
        sVersion="0.4+";
        bDetected=1;
    }
    else if(MSDOS.compareEP("60fff08fc603f6b1..b5..fff18fc2f8e9"))
    {
        sVersion="0.55";
        bDetected=1;
    }
    else if(MSDOS.compareEP("60cefd33db81c3....81f3....81c3....fd45eb"))
    {
        sVersion="0.5c";
        bDetected=1;
    }
    else if(MSDOS.compareEP("607c..79..81ef....cc7f..8bc82bc103d431db81c3....fb81ea....e9"))
    {
        sVersion="0.5c02";
        bDetected=1;
    }
    else if(MSDOS.compareEP("6033f131c731f78bd9be....d1cf31c1c7c3....d1c3fd8bf8fb33c7bf....d1c7"))
    {
        sVersion="0.5c04";
        bDetected=1;
    }
    else if(MSDOS.compareEP("60be....c7c5....c7c3....c7c2....81f2....2e319a....33d62e8bba....31ef"))
    {
        sVersion="0.5s";
        bDetected=1;
    }
    else if(MSDOS.compareEP("6031fbce29f6c7c7....d1c333dfe8....76..c8......e8"))
    {
        sVersion="0.6";
        bDetected=1;
    }
    else if(MSDOS.compareEP("60fdd1c3f533ebc7c3....87d389d79705....7c..e9"))
    {
        sVersion="0.61+";
        bDetected=1;
    }
    else if(MSDOS.compareEP("6072..fbe9$$$$03cee9$$$$b9....d1c981f1....8bd9d1cf"))
    {
        sVersion="0.61+";
        bDetected=1;
    }
    else if(MSDOS.compareEP("6089f731fffbb8....03e9c7c1....47f9fceb"))
    {
        sVersion="0.62";
        bDetected=1;
    }
    else if(MSDOS.compareEP("60be....c7c3....2e3198....81c3....81c6....8bfe01df75..e9"))
    {
        sVersion="0.62";
        bDetected=1;
    }
    else if(MSDOS.compareEP("60fff08fc2f9bf....fb31da8bf42bdef5f971..03f0c7c3....87dd"))
    {
        sVersion="0.63";
        bDetected=1;
    }
    else if(MSDOS.compareEP("60c7c6....b8....bf....bb....2e81b1........81f6....81c3....81c7....05....75..543e51"))
    {
        sVersion="0.63";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("immunizer","File Shield");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("50b430cd213c..7d..e9....e8$$$$b8....bb....b9....ba....cd212ec706........81fb....75..2ec706........2e8916"))
    {
        sVersion="1.2";
        sOptions="by McAfee";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Fitted Modula-2");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("9a########558bec2e8e1e....a1....d1c873..8be55dca0000"))
    {
        sVersion="2.0a";
        sOptions="1988";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","ForthInfo");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("90e9$$$$fabe....8b26....8b2e....8cc80306....8ed0fbfce9$$$$ad8bd8ff27"))
    {
        sVersion="4.2";
        sOptions="1994 by FSC";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fae8$$$$8cc80306....0306....8ec08b0e....8bf94f588bf081e6....03f7d1e8"))
    {
        sVersion="4.1";
        sOptions="1990";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","FromBAT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$be....bf....bb....c604..b9....fe04803c..77..c644....b80629cd21be....3c..74..8a04880743e2"))
    {
        sOptions="1991 by Clockwork Software";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","GFX to EXE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$2ea1....3c..74..be....bd....8ccabf....83e7..bb....c1eb..03d32e8b1e....2e8b0e....8eda3c..75..30253c"))
    {
        sVersion="2.0";
        sOptions="by t-Rex";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","GOAT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("5051568bc033c0904149813c....75..83f9..75..0bc033c058595eb8"))
    {
        sOptions="1996 by Martin Overton //ChekWARE";
        bDetected=1;
    }
    if(MSDOS.compareEP("515056528bc233d2f7e04149813c....75..3d....73..0bc933d259585e5ab8"))
    {
        sOptions="1996 by Martin Overton //ChekWARE";
        bDetected=1;
    }
    if(MSDOS.compareEP("1650525351564a33db74..434b813c....74..81f9....75..0bd2b8....8ed85e585a5b5917b8"))
    {
        sOptions="1996 by Martin Overton //ChekWARE";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","GRABBER");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$fc8cdb8cc88ed8a3....8ec3891e....8b1e....b1..d3e383c3..b44acd2173..eb"))
    {
        sVersion="6.30-6.31";
        sOptions="1991 by G. A. Monroe";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$fc8cdbb8....8ed8a3....8ec3891e....8b1e....b1..d3e383c3..b44acd2172..b8"))
    {
        sVersion="6.32";
        sOptions="1991 by G. A. Monroe";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$fc8cdb8cc88ed88ec0891e....e8"))
    {
        sVersion="3.70-3.87";
        sOptions="1991 by G. A. Monroe";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$fc8cdbb8....8ed88ec3891e....a3....8b1e....b1..d3e383c3..b44acd2173..b4"))
    {
        sVersion="3.91-3.94";
        sOptions="1991-92 by G. A. Monroe";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

// Note: GRaphic Animation System for Professionals

init("compiler","GRASP Interpreter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8cd88ec0b8....8ed88c06....8c16....8926....26a1....3b06....77..e9....2b06....8cdf81c7....3bf873..8bc7"))
    {
        sVersion="4.00e - 5.0";
        sOptions="1993 by John Bridges";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cd88ec0b8....8ed88c06....26a1....3b06....77..e9....2b06....8cdf81c7....3bf873..8bc7"))
    {
        sVersion="4.0b";
        sOptions="1991 by John Bridges";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","GameWizard DOS Extender");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b430cd2186c43d....73..ba....e8....ba....b1..d3ea8cc803d08edafa8ed2bc....fb2e8916....2e8c06....368c0e....2e8c16....e8"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","Go32Stub DOS-Extender");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("0e1f8c1e....8c06....fcb430cd21"))
    {
        sVersion="2.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("ba....8eda8cd32bdac1e3..8ed203e3bd....81ed....8c06....fcb430cd21"))
    {
        sVersion="2.02T";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fc0e1fb4..bb....b9....ba....cd21061e07bf....b9....30c0f3aa07e9"))
    {
        sVersion="2.02T";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","Graphic WorkShop");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$2ec706........b8....a9....74..25....bb....2bd8432e011e....e8"))
    {
        sVersion="6.0-7.1";
        sOptions="by Alchemy Mindworks Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Guardian Angel");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("068cc88ed88ec0fc......8be8e4210c..eb"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("068CC88ED88EC0FCBF....EB"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("068CC88ED88EC0FCBB....EB"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("068CC88ED88EC0FCBE....EB"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("immunizer","H+BEDV SelfCheck");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("1e0e1ffcbe....33d233dbb9....ac3287....3084....0294....80d6..fec3e2..3b16....75..b8....cd213d....8bc374..b430cd21ba"))
    {
        sVersion="1.74-2.41";
        sOptions="1993-94 by H+BEDV Datentechnik GmbH";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e0e1fb8....cd213d....8bc374..b430cd21ba....3c..b8....72..fcbe....33d233dbb9....ac3287....3084....0294....80d6..fec3e2"))
    {
        sVersion="1.10";
        sOptions="1993 by H+BEDV Datentechnik GmbH";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","HackStop");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("FABD....FFE56A49480C..E4..3F983F"))
    {
        sVersion="1.00";
        bDetected=1;
    }
    else if(MSDOS.compareEP("B430CD2186E03D....73..B42FCD21B0..B44CCD2150B8....58EB"))
    {
        sVersion="1.10/1.11";
        bDetected=1;
    }
    else if(MSDOS.compareEP("B430CD2186E03D000373..B42FCD21B42ACD21B42CCD21B0FFB44CCD2150B8....58EB"))
    {
        sVersion="1.10p1";
        bDetected=1;
    }
    else if(MSDOS.compareEP("B430CD2186E03D....73..B4..CD21B0..B44CCD2153BB....5BEB"))
    {
        sVersion="1.11c";
        bDetected=1;
    }
    else if(MSDOS.compareEP("B430CD2186E03D....73..B0..B4..CD2150B8....58EB$$EB$$b8....CD2150B2..B8....CD21"))
    {
        sVersion="1.00";
        bDetected=1;
    }
    else if(MSDOS.compareEP("521eb430cd2186e03d....73..cd200e1fb4..e8"))
    {
        sVersion="1.11f-1.12s";
        bDetected=1;
    }
    else if(MSDOS.compareEP("FABD....D4854E32EBEB"))
    {
        sVersion="1.13";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fabd....ffe5"))
    {
        sVersion="1.13cs";
        sOptions="converted to exe";
        bDetected=1;
    }
    else if(MSDOS.compareEP("52B8....1ECD2186E03D....73..CD200E1FB409E8....24..EA"))
    {
        sVersion="1.13";
        bDetected=1;
    }
    else if(MSDOS.compareEP("FABE....050C00071D4A461E16FDAC44........F16D84D33D....CFAFFB34DB33..........D0D6....92B4249E"))
    {
        sVersion="1.17";
        bDetected=1;
    }
    else if(MSDOS.compareEP("52BA....5AEB..9A........30CD21......FD02....CD200E1F52BA....5AEB"))
    {
        sVersion="1.18";
        bDetected=1;
    }
    else if(MSDOS.compareEP("52BA....5AEB..9A........30CD21......D602....CD200E1F52BA....5AEB"))
    {
        sVersion="1.19s";
        bDetected=1;
    }
    else if(MSDOS.compareEP("52B430CD2152FA..FB3D....EB..CD200E1FB409E8"))
    {
        sVersion="1.11f";
        sOptions="modified";
        bDetected=1;
    }
    else if(MSDOS.compareEP("53bb....5beb$$eb$$9c1e52b430cd2186c43d....73..cd200e1f53bb....5beb"))
    {
        sVersion="1.20";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e52B8....cd2186c43d....73..cd2052ba....5aeb"))
    {
        sVersion="1.18s";
        bDetected=1;
    }
    else if(MSDOS.compareEP("5d1eb430cd2186e03d....73..cd200e1fb409e8"))
    {
        sVersion="1.11gs";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$3adb74..b8014ccd21eb..b430cd21fa8bec8b46..05....ffe0"))
    {
        sVersion="1.17 regged";
        bDetected=1;
    }
    else if(MSDOS.compareEP("521ee9$$$$0e1fb409e8$$$$5acd211f5a53bb....5beb$$eb$$e8$$$$e8$$$$52ba....5aeb"))
    {
        sVersion="1.11f";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....521ecd2186e03d....73..cd200e1fb4..e8$$$$5acd211f5a53bb....5beb"))
    {
        sVersion="1.12cs";
        bDetected=1;
    }
    else if(MSDOS.compareEP("50b8....58eb$$eb$$9c1e52b430cd2186c43d....73..cd200e1f50"))
    {
        sVersion="1.19/386";
        bDetected=1;
    }
    else if(MSDOS.compareEP("9c5751e8$$$$e8$$$$5fb9....b8....2e87052e3185....47d1c8e2"))
    {
        sVersion="1.20/386";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b430cd2186e03d....73..b0..b44ccd2150b8....58eb"))
    {
        sVersion="0.97.6-0.99b";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","HASP Key Envelope");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$e800005d81ed....2ea3....8cd82ea3....05....2ea3....2e0306....2ea3....2e833e......75..e8"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$e800005d81ed....2ea3....8cd82ea3....83c0..2ea3....2e0306....2ea3....2e833e......75..e8"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","HEALTH");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("1EE8....2E8C06....2E893E....8BD7B8....CD218BD80E1FE8....0657A1....26"))
    {
        sVersion="5.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("other","Header Changer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8cdb81c3....53bb....53501e068cdb81c3....53bb"))
    {
        sOptions="by Shay Lev Ary";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Hi-Tech C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fcba....b1..d3ea8cc803c28ed88ed0268b1e....4b2bd8b8....f7c3....75..d3e38bc38be0be....b9....2bce32c0"))
    {
        sVersion="3.06";
        sOptions="1984-87 by HI-TECH Software";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","HyperLOCK 386");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$fabf....b0..b9....2e8a2581ff....72..2e3005472ac4"))
    {
        sVersion="1.00";
        sOptions="1993 by Jayeson Lee-Steere";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>
// http://www.edm2.com/index.php/IBM_PC_Pascal_Compiler
init("compiler","IBM PC Pascal");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....8ed88c06....fa8ed0268b1e....2bd881fb....7e..bb....d1e3"))
    {
        sVersion="2.00";
        sOptions="1984";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8ed88bd08c06....268b1e....891e....2bd8f7c3....75..b1..d3e3"))
    {
        sVersion="2.05";
        sOptions="1987";
        bDetected=1;
    }
    else if(MSDOS.compareEP("ba....b4..b0..8cc98ed9cd21"))
    {
        sVersion="2.00";
        sOptions="1984";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8ed88c06....ba....d1eab9....2bcad1ea"))
    {
        sVersion="1.00";
        sOptions="1981";
        bDetected=1;
    }
    else if(MSDOS.compareEP("2e8e1e....8cd08cdb2bc3d1e0"))
    {
        sVersion="2.02";
        sOptions="1987";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","ICE SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$be....8bfe8b0e....8b16....b8....50fcad33c2ab8bd0e2"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("immunizer","IMMUN");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("5053515256571e062e8b0e....e3..1e06d1e18cc88ed88ec0be....bf....8bd14ad1e203f203fafdf3a5071fb430cd21"))
    {
        sVersion="1.2 reg";
        sOptions="1993 by J.Bleuel";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Inertia encryption");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("505351525657551e060eb8....500e5805....5031c050cb"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("505351525657551e8cc88ed8be....8cc3011e....8cc92bcb83e9..33db8cc005....8ed8"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Ironthorn");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("9ce80000581e5704..bf....5feb$$ffd0"))
    {
        sVersion="1.0:2000";
        sOptions="modified HackStop 1.19 by ReDragon";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","JAM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("50061607BE....8BFEB9....FDFAF32EA5FB06BD....55CB"))
    {
        sVersion="2.21";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","JmCryptExe");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$e9$$$$1e068cd805....8ed88ec02e0106....2e0106....8be82ea1....2e8b0e"))
    {
        sVersion="0.7i";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$e9$$$$2e8c1e....e8$$$$530633db8ec3bb....268e47..bb....26813f....74..e9"))
    {
        sVersion="0.7";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$2e8c1e....8cc88ed806a1....8ec08b1e....b4..cd210773..e9"))
    {
        sVersion="0.7?";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("library","John Socha Library");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("bb....8edb2e891e....8d06....25....fa8ed38be0fb26a1....a3....b430cd21a2....8826....3c..73..8d16....b409cd2133c05006cb"))
    {
        sVersion="1986 Peter Norton Computing, Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Joke fileheader");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("bb....e8....bd....2863..53454ee8....9893928a80....52cb"))
    {
        sOptions="by SEN";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","KeyMaker");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fc0e1f8706....871e....870e....8716....8736....873e....872e....268b07a3....8cc0a3....8cc88ec08edaf3a5"))
    {
        sVersion="3.0";
        sOptions="1998 by TIME Software";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Khrome Crypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("B9....B8....EB..80....EB..EB..EB..66..........66"))
    {
        sVersion="0.3";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Kvetch");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("bb....ba....0e1f068cd005....8ec00efc8bcbd1e133ffd1e18bf7d1e1f3a5b8....0650cb"))
    {
        sVersion="1.x";
        sOptions="1992 by Tal Nevo";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("type","LE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.isLE())
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","LGLZ");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fc1e060e8cc80106....ba....03c28bd805....8edb8ec033f633ffb9....f3a54b484a79..8ec38ed8be....ad95b2..ea"))
    {
        sVersion="1.04";
        sOptions="by G.Lyapko";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("sfx","LH");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compare("'LH'27's SFX '",0x24))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","LHA SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$fcbc....8cc805....8ec0eb$$bb....e8....061fb430cd218bd81e3c..72..368e06....33c08bf8b9....f2aeae"))
    {
        sVersion="2.05L, 2.10-2.13, 2.55";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$fcbc....8cc805....8ec0e8....bb....e8....061fb430cd218bd81e3c..72..368e06....33c08bf8"))
    {
        sVersion="2.13";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$00fcbc....8cc805....8ec0eb$$bb....e8....061fb430cd218bd81e3c..72..368e06....33c08bf8b9....f2aeae"))
    {
        sVersion="2.13S";
        sOptions="converted to exe";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","LHarc SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$fcbc....bb....e8....8cc82e0306....8ed88ec005....2e3b06....76..bb....e9....bf....33d28bc2b9....d1e873..35....e2..abfec275..be....bf....b8....ba....2e3a24"))
    {
        sVersion="1.13S, 1.13L";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$fcbc....bb....e8....8cc805....8ec0b8....cd21be....268816....26c706........ace8....74..263a06....74..3c..75..ace8....74..3c..75..acbf....b4..e8"))
    {
        sVersion="1.14c";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$0d....fcbc....bb....e8....8cc82e0306....8ed88ec005....2e3b06....76..bb....e9"))
    {
        sVersion="1.14c";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","LOCK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b430cd21faba....2e8006......80ea..2e8816....e8$$$$2ec606......fbbf....b9....0e072e8a0534..aae2"))
    {
        sVersion="1.1";
        sOptions="by Psycho //ENiAC";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","LSI C-86");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....8ed0bc....368c......b430cd2136......8a......32ff438e......161f33ffb9....32c0fceb"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8ec00617bc....268c......b430cd2126a3....fcbe....8a0e....32edbf....f3a426......47"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("type","LX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.isLX())
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","LZEXE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("060e1f8b0e....8bf14e89f78cdb03......8ec3fdf3a453b8....50cb"))
    {
        sVersion="0.91, 1.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("060e1f8b0e....8bf14e89f78cdb03......8ec3b4..31edfdac01c5aae2"))
    {
        sVersion="0.90";
        bDetected=1;
    }
    else if(MSDOS.compareEP("50060e1f8b0e....8bf14e89f78cdb03......8ec3fdf3a453b8....50cb"))
    {
        sVersion="0.91c";
        bDetected=1;
    }
    else if(MSDOS.compareEP("50060e1f8b36....83e6..8bfe8bced1e9418cdb031e....8ec3fdf3a553b8....50cb"))
    {
        sVersion="0.91c";
        bDetected=1;
    }
    else if(MSDOS.compareEP("50060e1f8b0e....8bf14e8cdb89f703......8ec3fdf3a4b8....5350cb"))
    {
        sVersion="0.91";
        sOptions="1990";
        bDetected=1;
    }
    else if(MSDOS.compareEP("0e1f068b0e....8bf14e89f78cdb031e....8ec3fdf3a453b8....50cb"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("0e1f8b0e....89ce504e8cdb0689f7031e....fd8ec3f3a453b8....50cb"))
    {
        sVersion="?.?";
        bDetected=1;
    }
    else if(MSDOS.compareEP("060e1f8b0e....8bf14e8bfe8cdb031e....8ec3fdf3a453b8....50cb"))
    {
        sVersion="1.0a";
        bDetected=1;
    }
    else if(MSDOS.compareEP("060e1f8b0e....8bf14e89f78cdb031e....fd8ec3f3a453b8....50cb"))
    {
        sVersion="1.0a";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cd805....2e0106....2eff2e"))
    {
        sVersion="1.00a";
        sOptions="suspicious, look like a trick";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","L.O.V.E. FORTH");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$fc2e8c1e....8cc88ec08ed8bb....e8....bb....e8....bb....e8....bb....e8....8bec2b2e"))
    {
        sVersion="1.29";
        sOptions="1988-92 by Homer Seywerd, Wolodymyr R. Elehew and Peter Cav";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fcbb....e8$$$$8b8f....09c974..8cd88cda0387....0397....1e068ed88ec28bf98bf14f4efdf3a4"))
    {
        sVersion="1.20";
        sOptions="1988-92 by Homer Seywerd, Wolodymyr R. Elehew and Peter Cav";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Lahey Fortran");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("EA########dbe3fcb8....8ed88c06....54583bc474..c606......d92e....eb"))
    {
        sOptions="1984-91 by Lahey Computer Systems Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","LamerStop");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("E8....05....CD2133C08EC026......2E......26......2E......BA....FA"))
    {
        sVersion="1.0c";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Lattice C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fab8....8ed8b8....8ed0bc....90fb"))
    {
        sVersion="3.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fab8....8ed8b8....8ed02e8b26....fbb8....a3....8c06....26a1....a3....be"))
    {
        sVersion="3.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fab8....8ed8b8....8ed0b8....8be02e8c06....fbbb....b4..cd2173..e9"))
    {
        sVersion="3.00";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fab8....8ed8b8....8ed0bc....fb8cd88cc92bc1b1..d3c0a3....8126........25....a3....33c0"))
    {
        sVersion="3.00";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fab8....8ed8b8....8ed0bc....fbb8....a3....8c06....26a1....a3"))
    {
        sVersion="2.00";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fab8....8ed8b8....8ed0b8....8be0fbbb....b4..cd21ba....72"))
    {
        sVersion="2.00";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fab8....8ed8b8....8ed0bc....fbb430cd210ac075..b8....a3....8c06"))
    {
        sVersion="2.1";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fa8cc78cd68bccba....8ec2268e16....bc....fb8ec75651501e06"))
    {
        sVersion="2.1";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fcb8....8ed88926....8306......06fa8ed081c4....fbc706........c606......33c0a2....a2....b8....2d....a3....03c4"))
    {
        sVersion="6.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fcb8....8ed88926....8306......fa8ed081c4....fbc706........b8....a3....a3....bb....2bd8"))
    {
        sVersion="6.0";
        if(MSDOS.compareEP("891e....03dc",43))
        {
            sOptions="overlay";
        }
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cc88ed8ba....b409cd21b8....8ed8ba....b409cd21bb....8b178b4f..8ed9b409cd21b8....cd21cb"))
    {
        sVersion="3.30";
        sOptions="driver";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fa8cdeb9....8ed98926....8c16....8936....8bec8b46..a3....8b46..a3....fbfca1....0bc075..40a3....8cd8"))
    {
        sVersion="3.00";
        sOptions="overlay";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8bec8b5e..8b46..2ea3....2e891e....c746......8b46..8b5e..8cc78cd68bccba....8ec2268e16....bc....8bd0"))
    {
        sVersion="3.00";
        sOptions="overlay";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8ed88ed0268b1e....2bd8f7c3....75..b1..d3e3eb..bb....8be3891e....b8....a3....0633c0508bec"))
    {
        sVersion="1.00";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fab8....8ed88ed08c06....268b1e....2bd8f7c3....75..b1..d3e3eb..bb....8be3fb891e....b8....a3....0633c0508bec"))
    {
        sVersion="1.02";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fc508cc00bc05874..b8....8ed88cc0a3....2906....8b1e....b4..cd2126a1....a3....8cc0a3....c706........268a1e"))
    {
        sVersion="3.30";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$fafcb8....8ed88cc0a3....2906....a3....c706........8b1e....b4..cd2126a1....a3....268a1e....26c606"))
    {
        sVersion="3.30";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$fc268b36....bf....2e8c06....8ec732c0b430cd21fc8cd93c..73..b0..26a2....33ed33db8edb8b07d1e8"))
    {
        sVersion="2.00";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$8cc78cd68bcc83c1..2e8c06....ba....8ec2268e16....bc....5651501e57b8....8ed833ff26f685......75"))
    {
        sVersion="2.00";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fabe....8b14b8....8ed8b8....8ed0bc....8916....fbb430cd210ac075..b8....a3....8c06....803e......7c"))
    {
        sVersion="2.1";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fafcb8....8ed88f06....8f06....8becc446..a3....8c06....8b46..2b46..a3....8b46..a3....8e46..8b5e..b8....8ed0"))
    {
        sVersion="2.1";
        sOptions="overlay";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fab8....8ed8b8....8ed0b8....8be0fbbb....b44acd21ba....73..e9"))
    {
        sVersion="2.1-3.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fab8....8ed8b8....8ed0bc....fb8c06....268e06....8c06....c706........b8....a3"))
    {
        sVersion="2.1-3.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","LockTite+");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8cc88ed88cc381c3....8bc30306....8ec08b0e....8bf14e8bfefdf3a450b8....50cb"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Logitech Modula-2");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8cdb83c3..8cc88ec0bf....33c0268a05473c..74..3c..74..03f08b0c03cb890ceb..26c5358cd903cb8ed983c7..eb..b8....03c350b8....5033c0"))
    {
        sVersion="3.00";
        sOptions="Aug 1987";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","MEGALITE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("B8....BA....05....3B2D73..72..B409BA....CD21CD90"))
    {
        sVersion="1.20a";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","MESS");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("....................B9....F3..ACE3..EB..BA....B409CD21CD20..............................B430CD213C0277"))
    {
        sVersion="1.07";
        bDetected=1;
    }
    else if(MSDOS.compareEP("........FAB9....F326ACE3..EB$$1E0E1FBA....81EA....B409CD211FB44CCD21"))
    {
        sVersion="1.20";
        bDetected=1;
    }
    else if(MSDOS.compareEP("........FA545b3bdc75..eb$$9c5b81cb....5381e3....75..9d9c5825....75..1e0e1f"))
    {
        sVersion="1.29";
        bDetected=1;
    }
    else if(MSDOS.compareEP("........FAb9....f326ace3..eb$$1e0e1fba....b409cd211fb44ccd21"))
    {
        sVersion="1.x";
        bDetected=1;
    }
    else if(MSDOS.compareEP("'MESS'b9....83c4..f326ace3..eb$$ba....b409cd21cd20"))
    {
        sVersion="1.07";
        bDetected=1;
    }
    else if(MSDOS.compareEP("'MESS'fa545b3bdc75..eb$$9c5b81cb....539d9c5825....75..1e0e1fba....b409cd211f"))
    {
        sVersion="1.25";
        bDetected=1;
    }
    else if(MSDOS.compareEP("'MESS'b9....83c4..f326ace3..eb"))
    {
        sVersion="1.14";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","MSLite");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("538cd315....8beceb$$b8....ffe0"))
    {
        sVersion="2.3";
        sOptions="1998 by A.Cheng //Mercury Soft";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Maker (CDAT)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$558bec9ceb$$505351525657061eb8....cd210653eb$$b8....cd2106531e1e0e1f8ccab1..eb"))
    {
        sVersion="3.0";
        sOptions="1992 by PST";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Mandrake");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....8ed8b8....8ec0e8$$$$bb....b9....b8....2bc1568bf0268a3488305ee2..b4..b7..cd10"))
    {
        sOptions="by H.P.G. Soft";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","MegaBasic");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$1eff36....ff36....8cc88ed88ec02e8f06....2e8f06....2e8f06....2e8c0e....b430cd213c..ba....73..e8....2eff36....33c050cb"))
    {
        sVersion="4.00";
        sOptions="1991-94 by Kristofer Sweger";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","MegaBasic");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$b9....33f633ff1607fcf3a5368c1e....a1....161fa3....e8....bc....b430cd21a2....0ac074..86e0"))
    {
        sVersion="5.40";
        sOptions="1985-87 by Christopher Cochran";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$b8....cd21360806....84c074..8bf886e08bd0d40a86c4360906....86c48ac48ae6d50a"))
    {
        sVersion="5.812";
        sOptions="1994 by Christopher Cochran";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$b430cd21360806....0ac074..86e08bd0d40a86c4360906....86c48ac48ae6d50a"))
    {
        sVersion="5.73";
        sOptions="1992 by Christopher Cochran";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$b9....33f633ff1607fcf3a5368c1e....161fe8....bc....b430cd21a2....0ac074..86e0"))
    {
        sOptions="1985 by Christopher Cochran";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$b9....33f633ff1607fcf3a5268c1e....161fe8....bc....0e1fba....b8....cd21ba....b8"))
    {
        sOptions="1985 by Christopher Cochran";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Meridian Adavantage ADA");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....8ed89a........558bec5583ec..168d46..509a........894e..895e..83fb..75..83f9..75"))
    {
        if(MSDOS.compareEP("9a",43))
        {
            sVersion="1993";
        }
        else if(MSDOS.compareEP("33c050ba....521ebe....569a",43))
        {
            sVersion="1991";
        }
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8ed89a########04..2bc0f3508a46..83e0"))
    {
        sVersion="1988";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8ed89a########515006b8....8ec0b9....b8....8bf8fcf3ab075859cb"))
    {
        sVersion="1988";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8ed89a########e8$$$$c8......57561eb8....8ed868....9a"))
    {
        sVersion="1988";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8ed89a########8c06....8c16....8926....a1....a3....8b16....8916....8c06....9a"))
    {
        sVersion="1988";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Meridian Pascal");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....501f9a########8926....8926....8c16....8c16....8c06....8c06....9a........c706"))
    {
        sOptions="1985-1988 by Meridian Software Systems, Inc.";
        bDetected=1;
    }
    if(MSDOS.compareEP("b8....8ed89a########8c06....8c16....8926....a1....a3....a1....a3....a1....a3"))
    {
        sOptions="1985-1988 by Meridian Software Systems, Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8ed89a########558bec5583ec..8c06....8c16....8926....cd..8946..f646"))
    {
        sOptions="1985 by Meridian Software Systems, Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","MetaWare High C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....50b8....50cbeb$$bd....2e8e1e....26a1....a3....8cd805....268b1e....3bc376..2bd8b1..d3e3eb..26a3....938cc02bd8b44acd212bdb8cd8fa8ed08be3fbc706........c706"))
    {
        sVersion="1983-1986";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$33ed2e8e1e....26a1....a3....26a1....2d....bb....fa8ed08be3fbc706........c706........bb....3bc373..2bd8b1..d3e3011e....011e....2e8e1e....9c0654582bc4d1f8"))
    {
        sVersion="1983-1988";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$fa6633e42e8e16....bc....6633f66633ff6633c92e8e1e....be....2e8e06....bf....b9....e8"))
    {
        sVersion="1983-1990";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$bd....2e8e1e....26a1....a3....26a1....2d....bb....fa8ed08be3fbc706........c706........bb"))
    {
        sVersion="1983-1986";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$bd....2e8e1e....26a1....a3....268b......b1..4b891e....b8....05....3bc376..8bc3ba....2bc2d3e0"))
    {
        sVersion="1983-1986";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$bd....2e8e1e....268b1e....b1..4b891e....b8....05....3bc376..8bc350a3....a3....2bd8b1..d3c38cc12bc1"))
    {
        sVersion="1983-1985";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","MetaWare Professional Pascal");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8000050b8....50cbeb..e8....2bc050e8....c3....bd....2e8e"))
    {
        sVersion="1983-1986";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$bd....2e8e1e....26a1....a3....26a1....2d....bb....fa8ed08be3fb"))
    {
        sVersion="1983-1986";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$bd....2e8e1e....26a1....2d....bb....fa8ed08be3fb"))
    {
        sVersion="1983-1986";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$33ed2e8e1e....26a1....a3....8cd805....268b1e....3bc376..2bd8b1..d3e3eb"))
    {
        sVersion="1983-1988";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Micro Focus Cobol");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$e9$$$$e8....8edac606......b8....0306....8ed28be08c0e....4a8bc28706....2bd0e8"))
    {
        sVersion="1981, 1985 by Micro Focus Ltd";
        bDetected=1;
    }
    if(MSDOS.compareEP("e8....51e8$$$$8bf0e8$$$$061e5657558bece8....72..a1....8be55d5f5e1f07c3"))
    {
        sVersion="4.5";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","Micro Focus DOS Extender");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$b8....8ed854583bc475..0f01e0a8..74..e8....75..2e800e......eb..c8......0f014e..80"))
    {
        sVersion="1993 by Micro Focus Ltd";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Microsoft Basic");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$0e1fb8....e8....8eda938a170ad274..b4..cd2143eb..b8....cd21"))
    {
        sVersion="7.10";
        bDetected=1;
    }
    else if(MSDOS.compareEP("9a########591fa1....1e510e1ffc3d....74..e9....b430cd213c..73..e9$$$$ba....0e1fb409cd21b8....cd21"))
    {
        sVersion="5.60";
        sOptions="1986";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$8cc88ed8e8....8a170ad274..b4..cd2143eb..b2..b4..cd21"))
    {
        sVersion="5.60";
        sOptions="1986";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("library","Microsoft C Library");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fa8cc78cd68bccba....8ec2268e16....bc....fb8ec75651501e062e8c06....b8....8ed8e8....b8....8ec08cc8262b06....26a3....803e"))
    {
        sVersion="1986";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bf....8b36....2bf781fe....72..be....fa8ed781c4....fb73..161f0ee8....33c0500ee8....b8....cd21"))
    {
        sVersion="1985";
        bDetected=1;
    }
    else if(MSDOS.compareEP("061e33c08ed88b1e....a1....8ec0268b47..3d....75..ba....1f07e9....1f07be....ac0ac074..e8....72"))
    {
        sName+=" (possibly)";
        sVersion="1986";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("compiler","Microsoft");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b430cd213c..73..33c00650cbbf....8b36....2bf781fe....72..be....fa8ed781c4....fb73..161f"))
    {
        sName+=" Quick C";
        sVersion="2.5x";
        sOptions="1990";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fc8cc02ea3....8ed8a1....2ea3....2ea3....be....ac32e403f0c6....b8....8ec02680........75"))
    {
        sName+=" Quick C";
        sVersion="2.51a";
        sOptions="1990";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b430cd213c..73..b8....50e8....92b409cd21cd20bf"))
    {
        sName+=" C/C++";
        sVersion="1986";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b430cd213c..73..b8....50900ee8....92b409cd21cd20bf"))
    {
        sName+=" C/C++";
        sVersion="1986";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b430cd213c..73..b8....509a........92b409cd21cd20bf....8b36....2bf781fe....72..be....fa8ed781c4....fb73..33c050"))
    {
        sName+=" C/C++";
        sVersion="1986";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b430cd213c..73..cd20bf....8b36....2bf776..8bc405....d1d8b1..d3e83bf072..8bf0fa8ed781c4....fb73"))
    {
        sName+=" Quick C";
        sVersion="1987-89";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bf....8b36....2bf781fe....72..be....fa8ed781c4....fb73..e9....81e4....3689......3689......8bc6b1"))
    {
        sName+=" C/C++";
        sVersion="1985";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fab8....8ed88ed0268b1e....2bd8f7c3....75..b1..d3e3eb..bb....8be3fb891e....b8....a3....0633c0508bec"))
    {
        sName+=" C/C++";
        sVersion="1.04";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b430cd213c..73..cd20bf....8b36....2bf781fe....72..be....fa8ed781c4....fb73"))
    {
        sName+=" Quick C";
        if(MSDOS.compareEP("81",54))
        {
            sVersion="1.0";
            sOptions="1987";
        }
        else if(MSDOS.compareEP("83",54))
        {
            sVersion="2.00";
            sOptions="1989";
        }
        else if(MSDOS.compareEP("8b",54))
        {
            sVersion="2.x";
            sOptions="1989";
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Microsoft Fortran");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b430cd213c..73..9a########558becb8....501eb8....50b8....509a"))
    {
        sVersion="1987";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Microsoft Quick Basic");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("1e071e2e8e1e....b430cd2150812e........8b36....ad91ade3..3d....72..3d....73..ba....eb..0bc075..c706........c706........33c99a"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$8cda83c2..8edaa1....0e1ffc3d....74..e9....b430cd213c..73..e9$$$$ba....0e1fb409cd21b8....cd21"))
    {
        sVersion="2.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("9a########591fa1....1e510e1ffc"))
    {
        sVersion="3.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$0e1fb8....509a........8eda938a170ad274..b4..cd2143eb"))
    {
        sVersion="4.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("9a########591fa0....1e51063c..74"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bf....a1....2ea3....2bc73d....72..b8....fa8ed781c4....fb969f2e8826....9683e4"))
    {
        sVersion="4.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("9a########06ba....8eda268b3e....8ec257b9....be....bf....0e1ffcf3a4b1"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8ed88c06....fa8ed0bc....fbb430cd21a3....3c..75..06b4..cd218c06....b9"))
    {
        sVersion="4.x";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Microsoft QuickPascal");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b0..9a########50b430cd213c..73..cd20b8....8ed88c06....c706........8c0e....58545b3bdc74..0ac074..be....e8....32c0e9"))
    {
        sVersion="1.0-1.08";
        sOptions="1989";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("library","Microsoft RTL (CLIPPER 5.01)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e8$$$$1e06fc8cc88ed88c06....b430cd2186e0a3....e8....891e....890e....b8....bb....e8....071fc3"))
    {
        sVersion="1988";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("library","Microsoft RTL");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b430cd213c..73..cd208cc18cd32bd981c3....b4..cd2172..8cd6bf....2bf7b1..d3e6fa8ed703e6fb"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e068cc88ed88cc0a3....83c0..a3....b430cd213c..73..b8....8ed8b8....ea........e8....e8....e8....8e"))
    {
        sVersion="1992";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b430cd213c..73..cd20bf....b8....03c405....b1..d3e88bf0fa8ed781c4....fb73..161f9a........33c0509a"))
    {
        sVersion="1987";
        bDetected=1;
    }
    else if(MSDOS.compareEP("2e8c06....2e8c1e....bb....8edb1ee8....1f8b1e....0bdb74..8cd18bd4fa8ed3bc....fb5351521ee8....1f5a"))
    {
        sVersion="1990";
        bDetected=1;
    }
    else if(MSDOS.compareEP("2e8c1e....bb....8edb1ee8....1f8b1e....0bdb74..8cd18bd4fa8ed3bc....fb5351521ee8....1f5a"))
    {
        sVersion="1990";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1eb8....8ed8b430cd213c..73..ba....e8....0633c050cb"))
    {
        sVersion="1990";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e069a########502e8c06....2ea1....2e0b06....75..26a1....2ea3....26a1....2ea3....58cb"))
    {
        sVersion="1990";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....cd212e8816....b2..b8....cd21b4..cd218edbb8....83e8..8ec033f633ffb9....fcf3a5bb"))
    {
        sVersion="1992";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b4..cd218edbb8....83e8..8ec033f633ffb9....fcf3a5bb"))
    {
        sVersion="1992";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cd03d....75..8cd83d....75..8ccab8....e8....e9....8cdb8ccab8....e8....eb..908cd83d"))
    {
        sVersion="1990";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b430cd213c..73..cd20bf....8b36....2bf781fe....72..be....fa8ed781c4....fb73..161f"))
    {
        sVersion="1988";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b4..cd213c..73..33c00650cb86e03d....b0..72..bf....8b36....2bf781fe....72..be"))
    {
        sVersion="1992";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bf....8edffa8ed781c4....fb33dbb8....cd210bdb74..881e....883e....8816....8836....b8"))
    {
        sVersion="1992";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","MultiLoop Protection");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("1e06b8....8ec0b0..b9....be....2e300404..46e2"))
    {
        sOptions="1992 by J&A";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","MutaWWP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e8$$$$5e8bd683ea..83c6..060e1e0e1f33ff8cd383eb..8ec3b9....f3a45805....500e5333c951cb"))
    {
        sVersion="1.0";
        sOptions="by Stefan Esser";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Mutate");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e8$$$$58e9$$$$2ec606......eb$$1eeb$$50eb$$33c0f872..eb"))
    {
        sVersion="1.1 (16,20.05.1996)";
        sOptions="1996 by PReDaToR 666";
        bDetected=1;
    }
    else if(MSDOS.compareEP("33c0eb$$83e8..e9$$$$2e802e......eb$$1eeb$$50eb$$33c0f872..eb"))
    {
        sVersion="1.1 (18.05.1996)";
        sOptions="1996 by PReDaToR 666";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$f8e9$$$$2e8006......eb$$1eeb$$50e9$$$$33c0f873..e9"))
    {
        sVersion="1.1 (20.05.1996)";
        sOptions="1996 by PReDaToR 666";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("type","NE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.isNE())
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","NOCLIP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$ff26....9c5053518cd8a3"))
    {
        sVersion="4.x";
        sOptions="by TD Technologia Digital";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","NOTA");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$061e33c08ed8be....0e07bf....b9....fcf3a41f8cd3be....8bd48ed6bc....8bf436c744......36c744......8ed38be2ba....e8"))
    {
        sVersion="1.1";
        sOptions="1990 by Novitex";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","NTShell");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("2e8c1e....8cca8eda8ec2fa8ed2bc....fbe80000eb$$b9....5e8bfeeb"))
    {
        sVersion="4.0";
        sOptions="by Mr. ZhouHui";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("loader","Netware loader");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$b8....cd213c..72..a1....3d....75..a1....3d....75..e9$$$$1e8cc88ed833c08ec0268b1e....891e"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Nodebug");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fcbe....b9....31d22ead01c2e2"))
    {
        sVersion="1.0 part 2";
        sOptions="by JVP";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Novex Key Envelope");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("0e1f06b8....bb....0e07cd012ea1....263947..070675..2ec606......eb..06f8b8....cd212e891e....2e8c06....b8"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Oberon-M");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$fcb8....8ed89a........558becba....b9....9a........ba....b9"))
    {
        sVersion="1.0";
        sOptions="1991";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","Optlink");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("87c0eb$$fc8c..83c2..5216070e1f0116....0116....33f633ffb9....f3a506b8....50cb"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("87c006571e56525153509cfc8cc283c2..16070e1f0116....0116....33f633ffb9....f3a506b8....50bd....cb"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("87c0eb$$8cda83c2..5216070e1f0116....0116....33f633ffb9....f3a506b8....50cb"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("87c0fc8cda83c2..16070e1f0116....0116....33f633ffb9....f3a506b8....50bd....cb"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("87c0555657525153509cfc8cda83c2..16070e1f0116....0116....33f633ffb9....f3a506b8....50bd....cb"))
    {
        sOptions="prepacked";
        sVersion="1.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bf....8edffa8ed781c4....fbb430cd21a2....8826....3c..73..8d16....b409cd2133c05006cb"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("87c08cda83c2..16070e1f0116....0116....33f633ffb9....f3a506b8....50bd....cb"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Overlay");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fa8cc283c2..2e0116....8cc82bc22e8b0e....8bea8bf8be....8bc103c903c881c1....03c18ad983e3..2e0387"))
    {
        sVersion="3.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("immunizer","Oyster");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("061e55565752515350e8$$$$508cc805....8ed858c3"))
    {
        sVersion="3.01 1991-95 by BEST";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","PACKWIN");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8cc0fa8ed0bc....fb060e1f2e8b0e....8bf14e8bfe8cdb2e031e....8ec3fdf3a453b8....50cb"))
    {
        sVersion="1.0";
        sOptions="by Yellow Rose";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","PC-Guard");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....fcfdb9....be....f82e180cf5fcfc74..fccc"))
    {
        sVersion="3.05 PRO";
        sOptions="1994/97 by Ceklic Blagoje //COMSEC";
        bDetected=1;
    }
    else if(MSDOS.compareEP("2bdb81cb....f8fdbf....2bd281ca....f52e291dfcf7d3fdfccc"))
    {
        sVersion="3.05";
        sOptions="1994/97 by Ceklic Blagoje //COMSEC";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bb....f5b9....fcfdbe....fdfc2e190cfcfdf8f7d9d1d9f8f8"))
    {
        sVersion="3.xx";
        sOptions="by Ceklic Blagoje //COMSEC";
        bDetected=1;
    }
    else if(MSDOS.compareEP("be....fcb9....fdf5f5ba....fc2e102cf8d1d1d1c9f7d9"))
    {
        sVersion="3.xx";
        sOptions="by Ceklic Blagoje //COMSEC";
        bDetected=1;
    }
    else if(MSDOS.compareEP("33db81c3....f8fdbe....f8f5fcba....f52e111cfcfd72"))
    {
        sVersion="3.xx";
        sOptions="by Ceklic Blagoje //COMSEC";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","PCC (DeSmet C)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$368c1e....a1....8cd32bc377..e9....483d....72..b8....b1..d3e03bc473..e9....368b1e....36031e....83c3..3be375..8be0368926....b430cd213c..72..36c606......c606"))
    {
        sVersion="1.2";
        sOptions="by Mark DeSmet (C Ware Corporation)";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$368c1e....a1....8cd32bc377..e9....483d....72..b8....b1..d3e03bc473..e9....368b1e....36031e....83c3..3be375..8be0368926....b430cd213c..72..36c606......36a2....c606"))
    {
        sVersion="3.x";
        sOptions="1984-86 by Mark DeSmet (C Ware Corporation)";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$368c1e....a1....8cd32bc377..e9....483d....72..b8....b1..d3e03bc473..e9....8be0c606......c606......b9....be....468a84....3c..74..3c..75..b8....50"))
    {
        sVersion="2.x";
        sOptions="1984-86 by Mark DeSmet (C Ware Corporation)";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$368c1e....a1....36a3....a1....8cd32bc377..e9....483d....72..b8....b1..d3e03bc473..e9....368b1e....36031e....83c3..3be375..8be0368926"))
    {
        sVersion="3.1";
        sOptions="1984-86 by Mark DeSmet (C Ware Corporation)";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","PCOM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("be....b9....2e8a0434..2e880446e2"))
    {
        sVersion="2.8b2, 2.8b3 -e -i";
        sOptions="1999";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","PDC Prolog");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....8ed88cc6bb....8ec3bb....268b178ec6b9....8bdad3eb8cd003d88cc02bd843b44acd2173..b0..b44ccd21"))
    {
        sOptions="1992 by Prolog Development Center";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","PGMPAK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fa1e1750b430cd213c..73..b44ccd21fcbe....bf....e8....e8....bb....ba....8ac38bf3"))
    {
        sVersion="0.13";
        bDetected=1;
    }
    if(MSDOS.compareEP("1e1750b430cd213c..73..b44ccd21fcbe....bf....e8....e8....bb....ba....8ac38bf3"))
    {
        sVersion="0.15";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("immunizer","PGPROT Antivirus Vaccine");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$2ea3....2e8c1e....2e8c06....0e1f8cc00106....0106....26ff36....0732c033ffb9....f2ae26803d..75..47"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("other","PK signature");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("c706....'PK'8cd805....50b8....50cb"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","PKEXE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fa50535152565755061e8cc88bd88ed80106....0106....0306....33f68ec006e8"))
    {
        sOptions="1994 by D.Usov";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","PKLITE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compare("'PKLITE'",0x1E)||MSDOS.compare("'PKlite'",0x1E))
    {
        var bBit=MSDOS.readByte(0x1D);
        sVersion=(bBit&0x7)+"."+("0"+MSDOS.readByte(0x1C)).slice(-2);

        if(bBit&0x8)
        {
            sOptions="Extra compression";
        }
        if(bBit&0x10)
        {
            sOptions=sOptions.append("Multi-segment file");
        }

        bDetected=1;
    }
    else if(MSDOS.compareEP("1FB409BA....CD21B8....CD21"))
    {
        sVersion="1.50";
        sOptions="CRC check";
        bDetected=1;
    }
    else if(MSDOS.compareEP("50B8....BA....05....3B060200"))
    {
        sVersion="1.50";
        bDetected=1;
    }
    else if(MSDOS.compareEP("B8....BA....05....3B060200"))
    {
        sVersion="1.12-1.13";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....ba....05....2d....fa8ed0fb2d....8ec050b9....33ff57be....fc565706518cc88ec0"))
    {
        sVersion="1.12";
        sOptions="extra compression";
        bDetected=1;
    }
    else if(MSDOS.compareEP("ba....b8....05....3B06....73..2d....fa8ed0fb2d....8ec050b9....33ff57be....fcf3a5cb"))
    {
        sVersion="1.1x";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....05....3B06....72..cd20b9....2d....8ed02d....8ec006ba....be....33ff571e571feb"))
    {
        sVersion="1.1x";
        bDetected=1;
    }
    else if(MSDOS.compareEP("B8....BA....3bc473..8bc42d....25....8bf8b9....be....fcf3a58bd8b1..d3eb8cd903d95333db53cb"))
    {
        sVersion="1.12, 1.20";
        bDetected=1;
    }
    else if(MSDOS.compareEP("50532b06....0a06....8b1e....5b58b8....ba....8cdb03d83b1e....73..83eb..fa8ed3bc....fb"))
    {
        sVersion="1.05";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cd805....ba....903b06....72..b409ba....cd21cd20"))
    {
        sVersion="1.15";
        bDetected=1;
    }
    else if(MSDOS.compareEP("B8....BA....8cdb03d83b1e....73..83eb..fa8ed3bc....fb83eb..8ec353b9....33ff57be....fcf3a5cb"))
    {
        sVersion="1.03-1.05";
        bDetected=1;
    }
    else if(MSDOS.compareEP("2e8c1e....8b1e....8cda81c2....3bda72..81eb....83eb..fa8ed3bc....fbfdbe....8bfe8ccab9....03d1"))
    {
        sVersion="1.00c";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....ba....3b06....73..2d....8ed02d....518ec050b9....33ff57be....fcf3a5"))
    {
        sName+=" [hacked] by Shay Lev Ary";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","PKSFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b430cd213c..73..cd20bf....8b36....2bf776..8bc405....d1d8b1..d3e83bf0"))
    {
        if(MSDOS.compareOverlay("1a"))
        {
            sOptions="ARC";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","PKTINY");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("2ec606......2ec606......2ec606......e9"))
    {
        sVersion="1.0"
        sOptions="by Thomas Monkemeier";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","PKZIP mini-sfx");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b9....bf....2bcf32c0f3aab430cd21a3....8926....e8....b8....e8....e8"))
    {
        sVersion="2.04c(1992)";
        bDetected=1;
    }
    if(MSDOS.compareEP("b8....a3....bf....b9....2bcf32c0f3aab430cd21a3....a1....a3....e8....b8"))
    {
        sVersion="1.1(1990)";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","PKZIP-SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fc2e8c......a1....8ccb81c3....3bc372..2d....2d....fabc....8ed0fb2d....a3....8ec0e8....a1"))
    {
        sVersion="1.1(1989-90)";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("extender","PMODE/W");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compare("'PMODE/W v'",0x55))
    {
        sVersion=MSDOS.getString(0x5e,4);
        bDetected=1;
    }
    else if(MSDOS.compareEP("fc1607bf....8bf757b9....f3a5061e071f5fbe....060ea4ad8be8b2..1eb8....50cb"))
    {
        sVersion="1.12-1.33";
        sOptions="1994-1997 by Daredevil and Tran.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","PMWLite");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e8$$$$fc1633c033db8ec026c406....26813e........75..26813e........74..26891e....26891e....07c3"))
    {
        sVersion="1.33";
        sOptions="by Daredevil & Tran";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("packer","PRO-PACK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("0e8cd38ec38cca8eda8b......8bf183....8bfed1..fdf3a553b8....508b......03......cb"))
    {
        sVersion="2.13-2.14";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cd38ec38cca8eda8b0e....8bf183ee..8bfed1..fdf3a553b8....508b......cb"))
    {
        sVersion="2.08";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","PRO32 Protected Mode DOS Extender");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e8$$$$8cc82ea3....fa6633f68eeeb8....8ed8b9....66658b0466890483c6..e2..6633c0bb"))
    {
        sVersion="1.7";
        sOptions="1996-99 by Dieter Pawelczak";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("sfx","PROPACK SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("558bec83ec..8c5e..e8....be....e8....b80030cd21ba....0e3c..72..a1....8ec033ff33c0b9....f2aeae75..fec0af75..5a8bd7061f"))
    {
        sVersion="2.18";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","PROTECT! EXE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.findSignature(0,MSDOS.getSize(),"0c02e9......e421e9......88e0..........eb....e621e9......88c4........e9......e621eb")!=-1)
    {
        sVersion="5.5";
        bDetected=1;
    }
    else if(MSDOS.findSignature(0,MSDOS.getSize(),"e42150e9......e621e9......58e621e9......b0ffeb")!=-1)
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e0e0e1f07bd"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e0e0e071fbb"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e0e0e1f07ba"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e0e0e1f07bb"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e0e0e1f07bf"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e0e0e1f07be"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e0e0e1f07e8"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("0e071e0e1fbf"))
    {
        sVersion="4.1";
        bDetected=1;
    }
    else if(MSDOS.compareEP("0e071e0e1fba"))
    {
        sVersion="4.1";
        bDetected=1;
    }
    else if(MSDOS.compareEP("0e071e0e1fbd"))
    {
        sVersion="4.1";
        bDetected=1;
    }
    else if(MSDOS.compareEP("0e071e0e1fbe"))
    {
        sVersion="4.1";
        bDetected=1;
    }
    else if(MSDOS.compareEP("0e071e0e1fbb"))
    {
        sVersion="4.1";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fd1e2efe......81c5"))
    {
        sVersion="5.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fd8a....80....1E80"))
    {
        sVersion="5.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fd1e........0e07"))
    {
        sVersion="5.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1efd2efe"))
    {
        sVersion="5.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fd1e0e070e1f26fe"))
    {
        sVersion="5.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("2ea3....8cd82ea3....8cc82ea3....2e892e....33c08ec0fafc26a1....2ea3....26a1"))
    {
        sVersion="3.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$1e068cc88ed88ec02ec606"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cd805....50b8....501e068cda83c2..b9....be....0e1fad8bd8ad03c28ec0260117e2"))
    {
        sOptions="relocpacker";
        sVersion="1.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1eb430cd213c..73..cd20be....e8....e8"))
    {
        sVersion="6.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("2ea3....8cd82ea3....8cc82ea3....2e892e....33c08ed8fafcbe....0e07"))
    {
        sVersion="3.1";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cdb0e0e1f07b9....e800005e81c6....89f7ac34..aae2"))
    {
        sVersion="4.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("80ed..80e9..80c5..31c5fd1e2efe0e....0e0a2b3a0f80d9"))
    {
        sVersion="5.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e124d..fd32c901cf0e33ff13fe85cf0e"))
    {
        sVersion="5.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("19da22b1....19ea22b7....3af33af780ea..30de23f933f91290....b6..fc1e"))
    {
        sVersion="5.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("00d6fc1e2efe0e....2ad70e1f80f2..80ce..3a8f....0e2a08"))
    {
        sVersion="5.5";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$1e068cc88ed88ec0be....8bfeb9....ac"))
    {
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","PVAC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("33c08ed806be....bf....b9....fcf3a5bf....b2..fa8926....bc....8bf42e8a0402c2a3....a3....8cdb"))
    {
        sVersion="1.04";
        sOptions="(1993) by Fernando Papa Budzyn"
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Pacific C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fcb8....8ed826a1....488bd881eb....ba....3bd372..8bda2bc3b9....d3e048488ed38be0"))
    {
        sVersion="7.51";
        sOptions="1984-91 by HI-TECH Software";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fcc516....b8....8ed88ed0268b1e....4b2bd8b8....f7c3"))
    {
        sVersion="7.51";
        sOptions="1984-91 by HI-TECH Software";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fc8d16....b8....8ed826a1....488bd881eb....ba....3bd372..8bda2bc3b9....d3e048488ed38be0"))
    {
        sVersion="7.51";
        sOptions="1984-91 by HI-TECH Software";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","Pack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$2e8c1e....2e8c06....8cc383c3..2e891e....8cc88ed8505351525657061eb462cd212e891e....b4..33db4bcd21"))
    {
        sVersion="1.0";
        sOptions="1987 by K.Kokkonen";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","Packer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fd1e0e81de....89f63bf23ab0....03f433f003f333f781d6....0e28de1a72..00d62250..1250..81e6....07"))
    {
        sOptions="by mARQUIS dE sOIRPE //mDS/uCF";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e800005e83c6..90b9....8cd805....2ec43c8cc303d88ec326010583c6..e2"))
    {
        sName="relocation packer";
        sOptions="by The DoP";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("immunizer","Palladix Virus Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("2e8c1e....b8....cd2172..3c..72..b8....cd218cc08ed88bd3b8....cd218cc88ed8b8....ba....cc8cc88ed88ec0be....8bfe"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("immunizer","Artemis Professional");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e8$$$$5d81ed....2e8c8e....2e8c86....fc268e06....33ff32c0b9....f2ae26803d..75..83c7..2e89be"))
    {
        sOptions="by Panda Software";
        sVersion="2.10s";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Pascal/MT+86");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e8$$$$8cc82e0306....2e0306....2e0306....2e0306....3b06....76..2ea1....2d....2ea3....3d....7f..1ee8"))
    {
        sVersion="3.1";
        sOptions="1982 by Digital Research, Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$8cc82e0306....2e0306....2e0306....2e0306....3b06....76..1ee8"))
    {
        sVersion="3.01";
        sOptions="1982 by Digital Research, Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","PassEXE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("061E0E0E071FBE....B9....871481......EB..C7......840087......FB1F584A"))
    {
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("patcher","Patcher");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b409ba....cd21ba....cd21b8....ba....cd2173..b409ba....cd21ba....cd21cd20a3....b409ba....cd21"))
    {
        sName="CrAcKeR";
        sVersion="0.2a";
        sOptions="by Deu$";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b409ba....eb$$cd21b409ba....eb$$cd21b409ba....eb$$cd21b409ba....eb"))
    {
        sOptions="by Mr. KIM";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","Phar Lap DOS Extender");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$8cd88ec0b8....8ed8c706........b8....2d....3bc476..c706........8f06....8f06....58a3....a3....a3....8cd88d1e....8ed0"))
    {
        sVersion="1986-93 (C5S2S2P6)";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$8cd88ec0b8....8ed8bb....8cc02bd881c3....b44acd2173..e9....8d06....05....8cdb8ed38be0fcb8....8ec033c033db33c9"))
    {
        sVersion="1986-91 (C5S2S2PJ)";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....50b8....50cb"))
    {
        sVersion="1986-91 (C3S2S2P8)";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$bd....2e8e1e....26a1....a3....268b1e....b1..8cdab8....05....3bc376..8bc32bc23d....76..b8....d3e0bb....891e....c706"))
    {
        sVersion="1986-89 (C5S2S2P6)";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$33ed2e8e1e....26a1....a3....8d06....a3....9d06....a3....8d06....a3....8cd88d1e....8ed08be3bb....26891e....8cc02bd8"))
    {
        sVersion="1986-89 (C5S2S2P6)";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$33ed2e8e1e....26a1....a3....268b1e....b1..4b891e....b8....05....3bc376..8bc3ba....2bc2d3e0c706........c706"))
    {
        sVersion="1986-89 (C5S2S2P7)";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8ed8b8....cd21a3....3c..7d..b4..ba....8edaba....cd2106b8....50cb"))
    {
        sVersion="1986-89 (C5S2S2PN)";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Pksmart");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("ba....8cc88bc803c281c1....51b9....511e8cd38d6f..55b1..51fc4bbe....33ff8ed88ec3b1..f3a5484a79..0e078edb33f633ffcb"))
    {
        sVersion="1.0b";
        sOptions="by Alex";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Power C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....05....b1..d3e88cca03c28b0e....8cdb8ed8891e....890e....8ec0ba....1e8cc88ed8b8....cd21588ed8bf....33c0"))
    {
        sVersion="2.0.x";
        sOptions="1989-91 by Mix Software";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","ProtEXE");

function detect(bShowType,bShowVersion,bShowOptions)
{

//new algo

    var ep_off = MSDOS.getEntryPointOffset();
    var i = 0;

    while (i < 20)
    {
        i++;
        switch(MSDOS.readByte(ep_off))
        {
            case 0xE9:
            {
                var addr = MSDOS.readWord(ep_off+1);
                if (addr > 0x7fff) {ep_off = ep_off - (0xffff-addr) + 2} else {ep_off = ep_off + addr + 3}
                break;
            }
            case 0xE8:
            {
                var addr = MSDOS.readWord(ep_off+1);
                if (addr > 0x7fff) {ep_off = ep_off - (0xffff-addr) + 2} else {ep_off = ep_off + addr + 3}
                break;
            }
            case 0xEB:
            {
                var addr = MSDOS.readByte(ep_off+1);
                if (addr > 0x7f) {ep_off = ep_off - (0xff-addr) + 1} else {ep_off = ep_off + addr + 2}
                break;
            }
        }
        var a = MSDOS.readByte(ep_off);
        if((a==0xbb || a==0xbe || a==0xbf) && MSDOS.compare("0600",ep_off+1))
        {
            sVersion="3.10-3.11";
            bDetected=1;
            break;
        }
        if(a != 0xbb && a != 0xbe && a != 0xbf && a != 0xe9 && a != 0xe8 && a != 0xeb)
        {
            break;
        }
    }

//some old sigs

    if(MSDOS.compareEP("9c9c5825....509d9c5825....3d....74..9c5825....0d....509d9c5825....74..ba....b0..eb"))
    {
        sVersion="2.11";
        bDetected=1;
    }
    else if(MSDOS.compareEP("9c505351525657551e06fcb8....cd2184c075..cd20a8..04..eb$$eb$$ba....ec0c..eb"))
    {
        sVersion="3.0";
        sOptions="by T.Torfs";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("'FCP/IV'bc....c3",-6))
    {
        sOptions="by FCP/IV (Future Crew)";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Quadru-Lock");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("9c508cda5252bb....8cc8488ed805....8ec0b9....8bf12bf38bfefdf3a44050ffd1"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","R-Crypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$68....60bf....b9....b0..2e3005fec047e2..61c706........c606"))
    {
        sVersion="0.91, 0.93";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

includeScript("rar");

function detect(bShowType,bShowVersion,bShowOptions)
{
    detect_RAR(0,bShowOptions);
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("immunizer","REC.small");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$8cd81ee8$$$$83c0..5fb9....81ef....87ef408ed82bdbb2..0017424383fb..75..e2"))
    {
        sVersion="1.03";
        sOptions="by Ralf Roth";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$8cd81ee8$$$$83c0..5fb9....81ef....87ef408ed82bdbb2..001702d34383fb..75..e2"))
    {
        sVersion="4.01";
        sOptions="by Ralf Roth";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","REC.small");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8cd81ee8$$$$83c0..5fb9....81ef....87ef408ed82bdbb2..0017424383fb..75..e2"))
    {
        sVersion="1.2";
        sOptions="by Ralf Roth";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cd81ee8$$$$5d83c0..81ed....b9....408ed82bdbb2..0017fec24383fb..75..e2"))
    {
        sVersion="1.01";
        sOptions="by Ralf Roth";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cd81ee8000083c0..5db9....81ed....408ed82bdbb2..0017fec24383fb..75..e2"))
    {
        sVersion="1.02";
        sOptions="by Ralf Roth";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b9....8cd883c0..fa8bdc8cd7bc....44408ed02be4b2..8bec0056..424483fc..75..e2"))
    {
        sVersion="1.05";
        sOptions="by Ralf Roth";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","REC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("061eb430cd213c..73..33c00650cbbf....8b36....2bf781fe....eb$$52ba....5aeb"))
    {
        sVersion="0.33-0.35";
        bDetected=1;
    }
    else if(MSDOS.compareEP("061e52b8....1ecd2186e03d....73..cd200e1fb4..e8$$$$5acd21"))
    {
        sVersion="0.24-0.32";
        bDetected=1;
    }
    else if(MSDOS.compareEP("061eb430cd213c..73..33c00650cb"))
    {
        sVersion="0.40c2";
        bDetected=1;
    }
    else if(MSDOS.compareEP("061e53bb....5beb$$eb$$eb$$2ec606"))
    {
        sVersion="0.40.5, 0.40.6";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","RELETTER");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$bc....bf....bb....8a0784c075..e9....438a073c..74..3c..74..89da438a073c..74"))
    {
        sVersion="1.0";
        sOptions="1993 by Hans J. Baer (converted to exe)";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","RERP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fc1e068cc383c3..0e1fbe....b9....ad3bc175..ad3bc174..03c38ec0ad8bf826011deb"))
    {
        sVersion="0.02";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","RHC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8cd8ba....8eda8ec2a3....b8....cd10b8....8ec0be....bb....b9....518bfbb9....b4..acabe2"))
    {
        sVersion="1.99.test";
        sOptions="1999 by Rowdy";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","RJcrush");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("06FC8CC8BA....03D052BA....52BA....03C28BD805....8EDB8EC033F633FFB9"))
    {
        sVersion="1.00";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","RLE com-packer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("60be....bf....8b0e....f3a4be....bf....57b9....f3a4c3"))
    {
        sOptions="by NOP/PC";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","RM/FORTRAN");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fc1eb8....8ed89a........81ec....8becc706........c706........33ffbe....b8....8ec0b9....f3a5897e..b8....ab8cdb8ec3bb"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","RoseTiny");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e8$$$$53bb....5beb$$eb$$582d....50061e5751e8$$$$e8$$$$5fb9....b8....2e87052e3145..47d1c8e2"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$5053b430cd2186e03d....73..cd2006502bc08ec08506....b8....eb"))
    {
        sVersion="0.95";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","RSX DPMI DOS Extender");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8cc2b8....8ed88ec08ed0bc....8916....e8....b44ccd21"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender",".RTLink VM Manager");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("9a########1e069a........2e8c06....8cc88ed852ba....b0..9a........5afcb8....2b06....d1e0"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","RTPatch SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e8$$$$8ccb8edb8c06....a3....8cc00106....0106....fd26a1....bb....b1..d3eb2bc38ec0bf....83e7..8bf7b9....d1e9f3a5fc"))
    {
        sVersion="3.20";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Realia Cobol");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("9a########9a########3c..75..8ed38be22bdb2bd2cb"))
    {
        sVersion="4.x";
        sOptions="1984-92 by Realia, Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Realia SPITBOL");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("2e8c1e....fc8ccaa1....0e1ffe06....a3....0116....b9....be....ad0bc074..03c28944..e2..8e06....bf....b1..b0..f3ae"))
    {
        sVersion="3.6";
        sOptions="1983-84 by Realia, Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","Relpack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$2e8c1e....2e8c06....8cc383c3..8cc88ed8be....fcad3d....75..ad3d....74..03c38ec0ad8bf826011deb"))
    {
        sVersion="1.0";
        sOptions="by TurboPower Software";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","SCRNCH");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$bb....b44acd2181eb....73..ba....b9....e9$$$$0e1fb440bb....cd21b8....cd21"))
    {
        sVersion="1.02";
        sOptions="by Graeme W. McRae";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","SEA-AXE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fcbc....0e1fe8....26a1....8b1e....2bc38ec0b1..d3e38bcbbf....8bf7f3a5bf....0657cb"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("fcbc....0e1fa3....e8....a1....8b1e....2bc38ec0b1..d3e38bcbbf....8bf7f3a5bf....0657cb"))
    {
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fc1e8a1e....16070e1f33d2e8....bd....885e..8f46..bf....33d28bc2b9....d1e873..35....e2..abfec275..be....e8"))
    {
        sVersion="3.33";
        sOptions="(LHA archive) by LARC";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","SHOW IT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("bf....32db2e8a150ad274..b4..cd214780fa..75..fec380fb..75..32db53b4..cd16b4..cd165b75"))
    {
        sVersion="1.2";
        sOptions="converted to exe";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","SP-FORTH");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....8ed88bec81c5....c746......e8$$$$8b46..25....0d....cd218b46..83ed..8946..c3"))
    {
        sVersion="2.5.13";
        bDetected=1;
    }
    if(MSDOS.compareEP("b8....8ed88bec81c5....c746......e8$$$$e8$$$$8bc583ed..8946..c3"))
    {
        sVersion="2.5.x";
        sOptions="1994";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","Scramb");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$e8$$$$5b0e1f81eb....8bc305....508bc803d12bfac3"))
    {
        sVersion="1.20";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Secure");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8CC805....50B8....50B0..068CD20683....50B0..52FC508CD28CCDBB....03EB4A8EDD8EC24DB9....33FFBE....AD35....ABE2"))
    {
        sVersion="2.1b";
        bDetected=1;
    }
//    else if(MSDOS.compareEP("e8$$$$9083f3..f972..0f6b5b..50b8....58eb$$eb$$b9....3e8336......f972"))
//    {
//        sVersion="0.19";
//        bDetected=1;
//    }
    else if(MSDOS.compareEP("8CC805....50B8....50CB"))
    {
        sVersion="2.1b";
        bDetected=1;
    }
//    else if(MSDOS.compareEP("e8$$$$f972......5b3bd453f972......b9....2e8037..43e2"))
//    {
//        sVersion="0.19";
//        bDetected=1;
//    }
    else if(MSDOS.compareEP("e8$$$$fa4c904c81f3....56be....5eeb$$eb$$81f3....444490fb5bf7c2....eb$$53b9....eb"))
    {
        sVersion="0.29";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8"))
    {
        var offset=MSDOS.readWord(MSDOS.getEntryPointOffset()+1)+MSDOS.getEntryPointOffset()+3;
        if(MSDOS.findSignature(offset,MSDOS.getSize()-offset,"2e8037..43e2f9")!=-1)
        {
            sVersion="0.19";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","Self UnStuffer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("86e303e9ace3$$1000e3$$00e40ec400e3"))
    {
        if(MSDOS.compareOverlay("0101'Aladdin'"))
        {
            sVersion="1.1";
            sOptions="by Aladdin Systems, Inc.";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","SelfChk");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("1e1eb430cd21b44c3c..73..cd21be....e8....e8....b8....1f07e9....0e0e1f07fcc3"))
    {
        sVersion="1.21";
        sOptions="1999 by Tsahi Chitin";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Shrink");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("509CFCBE....BF....57B9....F3A48B......BE....BF....F3A4C3"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("E9....509CFCBE....8BFE8CC805....8EC00657B9"))
    {
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","Shrinker");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("bb....ba....81c3....b8....b1..d3e803c38cd9498ec12603......2bc872..fa8ed3bc....fb"))
    {
        sVersion="3.0";
        sOptions="1997 by A.S.M.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....8ed88c06....fa8ed0bc....fbb430cd21a3....0650b434cd218c06....8bc3485b86df81fb"))
    {
        var nOffset=MSDOS.getOverlayOffset();
        if(MSDOS.findSignature(nOffset-0x1000, 0x1000, "'Simply Docs Viewer'")!=-1)
        {
            sName="Simply Docs Viewer";
            sVersion="3.0";
            sOptions="1990-94 by SimpleWare";
            bDetected=1;
        }
        else if(MSDOS.compareOverlay("'Simply Help!'"))
        {
            sName="Simply Help! TSR Viewer"
            sOptions="1990-94 by SimpleWare";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Small C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....8ed826a1....2d....80fc..72..b8....b1..d3e0fa8cdb8ed38be050fbb8....2d....d3e08bd8fec73bdc72..b8....50e8"))
    {
        sVersion="2.2";
        sOptions="1982-88 by J. E. Hendrix";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8ed826a1....2d....3d....72..b8....b1..d3e0fa8cdb8ed38be050fbb8....2d....d3e08bd881c3....3bdc72..b8....cd21"))
    {
        sVersion="2.1";
        sOptions="1982-88 by J. E. Hendrix";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","SnoopStop");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("..E9....EB..20......73..20....411A05"))
    {
        sVersion="1.15";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","StonyBrook Pascal+");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("31ED9A........5589E581EC....B8....0E509A........BE....1E0EBF....1E071FFC"))
    {
        sVersion="7.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("31ed9a........5589e5b8....50ff1e"))
    {
        sVersion="6.13";
        bDetected=1;
    }
    else if(MSDOS.compareEP("31ed9a........5589e581ec....16078dbe....b9....31c0fcf3ab1e07"))
    {
        sVersion="6.12";
        bDetected=1;
    }
    else if(MSDOS.compareEP("31ed9a........5589e59a........c706........c706........e8"))
    {
        sVersion="6.1G";
        bDetected=1;
    }
    else if(MSDOS.compareEP("31ed9a........5589e583ec..9a........9a"))
    {
        sVersion="6.14";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","Stub-386 DPMI DOS Extender");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("0e1f8c06....b430cd213c..73..b8....eb..c606......c606......c606......c606......9a"))
    {
        sOptions="1997 by LADsoft";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","SuckStop");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("EB......BE....B430CD21EB..9B"))
    {
        sVersion="1.11";
        bDetected=1;
    }
    else if(MSDOS.compareEP("'KAOT'58eb$$be....b430cd21eb$$3c..77..cd204e75..6a..0e6a..fec3cf"))
    {
        sVersion="1.11r";
        sOptions="1997 by KA0T //N0Ps";
        bDetected=1;
    }
    else if(MSDOS.compareEP("'KAOT'5ceb$$be....b430cd21eb$$3c..77..cd204e75..c706........1e6a..0fa1"))
    {
        sVersion="1.10r";
        sOptions="1997 by KA0T //N0Ps";
        bDetected=1;
    }
    else if(MSDOS.compareEP("'KAOT'5ceb$$be....b430cd21eb$$3c..77..cd204e75..6a..0e6a..fec3cf"))
    {
        sOptions="1997 by KA0T //N0Ps";
        bDetected=1;
    }
    else if(MSDOS.compareEP("3a324a1d....fb37fb1d....1d....be....81ee....6a..593a32"))
    {
        sVersion="1.0";
        sOptions="1997 by KA0T //N0Ps";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","Sydex SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....8ec0b430cd2186e0ba....3d....72..a1....26a3....bf....8a1d32ff47883926893e....268c1e....8cd88cc3"))
    {
        sOptions="1994 by Sydex, Inc.";
        bDetected=1;
    }
    if(MSDOS.compareEP("b8....8ec0e8....ba....3d....b8....72..e8....26a3....26890e....268916....8cd88cc381c3....2bd88ec0b4..cd21"))
    {
        if(MSDOS.compareOverlay("'SXD'00"))
        {
            sOptions="1997 by Sydex, Inc.";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Symantec BASIC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e8$$$$1e060e1f9a........8c06....33c08ec026a1....a3....26a1....a3....ba....b0..9a........fa26c706........268c0e....fb071fc3"))
    {
        sVersion="1.1a";
        sOptions="1993";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","TCEC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e4640c..e66466fae800005d81ed....b8....8bd48da6....b9....8bdc2ec00f..2e30072e000f44e2"))
    {
        sVersion="3.59r5";
        sOptions="by ThE CLERiC! //LZ0, EVD";
        bDetected=1;
    }
    else if(MSDOS.compareEP("54434543b9....83c4..33c0509df326ace3..eb"))
    {
        sVersion="3.55";
        sOptions="by ThE CLERiC! //LZ0, EVD";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","TMTSTUB DOS Extender");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b462cd218bc38ccb538edb8c0e....8c0e....8c0e....2bd8bd....03ddc1e5..b44acd2173..ba....e9"))
    {
        sVersion="0.31";
        sOptions="32bit WDOSX-based DOS-extender and loader by Rustam Gadeyev";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","TSCRUNCH");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$061e55575652515350161f0e078bf4bf....b9....fcf3a4b430cd213c0373..be....e9"))
    {
        sOptions="by Clarion software";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("immunizer","TTW");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("ab33c08bd88bc889c28bf889c6db52..e9"))
    {
        sOptions="1994-95 by TTW Inc.";
        bDetected=1;
    }
    if(MSDOS.compareEP("d88b....c2....89c6071fcb"))
    {
        sOptions="1994-95 by TTW Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("crypter","TUCCRYP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$2e8c06....8cca8ec28edab4..ba....cd218cda2ea1....2bd08edabb....2e8b0e....b2..51b9....8a0732c28807fec280"))
    {
        sVersion="2+";
        sOptions="George Stark";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","TXT2COM + generic com2exe");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e8$$$$c706........803e......75..8d36....e8....e8....e8....e8....e8....ffa7"))
    {
        sVersion="1.1";
        sOptions="1987 by Keith P. Graham";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8d26....e8$$$$b4..cd103c..74..c706........c706........3c..74..3c..74..8d16....b409cd21cd20c706"))
    {
        sVersion="2.06";
        sOptions="1989 by Keith P. Graham";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","TXTmaker");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("eb$$b4..33dbcd1080fc..74..b0..eb$$b44ccd21"))
    {
        sVersion="1.22";
        sOptions="1991 by Jack A. Orman";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","Tenth Planet Soft packer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("50068cca8edabe....fcad95ad9303da8ec38b0c8bf14e8bfefdf3a4b8....0650cb"))
    {
        sOptions="1996";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","TinyProg");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$eb$$83ec..83e4..8bec50be....0336....8cd28cd803....33c275..fc8ec233ff"))
    {
        sVersion="3.x";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$eb$$83ec..83e4..8bec50be....0336....8cd28cd803....33c275..fc8ec233ff"))
    {
        sVersion="3.x";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$83ec..83e4..8bec50be....0336....8cd28cd803....33c275..fc8ec233ff"))
    {
        sVersion="3.x";
        sOptions="modified";
        bDetected=1;
    }
    else if(MSDOS.compareEP("83ec..83e4..8bec50be....0336....8cd28cd803....33c275..fc8ec233ff"))
    {
        sVersion="3.x";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$2ec606......e9$$$$83ec..83e4..8bec50be............8cd28cd803....33c275..fc8ec233ff"))
    {
        sVersion="3.x";
        sOptions="modified";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","TinyProt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("061e575650535152bd....0e1f8cc005....8ec0be....8b44..8cc103c18944..06b8....cd21891e....8c06....b8....cd21891e....8c06....07ba....b8....45cd21cd01"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("18..00..eb$$83ec..83e4..8bec50be....0336....8cd28cd80344..33c275..fc"))
    {
        sVersion="1.0c-e";
        sOptions="1996 by I.Hakszer";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Topspeed C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8cc1e3$$1eba....8eda8b0e....8b36....ff36....50a1....ba....8eda890e....8936....a3....58"))
    {
        sVersion="2.0";
        sOptions="1989 by JPI";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cc1e3$$1eba....8eda8b0e....8b36....ff36....50a1....48ba....8eda890e....8936....a3....c706........58"))
    {
        sVersion="2.0";
        sOptions="1989 by JPI";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Topspeed Modula");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e90000fc2bedbc....b8....8ed88c06....26a1....a3....54583bc4b8....75..b430cd213c..74..3c..77..b8....8cdbe8....86c4a3....8e06"))
    {
        sVersion="2.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1eba....8eda8b0e....8b36....ff36....5053a1....48ba....8eda890e....8936....a3....c706........2ea1....a3"))
    {
        sName+=' RTL';
        sOptions="1989 by JPI";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1eba....8eda8b0e....8b36....ff36....50a1....48ba....8eda890e....8936....a3....58c706........c706"))
    {
        sName+=' RTL';
        sOptions="1989 by JPI";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1eba....8eda8b0e....8b36....ff36....50a1....48ba....8eda890e....8936....a3....c706........58c706"))
    {
        sName+=' RTL';
        sOptions="1989 by JPI";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fc1eba....8eda8b0e....8b36....ff36....50a1....ba....8eda890e....8936....a3....58c706........c706"))
    {
        sName+=' RTL';
        sOptions="1989 by JPI";
        bDetected=1;
    }
    else if(MSDOS.compareEP("ea########2e8c1e....fc2ef706........74..e8....eb..b8....ba....0e1fcd212bc02ef706........74"))
    {
        sVersion="2.0";
        sOptions="by JPI";
        bDetected=1;
    }
    else if(MSDOS.compareEP("ea########2e8c1e....fc2bc08cd3ba....8ec2bf....b9....f3ab423bd372..508becffe0"))
    {
        sVersion="1.17";
        sOptions="by JPI";
        bDetected=1;
    }
    else if(MSDOS.compareEP("ea########8cdb2e8e1e....891e....fc2ef706........74..2bc02e8e1e....ff36....8cd3ba....8ec2bf....b9....f3ab423b..72"))
    {
        sOptions="by JPI";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","TraceLock");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("1e06e8$$$$0e0e1f07b4..b9....be....8bfefcac32c4d2c802e1aae2..b8....35....8706....c3"))
    {
        sVersion="0.9";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Trap");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e800005b83c3..908bd3e8$$$$5b2e803f..74..90908bdab9....eb"))
    {
        sVersion="1.21";
        sOptions="by Christoph Gabler";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cd0bb....8ed333c98ed0b9....eb$$e2..33d2"))
    {
        sVersion="1.18";
        sOptions="by Christoph Gabler";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cd0bb....8ed333d28ed0b9....eb$$e2..33d2"))
    {
        sVersion="1.x";
        sOptions="by Christoph Gabler";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b9....eb$$e2$$eb..90cd20e2"))
    {
        sVersion="1.15";
        sOptions="by Christoph Gabler";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e800005b83c3..908bd3e8$$$$5b2e803f..74..90908bdab9....2ec0"))
    {
        sVersion="1.20";
        sOptions="1998 by Christoph Gabler";
        bDetected=1;
    }
    else if(MSDOS.compareEP("05....eb$$bb....81ebfa..85f9eb$$eb$$39fbeb"))
    {
        sVersion="1.22";
        sOptions="by Christoph Gabler";
        bDetected=1;
    }
    else if(MSDOS.compareEP("81ea....eb$$b9....81c1....39d0bb....85c3b9....f505....bb....ba....81c2"))
    {
        sVersion="1.23";
        sOptions="by Christoph Gabler";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$39c281c3....eb$$81c3....39cc81ea....39e2b9....85da39e9eb"))
    {
        sVersion="1.24";
        sOptions="by Christoph Gabler";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cd1ba....8ed233d28ed18bcaeb"))
    {
        sVersion="1.13";
        sOptions="by Christoph Gabler";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$5d81ed....458cd68bfc0f23c70f23ceb0..e6..fa0e17"))
    {
        sVersion="1.26b1";
        sOptions="2000 by Christoph Gabler";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Turbo Basic");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("2E8C......2EC706........E8....E8"))
    {
        sVersion="1.0";
        sOptions="1987";
        bDetected=1;
    }
    else if(MSDOS.compareEP("faba....8ec28ed2bc....fb8bfc32edbe....8a0e....8bc12bf94f81e7....268c1e....8be78ec2fcf3a48eda8bf7bb....9150"))
    {
        sVersion="1.0";
        sOptions="1987";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Turbo Prolog");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fab8....8ed8b8....a3....8ed0bc....fb8c06....268e06....8c06....b8....a3....9a"))
    {
        sVersion="2.0";
        sOptions="1986-88";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("joiner","TurboChainer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("ba....8eda8cd32bdad1e3d1e3d1e3d1e3fa8ed203e3fbb8....8ed81efc8d06....83c0..501ebe....8cc08ed8075f8b0c32ed5146f3a4591f"))
    {
        sVersion="1.03";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","Txt2Exe");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8cc88ed88cc08ed0bc....b4..cd10a2....3c..74..268a1e....0e07"))
    {
        sVersion="4.01";
        sOptions="1996 by Wang Lisan";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","UCEXE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("501e0e1ffc33f6e8....160733f633ffb9....f3a506b8....50cb"))
    {
        sVersion="2.3";
        sOptions="1996 by A.Cadach";
        bDetected=1;
    }
    else if(MSDOS.compareEP("501e0e1ffc2bf6e8....16072bf68bfeb9....f3a406b8....50cb"))
    {
        sVersion="2.4";
        sOptions="1996 by A.Cadach";
        bDetected=1;
    }
    else if(MSDOS.compareEP("501e0e1ffc160733f633ffb9....f3a506b8....50cb"))
    {
        sVersion="3.0";
        sOptions="1996 by A.Cadach";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","UPX");

function getUPXVersion(nSize)
{
    var sResult="";
    var nOffset=MSDOS.findString(0,nSize,"$Id: UPX");
    if(nOffset!=-1)
    {
        sResult=MSDOS.getString(nOffset+9,4);
    }

    return sResult;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    sVersion=getUPXVersion(Math.min(8192,MSDOS.getSize()));
    if(sVersion!="")
    {
        bDetected=1;
    }
    else
    {
        if(MSDOS.compareEP("..............fcb430cd213c03"))
        {
            sVersion="3.X";
            bDetected=1;
        }
        else if(MSDOS.compareEP("B9....BE....89F71EA9....8CC805....8ED805....8EC0FDF3A5FC2E........73..92AFAD0E0E"))
        {
            sVersion="0.82";
            bDetected=1;
        }
        else if(MSDOS.compareEP("8CCBB9....BE....89F71EA9....8D......8ED805....8EC0FDF3A5FC"))
        {
            sVersion="0.20-0.60";
            bDetected=1;
        }
        else if(MSDOS.isSignaturePresent(0,Math.min(128,MSDOS.getSize()),"'UPX!'"))
        {
            bDetected=1;
        }
        else if(MSDOS.compareEP("f99cb9....be....89f71ea9....8cc805....8ed805....8ec0fdf3a5fc2e........73..92afad0e0e"))
        {
            sVersion="?.??";
            bDetected=1;
        }

        if(bDetected)
        {
            // Correct version for large files.
            sUPXVersion=getUPXVersion(MSDOS.getSize());
            if(sUPXVersion!="")
            {
                sVersion=sUPXVersion;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","UR/FORTH");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fc2e8c06....2e8e1e....e8$$$$b430cd213c..73..e8"))
    {
        sVersion="1.03";
        sOptions="1986-88 by Laboratory Microsystems, Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Un2pack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("9cba....2d....81e1....81f3....b4..9db8....ba....8cdb03d83b1e....73..83eb..fa8ed3bc"))
    {
        sVersion="2.0";
        sOptions="1994 by The CCS-Productions";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","UnPackStop");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("3670..b8....81c0....bb....43e8....5f83c7..0e570656cbbe....eb"))
    {
        sVersion="0.9x";
        sOptions="by Szaszi (Szabo Laszlo)";
        bDetected=1;
    }
    else if(MSDOS.compareEP("68....c3"))
    {
        var nOffset=MSDOS.readWord(MSDOS.getEntryPointOffset()+1)-32;
        if(MSDOS.compare("bf....e2..a541b9....2e31154747e2",nOffset))
        {
            sVersion="0.95";
            sOptions="by Szaszi (Szabo Laszlo)";
            bDetected=1;
        }
        else if(MSDOS.compare("b9....39fe2e31154747eb",nOffset))
        {
            sVersion="0.95 freeware";
            sOptions="by Szaszi (Szabo Laszlo)";
            bDetected=1;
        }
    }
    else if(MSDOS.compareEP("4e46555dbb....70..b8....81c0....4c44cd213efc268b2e....8ec5"))
    {
        sVersion="0.94";
        sOptions="by Szaszi (Szabo Laszlo)";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....40bb....4be8$$$$be....eb$$5f83c7..0e570656cb"))
    {
        sVersion="0.94";
        sOptions="by Szaszi (Szabo Laszlo)";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("immunizer","UniVac");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8cd02ea3....8bc42ea3....b8....8ed0b8....8be05553515257561e060e1f8cc82e2b06....2e0106....bf....268e05bf....b9....b0..f2ae"))
    {
        sVersion="1.0";
        sOptions="1990 by BVMsoft";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("crypter","Unknown cryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fa8cde8ccf8edf8ec783c7..bb....8b1f83c3..b1..d3eb2bfbe8"))
    {
        sVersion="#01";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$b9....b3..be....bf....acfec332c3aae2"))
    {
        sVersion="#02";
        sOptions="exe 0-relocs crypt";
        bDetected=1;
    }
    else if(MSDOS.compareEP("3ec606......90eb$$2e8a36....8ec08cd8be....bf....2e033e....26a3....26893e....26a3....26c706........0e07"))
    {
        sVersion="#03";
        bDetected=1;
    }
    else if(MSDOS.compareEP("9090e9$$$$8cd88be8b8....8be08ccb8edb8ec3bf....892de8....8cc88ed88ec01e33db8edbbb....81eb....8b071f1ebb"))
    {
        sVersion="#04";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$be....bf....2e89352eff26"))
    {
        sOptions="protector";
        sVersion="#05";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bf....b8....fa8ed08be7fb1e1eb8....0e500e501efc8cd08ec0be....8cc806b9....578ed8f3a5cb"))
    {
        sOptions="Russ";
        sVersion="#06";
        bDetected=1;
    }
    else if(MSDOS.compareEP("........0e1f8b0e....8bf14e89f78cdb031e....8ec3fdf3a453b8....50cb"))
    {
        sOptions="Aidstest";
        sVersion="#07";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$e8$$$$bb....e8$$$$29c9e8$$$$e8$$$$e9$$$$8ed9e9$$$$870feb$$e8$$$$eb$$51eb$$eb$$29dbe8$$$$bf....e9$$$$e8$$$$871de8$$$$53eb$$b3..b7..bf....2e8a05"))
    {
        sOptions="by Matrix Technologies";
        sVersion="#08";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bd....50060ee8$$$$065733ff570e1f07be....b9....8004..46e2..b1..ac268a1d04..aa80eb..885c..e2"))
    {
        sOptions="SYN!";
        sVersion="#09";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$eb$$bf....e9$$$$26f6e8$$$$e9$$$$8edee8$$$$8735e8$$$$56e9"))
    {
        sOptions="by Matrix Technologies";
        sVersion="#10";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b3..060e1f8b0e....8bf14e89f78cdb031e....8ec3fdf3a453b8....50cb"))
    {
        sOptions="Aidstest";
        sVersion="#11";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$eb$$8cca8eda8ec2be....bf....b9....2ec706........31c0ada3....3136....8bc18bdef7e33106....3116....a1....abe2"))
    {
        sVersion="#12";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Upper Deck Forth");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fc2e8c06....b8....cd213c..73..b4..2e8e1e....ba....cd212eff36....33c050cb"))
    {
        sVersion="2.00";
        sOptions="1990, 1991 by Upper Deck Systems";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("joiner","V-Load");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("33f62ef606......74..0e588bd881e3....75..b1..d3e02bf0d3ee065b0e582bc3b1..bb....8bd3d3eb81e2"))
    {
        sVersion="0.9c1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Visual COBOL (XO)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("9a########061fbe....b9....ac3cff75..e2..ad8ed88b0e....8ed08be1eb"))
    {
        sVersion="3.3";
        sOptions="1993 by mbp Software & Systems";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("compiler","WATCOM C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("E9....'WATCOM C'"))
    {
        bDetected=1;
    }
    else if(MSDOS.isSignaturePresent(0,Math.min(2048,MSDOS.getSize()),"'WATCOM C'"))
    {
        bDetected=1;
    }
    else if(MSDOS.isLE())
    {
        var nLE=MSDOS.getNEOffset();
        var nDataPage=MSDOS.readDword(nLE+0x80);
        var nOffset=MSDOS.readDword(nLE+0x1C);
        if(MSDOS.compare("EB..'WATCOM C'",nDataPage+nOffset))
        {
            bDetected=1;
        }
    }
    else if(MSDOS.compareEP("e9$$$$fbb9....8ec126bb....83c3..80e3..26891e....268c1e....01e383c3..80e3..8ed189dc26891e....89dad1ea"))
    {
        sName="Open Watcom C/C++16";
        sVersion="2002 by Sybase, Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$fbb9....8ec1bb....83c3..80e3..26891e....268c1e"))
    {
        sName="Open Watcom C/C++16";
        sVersion="1988-2002 by Sybase, Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cd8bb....8edb8b1e....0bdb74..8cd18bd4fa8ed3bc....fb50535152a3....e8....5a595b580bdb74..fa8ed18be2fb"))
    {
        sName+="/C++";
        sVersion="1990 by WATCOM Systems Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$2e8c06....2e8c16....2e8926....fa8cc88ed0bc....fb2ec706........b8....cd213c..72..2e830e......e8....8bd8"))
    {
        sName+="/C++";
        sVersion="1991 by WATCOM Systems Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$2e8c06....2e8c16....2e8926....2ea1....2e0306....fa8ed0bc....fbb8....b1..d3e874..33c054593bcc75..9cb9"))
    {
        sVersion="1992 by WATCOM Systems Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$33ed2e8e1e....26a1....a3....8d06....a3....8d06....a3....8d06....a3....8cd88d1e....8ed08be3bb....26891e"))
    {
        sName+=" 386";
        sVersion="1990 by WATCOM Systems Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$2e8c06....2e8c16....2e8926....2ea3....2e8916....2e891e....fa8cc88ed0bc....fbe8....8bd8e8....2ea2....fa"))
    {
        sVersion="1990 by WATCOM Systems Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("faba....8eda8916....8c06....8c0e....b8....a3....b8....a3....8ed28be0fb0633c9518becbe....268b04a3....8ec28e1e"))
    {
        sVersion="1988 by WATCOM Systems Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$2e8c06....2e8c16....2e8926....2ea3....2e8916....2e891e....2e8c1e....fa8cc88ed0bc....fbe8....8bd8fa2e8e16"))
    {
        sVersion="1992 by WATCOM Systems Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("extender","WDos/X");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compare("'WDOSX'",52))
    {
        sVersion=MSDOS.getString(58,4);
        sOptions="1996-1999 by Michael Tippach";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","WDOSX32");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("bc....fcbf....ba....e8....b8....abe8....ba....e8....b0..aabe....bf....89faac3c..75..e8....57444f53584c45"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","WPFORTH");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("bd....bc....b8....0e5b81c3....8ed3ffe0"))
    {
        sVersion="1.0";
        sOptions="1993 by Albert Chan";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","WWPACK mutation engine");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8cc981c1....51b9....510606b1..51b1..8cd383eb..5351fc8cd5b8....8cca03d0be....33ff4d8ec58edab1..f3a54a4879"))
    {
        sVersion="1.0";
        sOptions="by Barthazi Andras";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cc981c1....51b9....5106068ccab8....03d0b1..518cd383eb..53b1..51fc8cd5be....33ff4d8ec58eda4ab9....50"))
    {
        sOptions="by MR WiCKED";
        bDetected=1;
    }
    else if(MSDOS.compareEP("81ce....1bf78a....80fa..2a95....fc03f633f281e6....1e10ea0e1f00d20e0732b4....21da2efe06"))
    {
        sOptions="1996 by van Hauser";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8ccab8....03d08cc981c1....51b9....510606b1..518cd383eb..53b1..51fc8cd5be....33ff4d8ec58eda4ab9....50"))
    {
        sVersion="3.04a";
        sOptions="by Boogie";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cd383eb..8cc981c1....51b9....510606b1..51fc8cd5b1..5351b8....8cca"))
    {
        sVersion="3.04a";
        sOptions="by Boogie";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cc981c1....51b9....51b1..068cd30651b1..b8....8cca03d0fc"))
    {
        sVersion="3.04a";
        sOptions="by Boogie";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cc981c1....51b9....510606fc8cd5b1..51b1..8cd383eb..5351"))
    {
        sVersion="3.04a";
        sOptions="by Boogie";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cc981c1....51b9....fc8cd5510606b1..51b1..8cd383eb..5351"))
    {
        sVersion="3.04a";
        sOptions="by Boogie";
        bDetected=1;
    }
    else if(MSDOS.compareEP("f9be....81ee....2e80b4......eb"))
    {
        sVersion="1.1c";
        bDetected=1;
    }
    else if(MSDOS.compareEP("061e0e0e071fb430cd2186e03d....73..cd20eb$$eb$$5055528cd2fa50b8....58eb"))
    {
        sOptions="REC by R0SE";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cc98cd383eb..81c1....51b9....510606b1..518ccafc8cd5b1..5351b8"))
    {
        sVersion="1.0";
        sOptions="by Barthazi Andras";
        bDetected=1;
    }
    else if(MSDOS.compareEP("......81......2e80.."))
    {
        sOptions="by unknown";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","WWPACK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compare("'WWP'",0x1c))
    {
        if(MSDOS.compareEP("B8....8CCA03D08CC981C1....51"))
        {
            if(MSDOS.compareEP("6A..06068CD383....536A..FC",14))
            {
                sVersion="3.00";
                sOptions="Extractable";
            }
            else if(MSDOS.compareEP("33C9B1..510606BB....538CD3",14))
            {
                sVersion="3.02";
                sOptions="Extractable";
            }
            else if(MSDOS.compareEP("BB....53",20))
            {
                sVersion="3.03";
            }
            else if(MSDOS.compareEP("B1..518CD3",20))
            {
                sVersion="3.05c4";
                sOptions="Modified";
            }
        }
        else if(MSDOS.compareEP("BE....BA....BF....B9....8CCD8EDD81ED....06068BDD2BDA8BD3FC"))
        {
            sVersion="3.00";
            sOptions="Relocations pack";
        }
        else if(MSDOS.compareEP("BE....BF....B9....8CCD81ED....8BDD81EB....8BD3FCFA1E8EDB011533C02EAC"))
        {
            sVersion="3.02";
            sOptions="Relocations pack";
        }
        else if(MSDOS.compareEP("0305....B8....8CCA03D08CC981C1....51B9....510606B1..518CD3"))
        {
            sVersion="3.05c4";
            if(MSDOS.compareEP("1A",3))
            {
                sOptions="Extractable";
            }
            else if(MSDOS.compareEP("1B",3))
            {
                sOptions="Unextractable";
            }
            if(MSDOS.compareEP("C0",2))
            {
                sOptions=sOptions.append("Password check","Virus shield");
            }
            else if(MSDOS.compareEP("80",2))
            {
                sOptions=sOptions.append("Password check");
            }
            else if(MSDOS.compareEP("40",2))
            {
                sOptions=sOptions.append("Virus shield");
            }
        }
        bDetected=1;
    }
    else if(MSDOS.compareEP("BE....BF....B9....8CCD81ED....8BDD81EB....8BD3FCFA"))
    {
        sVersion="3.04/3.05";
        sOptions="Relocations pack";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8cca03d08cc981c1....51b9....510606b1..518cd383eb..53b1"))
    {
        sVersion="3.05beta P";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8cca03d08cc981c1....51b9....510606fc8cd5b1..51b1..8cd3"))
    {
        sVersion="3.0x P";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8cca03d08cc981c1....51b9....510606b1..51fc8cd5b1..8cd3"))
    {
        sVersion="3.0x P";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8cca03d08cc981c1....51b9....510606bb....538cd383eb..53b1"))
    {
        sVersion="3.03 PU";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8cca03d08cc981c1....5133c9b1..510606bb....538cd383eb..53b1"))
    {
        sVersion="3.02, 3.02a P";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8cca03d0fc8cd58cc981c1....51b9....510606b1..51b1..8cd383eb..53514d"))
    {
        sVersion="3.04 PR";
        sOptions="Relocations pack";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fa1e8ed8b8....cd218ed98bd3b8....cd211fe800005a83c2..87d4ffe4"))
    {
        sVersion="3.05 PU";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8cca03d08cc981c1....516a..06068cd383eb..536a..fc8cd5be....33ff"))
    {
        sVersion="3.0 P";
        bDetected=1;
    }
    else if(MSDOS.compareEP("be....ba....bf....b9....8ccd8edd81ed....06068bdd2bda8bd3fc8ec3"))
    {
        sVersion="3.0";
        sOptions="Relocations pack";
        bDetected=1;
    }
    else if(MSDOS.compareEP("ba....faf9............72..0633c98ec1bf....ab8bc6ab07e8....5a"))
    {
        sVersion="3.03 PU";
        sOptions="Relocations pack modified";
        bDetected=1;
    }
    else if(MSDOS.compareEP("faba....f8bb....b9....73..0633c98ec1bf....ab8bc6ab07e8....5a"))
    {
        sVersion="3.03 PU";
        sOptions="Relocations pack";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8cca03d08ccd81c5....55b9....510606b1..518cd383eb..53b1..51fc8cd5be....33ff"))
    {
        sVersion="3.05c PU";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Whitesmiths C (dos86)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("be....8cd18cd83bc175..a3....e9....8bde8a0f81e1....03d9d1e941ff3783eb..e2..8bf48cd936890e....8cd18ed98c06....8c06"))
    {
        sVersion="3.3";
        sOptions="1988 by Whitesmiths, Ltd. and Cosmic, Sarl";
        bDetected=1;
    }
    else if(MSDOS.compareEP("be....8cdb8cd03bc374..8a0c81e1....03f1d1e941ff3483ee..e2..8bf4b9....8ed9"))
    {
        sVersion="3.2";
        sOptions="1987 by Whitesmiths, Ltd";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("other","Window book");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$e8$$$$fc5e8cda8b1e....bd....8edd8ec5b9....bf....2bcf33c02ea3....41d1e9f3ab891e....8916....8ec2bb....03dd"))
    {
        var nOffset=MSDOS.findSignature(MSDOS.getOverlayOffset(), 2000, "1a1a7bf7");
        if(nOffset!=-1)
        {
            sVersion="4.20";
            bDetected=1;
        }
    }
    else if(MSDOS.compareEP("e9$$$$e8$$$$fc5e8cdaa1....bd....8edd8ec5a3....b9....bf....2bcf33c02ea3....d1e9f3ab8916....8ec2bb....a1....03c7"))
    {
        var nOffset=MSDOS.findSignature(MSDOS.getOverlayOffset(), 2000, "1a1a7bf7");
        if(nOffset!=-1)
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Wizardy protection");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("2eff16....e9"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","WordPerfect EXEPack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("958cc005....0e1fa3....0306....8ec08b0e....8bf94f8bf7fdf3a48b16....50b8....50cb"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","XDOC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("2e8c16....eb00ea....ffff"))
    {
        sVersion="1.20";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","XMLOD DOS-Extender");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8cd805....8ed88ed0bc....90908d06....ffd0"))
    {
        sOptions="1991 by IGC, Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fa8cd805....8ed88ed0bc....90908d1e....c1eb..03c333f6268b5c"))
    {
        sVersion="1992";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","XPACK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8becfa33c08ed0bc....2e8f06....2e8f06....eb$$0ebb....535feb$$178be5fb48d1e8eb"))
    {
        sVersion="1.52";
        bDetected=1;
    }
    if(MSDOS.compareEP("e90000e9$$$$2ec706........8beceb$$2ec606......eb009a"))
    {
        sVersion="1.0j";
        bDetected=1;
    }
    if(MSDOS.compareEP("b8....15....8beceb$$b8....ffe0"))
    {
        sVersion="1.65, 1.66";
        bDetected=1;
    }
    if(MSDOS.compareEP("b8....15....813e........e8$$$$e8$$$$eb$$1e0e1f8beceb"))
    {
        sVersion="1.67.l";
        bDetected=1;
    }
    if(MSDOS.compareEP("b8....15....eb$$b8....ffe0"))
    {
        sVersion="1.67j";
        bDetected=1;
    }
    if(MSDOS.compareEP("8beceb$$b8....ffe0"))
    {
        sVersion="1.65b2";
        bDetected=1;
    }
    if(MSDOS.compareEP("e9$$$$8beceb$$b8....ffe0"))
    {
        sVersion="1.44";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","Xtender DOS Extender");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("0e1fe8$$$$e8$$$$b8....9c5b80e7..539d9c5980e5..80fd..74..4080cf..539d9c5980e5..74..40668bdc66"))
    {
        sVersion="1.04.36037";
        sOptions="by vyc/sophtXS";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","ZIPSCRUB relocations compressor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8cc88ed88cc381c3....891e....8bc30306....8ec08b0e....8bf14e8bfefdf3a450b8....50cb"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cc88ed88cc381c3....8bc30306....8ec08b0e....8bf14e8bfefdf3a450b8....50cb"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","ZOO SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("ba....2e8916....8b2e....8eda8c06....b8....8cda05....83c3..8ed28be0e8"))
    {
        if(MSDOS.compareOverlay("'ZOO'............'Archive'"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Zbikowski C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("ba....8cd32bdab1..d3e3fa8ed203e3fbfc8b1e....8bc32bc2a9....74..8bda80c7..33c0eb..b1..d3e02d....36a3"))
    {
        sOptions="1983 by Mark Zbikowski (Microsoft Corp.)";
        bDetected=1;
    }
    else if(MSDOS.compareEP("ba....8cd32bdab1..d3e3fa8ed203e3fbbe....8b1e....36891e....33ff8bc70bdb74..b9....8ec3f2ae"))
    {
        sOptions="1983 by Mark Zbikowski (Microsoft Corp.)";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

includeScript("zip");

function detect(bShowType,bShowVersion,bShowOptions)
{
    detect_Zip(0,bShowOptions);
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Zortech/Symantec C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fafcb8....8ed88c......268b......891e....8bd82b1e....891e....268b1e....2bd881fb....72..bb....8bd003d342b1..d3e38ed08be381eb....80ff..73..ba....e9....fbb430cd21a3"))
    {
        sVersion="2.10 - 3.0r1*, 4.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fafcb8....8ed88ed08ec0bc....33c050e8....eb"))
    {
        sVersion="2.10 - 3.0r1, 4.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fafcb8....8ed0bc....b8....8ed88c06....660fb7c066c1e0..ba"))
    {
        sVersion="3.0";
        sOptions="1991";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fafcb8....8ed88ed0bc....2e8c06....33d21e2e8e1e....be....8a0e....32ede3"))
    {
        sVersion="3.0";
        sOptions="1991";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fafcb8....8ed8bb....81c3....8ed08be3fb8becbe....268a0c4632ed8bd9"))
    {
        sVersion="3.0";
        sOptions="1991";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fafcb8....8ed88ed0bc....b4..cd214b891e....8cc0a3....b8....cd21"))
    {
        sVersion="2.10 - 3.0r1, 4.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fafcb8....8ed833c08ed88bf8bb....b9....b8....8905"))
    {
        sVersion="2.10 - 3.0r1, 4.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fab8....8ed8a3....8c06....268b......891e....8bd82b1e....891e....268b......891e....2bd881fb....72..bb....8bd003d34289"))
    {
        sVersion="2.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fab8....8ed88c06....268b1e....891e....8bd82b1e....891e....268b1e....2bd881fb....72..bb....8bd0"))
    {
        sVersion="2.00";
        sOptions="1989 by Walter Bright";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fab8....dbe38ed88c06....8bd82b1e....891e....268b1e....2bd881fb....72..bb....8bd003d342b1..d3e38ed08be381eb....81fb....77"))
    {
        sVersion="4.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("eb$$fab8....05....b9....d3e88cc903c18ed88c06....268b1e....891e....8bd82b1e....891e....268b1e....2bd8"))
    {
        sVersion="4.0";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e8$$$$fc06b8....cd21bf....8cc98ed9be....b9....f3"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("fafcb8....8ed8bb....81c3....8ed08be38becfb8cc0a3....be....268b04a3....8b36"))
    {
        bDetected=1;
    }
    else if(MSDOS.compareEP("fafcb8....8ed88c06....8ed0bc....fbba....e8....b8....cd2186c4"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","Zurenava DOS Extender");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("be....bf....b9....56fcf3a55fe9"))
    {
        sVersion="0.45";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
includeScript("languages");

function detect(bShowType,bShowVersion,bShowOptions)
{
    handleLanguage();

    return "";
}		
// DIE's signature file

init("operation system","MS-DOS");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (MSDOS.isVerbose()) {
        sName = MSDOS.getOperationSystemName();
        sVersion = MSDOS.getOperationSystemVersion();
        sOptions = MSDOS.getOperationSystemOptions();
        
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
var File=MSDOS;

includeScript("result");

/**
 * Get the “base” offset, after the header.
 * @param {Int} [nOffset=0] - The offset from the base offset.
 * @returns {Int}
 */
MSDOS.getBaseOffset = function(nOffset)
{
    if(arguments.length==0)
    {
        nOffset=0;
    }
    return (MSDOS.readWord(8)<<4)+nOffset;
}

/**
 * Translate segment/offset address pair to file offset.
 * @param {UShort} nSegment - Segment address.
 * @param {UShort} [nOffset=0] - Offset address.
 * @returns {Int}
 */
MSDOS.AddressToOffset = function(nSegment,nOffset)
{
    if(arguments.length==1)
    {
        nOffset=0;
    }
    nOffset+=nSegment<<4;
    return MSDOS.getBaseOffset(nOffset&0xFFFFF);
}

/**
 * Get the entry point file offset.
 * @param {Int} [nOffset=0] - The offset from the entry point.
 * @returns {Int}
 */
MSDOS.getEntryPointOffset = function(nOffset)
{
    if(arguments.length==0)
    {
        nOffset=0;
    }
    return MSDOS.AddressToOffset(MSDOS.readWord(0x16),MSDOS.readWord(0x14))+nOffset;
}

/**
 * Get the NewExe (or LE/LX) file offset (assuming it's valid).
 * @param {Int} [nOffset=0] - The offset from the NewExe offset.
 * @returns {Int}
 */
MSDOS.getNEOffset = function(nOffset)
{
    if(arguments.length==0)
    {
        nOffset=0;
    }
    return MSDOS.readDword(0x3C)+nOffset;
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","aPACK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("1E068CCBBA....03DAFC33F633FF4B8EDB8D......8EC0B9....F3A54A75..8EC38ED833FFBE....05....0E50"))
    {
        sVersion="0.90-0.99,XE_1.3-1.4";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1E068CCBBA....03DA8D87....FC33F633FF484B8EC08EDBB9....F3A54A75..8EC38ED833FFBE....05....0E50"))
    {
        sVersion="0.82";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cc88ed805....8ec050be....33fffcb2..bd....33c950a4ffd5"))
    {
        sVersion="0.94";
        sOptions="-m -d";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cc880c4..8ec0fcb9....be....8bfe57f3a55fbe....06ba....521e078ed8cb"))
    {
        sVersion="0.82-0.94";
        sOptions="converted to exe";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e060e1f0e07be....bf....8bcffc57f3a4c3"))
    {
        sVersion="0.98, 0.99";
        sOptions="-t";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e068cc88ed805....8ec050be....33fffcb6..bd....ffd5"))
    {
        sVersion="0.69-0.74";
        sOptions="-t";
        bDetected=1;
    }
    else if(MSDOS.compareEP("be....bf....8bcffc57f3a4c3"))
    {
        sVersion="0.98-0.99 small";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e068cc88ed805....8ec050be....33fffcb6..bd....8bde83e6..c1eb..8cd803c38ed8"))
    {
        sVersion="0.73-0.74 big";
        bDetected=1;
    }
    else if(MSDOS.compareEP("0e1f0e07be....bf....8bcffc57f3a4c3"))
    {
        sVersion="0.98";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e068cc88ed805....8ec050be....33fffcb2..bd....33c950a4"))
    {
        sVersion="0.96";
        sOptions="-m";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e06ba....8ccb03dafc33f633ff4b8edb8d87....8ec0b9....f3a54a75..8ec38ed833ffbe....05....0e506a..cb"))
    {
        sVersion="0.90-0.99";
        bDetected=1;
    }
    else if(MSDOS.compareEP("8cc88ed805....8ec050be....33fffcb6..bd....ffd5"))
    {
        sVersion="0.73-0.82";
        sOptions="-d";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e068cc88ed805....8ec0be....33fffcb6..bd....ffd5"))
    {
        sVersion="0.58";
        sOptions="type 2";
        bDetected=1;
    }
    else if(MSDOS.compareEP("1e068cc88ed805....8ec050be....33fffc8cc82e0106....b2..bd....33c9"))
    {
        sVersion="0.98, 0.99";
        sOptions="-m -h";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","aPatch");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e8$$$$fde8$$$$ffc75e83ee..e8$$$$5d8176......c646....eb$$ffe5"))
    {
        sVersion="0.05-0.33";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","anti-tracing add-on");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fc33d28ec2bf....abab8ccb33ff81eb....53bb....531e0733dbcb"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","com2exe");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....50c3"))
    {
        sVersion="9.50";
        bDetected=1;
    }
    else if(MSDOS.compareEP("16179c58f6c4..74..faeb"))
    {
        sName="COM -> EXE";
        sOptions="1993 by R.Roth";
        bDetected=1;
    }
    else if(MSDOS.compareEP("fcbe....bf....b9....f3a568....c3"))
    {
        sVersion="2.1";
        sOptions="1997 by X-HACKS Group";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","cramble");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("E9....609CFC..................01..012A..FF"))
    {
        sVersion="0.2b3";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","deep-CRyPTer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("..E9....E8....598BE981......81......BE....8D......66....66....8D......8BD78BDF"))
    {
        sVersion="0.1c";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("compiler","djgpp");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compare("'go32stub'",512))
    {
        sVersion="2";
        bDetected=1;
    }
    else if(MSDOS.isSignaturePresent(0,Math.min(8192,MSDOS.getSize()),"'StubInfoMagic!!'"))
    {
        sVersion="1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","dos extender by Doug Huffman");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("0e1f8cc6b4..50bb....cd2173..58cd2172..03de8bebb8....cd21065356b8....cd2f0bc075"))
    {
        sVersion="1991";
        bDetected=1;
    }
    else if(MSDOS.compareEP("0e1f06b4..50bb....cd2173..58cd2172..8cc003d88bebb8....cd210653b8....cd2f0bc075"))
    {
        sVersion="1992";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","DOS protected mode extender");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("fafc0e1fe8....8cc0660fb7c066c1e0..6667a3........66b8........66c1e0..6667a3........66670905........66670905"))
    {
        sVersion="1994 by TRAN (Thomas Pytel)";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("extender","DOS extender");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("bc....bb....438cc02bd8b4..cd2173..9a........0e1feb"))
    {
        sVersion="1986-90 by Ergo Computing, Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("b8....8ed0bc....bb....8cc02bd843b4..cd21b8....8ed8c606......b8....8ed88cc0a3"))
    {
        sVersion="1986-91 by Ergo Computing, Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","iLUCRYPT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("8becfac746......4c4cc3fbbf....b8....2e3105d1c84f"))
    {
        sVersion="4.01x";
        sOptions="by Christian Schwarz";
        bDetected=1;
    }
    else if(MSDOS.compareEP("bf....b8....2e3105d1c84f81ff....73..b7..df53..961e"))
    {
        sVersion="4.017";
        sOptions="by Christian Schwarz";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("immunizer","immunizer by SI-IS & Szegi Soft");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("50061e06a1....0e1fa3....065033c08ed8813e........75..b8....cd21fa891e....8c06....fbb8....cd21"))
    {
        sOptions="1989";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","mbp SHRINK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("061e508cc005....2e0106....2e0106....8bd02e0306....2ea3....2e8b3e....8ed80355..8955..8b3d0bff74"))
    {
        sOptions="by mbp Software & Systems";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","muLISP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e9$$$$eb$$8cc88ed88ed0bc....a3....b8....cd21891e....8c06....a0....5084c075..b8....8ec026803e......75..26c416....8cc1"))
    {
        sName+="-87";
        sOptions="1983-1989 by Soft Warehouse, Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareEP("e9$$$$eb$$8cc88ed88ed0bc....a3....b8....cd21891e....8c06....b8....cd21891e....8c06....ba....b8....cd21a0....5084c0"))
    {
        sName+="-90";
        sOptions="1983-1990 by Soft Warehouse, Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","nbuild");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("B9....BB....C0....80....43E2"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("overlay","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareOverlay("....'-lh'..2d")||MSDOS.compareOverlay("....'-lz'..2d"))
    {
        sName="LHA archive";
        switch(MSDOS.readByte(MSDOS.getOverlayOffset()+0x5))
        {
        case 0x30: bDetected=1; break;
        case 0x31: bDetected=1; break;
        case 0x32: bDetected=1; break;
        case 0x33: bDetected=1; break;
        case 0x34: bDetected=1; break;
        case 0x35: bDetected=1; break;
        case 0x36: bDetected=1; break;
        case 0x64: bDetected=1; break;
        case 0x73: bDetected=1; break;
        }
    }
    else if(MSDOS.compareOverlay("60ea"))
    {
        sName="ARJ archive";
        bDetected=1;
    }
    else if(MSDOS.compareOverlay("'ZOO'............'Archive'"))
    {
        bDetected=1;
        sName="ZOO archive";
    }
    else if(MSDOS.compareOverlay("4c0103"))
    {
        bDetected=1;
        sName="COFF executable";
    }
    else if(MSDOS.compareOverlay("0101'Aladdin'"))
    {
        sName="Self UnStuffit data";
        sVersion="1.1";
        sOptions="by Aladdin Systems, Inc.";
        bDetected=1;
    }
    else if(MSDOS.compareOverlay("7f'ELF'010101"))
    {
        sName="ELF executable";
        bDetected=1;
    }
    else if(MSDOS.compareOverlay("................'BSA'"))
    {
        sName="BSN archive";
        bDetected=1;
    }
    else if(MSDOS.compareOverlay("'W4'"))
    {
        sName="W4 executable";
        bDetected=1;
    }
    else if(MSDOS.compareOverlay("fef2fc"))
    {
        sName="FOXPRO archive";
        bDetected=1;
    }
    else if(MSDOS.compareOverlay("'SXD'00"))
    {
        sName="Sydex archive";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("self-displayer","Unknown");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("b8....cd10b409ba....eb$$cd21b409ba....eb$$cd21b409ba....eb"))
    {
        sOptions="1997 //d4c";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("virus","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(MSDOS.compareEP("e8....5e83ee..b8....cd213d....75..0e1f81c6....bf....b9....fcf3a4061f06b8....50cb"))
    {
        sName="TaiPan.438";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","ARC SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(NE.compareEP("a3....891e....890e....8b0e....bb....e8....72..8b0e....bb....e8....73..b9....890e....bb....e8"))
    {
        sOptions="1991 by SEA, Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Borland C++");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(NE.compareEP("53510633c0509a........5807595b9a........0bc075..e9"))
    {
        sOptions="1994 type 1";
        bDetected=1;
    }
    else if(NE.compareEP("893e....56571e510656e3..1e33c050519a........91e3"))
    {
        sOptions="1994 type 2";
        bDetected=1;
    }
    else if(NE.compareEP("53510633c050e8....5807595b9a........0bc075..e9"))
    {
        sOptions="1993 type 1";
        bDetected=1;
    }
    else if(NE.compareEP("b8....8ed853510633c0509a........5807595b9a........0bc075..e9"))
    {
        sOptions="1993 type 2";
        bDetected=1;
    }
    else if(NE.compareEP("893e....56571e510656e3..1e33c05051900ee8....91e3"))
    {
        sOptions="1991";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Borland Pascal");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(NE.compareEP("9a........9a........9a........9a........9a........5589e56a..9a........ff36....bf....1e5768....9a"))
    {
        sVersion="7.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("library","MS RTL");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(NE.compareEP("fca3....891e....49890e....bb....8c1f83e4..8967..b8....508967..f7d0508967..8967..8926....1e68....1e68....9a"))
    {
        sOptions="1990 type 1";
        bDetected=1;
    }
    else if(NE.compareEP("558bec508bc416509a........5886e0a3....1e68....1e68....9a"))
    {
        sOptions="1988 type 1";
        bDetected=1;
    }
    else if(NE.compareEP("fc8926....8926....8c1e....49890e....a3....891e"))
    {
        sOptions="1988 type 2";
        bDetected=1;
    }
    else if(NE.compareEP("fc8926....49890e....a3....891e....1e68....1e68....9a"))
    {
        sOptions="1988 type 3";
        bDetected=1;
    }
    else if(NE.compareEP("c8......57561eb8....8ed89a"))
    {
        sOptions="1990 type 2";
        bDetected=1;
    }
    else if(NE.compareEP("c8......5756bb....8ec326a3....9a"))
    {
        sOptions="1990 type 3";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","PKZIP-SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(NE.compareEP("fca3....891e....49890e....bb....8c1f83e4..8967..b8....508967..f7d0508967..8967..8926....508bc416509a"))
    {
        sOptions="1989-91 by PKWARE Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Setup-Specialist");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(NE.compareEP("eb$$53510633c0509a........5807595b9a........0bc075..e9"))
    {
        sOptions="1995-1998 by Thilo-Alexander Ginkel";
        bDetected=1;
    }
    else if(NE.compareEP("eb$$53510633c050900ee8....5807595b9a........0bc075..e9"))
    {
        sOptions="1995-1997 by Thilo-Alexander Ginkel";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","Sydex SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(NE.compareEP("b8....8ec0e8....ba....3d....72..e8....26a3....26890e....268916....68....1ee8....83c4..ba....85c074"))
    {
        sOptions="1995 by Sydex, Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Watcom C");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(NE.compareEP("e9$$$$9a........0bc074..8c06....5756065352891e....8c06....2bc0509a"))
    {
        sOptions="1990-91";
        bDetected=1;
    }
    else if(NE.compareEP("e9$$$$b9....51b9....51b9....51b9....5153508cd18bdc83c3..8cd2b8....ea"))
    {
        sOptions="1990-91";
        bDetected=1;
    }
    else if(NE.compareEP("e9$$$$535152565706558becb9....51b9....51b9....51b9....5153508cd18bdc83c3..8cd2b8....9a"))
    {
        sOptions="1990-91";
        bDetected=1;
    }
    else if(NE.compareEP("e9$$$$9a........0bc075..e9....8c06....575606535253be....8936....8c1e....268a078804"))
    {
        sOptions="1988-93";
        bDetected=1;
    }
    else if(NE.compareEP("eb$$9a........09c075..e9....8c06....5756065352891e....8c06....29c0509a"))
    {
        sName="Watcom C/C++16";
        sOptions="1988-95";
        bDetected=1;
    }
    else if(NE.compareEP("eb$$5351525657065589e553508cd189e383c3..8cd23eb8....9a"))
    {
        sName="Watcom C/C++16";
        sOptions="1988-95";
        bDetected=1;
    }
    else if(NE.compareEP("e9$$$$535152565706558bec53508cd18bdc83c3..8cd2b8"))
    {
        sOptions="1990-92";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
includeScript("languages");

function detect(bShowType,bShowVersion,bShowOptions)
{
    handleLanguage();

    return "";
}		
// DIE's signature file

init("operation system","Windows");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (NE.isVerbose()) {
        sName = NE.getOperationSystemName();
        sVersion = NE.getOperationSystemVersion();
        sOptions = NE.getOperationSystemOptions();
        
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
var File=NE;

includeScript("result-general");
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","12Ghosts Zip2");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E8$$$$$$$$558BEC83EC..A1........8365....8365....5357BF........3BC7BB........74"))
    {
        var ArcOffset=PE.findSignature(PE.getOverlayOffset(),0x1000, "'BZh91'");
        if(ArcOffset!=-1)
        {
            sOptions="BZIP2";
            sVersion="8.0";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","32Lite");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6006FC1E07BE........6A0468........68"))
    {
        sVersion="0.03a";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","3dCrypter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("684c124000e8eeffffff0000000000003000000038000000000000003848ee54"))
    {
        sVersion="mod Zion-92";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("cryptor","404Crypter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
		if(PE.isNETStringPresent("Z.resources") && PE.isNETStringPresent("First")){
			bDetected=1;
		}
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("sfx","7-Zip");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("';!@Install@!UTF-8!'"))
    {
        sType="installer";
        var sManifest=PE.getManifest();
        var aVersion=sManifest.match(/(\n?)version="(.*?)"/);
        if(aVersion)
        {
            sVersion=aVersion[2];
            if(aVersion[1])
            {
                sOptions="new";
            }
        }
        else if(aVersion=sManifest.match(/Archive v(\d.*?)<\/desc/))
        {
            sVersion=aVersion[1];
        }
        bDetected=1;
    }
    else if(PE.compareOverlay("'7z'BCAF271C"))
    {
        bDetected=1;
    }
    else if(PE.compareOverlay("efbbbf';!@Install@!UTF-8!'"))
    {
        sType="installer";
        bDetected=1;
    }

    if(bDetected)
    {
        if((PE.getVersionStringInfo("InternalName")=="7z.sfx")||(PE.getVersionStringInfo("InternalName")=="7zS2.sfx"))
        {
            sVersion=PE.getVersionStringInfo("FileVersion");
            if(sVersion=="")
            {
                sVersion=PE.getFileVersion().replace(/\.0\.0$/,"");
            }
        }

        if(sVersion==""&&PE.section[".rdata"])
        {
            var nVersionOffset=PE.findString(PE.section[".rdata"].FileOffset,PE.section[".rdata"].FileSize,"7-Zip version:");
            if(nVersionOffset!=-1)
            {
                sVersion=PE.getString(nVersionOffset+16,4);
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("archive","7-Zip");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nOffset=PE.getOverlayOffset();
    if(PE.compareOverlay("';!@Install@!UTF-8!'")||PE.compareOverlay("efbbbf';!@Install@!UTF-8!'"))
    {
        nOffset=PE.findSignature(nOffset,0x2000,"'7z'BCAF271C");
        if(nOffset!=-1)
        {
            bDetected=1;
        }
    }
    else if(PE.compare("'7z'BCAF271C",nOffset))
    {
        bDetected=1;
    }
    if(bDetected)
    {
        sVersion=PE.readByte(nOffset+6)+"."+PE.readByte(nOffset+7);
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","ABC Cryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("68FF6424F0685858585890FFD4508B40F205B095F6950F850181BBFF"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","ACCAStore");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec83c4..b8........e8$$$$$$$$538bd833c0a3........6a..e8........a3........a1"))
    {
        if (PE.getNumberOfResources()>0)
        {
            nOffset=PE.getResourceNameOffset("METRO_INFO");
            {
                if(nOffset!=-1)
                {
                    sVersion="1.9.4.0";
                    bDetected=1;
                }
            }
        }

    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

includeScript("ACE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    detect_ACE(0,bShowOptions);
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","ACProtect");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60F950E801000000..58584950E801000000..5858790466B9B872E801000000"))
    {
        sVersion="1.09g";
        bDetected=1;
    }
    else if(PE.compareEP("E801000000..83"))
    {
        sVersion="1.41";
        bDetected=1;
    }
    else if(PE.compareEP("6050E801000000..83"))
    {
        sVersion="1.3x";
        bDetected=1;
    }
    else if(PE.compareEP("60E801000000..83042406C3"))
    {
        sVersion="1.4x";
        bDetected=1;
    }
    else if(PE.compareEP("600F87020000001BF8E801000000..83042406C3"))
    {
        sVersion="1.90g";
        bDetected=1;
    }
    else if(PE.compareEP("68........68........C3C3"))
    {
        sVersion="2.0.X";
        bDetected=1;
    }
    else if(PE.section[".perplex"])
    {
        sVersion="1.X";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","ADS Self Extractor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb........3bc774"))
    {
        if(PE.compareOverlay("7b00320030003700320036003300370037002d00"))
        {
            bDetected=1;
        }
    }
    else if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..ff15"))
    {
        if(PE.findSignature(PE.getOverlayOffset(),Math.min(0x100,PE.getOverlaySize()),"7b00320030003700320036003300370037002d00")!=-1)
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","AHTeam EP Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("90")&&PE.compareEP("90FFE0",47))
    {
        sVersion="0.3";
        bDetected=1;

        if(PE.compareEP("60E8........5EB9000000002BC0",50))
        {
            sOptions="fake k.kryptor 9/kryptor a";
        }
        else if(PE.compareEP("6A0068........E8........BF",50))
        {
            sOptions="fake Microsoft Visual C++ 7.0";
        }
        else switch(PE.getEPSignature(50,14))
        {
        case "60E803000000E9EB045D4555C3E8": sOptions="fake ASPack 2.12";              break;
        case "60E801000000905D81ED00000000": sOptions="fake ASProtect 1.0";            break;
        case "538BD833C0A3000000006A00E800": sOptions="fake Borland Delphi 6.0-7.0";   break;
        case "FC5550E8000000005DEB01E360E8": sOptions="fake PCGuard 4.03-4.15";        break;
        case "EB03CD20C71EEB03CD20EA9CEB02": sOptions="fake PE Lock NT 2.04";          break;
        case "E8000000005B83EB05EB04524E44": sOptions="fake PE-Crypt 1.02";            break;
        case "60E800000000414E414B494E5D83": sOptions="fake PESHiELD 2.x";             break;
        case "B800000000680000000064FF3500": sOptions="fake PEtite 2.2";               break;
        case "9C608B442424E8000000005D81ED": sOptions="fake Spalsher 1.x-3.x";         break;
        case "535152565755E8000000005D81ED": sOptions="fake Stone's PE Encryptor 2.0"; break;
        case "60E8000000005D81ED06000000EB": sOptions="fake SVKP 1.3x";                break;
        case "E90000000060E8000000005883C0": sOptions="fake tElock 0.61";              break;
        case "EB16A85400004741424C4B434743": sOptions="fake VIRUS/I-Worm Hybris";      break;
        case "5F81EF00000000BE000040008B87": sOptions="fake VOB ProtectCD";            break;
        case "E8000000005D8100000000006A45": sOptions="fake Xtreme-Protector 1.05";    break;
        case "E912000000000000000000000000": sOptions="fake ZCode 1.01";               break;
        }
    }
    else if(PE.compareEP("55908bec906aff9090"))
    {
        sVersion="0.3";
        sOptions="alt";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","AHpacker");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6068........B8........FF1068........50B8........FF1068........6A40FFD08905"))
    {
        if(PE.section[0].Name!="!EPack")
        {
            sVersion="0.1";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","ANDpakk");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60FCBED4004000BF001000015783CDFF33C9F9EB05A402DB75058A1E4612DB72F4"))
    {
        sVersion="2.0.06";
        bDetected=1;
    }
    else if(PE.section.length==1)
    {
        if(PE.getNumberOfImports()==1)
        {
            if(PE.getNumberOfImportThunks(0)==2)
            {
                if(PE.section[0].Name=="ANDpakk2")
                {
                    sVersion="2.X";
                    bDetected=1;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","AOLSetup");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("64a1........558bec6a..68........68........50648925........83ec..535657"))
    {
        if(PE.compareOverlay("'RS'"))
        {
            sOptions="by America Online";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","AR Crypt Private");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("b8........5033c0c3")&&PE.compareEP("b8########6033db33c9b8........3d........74"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("sfx","ARJSFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    /*if(PE.isDosStubPresent())
    {
        var nOffset=PE.getDosStubOffset();
        var nSize=PE.getDosStubSize();
        if(PE.findString(nOffset,nOffset,"aRJsfX")!=-1)
        {
            bDetected=1;
        }
    }*/
    if(PE.compareEP("a1........c1e0..a3........575133c0bf........b9........3bcf76..2bcffcf3aa595f64678b16....8b42..a3"))
    {
        if(PE.compareOverlay("c0ab........60ea"))
        {
            sName+="32";
            bDetected=1;
        }
    }
    else if(PE.compareEP("64a1........558bec6a..68........68........50648925........83ec..5356578965..ff15"))
    {
        if(PE.compareOverlay("60ea"))
        {
            bDetected=1;
        }
        else
        {
            for(var i=0;i<PE.resource.length;i++)
            {
                if(PE.resource[i].Type==730) //ARJDATA
                {
                    bDetected=1;
                    break;
                }
            }
        }
    }
    if(PE.compareEP("558bec83c4..e8$$$$$$$$e8........6a..e8........8905........e8........8905"))
    {
        for(var i=0;i<PE.resource.length;i++)
        {
            if(PE.resource[i].Type==1001)
            {
                if(PE.compare("60ea", PE.getResourceOffsetByNumber(i)))
                {
                    bDetected=1;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","ARM Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E8040000008360EB0C5DEB05"))
    {
        switch(PE.readDword(PE.nEP+42))
        {
        case 0xAB3: sVersion="0.5"; break;
        case 0xBA1: sVersion="0.6"; break;
        default:    sVersion="0.1b-0.3b";
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","ARQ");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("67570402"))
    {
        if(PE.compareEP("558bec6a..68........68........64a1........50648925........83....5356578965..ff15"))
        {
            bDetected=1;
        }
        else if(PE.compareEP("64a1........558bec6a..68........68........50648925........83ec..5356578965..ff15"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","ASDPack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("8B442404565753E8CD010000C30000000000000000000000000010000000"))
    {
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// https://github.com/DosX-dev/ASM-Guard

init("protector","ASM Guard");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (PE.isOverlayPresent()) {
        var nOffset = PE.getOverlayOffset();
        var nSize = PE.getOverlaySize();
        
        if (!PE.isDeepScan()) {
            if (nSize > 0x100) {
                nSize = 0x100;
            }
        }
        
        if (PE.findSignature(nOffset, nSize, "'asmg-protected'00") != -1) {
            sVersion="2.XX";
            bDetected=1;
        } else if (PE.isSectionNamePresent("ASMGUARD")) {
            sVersion="2.XX";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","ASPR Stripper");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("BB........E9........609CFCBF........B9........F3AA9D61C3558BEC"))
    {
        sVersion="2.x";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","ASPack");

function getASPackVersion(nOffset)
{
    if(PE.compare("60E8000000005D81ED........B8........03C5",nOffset))
    {
        sVersion="1.00b-1.07b";
    }
    else if(PE.compare("60EB..5DEB..FF..........E9",nOffset))
    {
        sVersion="1.08.00-1.08.02";
    }
    else if(PE.compare("60E8000000005D............BB........03DD",nOffset))
    {
        sVersion="1.08.03";
    }
    else if(PE.compare("60E8000000005D81ed........BB........01eb",nOffset))
    {
        sVersion="1.08.x";
        sOptions="possibly";
    }
    else if(PE.compare("60E841060000EB41",nOffset))
    {
        sVersion="1.08.04";
    }
    else if(PE.compare("60EB..5DFFE5E8........81ED........BB........03DD2B9D",nOffset))
    {
        sVersion="1.08.x";
    }
    else if(PE.compare("60E870050000EB4C",nOffset))
    {
        sVersion="2.000";
    }
    else if(PE.compare("60E872050000EB4C",nOffset))
    {
        sVersion="2.001";
    }
    else if(PE.compare("60E872050000EB3387DB9000",nOffset))
    {
        sVersion="2.1";
    }
    else if(PE.compare("60E93D040000",nOffset))
    {
        sVersion="2.11";
    }
    else if(PE.compare("60E802000000EB095D5581ED39394400C3E93D040000",nOffset))
    {
        sVersion="2.11b";
    }
    else if(PE.compare("60E802000000EB095D5581ED39394400C3E959040000",nOffset))
    {
        sVersion="2.11c-2.11d";
    }
    else if(PE.compare("60E802000000EB095D55",nOffset))
    {
        sVersion="2.11d";
    }
    else if(PE.compare("60E803000000E9EB045D4555C3E801",nOffset))
    {
        sVersion="2.12-2.42";
    }
    else if(PE.compare("9060E8$$$$$$$$5D4555C3",nOffset))
    {
        sVersion="2.12b";
    }
    else if(PE.compare("60e8$$$$$$$$8b2c2481ed........c3",nOffset))
    {
        sVersion="2.1x-2.39";
    }
    else if(PE.compare("9060e8$$$$$$$$8b2c2481ed........c3",nOffset))
    {
        sVersion="2.1x-2.39";
    }
    else
    {
        return 0;
    }
    return 1;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nOffset=PE.nEP;
    if(nOffset!=-1)
    {
        if(!getASPackVersion(nOffset))
        {
            if(PE.compareEP("7500E9"))
            {
                nOffset+=3;
                bDetected=1;
            }
            else if(PE.compareEP("907500E9"))
            {
                nOffset+=4;
                bDetected=1;
            }
            else if(PE.compareEP("90907500E9"))
            {
                nOffset+=5;
                bDetected=1;
            }
            else if(PE.compareEP("90750190E9"))
            {
                nOffset+=5;
                bDetected=1;
            }
            else if(PE.compareEP("907501FFE9"))
            {
                nOffset+=5;
                bDetected=1;
            }
            else if(PE.compareEP("9090907500E9"))
            {
                nOffset+=6;
                bDetected=1;
            }
            else if(PE.compareEP("9090750190E9"))
            {
                nOffset+=6;
                bDetected=1;
            }
            else if(PE.compareEP("909090750190E9"))
            {
                nOffset+=7;
                bDetected=1;
            }
            if(bDetected)
            {
                // Can't simply adjust the offset, as the destination may be in a different section.
                nOffset=PE.RVAToOffset(PE.OffsetToRVA(nOffset)+4+~~PE.readDword(nOffset));
                bDetected=getASPackVersion(nOffset);
            }
        }
        else
        {
            bDetected=1;
        }
    }

    if(!bDetected)
    {
        if(PE.section[".aspack"]&&PE.section[".adata"])
        {
            bDetected=1;
            sVersion="2.12-2.XX";
        }
    }


    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","ASProtect");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6801......E801000000C3C3"))
    {
        sVersion="1.23-2.56";
        bDetected=1;
    }
    else if(PE.compareEP("60E803000000E9EB045D4555C3E801000000EB5DBBEDFFFFFF03DD81EB00......807D4D01750C8B74242883FE01895D4E75318D45535053FFB5ED0900008D453550E9820000000000000000000000000000000000"))
    {
        sVersion="SKE 2.1/2.2";
        sOptions="DLL";
        bDetected=1;
    }
    else if(PE.compareEP("9060E803000000E9EB045D4555C3E801000000EB5DBBEDFFFFFF03DD81EB00......807D4D01750C8B74242883FE01895D4E75318D45535053FFB5ED0900008D453550E98200000000000000000000000000000000"))
    {
        sVersion="SKE 2.1/2.2";
        sOptions="exe";
        bDetected=1;
    }
    else if(PE.compareEP("9060E803000000E9EB045D4555C3E801000000EB5DBBEDFFFFFF03DD81EB00......807D4D01750C8B74242883FE01895D4E75318D45535053FFB5E50B00008D453550E98200000000000000000000000000000000"))
    {
        sVersion="SKE 2.3";
        bDetected=1;
    }
    else if(PE.compareEP("9060E803000000E9EB045D4555C3E801000000EB5DBBEDFFFFFF03DD81EB00....00807D4D01750C8B74242883FE01895D4E75318D45535053FFB5DD0900008D453550E98200000000000000000000000000000000"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("60E801000000905D81ED........BB........03DD2B9D"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(PE.compareEP("60E9..05"))
    {
        sVersion="1.1 BRS";
        bDetected=1;
    }
    else if(PE.compareEP("60E9........9178797979E9"))
    {
        sVersion="1.1 MTE";
        bDetected=1;
    }
    else if(PE.compareEP("9060E9..04"))
    {
        sVersion="1.1 MTEb";
        bDetected=1;
    }
    else if(PE.compareEP("9060E81B......E9FC"))
    {
        sVersion="MTEc";
        bDetected=1;
    }
    else if(PE.compareEP("60E9..04....E9..............EE"))
    {
        sVersion="1.1";
        bDetected=1;
    }
    else if(PE.compareEP("6801......C3"))
    {
        sVersion="1.2";
        bDetected=1;
    }
    else if(PE.compareEP("9060E803000000E9EB045D4555C3E801000000EB5DBBEDFFFFFF03DD81EB........807D4D01750C8B74242883FE01895D4E75318D45535053FFB5D50900008D453550E98200000000000000000000000000000000"))
    {
        sVersion="1.23 RC4 build 08.07";
        sOptions="exe";
        bDetected=1;
    }
    else if(PE.compareEP("60E8........E9........05........B9........AD35........AB4975F6EB045D4555C3"))
    {
        sVersion="1.1";
        sOptions="exe";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","AT4RE Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("0f3133c903c8eb$$0f312bc13d........0f83........e9$$$$$$$$b8........33f633db8a1c0680eb"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","AZProtect");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("EB70FC608C804D110070258100400D91BB608C804D11007021811D610D810040CE608C804D11007025812581258125812961418131611D610040B730"))
    {
        sVersion="0001";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","Aase Crypter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC83C4F053B8A03E0010E893DEFFFF68F8420010E879DFFFFF6800430010"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","Abbyy Lingvo");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83c4..5356578965..ff15"))
    {
        var nOffset=PE.getSize()-15;
        if(PE.compare("'ArcUpdateABBYY'00",nOffset))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","AcidCrypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60B9........BA........BE........0238404E75FA8BC28A1832DFC0CB"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("BE........0238404E75FA8BC28A1832DFC0CB"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Acronis installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("'PK'0304"))
    {
        if(PE.compareEP("6a..68........e8........bf........8bc7e8........8965..8bf4893e56ff15"))
        {
            sOptions="ZIP";
            bDetected=1;
        }
        else if(PE.compareEP("6a..68........e8$$$$$$$$68........64a1........508b4424..896c24..8d6c24..2be05356578b45..8965..508b45..c7"))
        {
            sOptions="ZIP";
            bDetected=1;
        }
        else if(PE.compareEP("e8$$$$$$$$558bec83ec..a1........8365....8365....5357bf........3bc7bb........74"))
        {
            sOptions="ZIP";
            bDetected=1;
        }
        else if(PE.compareEP("558bec8b45..8b4d..8b55..83f8..75..8915........894d..8945..8955..5de9"))
        {
            sOptions="ZIP";
            bDetected=1;
        }
        else if(PE.compareEP("8b4424..83f8..8b4c24..8b5424..75..8915........894c24..894424..895424..e9"))
        {
            sOptions="ZIP";
            bDetected=1;
        }
        else if(PE.compareEP("e8$$$$$$$$558bec83ec..8365....8365....a1........5657bf........be........3bc7"))
        {
            sOptions="ZIP";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","Active Delivery");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("64a1........558bec6a..68........68........50648925........83ec605356578965..ff15"))
    {
        if(PE.section["actdlvry"])
        {
            if(PE.compare("'AD01'",PE.section["actdlvry"].FileOffset))
            {
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","ActiveMARK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("8925........EB"))
    {
        bDetected=1;
    }
    else if(PE.compareOverlay("00'TMSAMVOH'"))
    {
        sVersion="5.X";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Actual Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec83c4..b8........e8$$$$$$$$538bd833c0a3........6a..e8........a3........a1........a3........33c0a3........33c0a3........e8........ba........8bc3e8........5bc3"))
    {
        if(PE.compareOverlay("....................'MSCF'00"))
        {
            sVersion="1.0.0.0";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Adept Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        var nOffset=PE.findString(PE.section[0].FileOffset,PE.section[0].FileSize,"ByAdeptProtector");
        if(nOffset!=-1)
        {
            if(PE.compare("'Smashed'",nOffset-7))
            {
                sOptions="Evaluation";
            }
            else if(PE.compare("'STAThreadAttribute'",nOffset+17))
            {
                sVersion="2.1";
            }
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Adobe Flash Player installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb........3bc7"))
    {
        for(var i=0;i<PE.getNumberOfResources();i++)
        {
            if(PE.resource[i].Type=="RT_RCDATA")
            {
                if(PE.compare("02010000",PE.resource[i].Offset))
                {
                    bDetected=1;
                    break;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// created by A.S.L - asl@onet.eu - 2019
// 2020.07 fixed

init("installer","Adobe FlashPlayer downloader");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if((PE.compareEP("B8......005064FF3500"))&&(PE.isOverlayPresent()))
    {
        if(PE.getVersionStringInfo("InternalName")=="Adobe Download Manager")
        {
            sVersion="2.0";
            sOptions="PEcompact"; // packed stub
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","Adobe");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb........3bc774..85c374..f7d0"))
    {
        for(var i=0;i<PE.resource.length;i++)
        {
            if(PE.resource[i].Type==3284) // ARCHIVE_7Z
            {
                if(PE.findSignature(PE.resource[i].Offset, 0, "'7z'BCAF271C"))
                {
                    sName+=" Reader Installer";
                    sOptions="7zip sfx";
                    bDetected=1;
                    break;
                }
            }
        }
    }
    else if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..ff15"))
    {
        if(PE.compareOverlay("'^OPT'"))
        {
            var ArcOffset=PE.findString(PE.getOverlayOffset(),0x50, "^ARC");
            if(ArcOffset!=-1)
            {
                if(PE.compare("1f8b08",ArcOffset+4))
                {
                    sName+=" SVG Installer";
                    sOptions="gzip";
                    bDetected=1;
                }
            }
        }
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: A.S.L. <asl@onet.eu> 2018

init("protector","Advanced BAT to EXE Converter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if ( (PE.compareEP("558BEC6AFF68")) && (PE.compareOverlay("..02020202363A38393a")))
    {
        sVersion="2X-4.X";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Advanced Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("2f30ee1f5e4ee51e"))
    {
        if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb........3bc774..85c374..f7d0"))
        {
            bDetected=1;
        }
        else if(PE.compareEP("558bec83ec..5657ff15........8bf085f675..6a..eb..e8........8a063c..8b3d........75..56ffd7"))
        {
            bDetected=1;
        }
        else if(PE.compareEP("e8$$$$$$$$8b0d........5657bf........be........3bcf74..85ce75..e8........8bc83bcf75..b9........eb"))
        {
            bDetected=1;
        }
    }
    else if(PE.compareOverlay("d0cf11e0a1b11ae1"))
    {
        if(PE.compareEP("558bec83ec..5657ff15........8bf085f675..6a..eb..e8........8a063c..8b3d........75..56ffd7"))
        {
            bDetected=1;
        }
        else if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb........3bc774..85c374..f7d0"))
        {
            bDetected=1;
        }
    }
    else if(PE.findSignature(PE.getSize()-0x50, 0x50, "'ADVINSTSFX'")!=-1)
    {
        if(PE.compareEP("558bec837d....75..e8$$$$$$$$8b0d........5657bf........be........3bcf74"))
        {
            bDetected=1;
        }
        else if(PE.compareEP("e8$$$$$$$$558bec83ec..8365....8365....a1........5657bf........be........3bc7"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Adveractive");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..ff15"))
    {
        if(PE.compareOverlay("'10JP'"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Aeco Systems installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("64a1........558bec6a..68........68........50a1........648925........8b0d........83ec..8901"))
    {
        if(PE.compareOverlay("'EWETAR DATA FILE!! VER 1.00 <<<>>>'"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Agile .NET");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNETStringPresent("ObfuscatedByAgileDotNetAttribute"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Alchemy Mindworks installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("a1........c1e0..a3........575133c0bf........b9........3bcf"))
    {
        if (PE.getNumberOfResources()>0)
        {
            for(var i=0;i<PE.resource.length;i++)
            {
                if(PE.compare("504b0304", PE.resource[i].Offset))
                {
                    bDetected=1;
                }
            }

        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Alex Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E8000000005D81ED06104000E824000000"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(PE.compareEP("60E801000000C783C40433C9E8010000006883C404E8010000006883C404"))
    {
        sVersion="0.4 beta 1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// Made by KDSS-Research
// Contact Me: koffidev365supp@gmail.com

// Program name:
// ----------------------
// Alienyze
 
init("protector","Alienyze");

function detect(bShowType,bShowVersion,bShowOptions)
{
	if (PE.isSectionNamePresent(".alien")){
		bDetected=1;
	}
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Alloy");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("9C60E802......33C08BC483C004938BE38B5BFC81EB........87DD6A0468001000006800..00006A00FF95........0B"))
    {
        sVersion="4.x";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}

// DIE's signature file

init("crypter","AlmafuerteCrypter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("649068f4134000e8ecffffff000000003000000040000000000000003b2d72e4"))
    {
        sVersion="mod Zion-92";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("joiner","Anskya Binder");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("BE........BB........33ED83EE04392E7411"))
    {
        sVersion="1.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","Anskya NTPacker Generator");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC83C4F053B8881D0010E8C7FAFFFF6A0A68201E0010A11431001050"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","Anslym Crypter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC83C4F05356B838170510E85A45FBFF33C05568211C051064FF30648920"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","AntiDote");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E8BBFFFFFF84C0742F680401000068C02360006A00FF1508106000E840FFFFFF50"))
    {
        sVersion="1.0 Beta";
        bDetected=1;
    }
    else if(PE.compareEP("6869D60000E8C6FDFFFF6869D60000E8BCFDFFFF83C408E8A4FFFFFF84C074"))
    {
        sVersion="1.2 Beta";
        bDetected=1;
    }
    else if(PE.compareEP("e8$$$$$$$$e8000000005853515657508b1c2481"))
    {
        sVersion="1.2.Demo";
        bDetected=1;
    }
    else if(PE.compareEP("EB1066623A432B2B484F4F4B90E9083290909090909090909090807C240801"))
    {
        sVersion="1.2.Demo";
        sOptions="DLL";
        bDetected=1;
    }
    else if(PE.compareEP("6890030000E8C6FDFFFF6890030000E8BCFDFFFF6890030000E8B2FDFFFF50"))
    {
        sVersion="1.4 SE";
        bDetected=1;
    }
    else if(PE.compareEP("E8F7FEFFFF05CB220000FFE0E8EBFEFFFF05BB190000FFE0E8BD00000008B2"))
    {
        sVersion="1.2.Demo";
        bDetected=1;
    }
    else if(PE.compareEP("6895010000E8D0FDFFFF6895010000E8C3FDFFFF6890030000E8BCFDFFFF68"))
    {
        sVersion="1.4 osCE";
        bDetected=1;
    }
    else if(PE.compareEP("68....0000E8..FDFFFF68....0000E8..FDFFFF6890030000E8..FDFFFF"))
    {
        sVersion="1.x";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Anticrack Software Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60..................E801000000............................................0000......04"))
    {
        sVersion="1.09";
        bDetected=1;
    }
    else if(PE.compareEP("60................0000........................E801000000..83042406C3..........00"))
    {
        sVersion="1.09";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Apex-c");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("68........B9FFFFFF0001D0F7E2720148E2F7B9FF0000008B34248036FD46E2FAC3"))
    {
        sVersion="BLT Apex 4.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","App Encryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E8000000005D81ED1F1F4000B97B0900008DBD671F40008BF7AC"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("E997000000'\r\nSilent Team App Protector'"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Armadillo");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E8000000005D50510FCAF7D29CF7D20FCAEB0FB9EB0FB8EB07B9EB0F90EB08FDEB0BF2EBF5EBF6F2EB08FDEBE9F3EBE4FCE99D0FC98BCAF7D1595850510FCAF7D29CF7D20FCAEB0FB9EB0FB8EB07B9EB0F90EB08"))
    {
        sVersion="3.X-9.X";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC83EC0C5356578B450850FF15........83C4048945FC8B45FC51B900080000B906000000"))
    {
        sVersion="4.44a public build";
        bDetected=1;
    }
    else if(PE.compareEP("E8E3400000E916FEFFFF6A0C68........E8441500008B4D0833FF3BCF762E6AE05833D2F7F13B"))
    {
        sVersion="5.00";
        bDetected=1;
    }
    else if(PE.compareEP("837C2408017505E8DE4B0000FF7424048B4C24108B54240CE8EDFEFFFF59C20C006A0C68"))
    {
        sVersion="5.00";
        sOptions="DLL";
        bDetected=1;
    }
    else if(PE.compareEP("6A..8BB5........C1E6048B85........2507....8079054883C8F84033C98A88........8B95........81E207....8079054A83CAF84233C08A82"))
    {
        sVersion="2.xx";
        sOptions="CopyMem II";
        bDetected=1;
    }
    else if(PE.compareEP("60E8........5D5051EB0FB9EB0FB8EB07B9EB0F90EB08FDEB0BF2EBF5EBF6F2EB08FDEBE9F3EBE4FCE959586033C9"))
    {
        sVersion="3.00";
        bDetected=1;
    }
    else if(PE.compareEP("60E8........5D5051EB0FB9EB0FB8EB07B9EB0F90EB08FDEB0BF2EBF5EBF6F2EB08FDEBE9F3EBE4FCE959585051EB"))
    {
        sVersion="3.00a-3.70a";
        bDetected=1;
    }
    else
    {
        if((PE.getMajorLinkerVersion()==0x53)&&(PE.getMinorLinkerVersion()==0x52))
        {
            for(var i=0;i<=PE.nLastSection;i++)
            {
                var nOffset=PE.section[i].FileOffset;
                if(PE.compare("'PDATA000'",nOffset))
                {
                    sVersion="6.X-9.X";
                    break;
                }
            }
            if(sVersion=="")
            {
                if(PE.section.length>7)
                {
                    sVersion="6.X-9.X";
                }
            }
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","AssemblyInvoke");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isSignatureInSectionPresent(0,"282d00000a6f2e00000a14146f2f00000a"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Astrum");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..ff15"))
    {
        if(PE.isOverlayPresent()!=-1)
        {
            for(var i=0;i<PE.getNumberOfResources();i++)
            {
                if(PE.resource[i].Type==77)
                {
                    if(PE.findSignature(PE.resource[i].Offset, 0x140,"'AstrumInstallWizard'")!=-1)
                    {
                        bDetected=1;
                        break;
                    }
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("format","Compiled AutoHotKey");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.resource[">AUTOHOTKEY SCRIPT<"])
    {
        sVersion=PE.getFileVersion();
        bDetected=1;
    }
    else
    {
        var sManifest=PE.getManifest();
        var aId=sManifest.match(/(\n?)<assemblyIdentity.*?(\n?).*version(.*?)(\n?)name=\"AutoHotkey\"/);
        if (aId)
        {
            aVersion=sManifest.match(/version=\"(.*?)\" ?name=\"AutoHotkey/)
            sVersion=aVersion[1];
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("format","AutoIt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.resource["SCRIPT"])
    {
        sVersion="3.XX";
        bDetected=1;
    }
    else if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb........3bc774..85c374..f7d0"))
    {
        if(PE.compareOverlay("a3484bbe986c4aa9"))
        {
            sVersion="3.XX";
            bDetected=1;
        }
    }
    else if(PE.getVersionStringInfo("FileDescription")=="Compiled AutoIt Script")
    {
        sVersion=PE.getFileVersionMS();
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","AutoPlay Media Studio");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("0b0bafaf0b0ba4"))
    {
        if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb........3bc774..85c374..f7d0a3........eb"))
        {
            sVersion="8.x";
            bDetected=1;
        }
        if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..ff15........33d28ad48915........8bc8"))
        {
            sVersion="7.5.x";
            bDetected=1;
        }
    }

    if(bDetected)
    {
        var sRawVersion=PE.getFileVersion().replace(/\.0\.0$/,"");
        if(sRawVersion!="")
        {
            sVersion=sRawVersion;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Autodesk Self-Extract");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e8$$$$$$$$558bec83ec..a1........8365....8365....5657bf........be........3bc774..85c674..f7d0"))
    {
        if(PE.compareOverlay("'00000000000000BD00000000000000010000000000000001'",0x19a0))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// Author KDSS-Research

init("Installer","Autorun Pro Enterprise");

function detect(bShowType,bShowVersion,bShowOptions)
{
    bDetected = 1;
    if (!PE.isSectionNamePresent(".rsrc") || PE.isSectionNamePresent("CODE")){
        return null;
    }
    var n1=PE.findString(PE.section[".rsrc"].FileOffset,PE.section[".rsrc"].FileSize,"9AutoRunObjects");
    var n2=PE.findString(PE.section[".rsrc"].FileOffset,PE.section[".rsrc"].FileSize,"AutoRunObjects");
    if (n1==-1 && n2==-1){
	bDetected=0;
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// Author KDSS-Research

init("Installer","Autorun Pro Enterprise II");

function detect(bShowType,bShowVersion,bShowOptions)
{
    bDetected = 1;
    if (!PE.isSectionNamePresent(".rsrc") ){
        return null;
    }
    if (!PE.isSectionNamePresent("CODE")){
        return null;
    }
    var n1=PE.findString(PE.section["CODE"].FileOffset,PE.section["CODE"].FileSize,"TAutoRunProjectX");
    var n2=PE.findString(PE.section[".rsrc"].FileOffset,PE.section[".rsrc"].FileSize,"AutoRunObjects");
    if (n1==-1 && n2==-1){
	bDetected=0;
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","AverCryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.section[".avc"])
    {
        if(PE.compareEP("60E8000000005D81ED........8BBD........8B8D........B8"))
        {
            switch(PE.readByte(PE.nEP+65))
            {
            case 0xFA: sVersion="1.0";  break;
            case 0xF7: sVersion="1.02"; break;
            }
            bDetected=1;
        }
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Babel .NET");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isNETStringPresent("BabelAttribute"))
        {
            sVersion="3.X";
            bDetected=1;
        }
        else if(PE.isNETStringPresent("BabelObfuscatorAttribute"))
        {
            sVersion="1.0-2.X";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("Crypter","BasicCrypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("68b0114000e88bfbffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f4010000641b400000000000308c4000408c4000980b000000904000b41040"))
    {
        sOptions="sudo";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("converter","Bat to Exe");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("68........68........68........e8........83c4..68........e8........a3........68........68........68........e8........a3"))
    {
        for(var i=0;i<PE.getNumberOfResources();i++)
        {
            if(PE.resource[i].Type=="RT_RCDATA")
            {
                if(PE.compare("789c636018052319000002000001",PE.resource[i].Offset))
                {
                    sOptions="by Fatih Kodak";
                    bDetected=1;
                    break;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// Author A.S.L

init("crypter","Battleship Crypter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6818144000E8F0FFFFFF0000000000003000000038000000000000007A88CD659A43264D8DF747BE8615237F"))
    {
        sVersion="v1.0";
        bDetected=1;
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","BeRo Tiny Pascal");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E9........' Compiled by: BeRoTinyPascal - (C) Copyright 2006, Benjamin '27'BeRo'27' Rosseaux '"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","BeRo");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nEP=PE.compareEP("837C2408010F85")?11:0;
    if(PE.compareEP("60BE........BF........FCB28033DBA4B302E8",nEP))
    {
        sVersion="1.00";
        sOptions="LZBRR";
        bDetected=1;
    }
    else if(PE.compareEP("60BE........BF........FCAD8D1C07B0803BFB733BE8",nEP))
    {
        sVersion="1.00";
        sOptions="LZBRS";
        bDetected=1;
    }
    else if(PE.compareEP("6068........68........68........E8........BE........B9"))
    {
        sVersion="1.00";
        sOptions="LZMA";
        bDetected=1;
    }
    else if(PE.compareEP("BA........8DB2........8B46..85C0745103C28B7E..8B1E85DB75028BDF03DA03FA525750FF15"))
    {
        sVersion="1.00";
        bDetected=1;
    }
    else if(PE.compareEP("6068........68......0068........e8..040000..................00"))
    {
        sVersion="1.00";
        sOptions="LZMA";
        bDetected=1;
    }
    else if(PE.compareEP("60e8000000005e81c6....0000bf........6081ec0804000089e357fc31c0b4"))
    {
        sVersion="1.00";
        sOptions="CTX1";
        bDetected=1;
    }
    else if(PE.compareEP("60c8940c0060fcbe........ad8945fc33c0f7d08945f8f7d0b408b923030000"))
    {
        sVersion="1.00";
        sOptions="LZBRA";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Berio");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090E9011200"))
    {
        sVersion="1.00 beta";
        bDetected=1;
    }
    else if(PE.compareEP("909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090E9017401"))
    {
        sVersion="2.00 beta";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","BitRock Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("........'.eh_frame'00"))
    {
        if(PE.compareEP("60be........8dbe........c787................5789e58d9c24........31c05039dc75..46465368"))
        {
            bDetected=1;
        }
        else if(PE.compareEP("83ec..c70424........ff15........e8........8d7426..8dbc27........a1........ffe0"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","BitShape PE Crypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E8000000005D81ED........B97B0900008DBD........8BF7AC"))
    {
        sVersion="1.5";
        bDetected=1;
    }
    else if(PE.compareEP("E8000000005B83EB05EB04'RND!'EB02CD20EB"))
    {
        sVersion="1.0/1.01/1.02";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("joiner","Blade Joiner");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC81C4E4FEFFFF53565733C08945F08985"))
    {
        sVersion="1.5";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","BlindSpot");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC81EC500200008D85B0FEFFFF5356A3........578D85B0FDFFFF680001000033F65056FF15........5668800000006A0356568D85B0FDFFFF680000008050FF15........56566800080000508945FCFF15"))
    {
        sVersion="1.00";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Blizzard PrePatch");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a100000000506489250000000083ec..5356578965"))
    {
        if(PE.compareOverlay("'MPQ'1a"))
        {
            sVersion="2.xx";
            bDetected=1;
        }
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","BobPack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E8000000008B0C2489CD83E90681ED........E83D0000008985........89C2B85D0A00008D0408E8E40000008B700401D6E876000000E851010000E80101"))
    {
        sVersion="1.00";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","BopCrypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60BD........E8....0000"))
    {
        sVersion="1.00";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// https://docwiki.embarcadero.com/RADStudio/Alexandria/en/Compiler_Versions
// coauthor: sendersu (If errors pls contact sendersu on cracklab.team)

init("compiler","Borland C++");

includeScript("Borland");

function detect(bShowType,bShowVersion,bShowOptions)
{
    bDetected=bBorlandC;
    if(bDetected==2)
    {
        sVersion="1999";
        bDetected=1;
    }

    if(bDetected)
    {
        if(PE.resource["PACKAGEINFO"]||PE.resource["DVCLAL"])
        {
            sVersion="Builder";

	    if(PE.resource["DVCLAL"])
	    {
	        // try to decode DVCLAL (Delphi Visual Component Library Access License) values
	        nOffset=PE.getResourceNameOffset("DVCLAL");
	        if(PE.compare("A28CDF987B3C3A7926713F090F2A2517", nOffset))
	        {
	            sOptions="Professional";
	        }
	        else if(PE.compare("23785D23B6A5F31943F3400226D111C7", nOffset))
	        {
	            sOptions="Standard";
	        }
                else if(PE.compare("263D4F38C28237B8F3244203179B3A83",nOffset))
	        {
	            sOptions="Enterprise";
	        }
	    }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Box Stub");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb........3bc7"))
    {
        if(PE.compareOverlay("000000000000000038e8020000000000"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Break Into Pattern");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E9$$$$$$$$EB14"))
    {
        sVersion="0.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","BulletProofSoft installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a100000000506489250000000083ec..5356578965"))
    {
        if(PE.compareOverlay("1f8b08", 0x3000))
        {
            bDetected=1;
        }
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: @justmazz_

init("protector","Byfron Technologies");

var bContainsRunExport = false;
var bContainsTextSection = false;
var bContainsByfronCodeSection = false;
var bContainsByfronDataSection = false;

function detectExports() {
    if(PE.isExportFunctionPresent("run")) {
        bContainsRunExport = true;
    }
}

function detectSections() {
    var FLAGS_RX = 0x60000020;
    var FLAGS_INITIALIZED_DATA_DISCARDABLE = 0x02000040;

    for(var i = PE.nLastSection; i >= 0; i--)
    {
        var sectionName = PE.getSectionName(i);
        var sectionCharacteristics = PE.getSectionCharacteristics(i);

        if(sectionName == ".text") {
            bContainsTextSection = true;
            continue;
        }

        if((sectionName == ".byfron") && (sectionCharacteristics == FLAGS_RX)) {
            bContainsByfronCodeSection=true;
            continue;
        }

        if((sectionName == ".byfron1") && 
           (sectionCharacteristics == FLAGS_INITIALIZED_DATA_DISCARDABLE)) {
            bContainsByfronDataSection=true;
            continue;
        }
    }
}

function validateDetection() {
    // Byfron usually has the following:
    // an export called 'run'
    // no .text section as it's replaced by one or both of the following:
    //      .byfron - code section, RX
    //      .byfron1 - data/mem discarded section
    if(bContainsRunExport) {
        if(!bContainsTextSection) {
            if((bContainsByfronCodeSection || bContainsByfronDataSection)) {
                bDetected = true;
                return;
            }
        }
    }

    bDetected = false;
}

function detect(bShowType, bShowVersion, bShowOptions)
{
    detectExports();
    detectSections();
    validateDetection();

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Bytessence Install Maker");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("'$_BIM_CONFIG_START_$'"))
    {
        if(PE.compareEP("68........68........68........e8........83c4..68........e8........a3........68........68........68"))
        {
            sVersion="5.40";
            bDetected=1;
        }
        else if(PE.compareEP("4883ec..49c7c0........4831d248b9................e8........4831c9e8........488905........4d31c048c7c2........4831c9e8........488905........48b8"))
        {
            sVersion="5.40";
            sOptions="x64";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","CDS SS");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E8000000005D81ED........FF742420E8D30300000BC00F84130300008985........668CD8A804740CC785"))
    {
        sVersion="1.0 beta1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","CExe");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC81EC0C02....56BE........8D85F8FEFFFF56506A..FF15........8A8DF8FEFFFF33D284C98D85F8FEFFFF7416"))
    {
        sVersion="1.0a";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","CICompress");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6A046800100000FF35........6A00FF15........A3........97BE........E8710000003B05"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
init("installer","CSDD's installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a100000000506489250000000083c4..535657"))
    {
        if (PE.getNumberOfResources()>0)
        {
            if(PE.resource[0].Name="1")
            {
                var nOffset=PE.getResourceOffsetByNumber(0);
                if (PE.compare("ec7c7f7c", nOffset))
                {
                    sVersion="1.1";
                    bDetected=1;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","CZ installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec83c4..b8........e8$$$$$$$$538bd833c0a3........6a..e8........a3........a1........a3"))
    {
        if (PE.getNumberOfResources()>0)
        {
            nOffset=PE.getResourceNameOffset("CZ_STORAGE");
            {
                if(nOffset!=-1)
                {
                    bDetected=1;
                }
            }
        }

    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("sfx","Microsoft Cabinet");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("'wextract'",16))
    {
        // The version is probably for what's being installed, not what's doing
        // the installing; it does seem, though, the raw product version is for
        // the installer itself.  Take a punt, anyway.
        var nOffset=PE.getOverlayOffset();
        nOffset=PE.findSignature(nOffset-0xE00,0xE00,"BD04EFFE00000100");
        if(nOffset!=-1)
        {
            nOffset+=16;
            sVersion=PE.readWord(nOffset+2)+"."+PE.readWord(nOffset)+"."
                    +PE.readWord(nOffset+6)+"."+PE.readWord(nOffset+4);
        }
        bDetected=1;
    }
    else if(/sfxcab/.test(PE.getManifest()))
    {
        // There's two version resources, locate the second.
        if(PE.section[".rsrc"])
        {
            var nVirtSize=PE.section[".rsrc"].VirtualSize;
            var nOffset=PE.section[".rsrc"].FileOffset+nVirtSize;
            nOffset=PE.findSignature(nOffset-0x600,0x600,"BD04EFFE00000100");
            if(nOffset!=-1)
            {
                nOffset+=8;
                sVersion=PE.readWord(nOffset+2)+"."+PE.readWord(nOffset)+"."
                        +PE.readWord(nOffset+6)+"."+PE.readWord(nOffset+4);
            }
        }
        bDetected=1;
    }
    else if(/wextract/i.test(PE.getVersionStringInfo("InternalName")))
    {
        sVersion=PE.getFileVersion();
        bDetected=1;
    }
    else if(PE.compareEP("558bec81ec........535657ff15........a3........ff15........a1........6625....3d"))
    {
        if(PE.compare("'MSCF'00000000", 0x5000))
        {
            bDetected=1;
        }
    }
    else if(PE.compareEP("6a..68........e8........66813d............75..a1........81b8................75.."))
    {
        if(PE.compareOverlay("'MSCF'00000000"))
        {
            bDetected=1;
        }
    }
    else if(PE.compareEP("e9$$$$$$$$558bec81ec........830d..........5356576a..33dbbf........68........895d..881d"))
    {
        bDetected=1;
    }
    if (PE.getNumberOfResources()>0)
    {
        nOffset=PE.getResourceNameOffset("CABINET");
        {
            if(PE.compare("'MSCF'00000000", nOffset))
            {
                bDetected=1;
            }
        }
        nOffset=PE.getResourceNameOffset("IDR_CABFILE");
        {
            if(PE.compare("'MSCF'00000000", nOffset))
            {
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

includeScript("Cab");

function cab_resource(bShowOptions)
{
    for(var i=0;i<PE.resource.length;i++)
    {
        if(detect_Cab(PE.resource[i].Offset,PE.resource[i].Size,bShowOptions))
        {
            return 1;
        }
    }
    return 0;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(!detect_Cab(PE.getOverlayOffset(),PE.getOverlaySize(),bShowOptions)
     &&!cab_resource(bShowOptions))
    {
        if(PE.section[".rsrc"])
        {
            var nFileSize=PE.section[".rsrc"].FileSize;
            var nVirtSize=PE.section[".rsrc"].VirtualSize;
            if(nFileSize>nVirtSize)
            {
                var nOffset=PE.section[".rsrc"].FileOffset+nVirtSize;
                nOffset=(nOffset+0x1ff)&-0x200;
                while((!detect_Cab(nOffset,nFileSize,bShowOptions))
                    && (nOffset>PE.section[".rsrc"].FileOffset) && (!_isStop()))
                {
                    nOffset-=0x200;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// sign by A.S.L  - asl@onet.eu 2022.11.05
// Exeinfo PE don't detect this installer
// compiler : x64 MSC++ v.14.19
// "LZIP" unpacker : nongnu.org/lzip/lzip.html - Antonio Diaz Diaz

init("installer"," Calibre Portable Installer ");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if ((PE.resource["EXTRA"])  && (PE.section[".rsrc"].FileSize>0x6000000)  // over 100 MB
        && 
       (PE.getVersionStringInfo("ProductName")=="calibre"))
        {
            sVersion=PE.getVersionStringInfo("FileVersion");
            sOptions=" Resources : .LZ Archive ";
            bDetected=1;
        }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Cameyo");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isOverlayPresent())
    {
        if(PE.compareOverlay("'MZ'"))
        {
            if(PE.getVersionStringInfo("ProductName")=="Cameyo Application Virtualization")
            {
                 sVersion=PE.getFileVersion();
                 bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// By Eliseu Filipi

init("joiner","Celesty File Binder");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E8261F0000E989FEFFFF8BFF558BEC83EC208B450856576A0859BE0C9240008D7DE0F3A58945F88B450C5F8945FC5E85C074"))
    {
        sVersion="1.0";
        sOptions="C++ Static library";
        bDetected=1;
    }
    else if(PE.compareEP("E896040000E963FDFFFF8BFF558BEC81EC28030000A3E8514000890DE45140008915E0514000891DDC5140008935D8514000893DD4514000668C1500"))
    {
        sVersion="1.0";
        sOptions="C++ Dynamic library";
        sOptions=sOptions.append("AnyCPU");
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","ChainskiCrypter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
		if(PE.isNETStringPresent("Chainski")){
			bDetected=1;
		}
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Chaos Software installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("4883ec..e8$$$$$$$$48895c24..574883ec..488b..........48836424....48bf................483bc774"))
    {
        if(PE.compareOverlay("276327631226097513180178"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","Chilkat ZIP Self-Extractor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..ff15"))
    {
        if(PE.compareOverlay("07d26cbf2159abaa0100000000"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("sfx","CipherWall");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("9061BE........8DBE0000FEFFC787C0200200"))
    {
        sVersion="1.5";
        switch(PE.getEPSignature(19,14))
        {
        case "0B6E5B9B5783CDFFEB0E90909090": sOptions="Decryptor Console"; break;
        case "F989C76A5783CDFFEB0E90909090": sOptions="Decryptor GUI";     break;
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","CliSecure");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isNETStringPresent("ObfuscatedByCliSecureAttribute"))
        {
            sVersion="4.0-5.X";
            bDetected=1;
        }
        else if(PE.isNETStringPresent("CliSecureRd.dll")||PE.isNETStringPresent("CliSecureRd64.dll"))
        {
            bDetected=1;
        }
        else if(PE.isSignatureInSectionPresent(0,"436c69005300650063007500720065"))
        {                                       // C l i   S   e   c   u   r   e
            bDetected=1;
        }
    }
    else if(PE.compareEP("e9$$$$$$$$558bec81ec4c020000a1........33c58945f483"))
    {
        sVersion="4.5";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","ClickTeam");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..ff15"))
    {
        if(PE.compareOverlay("'wwgT)'"))
        {
            bDetected=1;
        }
        else if(PE.compareOverlay("..120100....0000"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Code Virtualizer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("609CFCE8000000005F81EF........8BC781C7........3B472C7502EB2E89472CB9A7000000EB0501448F"))
    {
        sVersion="1.3.1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Code-Lock");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isLibraryPresent("CODE-LOCK.OCX"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","CodeCrypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E9........EB02833D58EB02FF1D5BEB020FC75F"))
    {
        switch(PE.readDword(PE.nEP+1))
        {
        case 0x2c5: sVersion="0.14b"; break;
        case 0x331: sVersion="0.15b"; break;
        case 0x32e: sVersion=(PE.compareEP("EB03FF1D34",20))?"0.164":"0.16b-0.163b";
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","CodeCrypter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("5058535B90BB........FFE390CCCCCC558BEC5DC3"))
    {
        sVersion="0.31";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("patcher","CodeFusion Wizard");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec83c4..535657e8........e8........33c05568........64ff30648920e8........e8........a3........833d"))
    {
        if(PE.compareOverlay("'@._P-DATA_.@'"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","CodeSafe");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("83EC10535657E8C40100",23))
    {
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","CodeVeil");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e9$$$$$$$$e9$$$$$$$$8bff60e8$$$$$$$$5ee8"))
    {
        sVersion="1.2";
        bDetected=1;
    }
    else if(PE.isNET())
    {
        if(PE.isNETStringPresent("____KILL"))
        {
            sVersion="4.X";
            bDetected=1;
        }
        else if(PE.isNETUnicodeStringPresent("E_TamperDetected"))
        {
            sVersion="3.X-4.X";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Codegear Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60be........8dbe........5783cd..eb$$8b1e83ee..11db72..b8........01db75..8b1e"))
    {
        if(PE.compareOverlay("........'GRCSETUPINFORMATION'"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","CodeWall");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isNETStringPresent("CodeWallTrialVersion"))
        {
            sVersion="4.X";
            sOptions="Evaluation";
            bDetected=1;
        }
        else if(PE.isSignatureInSectionPresent(0,"9161d281........11..175813..11..11..32..28........11..6f........13..7e........2d..73"))
        {
            sVersion="4.X";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","CoffeeCup");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec83c4..33c08945..b8........e8........33c05568........64ff306489206a..68........6a"))
    {
        if(PE.compareOverlay("'MPU'00"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Levis <levintaeyeon@live.com> http://ltops9.wordpress.com/

init("protector","Confuser");

function getConfuserVersion()
{
    var sResult="";
    var nOffset=PE.section[0].FileOffset;
    var nSize=PE.section[0].FileSize;

    var nVersionOffset=PE.findString(nOffset,nSize,"Confuser v");
    if(nVersionOffset!=-1)
    {
        sResult=PE.getString(nVersionOffset+10);
    }

    return sResult;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNETStringPresent("ConfusedByAttribute"))
    {
        var sConfuserVersion=getConfuserVersion();
        if(sConfuserVersion!="")
        {
            sVersion=sConfuserVersion;
        }
        else
        {
            sVersion="1.X";
        }

        bDetected=1;
    } else if(PE.isNET()){
        if(PE.section.length>=2)
        {
            var nVersionOffset=PE.findString(PE.section[1].FileOffset,PE.section[1].FileSize,"ConfuserEx v");
            if(nVersionOffset!=-1)
            {
                sVersion=PE.getString(nVersionOffset+12,7);
				sName = "ConfuserEx";
                bDetected=1;
            }
        }
	}

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","CopyMinder");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("8325........EF6A00E8........E8........CCFF25........FF25........FF25........FF25........FF25........FF25........FF25........FF25........FF25........FF25........FF25"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("library","Costura.Fody");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET()) {
        if((PE.isNETStringPresent("costura.costura.dll.compressed")) || (PE.isNETUnicodeStringPresent("costura.costura.dll.compressed"))) {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("installer","CreateInstall");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC81EC200200005356576A00FF15........68........894508FF15........85C074276A00A1........50FF15"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("81EC0C0400005356575568605040006A016A00FF15........8BF0FF15........3DB7000000750F56FF15"))
    {
        if(PE.compareOverlay("02060a0405fd59"))
        {
            sVersion="2003.3.5";
            bDetected=1;
        }
    }
    else if(PE.compareOverlay("'aWAW'"))
    {
        if(PE.compareEP("64a1........558bec6a..68........68........50648925........83ec..5356578965..ff15"))
        {
            bDetected=1;
        }
        else if(PE.compareEP("68........ff15........0bc074..e8"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Crinkler");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("B9........01C068........6A0058506A005F485DBB03000000BE........E9"))
    {
        sVersion="0.1-0.2";
        bDetected=1;
    }
    else if(PE.compareEP("B8........31DB43EB58"))
    {
        sVersion="0.3-0.4";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Crunch");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("EB100000000000000000000000000000000055E800000000"))
    {
        sVersion="4.0";
        bDetected=1;
    }
    else if(PE.compareEP("EB1503000000060000000000000000000000680000000055E800000000"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(PE.compareEP("55E8........5D83ED068BC5556089AD........2B85"))
    {
        switch(PE.getEPSignature(32,2))
        {
        case "80BD": sVersion="1.0"; break;
        case "55BB": sVersion="2.0"; break;
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","CrypKey Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e8$$$$$$$$5668........e8........8bf068........56e8........a3........68........56e8........a3........68........56e8........a3........68........56e8........a3........68........56e8"))
    {
        if(PE.compareOverlay("'CK16'"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","CrypKey");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("8B1D........83FB00750AE83C000000E8..0A00008B44240850E8..020000A1"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("E8........5883E805505F578BF781EF........83C639BA........8BDFB90B......8B06"))
    {
        sVersion="5.X-6.X";
        bDetected=1;
    }
    else if(PE.compareEP("E8........E8........83F80075076A00E8"))
    {
        sVersion="5.6.X";
        bDetected=1;
    }
    else if(PE.compareEP("833D........00753468........E8"))
    {
        sVersion="6.1X";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","CrypToCrack Pe Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E801000000E8585B81E300FFFFFF66813B4D5A753784DB75338BF303....813E504500007526"))
    {
        sVersion="0.9.2";
        bDetected=1;
    }
    else if(PE.compareEP("5B81E300FFFFFF66813B4D5A75338BF303733C813E5045000075260FB746188BC869C0AD0B0000F7E02DAB5D414B69C9DEC0000003C1"))
    {
        sVersion="0.9.3";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Cryptect");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("68........e8$$$$$$$$5052e9$$$$$$$$53660fcb560fb7df9c0fbff381d6........d2e7558bda57"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("68........e8$$$$$$$$525166990fca999cf550c0de..d2d40fb7c3550fabe5f8565766"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","Crypter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("68FF6424F06858585858FFD4508B40F205B095F6950F850181BBFF68"))
    {
        sVersion="3.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Cryptic");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("B8........BB........B900100000BA........03D803C803D13BCA74068031..41EBF6FFE3"))
    {
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Crypto Obfuscator For .Net");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isSignatureInSectionPresent(0,"000220....000a20ffffff0028........2a"))
        {
            sVersion="5.X";
            bDetected=1;
        }
        else if(PE.isSignatureInSectionPresent(0,"0291203fffffff5f1f18620a067e........021758911f1062600a067e"))
        {
            sVersion="5.X";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// Made by KDSS-Research
// Contact Me: koffidev365supp@gmail.com

// Program name:
// ----------------------
// CX_Freeze

init("packer","CX_Freeze");

function detect(bShowType,bShowVersion,bShowOptions)
{
	if (PE.isSectionNamePresent(".rdata")){
		var n1=PE.findString(PE.section[".rdata"].FileOffset,PE.section[".rdata"].FileSize,"Unable to change DLL search path!");

        var n2=PE.findSignature(PE.section[".rdata"].FileOffset,PE.section[".rdata"].FileSize,"25006C0073005C006C00690062005C006C006900620072006100720079002E007A00690070003B0025006C0073005C006C0069006200");
		
		var n4=PE.findString(PE.section[".rdata"].FileOffset,PE.section[".rdata"].FileSize,"Out of memory creating sys.path!");
		
		var n3=PE.findString(PE.section[".rdata"].FileOffset,PE.section[".rdata"].FileSize,"Unable to calculate directory of executable!");
		
		if(n1!=-1 && n2!=-1 && n3!=-1 && n3!=-1 )
		{
			bDetected=1;
		}
	}
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","Cygwin32");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("5589E583EC04833D"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","DBPE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("9C5557565251539CFAE8........5D81ED5B5340..B0..E8........5E83C611B927......3006464975FA"))
    {
        sVersion="1.53";
        bDetected=1;
    }
    else if(PE.compareEP("9C6A10730BEB02C151E806......C41173F75BCD83C404EB0299EBFF0C247101E879E07A017583C4049DEB017568"))
    {
        sVersion="2.10";
        bDetected=1;
    }
    else if(PE.compareEP("EB$$9C5557565251539CE8........5D81ED"))
    {
        switch(PE.readByte(PE.nEP+0x5c))
        {
        case 0xEB: sVersion="2.10"; break;
        case 0x9C: sVersion="2.33"; break;
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","DCrypt Private");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("B9........E8000000005868........83E80B0F1800D00048E2FBC3"))
    {
        sVersion="0.9b";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: sendersu
/*
If errors pls contact sendersu on exelab.ru
*/

init("compiler","DEC Visual Fortran (Windows)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.section[".data"])
    {
        var nOffset=PE.section[".data"].FileOffset;
        var nSize=PE.section[".data"].FileSize;
        var nVersionOffset=PE.findString(nOffset,nSize,"DEC Fortran RTL Message Catalog");
        if(nVersionOffset!=-1)
        {
            sVersion = "14-Jul-1999"
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","DEF");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("BE........6A..59807E070074118B460C05........8B56103010404A75FA83C628E2E4"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("joiner","DJoin");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("C605........00C605........00................00........00..........00"))
    {
        sVersion="0.7 public";
        sOptions="RC4 encryption";
        bDetected=1;
    }
    else if(PE.compareEP("C605........00................00........00..........00"))
    {
        sVersion="0.7 public";
        sOptions="xor encryption";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// 27.12.2023 @DosX_dev add strings
init("compiler","DMD");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isSectionNamePresent(".minfo") && PE.isSectionNamePresent("._deh"))
    {
        bDetected=1;
    }

    if (!bDetected) {
        if((PE.section[".rdata"])&&(PE.isDeepScan()))
        {
            var nOffset=PE.section[".rdata"].FileOffset;
            var nSize=PE.section[".rdata"].FileSize;
        if (
            PE.findSignature(nOffset, nSize, "'core.sys.windows.dll'") != -1 &&
            PE.findSignature(nOffset, nSize, "'string.d'") != -1
        ) {
                bDetected = true;
            }
        }
    }

    if (bDetected && PE.section[".rdata"]) {
        var nOffset=PE.section[".rdata"].FileOffset;
        var nSize=PE.section[".rdata"].FileSize;

        var strOffset = PE.findString(nOffset, nSize, "This program will continue, but will not operate when using DMD ");

        if (strOffset != -1) {
            sVersion = PE.getString(strOffset - 7, 5);

            if (sVersion.indexOf(".") == -1 || sVersion.split(".")[0].length != 1) {
                sVersion = "";
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","DNGuard");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isNETStringPresent("ZYXDNGuarder"))
        {
            bDetected=1;
        }
        else if(PE.isNETStringPresent("HVMRuntm.dll"))
        {
            bDetected=1;
        }

        if (!bDetected) {
            if(PE.isSignatureInSectionPresent(0,"'A newer version of DNGuard Runtime library is needed to run this application.'"))
            {
                // TODO Version
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
init("compiler","EZ-Logic");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isOverlayPresent())
    {
        if(PE.compareOverlay("000000000000657A2D2E2E0000007E0076302E3100"))
        {
            sVersion="0.01";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protection","Eutron SmartKey dongle reference");

function detect(bShowType,bShowVersion,bShowOptions)
{
    // I'm (adoxa) guessing these don't occur in the overlay, so don't search it (avoid wasting time on big installers).
    var nSize=PE.isOverlayPresent()?PE.getOverlayOffset():PE.getSize();
    if(PE.findString(0, nSize, "skeydrv.dll")!=-1)
    {
        bDetected=1;
    }
    else
    {
        var nOffset=0;
        while((nOffset=PE.findString(nOffset,nSize-nOffset,"\\\\.\\"))!=-1)
        {
            nOffset+=4;
            if(PE.compare("'eusk2'",nOffset)
             ||PE.compare("'Skey-'",nOffset)
             ||PE.compare("'SkeyDev'",nOffset))
            {
                bDetected=1;
                break;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("library","");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nSize=PE.isOverlayPresent()?PE.getOverlayOffset():PE.getSize();
    var nOffset=PE.findSignature(0, nSize, "'@(#) F'");
    if(nOffset!=-1)
    {
        sName=PE.getString(nOffset, 200).match(/\w\S*/i);
        sVersion = PE.getString(nOffset, 200).match(/\d\S*/i);

        if (sVersion != null) {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protection","HASP dongle reference");

function detect(bShowType,bShowVersion,bShowOptions)
{
    // I'm (adoxa) guessing these don't occur in the overlay, so don't search it (avoid wasting time on big installers).
    var nSize=PE.isOverlayPresent()?PE.getOverlayOffset():PE.getSize();
    if(PE.findString(0, nSize, "HASPDOSDRV")!=-1
     ||PE.findString(0, nSize, "HASPUT16.DLL")!=-1)
    {
        bDetected=1;
    }
    else if(PE.findString(0, nSize, "haspvb32.dll")!=-1&&(PE.isLibraryPresent("MSVBVM60.DLL")||PE.isLibraryPresent("MSVBVM50.DLL")))
    {
        sName+=" for Visual Basic";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protection","Hardlock dongle reference");

function detect(bShowType,bShowVersion,bShowOptions)
{
    // I'm (adoxa) guessing these don't occur in the overlay, so don't search it (avoid wasting time on big installers).
    var nSize=PE.isOverlayPresent()?PE.getOverlayOffset():PE.getSize();
    var nOffset=0;
    while((nOffset=PE.findString(nOffset,nSize-nOffset,"\\\\.\\"))!=-1)
    {
        nOffset+=4;
        if(PE.compare("'HARDLOCK.VXD'",nOffset)
         ||PE.compare("'FEnteDev'",nOffset))
        {
            bDetected=1;
            break;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protection","Key-Lok II dongle reference");

function detect(bShowType,bShowVersion,bShowOptions)
{
    // I'm (adoxa) guessing these don't occur in the overlay, so don't search it (avoid wasting time on big installers).
    var nSize=PE.isOverlayPresent()?PE.getOverlayOffset():PE.getSize();
    var nOffset=0;
    while((nOffset=PE.findString(nOffset,nSize-nOffset,"\\\\.\\"))!=-1)
    {
        nOffset+=4;
        if(PE.compare("'KeyDongle_0'",nOffset))
        {
            bDetected=1;
            break;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protection","MARX Crypto-Box dongle reference");

function detect(bShowType,bShowVersion,bShowOptions)
{
    // I'm (adoxa) guessing these don't occur in the overlay, so don't search it (avoid wasting time on big installers).
    var nSize=PE.isOverlayPresent()?PE.getOverlayOffset():PE.getSize();
    if(PE.findString(0, nSize, "MARXDEV1.SYS")!=-1)
    {
        bDetected=1;
    }
    else
    {
        var nOffset=0;
        while((nOffset=PE.findString(nOffset,nSize-nOffset,"\\\\.\\"))!=-1)
        {
            nOffset+=4;
            if(PE.compare("'MARXDEV'",nOffset)
             ||PE.compare("'Cb7Dev'",nOffset)
             ||PE.compare("'CB7'",nOffset)
             ||PE.compare("'CBUSB'",nOffset))
            {
                bDetected=1;
                break;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protection","Matrix Hardware Lock dongle reference");

function detect(bShowType,bShowVersion,bShowOptions)
{
    // I'm (adoxa) guessing these don't occur in the overlay, so don't search it (avoid wasting time on big installers).
    var nSize=PE.isOverlayPresent()?PE.getOverlayOffset():PE.getSize();
    if(PE.findString(0, nSize, "MxLPT_Sem")!=-1
     ||PE.findString(0, nSize, "MxUSB_Sem")!=-1
     ||PE.findString(0, nSize, "MATRIX.INI")!=-1)
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protection","NetHASP dongle reference");

function detect(bShowType,bShowVersion,bShowOptions)
{
    // I'm (adoxa) guessing these don't occur in the overlay, so don't search it (avoid wasting time on big installers).
    var nSize=PE.isOverlayPresent()?PE.getOverlayOffset():PE.getSize();
    if(PE.findString(0, nSize, "NETHASP_00112233445566zz")!=-1
     ||PE.findString(0, nSize, "nethasp.ini")!=-1)
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protection","Novex/Guardant dongle reference");

function detect(bShowType,bShowVersion,bShowOptions)
{
    // I'm (adoxa) guessing this don't occur in the overlay, so don't search it (avoid wasting time on big installers).
    var nSize=PE.isOverlayPresent()?PE.getOverlayOffset():PE.getSize();
    if(PE.findString(0,nSize,"\\\\.\\NVKEY")!=-1)
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("library","Reprise License Manager (RLM)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    // I'm (adoxa) guessing these don't occur in the overlay, so don't search it (avoid wasting time on big installers).
    var nSize=PE.isOverlayPresent()?PE.getOverlayOffset():PE.getSize();
    var nOffset=PE.findString(0, nSize, "Reprise License Manager (RLM)");
    if(nOffset!=-1)
    {
        sVersion=PE.getString(nOffset, 200).match(/\d\S*\w/i);
        bDetected=1;
        nOffset=PE.findSignature(0, nSize, "44894c24..4c894424..48895424..48894c24..b8........e8........482be0488b05........4833c448898424........48c78424................48c78424................48c78424................c74424..........c74424..........488b8424........4805........48894424..c74424..........c74424..........c74424..........c78424................4883bc24..........74..488b8424........c7");
        //v8.0-9.1 x64
        if(nOffset!=-1)
        {
            sOptions="rlm_pubkey at "+nOffset;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protection","Rockey4 dongle reference");

function detect(bShowType,bShowVersion,bShowOptions)
{
    // I'm (adoxa) guessing these don't occur in the overlay, so don't search it (avoid wasting time on big installers).
    var nSize=PE.isOverlayPresent()?PE.getOverlayOffset():PE.getSize();
    var nOffset=0;
    while((nOffset=PE.findString(nOffset,nSize-nOffset,"\\\\.\\"))!=-1)
    {
        nOffset+=4;
        if(PE.compare("'ROCKEY'",nOffset)
         ||PE.compare("'rockey'",nOffset))
        {
            bDetected=1;
            break;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protection","SenseLock dongle reference");

function detect(bShowType,bShowVersion,bShowOptions)
{
    // I'm (adoxa) guessing these don't occur in the overlay, so don't search it (avoid wasting time on big installers).
    var nSize=PE.isOverlayPresent()?PE.getOverlayOffset():PE.getSize();
    if(PE.findString(0, nSize, "sense4.dll")!=-1
     ||PE.findString(0, nSize, "S4Open")!=-1
     ||PE.findString(0, nSize, "S4Startup")!=-1
     ||PE.findString(0, nSize, "S4Execute")!=-1)
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protection","Sentinel SuperPro dongle reference");

function detect(bShowType,bShowVersion,bShowOptions)
{
    // I'm (adoxa) guessing these don't occur in the overlay, so don't search it (avoid wasting time on big installers).
    var nSize=PE.isOverlayPresent()?PE.getOverlayOffset():PE.getSize();
    // Originally searched for "RNBOsproInitialize", "RNBOsproGetKeyInfo" and
    // "RNBOsproGetVersion", but this should be enough.
    if(PE.findString(0, nSize, "RNBOspro")!=-1)
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Sentinel SuperPro");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("68........6A016A00FF15........A3........FF15........33C93DB7000000A1"))
    {
        sVersion="6.4.0";
        sOptions="Automatic Protection";
        bDetected=1;
    }
    else if(PE.compareEP("A1........558B......85C074..85ED75..A1........5055FF15........8B0D"))
    {
        sVersion="6.4.1";
        sOptions="Automatic Protection";
        bDetected=1;
    }
    else if(PE.compareEP("A1........85C00F85........C705................33C050C70485................E8"))
    {
        sVersion="6.4.5.0";
        sOptions="Automatic Protection";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protection","Rainbow Sentinel dongle reference");

function detect(bShowType,bShowVersion,bShowOptions)
{
    // I'm (adoxa) guessing these don't occur in the overlay, so don't search it (avoid wasting time on big installers).
    var nSize=PE.isOverlayPresent()?PE.getOverlayOffset():PE.getSize();
    if(PE.findString(0, nSize, "SNTNLUSB")!=-1)
    {
        bDetected=1;
    }
    else
    {
        var nOffset=0;
        while((nOffset=PE.findString(nOffset,nSize-nOffset,"\\\\.\\"))!=-1)
        {
            nOffset+=4;
            if(PE.compare("'SENTINEL.VXD'",nOffset)
             ||PE.compare("'SntnlUsb'",nOffset))
            {
                bDetected=1;
                break;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protection","SoftLok dongle reference");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nSize=PE.isOverlayPresent()?PE.getOverlayOffset():PE.getSize();
    var nOffset=PE.findSignature(0, nSize, "5c5c2e5c'MNXX'");
    var nOffset1=PE.findSignature(0, nSize, "5c5c2e5c'SoftLok'");
    if(nOffset!=-1||nOffset1!=-1)
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protection","Unikey/Activator dongle reference");

function detect(bShowType,bShowVersion,bShowOptions)
{
    // I'm (adoxa) guessing these don't occur in the overlay, so don't search it (avoid wasting time on big installers).
    var nSize=PE.isOverlayPresent()?PE.getOverlayOffset():PE.getSize();
    if(PE.findString(0, nSize, "SSIVDDP.DLL")!=-1
     ||PE.findSignature(0, nSize, "5C004400650076006900630065005C005300530049005000440044005000")!=-1) // L"\\Device\\SSIPDDP"
    {
        bDetected=1;
    }
    else
    {
        var nOffset=0;
        while((nOffset=PE.findString(nOffset,nSize-nOffset,"\\\\.\\"))!=-1)
        {
            nOffset+=4;
            if(PE.compare("'SSIPDDP'",nOffset)
             ||PE.compare("'PIPE\\SSINetPipe'",nOffset))
            {
                bDetected=1;
                break;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protection","WIBU Key dongle reference");

function detect(bShowType,bShowVersion,bShowOptions)
{
    // I'm (adoxa) guessing these don't occur in the overlay, so don't search it (avoid wasting time on big installers).
    var nSize=PE.isOverlayPresent()?PE.getOverlayOffset():PE.getSize();
    if(PE.findString(0, nSize, "WIBUKEY")!=-1
     ||PE.findString(0, nSize, "WkWin32.dll")!=-1
     ||PE.findString(0, nSize, "WKWIN32.DLL")!=-1)
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protection","Wizzkey dongle reference");

function detect(bShowType,bShowVersion,bShowOptions)
{
    // I'm (adoxa) guessing this doesn't occur in the overlay, so don't search it (avoid wasting time on big installers).
    var nSize=PE.isOverlayPresent()?PE.getOverlayOffset():PE.getSize();
    if(PE.findString(0, nSize, "\\\\.\\WIZZKEYRL")!=-1)
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","DYAMAR");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.section[".dyamarC"]&&PE.section[".dyamarD"])
    {
        sVersion="1.3.5";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","DZA Patcher");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("EB08'5H40L1N'0060E8000000005D8BD581ED........2B95........83EA108995........8B442420250000FFFF"))
    {
        sVersion="1.3";
        bDetected=1;
    }
    else if(PE.compareEP("BF........9968........68........5252525252525257E81501000085C0751C9952525752E8CB000000FF35"))
    {
        sVersion="1.3";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Daemon Protect");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60609c8cc932c9e3$$9d6130e230e231c055e8"))
    {
        sVersion="0.6.7";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","DalKrypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("68........5868........5F33DBEB0D8A140380EA0780F2048814034381FB........72EBFFE7"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("Crypter","DataAnubis");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
		if(PE.isNETStringPresent("_Lambda$__R20-1") && PE.isNETStringPresent("_Lambda$__R97-1")){
			bDetected=1;
		}
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","DeepSea");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        var nOffset=PE.findString(PE.section[0].FileOffset,PE.section[0].FileSize,"DeepSeaObfuscator");
        if(nOffset!=-1)
        {
            if(PE.compare("'Evaluation'",nOffset+18))
            {
                sVersion="4.X";
                sOptions="Evaluation";
            }
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","DelZip");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec83c4..33c08945..b8........e8........33c05568........64ff306489206a..68........6a"))
    {
        if(PE.compareOverlay("'MPV'"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// 1995-2007 Borland Delphi
// 2007-2014 Embarcadero Delphi;
// https://docwiki.embarcadero.com/RADStudio/Alexandria/en/Compiler_Versions
// coauthor: sendersu

init("compiler","Borland Delphi");

includeScript("Borland");

function getVersion()
{
    if(PE.isNET())
    {
        if(PE.isNETStringPresent("Borland.Vcl.Types"))
        {
            sVersion="8";
        }
        else if(PE.isNETStringPresent("Borland.Eco.Interfaces"))
        {
            sVersion="8 Eco WinForm";
        }
        else if(PE.isNETStringPresent("Borland.Delphi.System")
              &&PE.isNETStringPresent("WinForm"))
        {
            sVersion="8 WinForm";
        }
        else if(PE.isNETStringPresent("Borland.Delphi.Units"))
        {
            sVersion="2005 for .NET";
        }
        else if(PE.isNETStringPresent("Borland.Studio.Delphi"))
        {
            sName="Embarcadero Delphi";
            sVersion="XE*";
            sOptions=".NET";
        }
        else
        {
            return 0;
        }
        return 1;
    }

    var nSectionOffset=PE.section[0].FileOffset;
    var nSectionSize=PE.section[0].FileSize;
    var nOffset=nSectionOffset;
    var nSize=nSectionSize;
    var nOffset2;
    var nAddress;
    var nLng;
    var nLng1;
    var bNewVersion=0;

    var nAddressSize=PE.isPEPlus()?8:4;

    while(nSize>0)
    {
        nOffset=PE.findSignature(nOffset,nSize,"0708'TControl'");
        if(nOffset==-1)
        {
            break;
        }
        nAddress=PE.readDword(nOffset+10);
        nOffset2=PE.VAToOffset(nAddress);
        if(nOffset2!=-1)
        {
            if((nOffset2>=nSectionOffset)&&(nOffset2<nSectionOffset+nSectionSize))
            {
                nLng=PE.readDword(nOffset2-10*nAddressSize);
                nLng1=PE.readDword(nOffset2-10*nAddressSize-11*nAddressSize);

                switch(nLng)
                {
                case 0:
                    if(nLng1==0x746E4907)
                    {
                        sVersion="3";
                    }
                    else if(nLng1==0x4F540774)
                    {
                        sVersion="2";
                    }
                    break;

                case 0x0B4: sVersion="C++ Builder"; break;
                case 0x114: sVersion="4";           break;
                case 0x120: sVersion="5";           break;
                case 0x128: sVersion="6 CLX";       break;
                case 0x12C: sVersion="7 CLX";       break;
                case 0x138: sVersion="Kylix";       break;
                case 0x15C:
                case 0x160:
                    sVersion=(nLng1==0x40100000||nLng1==0x100000)?"7":"6";
                    break;

                case 0x164: sVersion="2005"; break;
                case 0x190: sVersion="2006"; break;

                default:
                    nLng=PE.readDword(nOffset2-13*nAddressSize);

                    if(nLng==0x1A4)
                    {
                        sName="Embarcadero Delphi";
                        sVersion="2009";
                    }
                    else if(nLng==0x1AC)
                    {
                        if(PE.resource["PACKAGEINFO"])
                        {
                            nOffset=PE.resource["PACKAGEINFO"].Offset;
                            nSize=PE.resource["PACKAGEINFO"].Size;
                            if(PE.isSignaturePresent(nOffset,nSize,"'ExcUtils'"))
                            {
                                sName="Embarcadero Delphi";
                                sVersion="XE";
                            }
                            else if(PE.isSignaturePresent(nOffset,nSize,"'StrUtils'"))
                            {
                                sName="Embarcadero Delphi";
                                sVersion="2010";
                            }
                            else
                            {
                                sName="Embarcadero Delphi";
                                sVersion="2010 or XE";
                            }
                        }
                    }
                    else if(nLng==0x1B4)
                    {
                        // 32
                        sName="Embarcadero Delphi";
                        sVersion="XE2-XE4";
                    }
                    else if((nLng==0x2F0)||(nLng==0x2F8))
                    {
                        // 64
                        sName="Embarcadero Delphi";
                        sVersion="XE2";
                    }
                    else if(nLng==0x1BC)
                    {
                        // 32
                        sName="Embarcadero Delphi";
                        sVersion="XE5-XE6";
                        bNewVersion=1;
                    }
                    else
                    {
                        if(nAddressSize==8)
                        {
                            nLng=PE.readDword(nOffset2-16*nAddressSize);
                            if(nLng==0x2F8)
                            {
                                // 64
                                sName="Embarcadero Delphi";
                                sVersion="XE3-X4";
                            }
                            else if(nLng==0x308)
                            {
                                // 64
                                sName="Embarcadero Delphi";
                                sVersion="XE5-XE6";
                                bNewVersion=1;
                            }
                        }
                    }
                }

                if((sVersion!="")&&(!bNewVersion))
                {
                    return 1;
                }
            }
        }

        nOffset++;
        nSize=nSectionSize-(nOffset-nSectionOffset+1);
    }

    if(PE.resource["PACKAGEINFO"])
    {
        nOffset=PE.resource["PACKAGEINFO"].Offset;
        nSize=PE.resource["PACKAGEINFO"].Size;

        if(PE.isSignaturePresent(nOffset,nSize,"'System.SysUtils'"))
        {
            sName="Embarcadero Delphi";
            sVersion="XE2-XE6";
            bNewVersion=1;
        }
        else if(PE.isSignaturePresent(nOffset,nSize,"'ExcUtils'"))
        {
            sName="Embarcadero Delphi";
            sVersion="XE";
        }
        else if(PE.isSignaturePresent(nOffset,nSize,"'StrUtils'"))
        {
            sName="Embarcadero Delphi";
            sVersion="2009-2010";
        }
        else if(PE.isSignaturePresent(nOffset,nSize,"'ImageHlp'"))
        {
            sVersion="2006";
        }
        else if(PE.isSignaturePresent(nOffset,nSize,"'SysInit'"))
        {
            sVersion="6-7 or 2005";
        }

        if((sVersion!="")&&(!bNewVersion))
        {
            return 1;
        }
    }
    else
    {
        if(PE.findString(PE.section[0].FileOffset,PE.section[0].FileSize,"Borland\\Delphi")!=-1)
        {
            sVersion="2-3";
            return 1;
        }
    }

    if(bNewVersion)
    {
        if(PE.section[".rdata"])
        {
            var nRDataOffset=PE.section[".rdata"].FileOffset;
            var nRDataSize=PE.section[".rdata"].FileSize;
            var nVersionOffset=PE.findString(nRDataOffset,nRDataSize,"Embarcadero Delphi for Win");
            if(nVersionOffset!=-1)
            {
                var sCompilerVersion=PE.getString(nVersionOffset+46,4);
                if(sCompilerVersion=="28.0")
                {
                   sVersion="XE7";
                }
                else if(sCompilerVersion=="29.0")
                {
                   sVersion="XE8";
                }
                else if(sCompilerVersion=="30.0")
                {
                   sVersion="10 Seattle";
                }
                else if(sCompilerVersion=="31.0")
                {
                   sVersion="10.1 Berlin";
                }
                else if(sCompilerVersion=="32.0")
                {
                   sVersion="10.2 Tokyo";
                }
                else if(sCompilerVersion=="33.0")
                {
                   sVersion="10.3 Rio";
                }
                else if(sCompilerVersion=="34.0")
                {
                   sVersion="10.4 Sydney";
                }
                else if(sCompilerVersion=="35.0")
                {
                   sVersion="11.0 Alexandria";
                }
                else
                {
                   sVersion="11.x Alexandria++";
                }
            }
        }

        return 1;
    }

    return 0;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(bBorlandC) // can't be Delphi if it's already C/C++
    {
        return "";
    }

    if(PE.resource["PACKAGEINFO"])
    {
        bDetected=1;
        getVersion();
    }
    if(PE.resource["DVCLAL"])
    {
        bDetected=1;
        getVersion();

        // try to decode DVCLAL (Delphi Visual Component Library Access License) values
	nOffset=PE.getResourceNameOffset("DVCLAL");
        if(PE.compare("A28CDF987B3C3A7926713F090F2A2517", nOffset))
        {
            sOptions="Professional";
        }
        else if(PE.compare("23785D23B6A5F31943F3400226D111C7", nOffset))
        {
            sOptions="Standard";
        }
        else if(PE.compare("263D4F38C28237B8F3244203179B3A83",nOffset))
        {
            sOptions="Enterprise";
        }
    }
    else if(PE.resource["TMAINFORM"])
    {
        bDetected=1;
        getVersion();
    }
    else if(PE.isNET())
    {
        if(getVersion())
        {
            bDetected=1;
        }
    }
    else if(PE.compare("0A06'string'",PE.section[0].FileOffset))
    {
        sVersion="2";
        bDetected=1;
    }
    else if(PE.findSignature(PE.section[0].FileOffset,100,"07'Boolean'")!=-1)
    {
        bDetected=1;
        getVersion();
    }
    else if(PE.findSignature(PE.section[0].FileOffset,100,"06'String'")!=-1)
    {
        bDetected=1;
        getVersion();
    }
    else if(PE.findSignature(PE.section[0].FileOffset,0x100,"FF25........8BC0FF25........8BC0"))
    {
        if(getVersion())
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Sent by ajax(11.11.2014)

init("protector","Denuvo protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isPEPlus())
    {
        if(PE.compareEP("488D0D........E9....FFFF000000000000"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","DeployMaster");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec81c4........5333c08985........8985........b8........e8........33c05568........64ff30"))
    {
        if(PE.compareOverlay("'BZh91'"))
        {
            sVersion="2.8.0";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","DesktopX Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6a..68........6a..6a..ff15........50e8........50ff15"))
    {
        for(var i=0;i<PE.resource.length;i++)
        {
            if(PE.resource[i].Type==630 || PE.resource[i].Type==726 || PE.resource[i].Type==678 || PE.resource[i].Type==774)
            {
                if(PE.compare("'PK'0304", PE.getResourceOffsetByNumber(i)))
                {
                    bDetected=1;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","Dimd");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..ff15"))
    {
        if(PE.compareOverlay("........'DIMDMSCF'"))
        {
            sOptions="CAB SFX";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Ding Boys PE-lock Phantasm");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("555756525153E8000000005D8BD581ED"))
    {
        sVersion="0.07/0.8";
        bDetected=1;
    }
    else if(PE.compareEP("5557565251536681C3EB02EBFC6681C3EB02EBFC"))
    {
        sVersion="1.0/1.1";
        bDetected=1;
    }
    else if(PE.compareEP("9C5557565251539CFAE8000000005D81ED"))
    {
        sVersion="1.5b3";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","DirTy CrYpt0r");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("b8........32dbfec33018403d........7e..68........e8"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: A.S.L. <asl@onet.eu> 2022.01.30
// Exeinfo Pe - don't detect this big file over 500 MB

init("installer","Docker Desktop Installer .NET sfx 7zip");

function detect(bShowType,bShowVersion,bShowOptions)
{
   if(PE.isNET())
   {
        if((PE.isNETStringPresent("Docker Desktop Installer")) 
            &&(PE.getAddressOfEntryPoint()==0x400000)    // EP=0000
            &&(PE.section[".rsrc"].FileSize>0x01000000)) // over 400 MB
        {
            sVersion="v.4.x";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

// Executable made by Dolphin XP ToGo Application (Dolphin Smalltalk platform)

init("other","Dolphin Virtual Machine");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..33db895d..6a..ff15"))
    {
        if(PE.compareOverlay("'IST'00"))
        {
            sVersion="5.0";
            sOptions="2003 by Object Arts";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","DotFix NiceProtect");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E9FF000000608B7424248B7C2428FCB28033DBA4B302E86D00000073F633C9E864000000731C33C0E85B0000007323B30241B010E84F00000012C073F7753FAAEBD4E84D0000002BCB7510E842000000EB28ACD1E8"))
    {
        sVersion="2.1-2.5";
        bDetected=1;
    }
    else if(PE.compareEP("60E8550000008DBD........68........033C248BF79068........9BDBE355DB04248BC7DB442404DEC1DB1C248B1C2466AD51DB04249090DA8D........DB1C24D1E129"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("60be........8dbe........5783cd..eb$$619090505174..83c8..eb"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("e8$$$$$$$$eb$$5aeb$$524aeb$$eb$$b9........eb$$eb$$dd..eb$$803411..eb$$eb$$e2"))
    {
        sVersion="1.0-2.x";
        bDetected=1;
    }
    else if(PE.compareEP("60BE"))
    {
        if(PE.section["."])
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Dotfuscator");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNETStringPresent("DotfuscatorAttribute"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","DragonArmor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("BF........83C9FF33C068........F2AEF7D1495168........E8110A000083C40C68"))
    {
        sVersion="0.0.4.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","Duals eXe Encryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC81EC00050000E8000000005D81ED0E"))
    {
        switch(PE.readWord(PE.nEP+18))
        {
        case 0x308: sVersion="1.0";  break;
        case 0x43A: sVersion="1.0b"; break;
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","DxPack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E8........5D8BFD81ED........2BB9........81EF........83BD..........0F84"))
    {
        switch(PE.readByte(PE.nEP+32))
        {
        case 0xB9: sVersion="1.0";  break;
        case 0xBD: sVersion="0.86"; break;
        }
        bDetected=1;
    }
    else if(PE.compareEP("EB03C20C00558BEC81EC00100000B80000....B900100000BA0000....89"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// 07.12.2014 detect x64, build date added //ajax

init("protector","ENIGMA");

function getVersion()
{
    var nSection=PE.nLastSection;
    var nOffset=PE.section[nSection].FileOffset;
    var nSize=PE.section[nSection].FileSize;
    if(nSize==0)
    {
        nOffset=PE.section[nSection-1].FileOffset;
        nSize=PE.section[nSection-1].FileSize;
    }
    var nVersionOffset=PE.findSignature(nOffset,nSize,"000000'ENIGMA'");
    if(nVersionOffset!=-1)
    {
        var sMajor=PE.readByte(nVersionOffset+9);
        var sMinor=PE.readByte(nVersionOffset+10);
        var bYear=PE.readWord(nVersionOffset+11);
        var bMonth=PE.readWord(nVersionOffset+13);
        var bDay=PE.readWord(nVersionOffset+15);
        var bHour=PE.readWord(nVersionOffset+17);
        var bMin=PE.readWord(nVersionOffset+19);
        var bSec=PE.readWord(nVersionOffset+21);
        sVersion=sMajor+"."+sMinor+" build "+bYear+"."+bMonth+"."+bDay+" "+bHour+":"+bMin+":"+bSec;
        return 1;
    }
    nVersionOffset=PE.findSignature(nOffset,nSize,"'Enigma Protector'");
    if(nVersionOffset!=-1)
    {
        sVersion="5.X";
        return 1;
    }

    return 0;
}

function getVersion_old1x()
{
    var nSection=PE.nLastSection;
    var nOffset=PE.section[nSection].FileOffset;
    var nSize=PE.section[nSection].FileSize;
    var nVersionOffset=PE.findSignature(nOffset,nSize,"'ENIGMA'07' PROT'");
    
    if(nVersionOffset!=-1)
    {
        sVersion='1.14';
        return 1;
    }
    
    return 0;
}

function getVersion_old()
{
    if(PE.section[".data"])
    {
        var nOffset=PE.section[".data"].FileOffset;
        var nSize=PE.section[".data"].FileSize;
        var nOffset=PE.findString(nOffset,nSize,"Enigma protector v");
        if(nOffset!=-1)
        {
            sVersion=PE.getString(nOffset+18,4);
            return 1;
        }
    }
    
    return 0;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(!PE.isPEPlus())
    {
        if(PE.compareEP("558bec83c4..b8........e8........9a............e9$$$$$$$$60e8000000005d..ed"))
        {
            getVersion();
            bDetected=1;
        }
        else if(PE.compareEP("60e8000000005d81ed........81ed........e9"))
        {
            getVersion();
            bDetected=1;
        }
        else if(PE.compareEP("68........e8$$$$$$$$eb$$83c4..e9$$$$$$$$60e8000000005d81ed"))
        {
            getVersion();
            bDetected=1;
        }
        else if(PE.compareEP("eb$$e9$$$$$$$$60e8000000005d81ed........81ed........e9"))
        {
            getVersion();
            bDetected=1;
        }
        else if(PE.compareEP("e8$$$$$$$$83c4..e9$$$$$$$$60e8000000005d81ed........81ed........e9"))
        {
            getVersion();
            bDetected=1;
        }
        else if(PE.compareEP("60e8000000005d83....81ed")) //first versions
        {
            getVersion_old();
            bDetected=1;
        }
        else if(PE.compareEP("eb$$e9$$$$$$$$60e8000000005d83....81ed")) //1.14
        {
            getVersion_old1x();
            getVersion_old();
            bDetected=1;
        }
    }
    else if(PE.compareEP("5051525355565741504151415241534154415541564157489C4881EC080000000FAE1C24E8000000005D"))
    {
        getVersion();
        bDetected=1;
    }

    if(!bDetected)
    {
        if(PE.getNumberOfImports()>1
              &&PE.getNumberOfImportThunks(1)==1
              &&PE.getImportFunctionName(1,0)=="MessageBoxA"
              &&PE.getSectionCharacteristics(0)==0xe0000040
              &&getVersion())
        {
            bDetected=1;
        }
        else if(PE.isNET())
        {
            if(PE.isSignatureInSectionPresent(0,"000000'ENIGMA'"))
            {
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","EP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("5083C0178BF09733C033C9B124AC86C4ACAA86C4AAE2F600B8400003003C40D2338B661450708B8D3402448B1810487003BA"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(PE.compareEP("6A..60E90101"))
    {
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","EP:MPRESS");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("575653515255e8$$$$$$$$e8$$$$$$$$5805........8b3003f02bc08bfe66adc1e0..8bc8ad2bc803f18bc8498a4439..74..880431eb"))
    {
        sVersion="0.71-0.75";
        bDetected=1;
    }
    else if(PE.compareEP("60e8$$$$$$$$e8$$$$$$$$5805........8b3003f02bc08bfe66adc1e0..8bc8ad2bc803f18bc8498a4439..74..880431eb"))
    {
        sVersion="0.77";
        bDetected=1;
    }
    else if(PE.compareEP("60e8$$$$$$$$5805........8b3003f02bc08bfe66adc1e0..8bc850ad2bc803f18bc857498a4439..74..880431eb"))
    {
        sVersion="0.85-0.97";
        bDetected=1;
    }
    else if(PE.compareEP("60e8$$$$$$$$5805........8b3003f02bc08bfe66adc1e0..8bc850ad2bc803f18bc85751498a4439..74..880431eb"))
    {
        sVersion="1.27";
        bDetected=1;
    }
    else if(PE.compareEP("60e8$$$$$$$$5805........8b3003f02bc08bfe66adc1e0..8bc850ad2bc803f18bc85751498a4439..88043175"))
    {
        sVersion="2.01-2.12";
        bDetected=1;
    }
    if(PE.isPEPlus())
    {
        if(PE.compareEP("57565351524150e8$$$$$$$$488d05........488b304803f0482bc0488bfe66adc1e0..488bc8ad2bc84803f18bc8ffc98a4439..74..880431eb"))
        {
            sVersion="0.71-0.92";
            bDetected=1;
        }
        else if(PE.compareEP("57565351524150488d05........488b304803f0482bc0488bfe66adc1e0..488bc850ad2bc84803f18bc857ffc98a4439..74..880431eb"))
        {
            sVersion="0.97";
            bDetected=1;
        }
        else if(PE.compareEP("57565351524150488d05........488b304803f0482bc0488bfe66adc1e0..488bc850ad2bc84803f18bc857448bc1ffc98a4439..88043175"))
        {
            sVersion="1.27-2.12";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","EP:Microsoft C/C++");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("64a100000000558bec6aff68........68........506489250000000083ec..5356578965"))
    {
        sVersion="3.0-5.0";
        bDetected=1;
    }
    else if(PE.compareEP("64a100000000558bec6aff68........68........508b45..6489250000000083ec..85c05356578965"))
    {
        sVersion="3.10";
        bDetected=1;
    }
    else if(PE.compareEP("535657bb........8b7c....553bfb75..011d"))
    {
        sVersion="3.0-3.10";
        bDetected=1;
    }
    else if(PE.compareEP("53b8........8b5c....565785db5575..833d..........75..33c0"))
    {
        sVersion="3.0-5.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","EP:Microsoft Visual C/C++");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("8bff558bec837d....75..e8........ff75..8b4d..8b55..e8"))
    {
        sVersion="2008-2010";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("8bff558bec83ec..538b5d..83fb..75..5657e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb........3bc7"))
    {
        sVersion="2010 v.10";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("8bff558bec837d....0f84........ff75..ff75..e8........59595d"))
    {
        sVersion="2010 v.10 (30319, 40219)";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("837c24....8b4424..a3........75..68........6a"))
    {
        sVersion="2010 v.10 (40219)";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("558bec8b45..83f8..75..68........ff15"))
    {
        sVersion="2010 v.10 (40219)";
        sOptions="DLL32,console";
        bDetected=1;
    }
    else if(PE.compareEP("8bff558bece8$$$$$$$$8bff558bec83ec..c745..........c745..........813d"))
    {
        sVersion="2008 v.9.0";
        sOptions="EXE32";
        bDetected=1;
    }
    else if(PE.compareEP("8bff558bec83ec..837d....75..5657e8........b8........be........8bf8"))
    {
        sVersion="2008 SP1";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("8bff558bece8........5de9"))
    {
        sVersion="2008 SP1";
        sOptions="Driver32";
        bDetected=1;
    }
    else if(PE.compareEP("8bff558bec837d....75..e8........8b45..508b4d..518b55..52e8"))
    {
        sVersion="2008";
        sOptions="DLL32,msvcrtd";
        bDetected=1;
    }
    else if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb........3bc7"))
    {
        sVersion="2008-2010";
        sOptions="EXE32";
        bDetected=1;
    }
    else if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....57bf........3bc7"))
    {
        sVersion="2005-2010";
        sOptions="EXE32";
        bDetected=1;
    }
    else if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5657bf........be........3bc7"))
    {
        sVersion="2010 v.10.10";
        sOptions="EXE32";
        bDetected=1;
    }
    else if(PE.compareEP("8bff558bec837d....75..e8........5de9........8bff55"))
    {
        sOptions="looks like patched";
        bDetected=1;
    }
    else if(PE.compareEP("558bec6a..68........68........64a100000000506489250000000083ec..5356578965"))
    {
        sVersion="6.0 (1720-9782)";
        sOptions="EXE32";
        bDetected=1;
    }
    else if(PE.compareEP("558bec538b5d..568b75..85f6578b7d"))
    {
        sVersion="2002 (2148)";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("558bec538b5d..568b75..578b7d..85f675"))
    {
        sVersion="6.0 (1720-8966)";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("8b4424..83e8..74..4875..8b4424..50a3........ff15"))
    {
        sVersion="2003 v.7.1 (3077)";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("558bec8b45..83f8..56570f84........33ff3bc7"))
    {
        sVersion="2003 v.7.1 (3052)";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("558bec518b45..8945..837d....74..837d"))
    {
        sVersion="2002";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("558bec568b75..83fe..74..83fe..75..a1"))
    {
        sVersion="2002";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("6a..68........e8........bf........8bc7e8........8965..8bf4893e56ff"))
    {
        sVersion="2003 v.7.1 (3052-9782)";
        sOptions="EXE32";
        bDetected=1;
    }
    else if(PE.compareEP("6a..68........e8........66813d............75..a1"))
    {
        sVersion="2002";
        sOptions="EXE32";
        bDetected=1;
    }
    else if(PE.compareEP("6a..68........e8........33c0408945..8b75..33ff"))
    {
        sVersion="2003";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("8bff558bec538b5d..568b75..85f6578b7d"))
    {
        sVersion="2003";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("fff589e566f7c6....80c3..80eb..81ec........66c1eb..6689ed"))
    {
        sVersion="2003";
        sOptions="Driver32";
        bDetected=1;
    }
    else if(PE.compareEP("6689ff5589e581ec........814d..........0f82........538d45"))
    {
        sVersion="2003";
        sOptions="Driver32";
        bDetected=1;
    }
    else if(PE.compareEP("8bff558bec837d....75..e8........5de9"))
    {
        sVersion="2005";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("8bff558bec8b45..83e8..566a..5e0f84"))
    {
        sVersion="2003-2005";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("8bff558bec8b45..5633f64685c0"))
    {
        sVersion="2005";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("8bff558beca1........85c0b9........74..3bc175..a1"))
    {
        sVersion="2005";
        sOptions="Driver32";
        bDetected=1;
    }
    else if(PE.compareEP("8bff558bec83ec..53568b75..8b46..5733ff897d"))
    {
        sVersion="2005";
        sOptions="Driver32";
        bDetected=1;
    }
    else if(PE.compareEP("e8$$$$$$$$558bec83ec..a1........8365....8365....5357"))
    {
        sVersion="2005";
        sOptions="EXE32";
        bDetected=1;
    }
    else if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........85c074..3d........75..568d"))
    {
        sVersion="2005";
        sOptions="EXE32";
        bDetected=1;
    }
    else if(PE.compareEP("5355568b74....85f657b8........75..8b0d"))
    {
        sVersion="5.0";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("558bec6a..68........68........64a100000000506489250000000083c4..535657"))
    {
        sVersion="5.0-6.0 (1720-9049)";
        sOptions="EXE32";
        bDetected=1;
    }
    else if(PE.compareEP("535657bb........8b7c....553bfb74..85ff"))
    {
        sVersion="3.10";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("558bec837d....0f84........ff75..ff75..ff75..e8........83c4"))
    {
        sVersion="2012";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("8bff558bec837d....74..8b55..51e8$$$$$$$$8bff558bec83ec..a1........33c58945..5633f657"))
    {
        sVersion="2013 v.12.1 (40116)";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("558bec837d....75..e8$$$$$$$$558bec83ec..8365....8365....a1........5657bf........be........3bc7"))
    {
        sVersion="2013";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("8bff558bec83ec..a1........33c58945..568b75..5783fe"))
    {
        sVersion="2013";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("558bec837d....75..e8$$$$$$$$558bec83ec..a1........8365....8365....5357bf........3bc7bb"))
    {
        sVersion="2005";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("558bec837d....75..e8$$$$$$$$558bec83ec..a1........8365....8365....5657bf........be........3bc7"))
    {
        sVersion="2012 update 4";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("8bff558bec837d....75..e8$$$$$$$$8bff558bec83ec..a1........8365....8365....57bf........3bc7"))
    {
        sVersion="2005 (50727)";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("8b4424..83e8..74..4875..568b7424..56ff15"))
    {
        sVersion="2005 (50727.1)";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("837c24....75..e8$$$$$$$$8bff558bec83ec..a1........85c0"))
    {
        sVersion="2005 (50727)";
        sOptions="DLL32,console";
        bDetected=1;
    }
    else if(PE.compareEP("8bff56e8........85c07c..e8$$$$$$$$e8$$$$$$$$8bff558bec83ec..a1........8365....8365....57bf........3bc7"))
    {
        sVersion="2005 (50727)";
        sOptions="EXE32";
        bDetected=1;
    }
    else if(PE.compareEP("558bece8$$$$$$$$558bec83ec..c745..........c745..........813d"))
    {
        sVersion="2005 (50727)";
        sOptions="EXE32,console";
        bDetected=1;
    }
    else if(PE.compareEP("558bec81ec........8b45..89..........83............0f84........83"))
    {
        sVersion="6.0";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("558bec51c745..........837d....75..833d..........75..33c0e9"))
    {
        sVersion="6.0 (1720-8799)";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("558bec83ec..8365....5356578b3d........6a..5933c0"))
    {
        sVersion="6.0 (8168)";
        sOptions="Driver32";
        bDetected=1;
    }
    else if(PE.compareEP("558bec83ec..5356578b3d........8d45..33db"))
    {
        sVersion="6.0 (1720)";
        sOptions="Driver32";
        bDetected=1;
    }
    else if(PE.compareEP("558bec81ec........837d....75..8d85........c785"))
    {
        sVersion="6.0 (1735)";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("8b4424..5383f8..5674..33c93bc10f84........83f8..0f84........6a..585e5b"))
    {
        sVersion="6.0 (8168-8797)";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("837c24....8b4424..a3........c705................75..e8........b8........c2"))
    {
        sVersion="2008 SP1";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("8bff558bec837d....75..e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb........3bc7"))
    {
        sVersion="2008 SP1 (21022, 30729)";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("8bff558bec837d....0f84........ff75..8b4d..8b55..e8........595d"))
    {
        sVersion="2008 (21022)";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("837c24....0f84$$$$$$$$e8$$$$$$$$558bec83ec..a1........8365....8365....5357bf........3bc7"))
    {
        sVersion="2005";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("837c24....75..e8$$$$$$$$558bec83ec..a1........8365....8365....5357bf........3bc7"))
    {
        sVersion="2005";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("e8$$$$$$$$558bec83ec..8365....8365....a1........5657bf........be........3bc7"))
    {
        sVersion="2013-2017";
        sOptions="EXE32";
        bDetected=1;
    }
    else if(PE.compareEP("8bff558bec837d....75..e8$$$$$$$$8bff558bec83ec..8365....8365....a1........5657bf........be........3bc7"))
    {
        sVersion="2017 v.15.0 (24610)";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..8365....8365....a1........5657bf........be........3bc7"))
    {
        sVersion="2017 v.15.0";
        sOptions="EXE32";
        bDetected=1;
    }
    else if(PE.compareEP("e8$$$$$$$$8b0d........5657bf........be........3bcf74..85ce75..e8"))
    {
        sVersion="2017 v.15.5-6";
        sOptions="EXE32";
        bDetected=1;
    }
    else if(PE.compareEP("5355568b7424..85f657b8........74..8b7c24..8b5c24..83fe..74"))
    {
        sVersion="97 v.5.xx";
        sOptions="DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("535657bb........8b7c24..553bfb0f85........011d"))
    {
        sVersion="v.3.1";
        sOptions="DLL32";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// By Eliseu Filipi

init("protector","EXE Password Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6A606810B54000E82E020000BF940000008BC7E822F4FFFF8965E88BF4893E56FF1510B040008B4E10890D00ED40008B4604"))
    {
        sVersion="1.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","Exe32Pack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("3BC074028183553BC074028183533BC97401BC563BD27402818557E8000000003BDB7401BE5D8BD581ED"))
    {
        sVersion="1.4X";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","EXECrypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("909060E8000000005D81ED........B91500000083C10483C101EB05EBFE83C756EB00EB00"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","EXECryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("A4......00000000FFFFFFFF3C......94......D8......00000000FFFFFFFFB8"))
    {
        sVersion="2.0/2.1";
        sOptions="protected IAT";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC83C4F4565753BE........B80000....8945FC89C28B460C09C00F84"))
    {
        sVersion="2.0/2.1";
        bDetected=1;
    }
    else if(PE.compareEP("BE........B80000....8945FC89C28B460C09C00F84..00000001D089C350FF15"))
    {
        sVersion="2.1.17";
        bDetected=1;
    }
    else if(PE.compareEP("E8$$$$$$$$E800000000............8B1C2481EB........B8........506A..68"))
    {
        sVersion="2.2.4";
        bDetected=1;
    }
    else if(PE.compareEP("5068........5881E0........E9......00870C2459E8......008945F8E9"))
    {
        sVersion="2.2.6";
        sOptions="minimum protection";
        bDetected=1;
    }
    else if(PE.compareEP("508BC687042468........5EE9........85C8E9........81C3........0F81"))
    {
        sVersion="2.2.6";
        sOptions="DLL/minimum protection";
        bDetected=1;
    }
    else if(PE.compareEP("E80000000058..........8B1C2481EB........B8........506A046800100000506A00B8"))
    {
        sVersion="2.2/2.3";
        sOptions="compressed code";
        bDetected=1;
    }
    else if(PE.compareEP("CC......00000000FFFFFFFF3C......B4......08......00000000FFFFFFFFE8"))
    {
        sVersion="2.2/2.3";
        sOptions="protected IAT";
        bDetected=1;
    }
    else if(PE.compareEP("5168........5981F1123CCB98E9532C0000F7D7E9EB6000008345F802E9E3360000"))
    {
        sVersion="2.3.9";
        sOptions="compressed resources";
        bDetected=1;
    }
    else if(PE.compareEP("68........E9......FF50C1C8188905........C3C1C01851E9......FF84C00F84"))
    {
        sVersion="2.3.9";
        sOptions="minimum protection";
        bDetected=1;
    }
    else if(PE.compareEP("5068........58C1C00FE9......00870424588945FCE9......FFFF05........E9"))
    {
        sVersion="2.3.9";
        sOptions="DLL/compressed resources";
        bDetected=1;
    }
    else if(PE.compareEP("5168........872C248BCD5D81E1........E9......008945F85168........5981F1"))
    {
        sVersion="2.3.9";
        sOptions="DLL/minimum protection";
        bDetected=1;
    }
    else if(PE.compareEP("56575331DB89C689D70FB60689C283E01FC1EA05742D4A74158D5C130246C1E00889"))
    {
        sVersion="2.xx";
        sOptions="compressed resources";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC83C4ECFC5357568945FC8955F889C689D766813E4A430F852301000083C60A"))
    {
        sVersion="2.xx";
        sOptions="max. compressed resources";
        bDetected=1;
    }
    else if(PE.compareEP("E824......8B4C240CC70117..01..C781..............31C089411489411880A1"))
    {
        sVersion="1.3.0.45";
        bDetected=1;
    }
    else if(PE.compareEP("E8$$$$$$$$31c064ff30648920648f05........83c4..e9$$$$$$$$60e8$$$$$$$$83c4"))
    {
        sVersion="1.4X-1.5X";
        bDetected=1;
    }
    else if(PE.compareEP("E8$$$$$$$$31C064FF30648920CCC3"))
    {
        sVersion="1.5X";
        bDetected=1;
    }
    else if(PE.compareEP("83C6148B55FCE9..FFFFFF"))
    {
        sVersion="2.1X";
        bDetected=1;
    }
    else if(PE.compareEP("E9........669C60508D88........8D900416....8BDC8BE1"))
    {
        sVersion="2.1X";
        bDetected=1;
    }
    else if(PE.compareEP("FFE0E804000000FFFFFFFF5EC300"))
    {
        sVersion="2.2X";
        bDetected=1;
    }
    else if(PE.compareEP("E9$$$$$$$$E8$$$$$$$$0F"))
    {
        bDetected=1;
    }

    if(!bDetected)
    {
        var nNumberOfSections=PE.section.length;
        if(nNumberOfSections>3
         &&PE.getNumberOfImports()==2
         &&PE.getNumberOfImportThunks(1)==1
         &&PE.getImportFunctionName(1,0)=="MessageBoxA")
        {
            for(var nAdjust=1;nAdjust<3;nAdjust++)
            {
                if(PE.getImportSection()==nNumberOfSections-nAdjust
                 &&PE.section[nNumberOfSections-nAdjust-1].FileSize==0)
                {
                    sVersion=nNumberOfSections>4?"2.4X":"2.X";
                    bDetected=1;
                    break;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","EXEFog");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("56e8$$$$$$$$5e5ee9$$$$$$$$e8$$$$$$$$5d83c5..55c3"))
    {
        sVersion="1.1";
        bDetected=1;
    }
    else if(PE.compareEP("52e8$$$$$$$$83c4..5a8be4510fb6c981e5"))
    {
        sVersion="1.1";
        bDetected=1;
    }

    var ep_off=PE.getEntryPointOffset();
    if(PE.findSignature(ep_off, 0x1000, "6545c2fb195bbd004040ebef9155f0401897db0024e8e80000008387202e87d17820fb1cb800b0ef0b000000848e")!=-1)
    {
        sVersion="1.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","EXERefactor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC81EC900B0000535657E9588C0100'USCATION'"))
    {
        sVersion="0.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Eazfuscator");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isSignatureInSectionPresent(0,"2072ffff0f5f20841a000061"))
        {
            bDetected=1;
        }
        /* else if(PE.isNETStringPresent("value__"))
        {
            bDetected=1;
        } */
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// 2022.04.16 2.00.X version Thanks: A.S.L. <asl@onet.eu>

init("protector","ElecKey");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isSignatureInSectionPresent(0,"83c42068........68........c744240800000000ff15........50ff15........85c0a3"))
        {
            sOptions="AnyCPU";
            bDetected=1;
        }
        else if(PE.isSignatureInSectionPresent(0,"488b0dd2be01006641b83200488d917b070000ff15a040010033c9ff15b8400100488b"))
        {
            sOptions="x64";
            bDetected=1;
        }
    }
    
    if(!bDetected)
    {
        // 2.00.X
        if(PE.isPEPlus())
        {
            if(PE.compareEP("41504151515257535556E8000000005B48B8................482BD8488BEB"))
            {
                sVersion="2.00.X";
                bDetected=1;
            }
        }
        else
        {
            if(PE.compareEP("515257535556E8000000005BB8........2BD8"))
            {
                sVersion="2.00.X";
                bDetected=1;
            }
        }
    }
    

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: sendersu
/*
If errors pls contact sendersu on cracklab.team
*/

init("library","Electron package");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (PE.isSectionNamePresent("CPADinfo")
        && PE.isSectionNamePresent(".00cfg")
    )
    {
       var nOffset=PE.section["CPADinfo"].FileOffset;
       var nSize=PE.section["CPADinfo"].FileSize;
       var nPresent=PE.findString(nOffset,nSize,"daPC");

       if (nPresent != -1)
           bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Embed PE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("83EC506068........E8....0000"))
    {
        switch(PE.readWord(PE.nEP+10))
        {
        case 0x992F: sVersion="1.13"; break;
        case 0xFFCB: sVersion="1.24"; break;
        default:     sVersion="1.X";  break;
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","EncryptPE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("609C64FF3500000000E8"))
    {
        switch(PE.readDword(PE.nEP+10))
        {
        case 0x179: sVersion="1.2003.3.18-1.2003.5.18";  break;
        case 0x17a: sVersion="2.2004.6.16-2.2006.6.30";  break;
        case 0x173: sVersion="2.2006.7.10-2.2006.10.25"; break;
        case 0x21b: sVersion="2.2007.04.11";             break;
        }
        bDetected=1;
    }
//    else if(PE.compareEP("807c24....0f85........60be........8dbe........5783cd..eb"))
//    {
//        sVersion="2.2004.8.10-2.2006.10.5";
//        sOptions="Delphi file protected";
//        bDetected=1;
//    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// sign by A.S.L  - asl@onet.eu  - 21.06.2015
init("installer","Enigma Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    for(var i=0;i<PE.resource.length;i++)
    {
        if(PE.resource[i].Name=='/CFG/CONFIG')
        {
            if(PE.resource[i+1].Name=='/CFG/PRIVACY_POLICY')
            {
                bDetected=2;
                break;
            }
        }
    }

    // MS C++ v9.0 stub  and Resources found
    if(PE.compareEP("E8....0100E9")&&(bDetected==2))
    {
        bDetected=1;
        sVersion="v1.0";
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Enigma Virtual Box");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(".enigma"==PE.getSectionNameCollision("1","2"))
    {
        bDetected=1;
    }
    else if(PE.isNET())
    {
        if(PE.isSignatureInSectionPresent(0,"'[enigmamasks'"))
        {
            sOptions=".NET";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","Envoy Packager");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("64a1........558bec6a..68........68........50648925........83ec..5356578965..ff15"))
    {
        if(PE.compareOverlay("b297e169"))
        {
            sOptions="1994 by Novell, Inc.";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: KDSS-Research

init("packer","EronanaPacker");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isSectionNamePresent(".packer"))
    {
	var n1=PE.findString(PE.section[".rsrc"].FileOffset,PE.section[".rsrc"].FileSize,"PADDINGPA");
        if (n1!=-1){
		bDetected=1;
	}
    }
   

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Escargot");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("EB08'(esc0.1)'6068"))
    {
        sVersion="0.1";
        bDetected=1;
    }
    else if(PE.compareEP("EB04'@0.1'6068"))
    {
        sVersion="0.1 final";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Eschalon Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec81c4........53565733c08985........8985........e8$$$$$$$$e8$$$$$$$$31d28d"))
    {
        if(PE.compareOverlay("'EPSF'"))
        {
            bDetected=1;
            sVersion=PE.getFileVersion().replace(/\.0\.0$/,"");
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","ExE Pack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6068........B8........FF1068........50B8........FF1068........6A40FFD08905"))
    {
        if(PE.section[0].Name=="!EPack")
        {
            sVersion="1.0-1.2";
            bDetected=1;
        }
    }
    else if(PE.compareEP("9090909061B8........FFE0558BEC60558B75088B7D0CE802000000EB048B1C24C381C3"))
    {
        sVersion="1.4 lite final";
        bDetected=1;
    }
    else  if(PE.compareEP("33C08BC068........68........E8"))
    {
        sVersion="1.4 lite final";
        bDetected=1;
    }
    else if(PE.section[PE.nLastSection].Name==".!ep")
    {
        sVersion="1.4";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Excelsior Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("83ec..53555657e8........6a..5b391d........8bf37e..8b3d........a1........8b....8a08"))
    {
        if(PE.compareOverlay("'ExcelsiorII1'"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: sendersu
/*
Java -> native code
*/

init("compiler","Excelsior JET");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nFound=0;
    var nOffset;

    for(var i=0;i<=PE.nLastSection;i++)
    {
        nOffset=PE.section[i].FileOffset;
        sSection=PE.section[i].Name;
        if(sSection==".jidata")
        {
            if(PE.isSignaturePresent(nOffset,16,"'JIMP'"))
            {
                ++nFound;
            }
        }
        else if(sSection==".jedata")
        {
            if(PE.isSignaturePresent(nOffset,16,"'JEXP'"))
            {
                ++nFound;
            }
        }
        else if(sSection==".config")
        {
            ++nFound;
        }
        if(nFound==3)
        {
            bDetected=1;
            break;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Exe Guarder");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC83C4D05356578D75FC8B442430250000FFFF81384D5A900074072D00100000EBF18945FCE8C8FFFFFF2DB2040000"))
    {
        sVersion="1.8";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Exe Locker");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E800000000608B6C242081ED05000000"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Exe Shield");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("EB0668....0600C39C60E8020000"))
    {
        switch(PE.readWord(PE.nEP+3))
        {
        case 0x1f90: sVersion="1.7";  break;
        case 0x86f4: sVersion="2.7";  break;
        case 0x8540: sVersion="2.7b"; break;
        }
        bDetected=1;
    }
    else if(PE.compareEP("60E8000000005D81ED........B9EB0800008DBD........8BF7AC......F8"))
    {
        sVersion="2.9";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC53565760E8000000005D81ED........B9........81E9........8BD581C2"))
    {
        sVersion="1.3RC";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("joiner","ExeJoiner");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("68........6804010000E83903000005........C6005C680401000068"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","ExeSafeguard");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isSignatureInSectionPresent(PE.nLastSection,"C05DEB4EEB47DF694E58DF5974F3EB01DF75EE9A599C81C1E2FFFFFFEB01DF9DFFE1E851E8EBFFFFFF"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","ExeSmasher");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("9CFE03..60BE........8DBE..10FFFF5783CDFFEB10"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("joiner","ExeSplitter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E99502000064A1000000008338FF74048B00EBF78B4004C3558BECB8000000008B750881E60000FFFF"))
    {
        sVersion="1.2";
        bDetected=1;
    }
    else if(PE.compareEP("E8000000005D81ED........E866FEFFFF55508D9D........538D9D"))
    {
        sVersion="1.3";
        sOptions="Split Method";
        bDetected=1;
    }
    else if(PE.compareEP("E9FE010000..............000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000073766345723031312E746D7000"))
    {                                                                                                                                                                                                                             // s v c E r 0 1 1 . t m p
        sVersion="1.3";
        sOptions="Split Method";
        bDetected=1;
    }
    else if(PE.compareEP("E8000000005D81ED........B9........8D85........80306640E2FA8F98676666"))
    {
        sVersion="1.3";
        sOptions="Split+Crypt Method";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","ExeStealth");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E8000000005D81ED........B97B0900008BF7AC"))
    {
        sVersion="1.1";
        bDetected=1;
    }
    else if(PE.compareEP("6090EB22'ExeStealth'"))
    {
        sVersion="2.5";
        bDetected=1;
    }
    else if(PE.compareEP("EB0060EB00E8000000005D81ED"))
    {
        sVersion="2.70-2.71";
        bDetected=1;
    }
    else if(PE.compareEP("EB00EB2F'Shareware - ExeStealth'00"))
    {
        sVersion="2.72-2.73";
        sOptions="Shareware";
        bDetected=1;
    }
    else if(PE.compareEP("EB00EB17'Shareware - ExeStealth'00"))
    {
        sVersion="2.74";
        sOptions="Shareware";
        bDetected=1;
    }
    else if(PE.compareEP("906090E8000000005D81ED........B915000000"))
    {
        sVersion="2.75";
        bDetected=1;
    }
    else if(PE.compareEP("EB58'Shareware-Version ExeStealth'"))
    {
        sVersion="2.75a";
        sOptions="Shareware";
        bDetected=1;
    }
    else if(PE.compareEP("EB..'ExeStealth V2 Shareware '"))
    {
        sVersion="2.76";
        sOptions="Shareware";
        bDetected=1;
    }
    else if(PE.compareEP("EB65'ExeStealth V2 - www'"))
    {
        sVersion="2.76";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","FASM");

includeScript("FASM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(bFASM)
    {
        sVersion=PE.getCompilerVersion();
        sOptions=PE.getGeneralOptionsEx();  // FASM doesn't have a linker
        bDetected=1;

        // Correct version
        if(PE.getMajorLinkerVersion()>2)
        {
            sVersion+="*";
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: A.S.L <asl@onet.eu>

init("installer","FDM Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("'###FDMDATA###'"))
    {
        if(PE.compareEP("558BEC6AFF6820714000682C364000"))
        {
            sVersion="1.0";
            bDetected=1;
        }
        else
        {
            sVersion="x.x";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","FISH .NET");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isSignatureInSectionPresent(0,"0800'FISH_NET'"))
        {
            sVersion="1.X";
            bDetected=1;
        }
        else if(PE.isSignatureInSectionPresent(0,"'FISH.NET'"))
        {
            sVersion="1.X";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","FSG");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("BE........BF........BB........53BB........B280"))
    {
        sVersion="1.31";
        bDetected=1;
    }
    else if(PE.compareEP("BB........BF........BE........53E80A00000002D275058A164612D2"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(PE.compareEP("BB........BF........BE........FCB2808A064688074702D275058A16"))
    {
        sVersion="1.1";
        bDetected=1;
    }
    else if(PE.compareEP("EB02CD2003..8D..80....00..................EB02"))
    {
        sVersion="1.10";
        sOptions="Watcom C/C++ EXE";
        bDetected=1;
    }
    else if(PE.compareEP("80E9A1C1C11368E4167546C1C1055EEB019D6864863746EB028CE05FF7D0"))
    {
        sVersion="1.10";
        sOptions="WinRAR-SFX";
        bDetected=1;
    }
    else if(PE.compareEP("EB0102EB02CD20B8........EB0155BEF400000013DF13D80FB638D1F3F7"))
    {
        sVersion="1.10";
        sOptions="WinRAR-SFX";
        bDetected=1;
    }
    else if(PE.compareEP("EB02CD202BC868........EB021EBB5EEB02CD2068B12B6E37405B0FB6C9"))
    {
        sVersion="1.10";
        sOptions="Borland C++ 1999";
        bDetected=1;
    }
    else if(PE.compareEP("23CAEB025A0DE8020000006A3558C1C910BE........0FB6C9EB02CD20BB"))
    {
        sVersion="1.10";
        sOptions="Borland C++";
        bDetected=1;
    }
    else if(PE.compareEP("2BC2E802000000954A598D3D52F12AE8C1C81CBE2E....18EB02ABA003F7"))
    {
        sVersion="1.10";
        sOptions="Borland Delphi/Borland C++";
        bDetected=1;
    }
    else if(PE.compareEP("EB012EEB02A555BB........87FE8D05AACEE063EB0175BA5ECEE063EB02"))
    {
        sVersion="1.10";
        sOptions="Borland Delphi/Borland C++";
        bDetected=1;
    }
    else if(PE.compareEP("EB02CD20EB02CD20EB02CD20C1E618BB........EB0282B8EB01108D05F4"))
    {
        sVersion="1.10";
        sOptions="Borland Delphi/Microsoft Visual C++/ASM";
        bDetected=1;
    }
    else if(PE.compareEP("C1C810EB010FBF03746677C1E91D6883....77EB02CD205EEB02CD202BF7"))
    {
        sVersion="1.10";
        sOptions="Borland Delphi/Microsoft Visual C++";
        bDetected=1;
    }
    else if(PE.compareEP("1BDBE8020000001A0D5B68........E801000000EA5A58EB02CD2068F400"))
    {
        sVersion="1.10";
        sOptions="Borland Delphi/Microsoft Visual C++";
        bDetected=1;
    }
    else if(PE.compareEP("EB0156E802000000B2D9596880..4100E8020000006532595EEB02CD20BB"))
    {
        sVersion="1.10";
        sOptions="Borland Delphi 2.0";
        bDetected=1;
    }
    else if(PE.compareEP("F7D80FBEC2BE........0FBEC9BF083B6507EB02D829BBECC59AF8EB0194"))
    {
        sVersion="1.10";
        sOptions="MASM32/TASM32/Microsoft Visual Basic";
        bDetected=1;
    }
    else if(PE.compareEP("03F723FE33FBEB02CD20BB........EB0186EB0190B8F400000083EE052B"))
    {
        sVersion="1.10";
        sOptions="MASM32/TASM32";
        bDetected=1;
    }
    else if(PE.compareEP("EB01DBE80200000086435E8D1DD075CF83C1EE1D6850..8F83EB023D0F5A"))
    {
        sVersion="1.10";
        sOptions="MASM32";
        bDetected=1;
    }
    else if(PE.compareEP("EB0209940FB7FF68........81F68E0000005BEB0211C28D05F400000047"))
    {
        sVersion="1.10";
        sOptions="Microsoft Visual Basic/MASM32";
        bDetected=1;
    }
    else if(PE.compareEP("C1CB10EB010FB90374F6EE0FB6D38D0583....EF80F3F62BC1EB01DE6877"))
    {
        sVersion="1.10";
        sOptions="Microsoft Visual Basic 5.0/6.0";
        bDetected=1;
    }
    else if(PE.compareEP("2C711BCAEB012AEB01658D3580....0080C98480C968BBF4000000EB01EB"))
    {
        sVersion="1.10";
        sOptions="Microsoft Visual C++ 4.x/LCC Win32 1.x";
        bDetected=1;
    }
    else if(PE.compareEP("33D20FBED2EB01C7EB01D88D0580......EB02CD20EB01F8BEF4000000EB"))
    {
        sVersion="1.10";
        sOptions="Microsoft Visual C++ 5.0/6.0";
        bDetected=1;
    }
    else if(PE.compareEP("E8010000005A5EE802000000BADD5E03F2EB0164BB........8BFAEB01A8"))
    {
        sVersion="1.10";
        sOptions="Microsoft Visual C++ 6.0/7.0/ASM";
        bDetected=1;
    }
    else if(PE.compareEP("0BD08BDAE80200000040A05AEB019DB8........EB02CD2003D38D35F400"))
    {
        sVersion="1.10";
        sOptions="Microsoft Visual C++ 6.0/7.0";
        bDetected=1;
    }
    else if(PE.compareEP("87FEE80200000098CC5FBB80....00EB02CD2068F4000000E801000000E3"))
    {
        sVersion="1.10";
        sOptions="Microsoft Visual C++ 6.0/7.0";
        bDetected=1;
    }
    else if(PE.compareEP("F7D84049EB02E00A8D3580......0FB6C2EB019C8D1DF4000000EB013C80"))
    {
        sVersion="1.10";
        sOptions="Microsoft Visual C++ 6.0/7.0";
        bDetected=1;
    }
    else if(PE.compareEP("F7DB80EABFB92F4067BAEB010168AF..A7BA80EA9D58C1C2092BC18BD768"))
    {
        sVersion="1.10";
        sOptions="Microsoft Visual C++ 6.0/7.0";
        bDetected=1;
    }
    else if(PE.compareEP("F7D0EB02CD20BEBB741CFBEB02CD20BF3B....FBC1C10333F7EB02CD2068"))
    {
        sVersion="1.10";
        sOptions="Microsoft Visual C++ 6.0/ASM";
        bDetected=1;
    }
    else if(PE.compareEP("03DEEB01F8B8........EB02CD206817A0B3ABEB01E8590FB6DB680BA1B3"))
    {
        sVersion="1.10";
        sOptions="Microsoft Visual C++ 6.0";
        bDetected=1;
    }
    else if(PE.compareEP("91EB02CD20BF50BC046F91BED0....6FEB02CD202BF7EB02F0468D1DF400"))
    {
        sVersion="1.10";
        sOptions="Microsoft Visual C++ 6.0";
        bDetected=1;
    }
    else if(PE.compareEP("C1CE10C1F60F68........2BFA5B23F98D15........E801000000B65E0B"))
    {
        sVersion="1.10";
        sOptions="Microsoft Visual C++ 6.0";
        bDetected=1;
    }
    else if(PE.compareEP("E8010000000E59E8010000005858BE........EB0261E968F4000000C1C8"))
    {
        sVersion="1.10";
        sOptions="Microsoft Visual C++ 6.0";
        bDetected=1;
    }
    else if(PE.compareEP("EB014D83F64C68........EB02CD205BEB012368481C2B3AE80200000038"))
    {
        sVersion="1.10";
        sOptions="Microsoft Visual C++ 6.0";
        bDetected=1;
    }
    else if(PE.compareEP("EB02AB35EB02B5C68D05........C1C211BEF4000000F7DBF7DB0FBE38E8"))
    {
        sVersion="1.10";
        sOptions="Microsoft Visual C++ 6.0";
        bDetected=1;
    }
    else if(PE.compareEP("EB02CD20..CF....80....00................00"))
    {
        sVersion="1.10";
        sOptions="Microsoft Visual C++ 6.0";
        bDetected=1;
    }
    else if(PE.compareEP("C1F007EB02CD20BE........1BC68D1DF40000000FB606EB02CD208A160F"))
    {
        sVersion="1.20";
        sOptions="Borland C++";
        bDetected=1;
    }
    else if(PE.compareEP("0FBEC1EB010E8D35C3BEB622F7D16843....22EB02B5155FC1F11533F780"))
    {
        sVersion="1.20";
        sOptions="Borland Delphi/Borland C++";
        bDetected=1;
    }
    else if(PE.compareEP("0FB6D0E8010000000C5AB8........EB0200DE8D35F4000000F7D2EB020E"))
    {
        sVersion="1.20";
        sOptions="Borland Delphi/Microsoft Visual C++";
        bDetected=1;
    }
    else if(PE.compareEP("33C22CFB8D3D7E45B480E8020000008A45586802..8C7FEB02CD205E80C9"))
    {
        sVersion="1.20";
        sOptions="MASM32/TASM32";
        bDetected=1;
    }
    else if(PE.compareEP("EB02CD20EB01918D35........33C26883937E7D0CA45B23C36877937E7D"))
    {
        sVersion="1.20";
        sOptions="Microsoft Visual C++ 6.0/7.0";
        bDetected=1;
    }
    else if(PE.compareEP("C1E006EB02CD20EB0127EB0124BE........49EB01998D1DF4000000EB01"))
    {
        sVersion="1.20";
        sOptions="Microsoft Visual C++ 6.0";
        bDetected=1;
    }
    else if(PE.compareEP("BB........BF........BE........53BB........B280A4B680FFD373F9"))
    {
        sVersion="1.31";
        bDetected=1;
    }
    else if(PE.compareEP("BE........AD93AD97AD5696B280A4B680FF1373"))
    {
        sVersion="1.33";
        bDetected=1;
    }
    else if(PE.compareEP("8725......00619455A4B680FF13"))
    {
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","FakeNinja");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("64A118000000EB02C3118B4030EB010F0FB6400283F80174FEEB01E890C0FFFFEB03BDF4B564A1300000000"))
    {
        sVersion="2.8";
        sOptions="Anti-Debug";
        bDetected=1;
    }
    else if(PE.compareEP("BA........FFE2........FF35........E840"))
    {
        sVersion="2.8";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("other","FileSplit Self-Merger");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("56576a..ff15........8bf8ff15........8a088b35........80f9..75..50ffd68a0884c974..80f9..75..50ffd6"))
    {
        sOptions="by Partridgesoft";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Fish PE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.section.length==2)
    {
        if(PE.section[0].FileSize==0)
        {
            if(PE.compareEP("60e8070000006168........c35e56"))
            {
                sVersion="v1.2";
                bDetected=1;
            }
            else if(PE.compareEP("60e821000000eb$$6168........c35e56"))
            {
                sVersion="v1.3";
                bDetected=1;
            }
            else if(PE.compareEP("60b8........ffd05a"))
            {
                sVersion="v1.4";
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","FishPE Shield");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC83C4D05356578B451083C00C8B008945DC"))
    {
        sVersion="1.12/1.16";
        bDetected=1;
    }
    else if(PE.compareEP("60E8EAFDFFFFFFD0C38D4000..0000002C000000"))
    {
        sVersion="1.12/1.16";
        bDetected=1;
    }
    else if(PE.compareEP("60E8........C390090000002C000000........C4030000BCA0000000400100"))
    {
        sVersion="1.0X";
        bDetected=1;
    }
    else if(PE.compareEP("60e8........61c3")&&PE.compareEP("60e8$$$$$$$$558bec81c470ffffff535657"))
    {
        sVersion="2.0.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","FixupPak");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("55E8000000005D81ED....0000BE00..000003F5BA0000....2BD58BDD33C0AC3C00743D3C01740E"))
    {
        sVersion="1.20";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","FlashBack Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60609c8cc932c9e3$$9d6190609061eb$$558bec83c4..b8........e8"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("player","Flash Player");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("83....56FF15........8BF08A063C..75..8A....463C..74..84C074..8A....463C..75..80....75..46EB..3C..7E..8A"))
    {
        sVersion=PE.getFileVersion();
        bDetected=1;
    }
    else if(PE.compareEP("83....56FF15........8BF08A063C..75..8A....463C..74..84C075..3c..75..46eb..3c..76..8da4"))
    {
        sVersion="8.0";
        bDetected=1;
    }
    else if(PE.compareEP("83ec..56ff15........8bf08a063c..75..8a46..463c..74..84c074..8a46..463c..75..803e..75..46eb"))
    {
        if(PE.compareOverlay("'CWS'") || PE.compareOverlay("'FWS'"))
        {
            sVersion="7.0";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","Fly-Crypter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("53565755BB2C....44BE00304444BF20....44807B28007516833F0074118B1789D033D289178B"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC83C4F053B818224444E87FF7FFFFE80AF1FFFFB809000000E85CF1FFFF8BD885DB7505"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("library","Fox Pro");

function getVersion()
{
    var nOffset;

    for(var i=0;i<=PE.nLastSection;i++)
    {
        nOffset=PE.findString(PE.section[i].FileOffset,512,"VisualFoxProRuntime.");
        if(nOffset!=-1)
        {
            sVersion=PE.getString(nOffset+20)+".0";
            return 1;
        }
    }

    return 0;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(getVersion())
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","Free Basic");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("5589E583EC08C70424..000000FF15........E8..FFFFFF89EC31C05DC389F65589E583EC08"))
    {
        // Free Basic is really MinGW, so make an extra check.
        // Well, it works for the one file I have on hand...
        if(PE.section[".rdata"])
        {
            var nOffset=PE.section[".rdata"].FileOffset;
            var nSize=PE.section[".rdata"].FileSize;
            if(nSize>0x800&&PE.isSignaturePresent(nOffset+nSize-0x800,0x800,"'FreeBASIC'"))
            {
                sVersion="0.14+";
                bDetected=1;
            }
        }
    }
    else if(PE.compareEP("E8....0000E801000000C35589E5"))
    {
        sVersion="0.11";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","Free Pascal");
includeScript("FPC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E8006E00005589E58B7D0C8B750889F88B5D1029"))
    {
        sVersion="0.99.10";
        bDetected=1;
    }
    else if(PE.compareEP("E8006E00005589E58B7D0C8B750889F88B5D1029",19))
    {
        sVersion="0.99.10";
        bDetected=1;
    }
    else if(PE.compareEP("C605........01E8....0000C605........00E8....000050E800000000FF25........55"))
    {
        sVersion="1.0.10";
        sOptions="win32 console";
        bDetected=1;
    }
    else if(PE.compareEP("C605........00E8....000050E800000000FF25........5589E5"))
    {
        sVersion="1.0.10";
        sOptions="win32 GUI";
        bDetected=1;
    }
    else if(PE.compareEP("5589E5C605........00E8........5531ED89E0A3........668CD5892D"))
    {
        sVersion="1.0.4";
        bDetected=1;
    }
    else if(PE.compareEP("C605........005589E55356578B7D08893D........8B7D0C893D........8B7D10893D"))
    {
        sVersion="1.0.4";
        sOptions="DLL";
        bDetected=1;
    }
    else if(PE.compareEP("5589E5C605........00E8........6A0064FF350000000089E0A3"))
    {
        sVersion="2.0.0";
        bDetected=1;
    }
    else if(PE.compareEP("C605........01E874000000C605........00E86800000050E800000000FF25........90"))
    {
        sVersion="2.0.0";
        bDetected=1;
    }
    else if(PE.compareEP("5589E5C605........0168........6AF6E8........50E8"))
    {
        sVersion="2.6.0";
        bDetected=1;
    }
    else if(PE.compareEP("C605..........E8$$$$$$$$5589E5C605..........E8........5531ed89e0A3........668cd5892d........dbe3d9"))
    {
        sVersion="1.0.2";
        bDetected=1;
    }
    if(bFPC)
    {
        var nVersionOffset=PE.findString(nOffset,0x1024,"FPC ");
        sVersion=PE.getString(nVersionOffset+4);
        bDetected=1;
        // Gui Lazarus ?
        if(PE.getResourceNameOffset("LAZ_PIC_DIALOG_TEMPLATE")!=-1)
        {
            sOptions="Lazarus";
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","FreeCryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("8B0424409083C007803890907402EBFF"))
    {
        if(PE.compareEP("68",16))
        {
            sVersion="0.1 build 001";
        }
        else if(PE.compareEP("9068",16))
        {
            sVersion="0.1 build 002";
        }
        bDetected=1;
    }
    else if(PE.compareEP("33D2901E68........0FA01F8B029050548F0290908E642408FFE2585033D25283F8019B408A10891424"))
    {
        sVersion="0.2 build 002";
        bDetected=1;
    }
    else if(PE.compareEP("90909b591e909b9033d29b68........9b9b0fa01f8b0a9b51548f0290909b"))
    {
        sVersion="0.3 build 3";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("joiner","FreeJoiner");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("9087FF9090B92B000000BA........83C2039087FF9090B9040000009087FF9033C9C705"))
    {
        sVersion="1.5.1";
        bDetected=1;
    }
    else if(PE.compareEP("E846FDFFFF50E80C000000FF25........FF25........FF25........FF25........FF25"))
    {
        sVersion="1.5.2 Stub engine 1.6";
        bDetected=1;
    }
    else if(PE.compareEP("E833FDFFFF50E80D000000CCFF25........FF25........FF25........FF25........FF25"))
    {
        sVersion="1.5.3 Stub engine 1.7";
        bDetected=1;
    }
    else if(PE.compareEP("86D69086F2B9936008FE9086D69086F2B99D13450186D69086F281C2936008FE33C9B930744D"))
    {
        sVersion="1.5.3 Stub engine 1.7.1";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC83C4F086FF680001000068........6A00E8F30100008AC06A0068800000006A036A00"))
    {
        sVersion="Small build 014/015";
        bDetected=1;
    }
    else if(PE.compareEP("E8....FFFF6A00E80D000000CCFF25........FF25........FF25........FF25........FF25"))
    {
        sVersion="Small build 014-020";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC83C4F086FF86DB86FF680001000068........6A00E8FF0100008AE46A0068800000006A03"))
    {
        sVersion="Small build 017";
        bDetected=1;
    }
    else if(PE.compareEP("E8E1FDFFFF6A00E80C000000FF25........FF25........FF25........FF25........FF25"))
    {
        sVersion="Small build 023";
        bDetected=1;
    }
    else if(PE.compareEP("5032C48AC358E8DEFDFFFF6A00E80D000000CCFF25........FF25........FF25........FF25"))
    {
        sVersion="Small build 029";
        bDetected=1;
    }
    else if(PE.compareEP("5032..668BC358E8..FDFFFF6A00E80D000000CCFF25........FF25........FF25........FF25"))
    {
        sVersion="Small build 031/032";
        bDetected=1;
    }
    else if(PE.compareEP("506633C3668BC158E8ACFDFFFF6A00E80D000000CCFF25........FF25........FF25........FF25"))
    {
        sVersion="Small build 033";
        bDetected=1;
    }
    else if(PE.compareEP("5133CB86C959E89EFDFFFF6687DB6A00E80C000000FF25........FF25........FF25........FF25"))
    {
        sVersion="Small build 035";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Fuck n Joy");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E8000000005D81ED........FF742420E88C0200000BC00F842C0100008985"))
    {
        sVersion="1.0c";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Fusion");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("68........68........E80903000068........E8C7020000"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","G!X Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60EB05E8EB044000EBFAE80A000000"))
    {
        sVersion="1.2";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","GPInstall");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("........'SPIS'1a'LH5'"))
    {
        sOptions="SPIS LH5";
        if(PE.compareEP("558bec83c4..5333c08945..b8........e8........33c05568........64ff30648920ba........33c0e8"))
        {
            bDetected=1;
        }
        else if(PE.compareEP("558bec83c4..53565733c08945..b8........e8........33c05568........64ff30648920ba........33c0e8"))
        {
            bDetected=1;
        }
        else if(PE.compareEP("558bec33c951515151515151535657b8........e8........33c05568........64ff30648920ba........33c0"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("other","GSplit Self-Uniting");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec83c4..b8........e8$$$$$$$$538bd833c0a3........6a..e8........a3........a1........a3........33c0"))
    {
        if (PE.getNumberOfResources()>0)
        {
            nOffset=PE.getResourceNameOffset("ENG");
            {
                if(PE.compare("'GS'", nOffset))
                {
                    sVersion="3.0";
                    bDetected=1;
                }
            }

        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","GZip");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83....5356578965"))
    {
        for(var i=0;i<PE.resource.length;i++)
        {
            if(PE.compare("1f8b08", PE.resource[i].Offset))
            {
                bDetected=1;
            }
        }
    }
    else if(PE.compareEP("64a1........558bec6a..68........68........50648925........83ec..5356578965..ff15"))
    {
        if(PE.compareOverlay("1f8b08"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","GameGuard");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("31FF740661E9'JMP0'"))
    {
        sVersion="2006.5.x.x";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Gentee Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec81ec........538d85........5633db578d8d........68........895d..518945..53ff15"))
    {
        if(PE.findSignature(PE.getOverlayOffset(),0x80,"'GEA'")!=-1)
        {
            bDetected=1;
        }
        else if (PE.getNumberOfResources()>0)
        {
            nOffset=PE.getResourceNameOffset("SETUP_TEMP");
            {
                if(PE.compare("'GEA'", nOffset))
                {
                    bDetected=1;
                }
            }
        }

    }
    else if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..33db895d..6a..ff15"))
    {
        if(PE.findSignature(PE.getOverlayOffset(),0x80,"'GEA'")!=-1)
        {
            bDetected=1;
        }
        if(PE.findSignature(PE.getSectionFileOffset(PE.getSectionNumber(".data")),0x80,"'gentee'")!=-1)
        {
            bDetected=1;
        }
    }
    else if(PE.compareEP("81ec........5356575568........6a..6a..ff15........8bf0ff15........3d........75..56"))
    {
        if(PE.compareOverlay("'OWS9G1'", 0xb)!=-1)
        {
            bDetected=1;
        }
    }
    if(PE.compareEP("558bec81ec........5356576a..ff15........68........ff15........85c074..6a..a1........50ff15........8bf06a..56ff15"))
    {
        bDetected=1;
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Ghost Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60be........8dbe........c787................5783cd..eb"))
    {
        if(PE.compareOverlay("c0dececb8d8d8d8d"))
        {
            sOptions="xored MSCF, mask: 8D";
            sVersion="1.0.0.0";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","GkSetup SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.findString(PE.getOverlayOffset(),Math.min(0x300,PE.getOverlaySize()),"/SFX")!=-1)
    {
        if(PE.compareEP("e9$$$$$$$$5351525589e583ec..b8........e8........a1........83c0..24..31d229c489e18b1d"))
        {
            sOptions="1998 by Gero Kuhn";
            bDetected=1;
        }
        else if(PE.compareEP("5668........33f668........56ff15........56ff15........a3........e8........85c074..a1"))
        {
            sOptions="1999 by Gero Kuhn";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// created by A.S.L - asl@onet.eu - 2019.01
// improved by fernandom - menteb.in - 2020.04

init("compiler","Go");

function detect(bShowType,bShowVersion,bShowOptions)
{
    // All go compiled PE binaries have a .symtab section
    if (!PE.section[".symtab"])
    {
        bDetected=0;
        return result(bShowType,bShowVersion);
    }

    bDetected=1;

    if (PE.compareEP("488d742408488b3c24488d0510000000ffe0cccccccccccccccccccccccccccc") || 
    PE.compareEP("83ec0c8b44240c8d5c241089442404895c2408c70424ffffffffe901000000cc"))
    {
        sVersion="1.7.x-1.9.x";
    }
    else if (PE.compareEP("e90bd8ffffcccccccccccccccccccccc8b5c240464c705340000000000000089") ||
        PE.compareEP("e92bc7ffffcccccccccccccccccccccc51488b01488b7110488b490865488b3c"))
    {
        sVersion="1.10";
    }
    else if (PE.compareEP("e98bc8ffffcccccccccccccccccccccc51488b01488b7110488b490865488b3c") ||
        PE.compareEP("e90bd9ffffcccccccccccccccccccccc8b5c240464c705340000000000000089"))
    {
        sVersion="1.10.x";
    }
    else if (PE.compareEP("e98bdbffffcccccccccccccccccccccc8b5c240464c705340000000000000089") || 
        PE.compareEP("e9dbc5ffffcccccccccccccccccccccc51488b01488b7110488b490865488b3c"))
    {
        sVersion="1.11-1.11.x";
    }
    else if (PE.compareEP("e9ebc5ffffcccccccccccccccccccccc51488b01488b7110488b490865488b3c") ||
    PE.compareEP("e99bdbffffcccccccccccccccccccccc8b5c240464c705340000000000000089"))
    {
        sVersion="1.12 or 1.12.2-1.12.9";
    }
    else if (PE.compareEP("e98bc4ffffcccccccccccccccccccccc51488b01488b7110488b490865488b3c") ||
        PE.compareEP("e99bdaffffcccccccccccccccccccccc8b5c240464c705340000000000000089"))
    {
        sVersion="1.12.1";
    }
    else if (PE.compareEP("e92bc5ffffcccccccccccccccccccccc51488b01488b7110488b490865488b3c") ||
        PE.compareEP("e9cbdaffffcccccccccccccccccccccc8b5c240464c705340000000000000089"))
    {
        sVersion="1.13 or 1.13.2";
    }
    else if (PE.compareEP("e9cbc3ffffcccccccccccccccccccccc51488b01488b7110488b490865488b3c") || 
    PE.compareEP("e9cbd9ffffcccccccccccccccccccccc8b5c240464c705340000000000000089"))
    {
        sVersion="1.13.1 or 1.13.3-9";
    }
    else if (PE.compareEP("e9cbd8ffffcccccccccccccccccccccc8b5c240464c705340000000000000089") || 
    PE.compareEP("e9cbc1ffffcccccccccccccccccccccc51488b01488b7110488b490865488b3c"))
    {
        sVersion="1.14 or 1.14.x";
    }
    else if (PE.compareEP("e9....ffffcccccccccccccccccccccc51488b01488b7110488b490865488b3c2530000000c7476800000000") ||
        PE.compareEP("e9....ffffcccccccccccccccccccccc8b5c240464c705340000000000000089e58b4b0489c8c1e00229c489e78b7308fcf3") )
    {
        sVersion="1.x";
    }
    else if (PE.isSignatureInSectionPresent(0, "ff20'Go build ID: '"))
    {
        sVersion="1.15.0-X.XX.X";
    }
    else {
        bDetected=0;
    }

    return result(bShowType,bShowVersion);
}
// DIE's signature file

init("protector","Goat's PE Mutilator");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E8EA0B0000......8B1C79F663D88D22B0BFF64908C302BD3B6C294613285D"))
    {
        sVersion="1.6";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: KDSS-Research

init("GameEngine","GoldSrc");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (!PE.isSectionNamePresent(".data")){
        return null;
    }
    var n1=PE.findString(PE.section[".data"].FileOffset,PE.section[".data"].FileSize,"VENGINE_")
    var n2=PE.findString(PE.section[".data"].FileOffset,PE.section[".data"].FileSize,"VFileSystem")
    var n3=PE.findString(PE.section[".data"].FileOffset,PE.section[".data"].FileSize,"_API_VERSION")
    if (n1!=-1 && n2!=-1 && n3 !=-1){
        bDetected=1;
        sOptions = "API v"+PE.getString(n3+12,n3+3);
		
    }
    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file

init("protector","Goliath");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isNETStringPresent("ObfuscatedByGoliath"))
        {
            bDetected=1;
        }
        else if(PE.isSignatureInSectionPresent(0,"'.Goliath.NET.CodeShield.'"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Gremlin Software Patcher/Updater");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83c4..5356578965..ff15"))
    {
        for(var i=0;i<PE.resource.length;i++)
        {
            if(PE.resource[i].Type==9942) //FILES_MAIN (Name: IDR_FILES_MAIN)
            {
                if(PE.findSignature(PE.resource[i].Offset, 256, "'SZDD'"))
                {
                    sOptions="SZDD";
                    bDetected=1;
                    break;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
init("protector","Guardant Stealth");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.getNumberOfImports()==1)
    {
        if(PE.getImportLibraryName(0)=="NOVEX32.dll")
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: ajax
// History:
// 23:45 16.01.2013 add HASP SRM x32 1.x and HASP SRM x64 1.x
// 15:40 19.01.2013 change name
//  0:01 12.02.2013 add HASP 4/HL x32

init("protector","HASP HL/SRM Protection");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(!PE.isPEPlus())
    {
        if(PE.compareEP("558bec535657608bc4a3........b8........2b05........a3........833d..........74..8b0d........51ff15"))
        {
            sVersion="4.X";
            sOptions="HL";
            bDetected=1;
        }
        else if(PE.compareEP("57565351E801000000..5805........508B3003F02BC08BFE66AD"))
        {
            sVersion="1.X";
            sOptions="SRM";
            bDetected=1;
        }
        else if(PE.compareEP("558bec535657608bc4a3........b8........2b05........a3........833d..........0f84........a1........50ff15"))
        {
            sVersion="1.x";
            sOptions="HL";
            bDetected=1;
        }
    }
    else
    {
        if(PE.compareEP("5750569C53515241504151488D05........488B304803F0482BC0488BFE66AD"))
        {
            sVersion="1.X";
            sOptions="SRM";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","HASP Protection");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6a..602eff35........2eff35........68........e8........6683c4..2eff35........2eff35........b8........83c0..50"))
    {
        sOptions="1997 by Aladdin Knowledge Systems Ltd.";
        bDetected=1;
    }
    if((PE.section[0].FileOffset==0)&&(PE.section[0].FileSize==0))
    {
        if(PE.getResourceSection()==1)
        {
            if(/manager/im.test(PE.getVersionStringInfo("ProductName")))
            {
                sVersion=PE.getVersionStringInfo("ProductVersion");
                sOptions=PE.getVersionStringInfo("ProductName");
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","HTML executable");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec83c4..b8........e8$$$$$$$$538bd833c0a3........6a..e8........a3"))
    {
        if(PE.compareOverlay("'GHE32'"))
        {
            bDetected=1;
        }
    }
    else if(PE.compareEP("558becb9........6a..6a..4975..535657b8........e8$$$$$$$$538bd833c0a3........6a..e8........a3"))
    {
        if(PE.compareOverlay("'HEEG'"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","HackShield");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nImportSection=PE.getImportSection();
    if(nImportSection!=0)
    {
        var nOffset= PE.section[nImportSection].FileOffset;
        var nSize=PE.section[nImportSection].FileSize;
        nSize=Math.min(nSize,0x2048);
        if(PE.findString(nOffset,nSize,"TerminateHackShield")!=-1)
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: A.S.L  <asl@onet.eu>

init("installer","Hamrick Software - VueScan Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("BDA6EEE9F9EDEFEDE5ED"))
    {
        if(PE.compareEP("E8....0000"))
        {
            bDetected=1;
        }
        else if(PE.compareEP("4883ec..e8$$$$$$$$48895c24..55488bec4883ec..488b05........48bb................483bc375..33c0"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Hide&Protect");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("909090E9D8..050095..5300954A5000"))
    {
        sVersion="1.016";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","HidePE by BGCorp");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6006FC1E07BE909090906A04689010909068"))
    {
        sVersion="0.1";
        sOptions="32Lite 0.03";
        bDetected=1;
    }
    else if(PE.compareEP("6090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090EB02000090909004909090909090909090909090909090909090909090"))
    {
        sVersion="0.1";
        sOptions="ACProtect 1.09";
        bDetected=1;
    }
    else if(PE.compareEP("60E82A0000005D5051EB0FB9EB0FB8EB07B9EB0F90EB08FDEB0BF2EBF5EBF6F2EB08FDEBE9F3EBE4FCE959585051EB85"))
    {
        sVersion="0.1";
        sOptions="Armadillo 3.00";
        bDetected=1;
    }
    else if(PE.compareEP("9090909068........6764FF360000676489260000F190909090A8030000617508B801000000C20C006800000000C38B85260400008D8D3B0400005150FF95"))
    {
        sVersion="0.1";
        sOptions="ASPack 2.xx Heuristic";
        bDetected=1;
    }
    else if(PE.compareEP("609090909090905D909090909090909090909003DD"))
    {
        sVersion="0.1";
        sOptions="ASProtect";
        bDetected=1;
    }
    else if(PE.compareEP("68########6f4067485e68........67494e68........50466f"))
    {
        sVersion="1.2";
        sOptions="ASProtect";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC83C49090909068........9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090"))
    {
        sVersion="0.1";
        sOptions="Borland Delphi 3.0";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC9090909068........9090909090909090909090909090909090909090909090909090909000FF90909090909090900001909090909090909090EB0400000001909090909090900001909090909090909090"))
    {
        sVersion="0.1";
        sOptions="Borland Delphi 5.0 KOL/MCK";
        bDetected=1;
    }
    else if(PE.compareEP("9090909068........6764FF360000676489260000F190909090538BD833C0A3090909006A00E8090900FFA309090900A109090900A30909090033C0A30909090033C0A309090900E8"))
    {
        sVersion="0.1";
        sOptions="Borland Delphi 6.0-7.0";
        bDetected=1;
    }
    else if(PE.compareEP("5360BD909090908D45908D5D90E8000000008D01"))
    {
        sVersion="0.1";
        sOptions="CD-Cops II";
        bDetected=1;
    }
    else if(PE.compareEP("90909090909090909090909090909090909090909090EB0B83EC10535657E8C4010085"))
    {
        sVersion="0.1";
        sOptions="CodeSafe 2.0";
        bDetected=1;
    }
    else if(PE.compareEP("55E80E0000005D83ED068BC5556089AD........2B8500000000"))
    {
        sVersion="0.1";
        sOptions="Crunch/PE Heuristic";
        bDetected=1;
    }
    else if(PE.compareEP("BE000140006A0559807E070074118B46909090909090909090909090909090909083C101"))
    {
        sVersion="0.1";
        sOptions="DEF 1.0";
        bDetected=1;
    }
    else if(PE.compareEP("60E8000000005D8BFD81ED909090902BB90000000081EF9090909083BD90909090900F8400000000"))
    {
        sVersion="0.1";
        sOptions="DxPack 1.0";
        bDetected=1;
    }
    else if(PE.compareEP("9CFE039060BE909041908DBE9010FFFF5783CDFFEB1090909090909090909090909090909090FE0B"))
    {
        sVersion="0.1";
        sOptions="ExeSmasher";
        bDetected=1;
    }
    else if(PE.compareEP("9090909068........6764FF360000676489260000F190909090BBD0014000BF00104000BE9090909053E80A00000002D275058A164612D2C3FCB280A46A025B"))
    {
        sVersion="0.1";
        sOptions="FSG 1.0";
        bDetected=1;
    }
    else if(PE.compareEP("BE90909000BF90909000BB9090900053BB90909000B280"))
    {
        sVersion="0.1";
        sOptions="FSG 1.31";
        bDetected=1;
    }
    else if(PE.compareEP("90909090909090909090909090909090909090909090EB0B83EC0C535657E8240200FF"))
    {
        sVersion="0.1";
        sOptions="Gleam 1.00";
        bDetected=1;
    }
    else if(PE.compareEP("60E8220000005D8BD581ED909090902B959090909081EA0690909089959090909083BD4500010001"))
    {
        sVersion="0.1";
        sOptions="JDPack 1.x/JDProtect 0.9";
        bDetected=1;
    }
    else if(PE.compareEP("64A1010000005589E56AFF68........689A10409050"))
    {
        sVersion="0.1";
        sOptions="LCC Win32 1.x";
        bDetected=1;
    }
    else if(PE.compareEP("5589E5535657837D0C017505E817909090FF7510FF750CFF7508A1"))
    {
        sVersion="0.1";
        sOptions="LCC Win32 DLL";
        bDetected=1;
    }
    else if(PE.compareEP("2CE8EB1A90905D8BC581EDF67390902B859090909083E8068985FF01ECAD"))
    {
        sVersion="0.1";
        sOptions="Lockless Intro Pack";
        bDetected=1;
    }
    else if(PE.compareEP("54E8000000005D8BC581EDF67340002B858775400083E806"))
    {
        sVersion="0.1";
        sOptions="LTC 1.3";
        bDetected=1;
    }
    else if(PE.compareEP("9090909068........6764FF360000676489260000F19090909083EC4456FF15248149008BF08A063C22751C8A4601463C22740C84C074088A4601463C2275F4803E22750F46EB0C"))
    {
        sVersion="0.1";
        sOptions="Macromedia Flash Projector 6.0";
        bDetected=1;
    }
    else if(PE.compareEP("E909000000000000020000000C90"))
    {
        sVersion="0.1";
        sOptions="MEW 11 SE 1.0";
        bDetected=1;
    }
    else if(PE.compareEP("68........E80A00000000000000000030000000"))
    {
        sVersion="0.1";
        sOptions="Microsoft Visual Basic 5.0-6.0";
        bDetected=1;
    }
    else if(PE.compareEP("9090909068........6764FF360000676489260000F1909090905A6890909090689090909052E99090FF"))
    {
        sVersion="0.1";
        sOptions="Microsoft Visual Basic 6.0 DLL";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC6AFF68........68........64A10000000050E9"))
    {
        sVersion="0.1";
        sOptions="Microsoft Visual C++ 5.0+/MFC";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC5190909001019090909068........90909090909090909090909000019090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909000019090909090"))
    {
        sVersion="0.1";
        sOptions="Microsoft Visual C++ 6.0/Debug Version";
        bDetected=1;
    }
    else if(PE.compareEP("9090909068........6764FF360000676489260000F190909090558BEC83EC50535657BE909090908D7DF4A5A566A58B"))
    {
        sVersion="0.1";
        sOptions="Microsoft Visual C++ 6.20";
        bDetected=1;
    }
    else if(PE.compareEP("558D6C010081EC000000008B459083F801560F840000000085C00F84"))
    {
        sVersion="0.1";
        sOptions="Microsoft Visual C++ 7.0 DLL";
        bDetected=1;
    }
    else if(PE.compareEP("5589E5E802000000C9C39090455845"))
    {
        sVersion="0.1";
        sOptions="MinGW GCC 2.x";
        bDetected=1;
    }
    else if(PE.compareEP("E9A60000009090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090"))
    {
        sVersion="0.1";
        sOptions="Neolite 2.0";
        bDetected=1;
    }
    else if(PE.compareEP("9C60E8000000005DB8B38540002DAC8540002BE88DB500000000"))
    {
        sVersion="0.1";
        sOptions="NorthStar PE Shrinker 1.3";
        bDetected=1;
    }
    else if(PE.compareEP("60E801010000E883C404E801909090E95D81EDD3224090E804029090E8EB08EB02CD20FF24249A66BE4746909090909090909090909090909090909090909090909090909090909090909090909090909090909090"))
    {
        sVersion="0.1";
        sOptions="Pack Master 1.0/PEX Clone";
        bDetected=1;
    }
    else if(PE.compareEP("8B04249C60E8140000005D81ED0A45409080BD67444090900F8548FFED0A"))
    {
        sVersion="0.1";
        sOptions="PE Intro 1.0";
        bDetected=1;
    }
    else if(PE.compareEP("60E8110000005D83ED0680BDE0049090010F84F2FFCC0A"))
    {
        sVersion="0.1";
        sOptions="PE Pack 0.99";
        bDetected=1;
    }
    else if(PE.compareEP("525155576467A1300085C0780DE8070000005883C007C690C3"))
    {
        sVersion="0.1";
        sOptions="PE Protect 0.9";
        bDetected=1;
    }
    else if(PE.compareEP("9090909068........6764FF360000676489260000F190909090EB066890909090C39C60E80290909033C08BC483C004938BE38B5BFC81"))
    {
        sVersion="0.1";
        sOptions="PECompact 1.4+";
        bDetected=1;
    }
    else if(PE.compareEP("60E910000000EF4003A7078F071C375D43A704B92C3A"))
    {
        sVersion="0.1";
        sOptions="PENightMare 2 Beta";
        bDetected=1;
    }
    /* else if(PE.compareEP("909090909090909090909090909090909090909090909090909090909090909090909090")) // TODO Check
    {
        sVersion="0.1";
        sOptions="PENinja 1.31";
        bDetected=1;
    } */
    else if(PE.compareEP("60E82B0000009090909090909090909090909090909090909090909090909090909090909090909090909090909090CCCC"))
    {
        sVersion="0.1";
        sOptions="PESHiELD 0.25";
        bDetected=1;
    }
    else if(PE.compareEP("9090909068........6764FF360000676489260000F190909090B8009090006A00689090900064FF350000000064892500000000669C60508BD8030068"))
    {
        sVersion="0.1";
        sOptions="PEtite 2.x/level 0";
        bDetected=1;
    }
    else if(PE.compareEP("60E8010000005583C404E801000000905D81FFFFFF0001"))
    {
        sVersion="0.1";
        sOptions="PEX 0.99";
        bDetected=1;
    }
    else if(PE.compareEP("5589E5909090909090909090905090909090900001"))
    {
        sVersion="0.1";
        sOptions="REALBasic";
        bDetected=1;
    }
    else if(PE.compareEP("0BC00BC00BC00BC00BC00BC00BC00BC0BA........FFE2BAE0104000B868241A40890283C203B84000E8EE890283C2FDFFE22D3D5B20486964655045205D3D2D90000000"))
    {
        sVersion="0.1";
        sOptions="Ste@lth PE 1.01";
        bDetected=1;
    }
    else if(PE.compareEP("60E8000000005883E83D508DB8000000FF578DB0E8000000"))
    {
        sVersion="0.1";
        sOptions="UPX 0.6";
        bDetected=1;
    }
    else if(PE.compareEP("0BC00BC00BC00BC00BC00BC00BC00BC0"))
    {
        sVersion="0.1";
        sOptions="VBOX 4.3 MTE";
        bDetected=1;
    }
    else if(PE.compareEP("5589E583EC08909090909090909090909090909001FFFF0101010001909090909090909090909090909000010001000190900001"))
    {
        sVersion="0.1";
        sOptions="Video-Lan-Client";
        bDetected=1;
    }
    else if(PE.compareEP("363E268AC060E800000000"))
    {
        sVersion="0.1";
        sOptions="VOB ProtectCD 5";
        bDetected=1;
    }
    else if(PE.compareEP("E900000000909090905741"))
    {
        sVersion="0.1";
        sOptions="WATCOM C/C++ EXE";
        bDetected=1;
    }
    else if(PE.compareEP("608BF033DB83C30183C001"))
    {
        sVersion="0.1";
        sOptions="XCR 0.11";
        bDetected=1;
    }
    else if(PE.compareEP("E803000000EB019090"))
    {
        sVersion="0.1";
        sOptions="Yoda's Protector 1.02";
        bDetected=1;
    }
    else if(PE.compareEP("90909090909090909090909090909090EB06009090909090909090EB08E8900000006690909090909090909090909090909090909090909090909090909090905166909090599090909090909090909090909090909090909090EB0200009090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090EB02E2909090EB088290909090909090909090909090909090909090909090909090909090EB020001"))
    {
        sVersion="0.1";
        sOptions="Morphine 1.2";
        bDetected=1;
    }
    else if(PE.compareEP("EB01EA9CEB01EA53EB01EA51EB01EA52EB01EA5690"))
    {
        sVersion="0.2";
        sOptions="BJFNT 1.1b";
        bDetected=1;
    }
    else if(PE.compareEP("EB0269B183EC04EB03CD20EBEB01EB9CEB01EBEB00"))
    {
        sVersion="0.2";
        sOptions="BJFNT 1.2";
        bDetected=1;
    }
    else if(PE.compareEP("EB1066623A432B2B484F4F4B90E990909090"))
    {
        sVersion="0.2";
        sOptions="Borland C++";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC83C4B4B890909090E800000000E8000000008D4000"))
    {
        sVersion="0.2";
        sOptions="Borland Delphi DLL";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC83C49053565733C08945F08945D48945D0E800000000"))
    {
        sVersion="0.2";
        sOptions="Borland Delphi Setup Module";
        bDetected=1;
    }
    else if(PE.compareEP("E912000000000000000000000000000000E9FBFFFFFFC3680000000064FF3500000000"))
    {
        sVersion="0.2";
        sOptions="ZCode 1.01";
        bDetected=1;
    }
    else if(PE.compareEP("..BA........B8........890283C204B8........890283C204B8........890283C2F8FFE2'\r\n-=[ HidePE by BHCorp ]=-'"))
    {
        sVersion="1.01";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","HyperTech Crackproof");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.getNumberOfImports()>0)
    {
        if(PE.getImportLibraryName(0)=="KeRnEl32.dLl")
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","I-D Media installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a100000000506489250000000083ec..5356578965"))
    {
        if(PE.compareOverlay("'XXataDfOnigeB'"))
        {
            sVersion="1.0.0.13";
            bDetected=1;
        }
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","ICrypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC83C4EC53565733C08945ECB8703B0010E83CFAFFFF33C055686C3C00"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","ID Application Protector(NoNamePacker)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E8000000005D81ED........B9........81E9........89EA81C2........8D3A89FE31C0E9D3020000CCCCCCCCE9CA020000'C:\\Windows\\SoftWareProtector\\'"))
    {
        sVersion="1.2";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Internet Download Manager Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..33db895d..6a..ff15"))
    {
        if(PE.compareOverlay("2a330000da050000fec1cd666ebccf01fec1cd666ebccf0100..............78da"))
        {
            sOptions="zlib";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's Signature File
// Author: Dr.FarFar <Bug@Dr-FarFar.CoM>
// WebSite: WwW.Dr-FarFar.CoM
// Reverence: JAAS, AT4RE, eXeTooLs, ITShield And You ♥

init("Protector","iLProtector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isSignatureInSectionPresent(0,"40696C70726F746563746F724040"))
        {
            sType="Protector";
            sVersion="2.0.X.X";
            sOptions="By Dr.FarFar";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file

init("protector","ILUCRYPT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("8BECFAC746F7....4281FA....75F9FF66F7"))
    {
        sVersion="4.015";
        bDetected=1;
    }
    else if(PE.compareEP("8BECFAC7........4C4CC3FBBF....B8....2E....D1C84F81"))
    {
        sVersion="4.018";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","IMPostor Pack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("BE........83C601FFE600000000....000000000000000000......00..02....00100000000200"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","INCrypter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6064A1300000008B400C8B400C8D5820C70300000000E8000000005D81ED"))
    {
        sVersion="0.3";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","INFTool");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec83c4..e8$$$$$$$$e8........6a..e8........8905........e8........8905........c705"))
    {
        var nOffset=PE.findString(0, PE.getOverlayOffset(), "INFTool.pkg");
        if(nOffset!=-1)
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("installer","INTENIUM install system");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("'stgc_hdr'"))
    {
        sVersion=PE.getFileVersion();
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","IProtect");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("EB33'.FUXLoadLibraryA'00"))
    {
        sVersion="1.0";
        if(PE.compareEP("'FxLib.dll'00",19))
        {
            sOptions="FxLib.dll mode";
        }
        else if(PE.compareEP("'FxSub.dll'00",19))
        {
            sOptions="FxSub.dll mode";
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("installer","Inno Setup Module");

function getVersionAndOptions(nOffset)
{
    var sRawVersion=PE.getString(nOffset);
    sVersion=sRawVersion.substring(0,sRawVersion.indexOf(')'));
    if(/\(u\)/.test(sRawVersion))
    {
        sOptions=sOptions.append("unicode");
    }
    else if(/\(a\)/.test(sRawVersion))
    {
        sOptions=sOptions.append("ANSI");
    }
}

function getVersion(sSection)
{
    if(PE.section[sSection])
    {
        var nOffset=PE.section[sSection].FileOffset;
        var nSize=PE.section[sSection].FileSize;
        if(nSize<0x4000) // There are files with "data" section's size more as 0x2000
        {
            var nInno=PE.findString(nOffset,nSize,"Inno Setup Setup Data");
            if(nInno!=-1)
            {
                getVersionAndOptions(nInno+23);
                return 1;
            }
            else
            {
                nInno=PE.findSignature(nOffset,nSize,"'i1.'............'32'1A");
                if(nInno!=-1)
                {
                    sVersion=PE.getString(nInno+1).replace(/-.*/,"");
                    return 1;
                }
            }
        }
    }

    return 0;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("'zlb'1A")||PE.compareOverlay("'idska32'1A"))
    {
        if(!getVersion("DATA"))
        {
            getVersion(".data");
        }
        bDetected=1;
    }
    else
    {
        if(PE.getString(0x30,4)=="InUn")
        {
            sOptions="uninstall";
            var nOffset=PE.findString(PE.getOverlayOffset(),Math.min(0x100,PE.getOverlaySize()),"Inno Setup Messages");
            if(nOffset!=-1)
            {
                getVersionAndOptions(nOffset+21);
                bDetected=1;
            }
            if(!bDetected)
            {
                nOffset=PE.findString(PE.section[0].FileOffset,PE.section[0].FileSize,"Inno Setup version");
                if(nOffset!=-1)
                {
                    getVersionAndOptions(nOffset+19);
                    bDetected=1;
                }
            }
            if(!bDetected)
            {
                if(getVersion("DATA")||getVersion(".data"))
                {
                    bDetected=1;
                }
            }
        }
    }
    if(!bDetected)
    {
        if(PE.compareOverlay("'Inno Setup Messages'"))
        {
            sOptions="uninstall";
            getVersionAndOptions(PE.getOverlayOffset()+21);
            bDetected=1;
        }
        else if(PE.compareOverlay("'Inno Setup Setup Data'"))
        {
            getVersionAndOptions(PE.getOverlayOffset()+23);
            bDetected=1;
        }
    }
    if(PE.compareOverlay("78da"))
    {
        sOptions="zlib";
        if(PE.compareEP("558bec83c4..53565733c08945..8945"))
        {
            bDetected=1;
        }
        else if(PE.compareEP("558bec83c4..e8........e8........e8"))
        {
            bDetected=1;
        }
    }
    else if(PE.compareOverlay("'Inno'",0x34))
    {
        sOptions="with stub";
        bDetected=1;
    }
    if(!bDetected)
    {
        if(PE.isNET())
        {
            var sComments=PE.getVersionStringInfo("Comments");
            if(sComments=="This installation was built with Inno Setup.")
            {
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Inquartos Obfuscator");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e8$$$$$$$$bb........e8$$$$$$$$e8$$$$$$$$33c064ff306489204bccc3")&&PE.isSectionNamePresent(".inq"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Instalit");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("64a1........558bec6a..68........68........50648925........83ec..5356578965..ff15"))
    {
        for(var i=0;i<PE.resource.length;i++)
        {
            if(PE.resource[i].Type==854||PE.resource[i].Type==808||PE.resource[i].Type==884) //DLLFILE or EXEFILE or CFGFILE
            {
                sVersion="7.10.11(i32)"
                bDetected=1;
                break;
            }
            else if(PE.resource[i].Type==686||PE.resource[i].Type==640) //CFGFILE or EXEFILE
            {
                sVersion="6.59.09(i32)"
                bDetected=1;
                break;
            }

        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Install Factory");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("a7870800"))
    {
        if(PE.compareEP("5589e55383ec..55b8........505068........64ff35........648925........83ec..83e4..68"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Install4j Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("d513e4e801000000"))
    {
        if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb........3bc774"))
        {
            bDetected=1;
        }
        else if(PE.compareEP("4883ec..e8$$$$$$$$48895c24..574883ec..488b05........48836424....48bf................483bc774"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("installer","InstallAnywhere");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60BE........8DBE0070FDFF5783CDFFEB109090909090908A064688074701DB75078B1E83EEFC11DB72EDB80100000001DB7507"))
    {
        sVersion="6.1";
        bDetected=1;
    }
    else if(PE.compareEP("6a..68........e8........bf........8bc7e8........8965..8bf4893e56ff15........8b4e..890d"))
    {
        if(PE.compareOverlay("5b3e"))
        {
            var ArcOffset=PE.findSignature(PE.getOverlayOffset(),0x500, "'PK'0304");
            if(ArcOffset!=-1)
            {
                sOptions="zip";
                bDetected=1;
            }
        }
    }
    else if(PE.compareEP("4883ec..e8$$$$$$$$48895c24..55488bec4883ec..488b..........488365....48bb................483bc375"))
    {
        if(PE.compareOverlay("5b3e"))
        {
            var ArcOffset=PE.findSignature(PE.getOverlayOffset(),0x500, "'PK'0304");
            if(ArcOffset!=-1)
            {
                sOptions="zip";
                bDetected=1;
            }
        }
    }
    else if(PE.compareEP("e8$$$$$$$$558bec83ec..a1........8365....8365....5657bf........be........3bc774..85c674..f7"))
    {
        if(PE.compareOverlay("5b3e"))
        {
            var ArcOffset=PE.findSignature(PE.getOverlayOffset(),0x500, "'PK'0304");
            if(ArcOffset!=-1)
            {
                sOptions="zip";
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("installer","InstallShield");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("64a1........558bec6a..68........68........50648925........83ec..5356578965..ff15"))
    {
        if(PE.isOverlayPresent())
        {
            nOffset=PE.readByte(PE.getOverlayOffset())+PE.getOverlayOffset()+12;
            if(PE.compare("135d658c", nOffset))
            {
                sVersion="3.x";
                bDetected=1;
            }
            else if(PE.compare("'PK'0304", nOffset))
            {
                sVersion="3.x";
                sOptions="zip";
                bDetected=1;
            }
        }
        else
        {
            for(var i=0;i<PE.resource.length;i++)
            {
                if(PE.resource[i].Type==3000) //IS2
                {
                    if(PE.compare("'SZDD'",PE.resource[i].Offset))
                    {
                        sVersion="2.x"
                        bDetected=1;
                        break;
                    }
                }
            }
        }
        if(PE.isSectionNamePresent("_cabinet"))
        {
            bDetected=1;
        }
    }
    else if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..ff15"))
    {
        if(PE.findSignature(PE.getOverlayOffset(), 0x100, "'InstallShield Native Installer'")!=-1)
        {
            sName+=" Java Edition";
            bDetected=1;
        }
        else if(PE.findSignature(PE.getOverlayOffset(), 0x100, "'setup.class'")!=-1)
        {
            sName+=" Java Edition";
            sVersion="3.x";
            bDetected=1;
        }
    }
    else if(PE.compareEP("558BEC83EC4456FF15........8BF085F675086AFFFF15........8A06578B3D"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..ff15........33d2"))
    {
        if(PE.findSignature(PE.getOverlayOffset(),Math.min(0x2000,PE.getOverlaySize()),"'ISc('")!=-1)
        {
            sVersion="19.x";
            bDetected=1;
        }
    }
    else if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb........3bc774..85c374..f7"))
    {
        if(PE.findSignature(PE.getOverlayOffset(),Math.min(0x2000,PE.getOverlaySize()),"'ISSetupStream'")!=-1)
        {
            sVersion="18.x";
            bDetected=1;
        }
    }
    else if(PE.compareEP("e8$$$$$$$$558bec83ec..a1........8365....8365....5657bf........be........3bc774..85c674..f7"))
    {
        if(PE.compareOverlay("'ISSetupStream'"))
        {
            sVersion="19.x";
            bDetected=1;
        }
    }

    if((PE.getVersionStringInfo("ProductName").substr(0,13)=="InstallShield")||(PE.getVersionStringInfo("CompanyName")=="InstallShield Software Corporation"))
    {
        sVersion=PE.getVersionStringInfo("FileVersion").replace(/, /g,".").trim();
        bDetected=1;
    }

    if (!bDetected) {
        if(/InstallShield/.test(PE.getManifest()))
        {
            bDetected=1;
        }
    }

    /*else if(PE.isOverlayPresent()&&
            (searchSection(".rsrc",0x10000)||searchSection(".data",0x1000))) // Too slow on some files :(
    {
        bDetected=1;
    } */
    

    return result(bShowType,bShowVersion,bShowOptions);
}

function searchSection(sSection,nLimit)
{
    if(PE.section[sSection])
    {
        var nOffset=PE.section[sSection].FileOffset;
        var nSize=PE.section[sSection].FileSize;
        if(PE.findString(nOffset,Math.min(nLimit,nSize),"InstallShield")!=-1)
        {
            return 1;
        }
    }

    return 0;
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","InstallUs");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec83c4..b8........e8........a1........8b00ba........e8........8b0d........a1........8b008b15"))
    {
        var ArcOffset=PE.findSignature(PE.getOverlayOffset(),0x1000, "'SPIS'1a'LZH'");
        if(ArcOffset!=-1)
        {
            sOptions="SPIS LZH";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Intel C/C++ Compiler");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("83ec..56ff15........8bf08a063c..75..8a46..463c..74..84c074..8a46..463c..75..803e..75..46eb"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: sendersu
/*
If errors pls contact sendersu on cracklab.team
*/

init("library","Intel IPP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (PE.isSectionNamePresent("IPPCODE") && PE.isSectionNamePresent("IPPDATA"))
    {
            bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","IntelliProtector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nLastSectionOffset=PE.section[PE.nLastSection].FileOffset;
    if(PE.compare("E9........CC",nLastSectionOffset))
    {
        var nLastSectionSize=PE.section[PE.nLastSection].FileSize;
        var nVersionOffset=PE.findString(nLastSectionOffset,nLastSectionSize,"Protected by IntelliProtector");
        if(nVersionOffset!=-1)
        {
            sVersion=PE.getString(nVersionOffset+30);
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: DosX

function detect() {
    if (PE.isNET()) {
        if (PE.findSignature(0x00, PE.getSize() - PE.getOverlaySize(), "0013'Inx .NET Obfuscator'0000") != -1) {
            _setResult("protector", "Inx Obfuscator", "", "");
        }
    }
}// DIE's signature file

init("packer","JDPack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC6AFF68........68........64A1000000005064892500000000......E801000000"))
    {
        sVersion="2.00";
        bDetected=1;
    }
    else if(PE.compareEP("60E8000000005D8BD581ED........2B95........81EA06......8995........83BD"))
    {
        sVersion="1.01";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","JScript");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isNETStringPresent("Microsoft.JScript.Vsa"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("converter","Jar2Exe");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("efbbbf"))
    {
        if(PE.findSignature(PE.getOverlayOffset(),Math.min(255,PE.getOverlaySize()),"504B0304")!=-1)
        {
            if(PE.compareEP("558BEC6a..68........68........64a1........50648925........83ec..5356578965..ff15........33d28ad48915........8bc881e1........890d"))
            {
                sOptions="x86";
                bDetected=1;
            }
            else if(PE.compareEP("4883ec..48895c24..48897c24..ff15........488bc833d241b8........ff15........488bd84885c075..b8........e9"))
            {
                sOptions="x64";
                bDetected=1;
            }
            else if(PE.compareEP("eb$$a1........c1e0..a3........526a..e8........8bd0e8........5ae8........e8........6a..e8........5968........6a"))
            {
                bDetected=1;
            }
        }
    }
    else if(PE.compareEP("eb$$a1........c1e0..a3........526a..e8........8bd0e8........5ae8........e8........6a..e8........5968........6a"))
    {
        if(PE.compareOverlay("504b0304"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","KByS Packer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E8000000005E83EE0A8B0603C28B08894EF383EE0F56528BF0ADAD03C28BD86A04BF00100000"))
    {
        sVersion="0.28 Beta";
        bDetected=1;
    }
    else if(PE.compareEP("68........E801000000C3C3608B7424248B7C2428FCB28033DBA4"))
    {
        sVersion="0.28";
        bDetected=1;
    }
    else if(PE.compareEP("B8........BA........03C2FFE0........60E800000000"))
    {
        sVersion="0.28";
        bDetected=1;
    }
    else if(PE.compareEP("68........90b8........c3608b7424..8b7c24"))
    {
        sVersion="0.28 Beta";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("crypter","K!Cryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec83ec..53565733db53ff15........8b3d........8945..b8........ff30be........56e8........68........6a..e8........83c4..6a..68........5753ffd0"))
    {
        sVersion="0.11";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","KGCrypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E8........5D81ED........64A1........84C074..64A1........0BC074"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","KRZIP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec83c4..53565733c08945..b8........e8........33c05568........64ff30648920a1........8378"))
    {
        if(PE.compareOverlay("'<KRZIP FILE BEGINS HERE>'"))
        {
            sOptions="by Kryloff Technologies, Inc.";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: r0da https://github.com/whereisr0da

init("protector","KoiVM");

function detect(bShowType,bShowVersion,bShowOptions)
{    
    sVersion="2.0";

    if(PE.isNET())
    {
        // VM Module
        // .text = the first section
        if(PE.isSignatureInSectionPresent(0,"'KoiVM.Runtime'"))
        {
            bDetected=1;
        }
        else if(PE.isSignatureInSectionPresent(0,"'VMEntryRun'"))
        {
            bDetected=1;
        }
        else if(PE.isSignatureInSectionPresent(0,"'KoiVM'"))
        {
            bDetected=1;
        } 
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Konekt Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("fc5550e8$$$$$$$$5d50e8$$$$$$$$eb$$58eb$$40eb$$ffe0"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Krypton");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("8B0C24E90A7C01..AD4240BDBE9D7A04"))
    {
        sVersion="0.2";
        bDetected=1;
    }
    else if(PE.compareEP("8B0C24E9C08D01..C13A6ECA5D7E796DB3645A71EA"))
    {
        sVersion="0.3";
        bDetected=1;
    }
    else if(PE.compareEP("54E8........5D8BC581ED........2B85"))
    {
        switch(PE.getEPSignature(21,3))
        {
        case "83E806": sVersion="0.4"; break;
        case "EB43DF": sVersion="0.5"; break;
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// sign by A.S.L - asl@onet.eu

init("protector","Kryptonit");

function detect(bShowType,bShowVersion,bShowOptions)
{
    nOffset=0x0093;
    if (PE.compareEP("558BEC"))
    {
        if (PE.compare("'Krypton'",nOffset))
        {
            sVersion="0.1-0.2";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","LARP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e8$$$$$$$$e8$$$$$$$$e8$$$$$$$$e8$$$$$$$$5d81ed........830424..83c4..ff6424"))
    {
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("compiler","LCC-Win32")

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("64a1........5589e56a..68........68........506489..........83ec..53565789"))
    {
        sVersion="1.3";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
includeScript("FPC");

init("library","LCL");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(bFPC)
    {
        var nSize=PE.isOverlayPresent()?PE.getOverlayOffset():PE.getSize();
        var nOffset=PE.findString(0,nSize,"LCLVersion");
        if(nOffset!=-1)
        {
            sVersion=PE.getString(nOffset+12);
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","SafeNet Sentinel LDK .NET");

function detect(bShowType,bShowVersion,bShowOptions)
{
	if(PE.isNET())
	{
		if(PE.isNETStringPresent(".protect") && PE.isNETStringPresent("haspdnert.dll"))
		{
			bDetected=1;
		}
	}

	return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: sendersu
/*
If errors pls contact sendersu on exelab.ru
*/

init("protector","SafeNet Sentinel LDK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.getNumberOfSections()==4)
    {
        if(PE.isSectionNamePresent(".AKS1")
           && PE.isSectionNamePresent(".AKS2")
           && PE.isSectionNamePresent(".AKS3")
           && PE.isSectionNamePresent(".rsrc")
        )
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Lahey Fortran 90");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("eb$$b8........a3........c705................6a..e8$$$$$$$$558becff75..e8........595dc3"))
    {
        sVersion="1994";
        sOptions="by Lahey Computer Systems Inc.";
        bDetected=1;
    }
    else if(PE.compareEP("558bec8b45..83e8..72..74..4874..4874..eb..68........e8........59e8"))
    {
        sVersion="2001";
        sOptions="by Lahey Computer Systems Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","LameCrypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60669CBB........80B3........904B83FBFF75F3669D61"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Laserlok");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("eb$$eb$$5055e8$$$$$$$$5d508bc581ed........2d........3e2b85........3E8985........608d85........508d9d........2bd853"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: KDSS-Research

init("cryptor", "LimeCrypter");

function detect(bShowType, bShowVersion, bShowOptions) {
    if (PE.isNET()) {
        bDetected = 1;
        if (validateReferences(
                isPositive = true,
                references = [
                    "System.Security.Cryptography",
                    "System.Collections.Generic",
                    "System.Resources",
                    "System.Reflection"

                ]
            )) {
            bDetected = 0;
            return null; // end
        } 

        var n3=PE.isSignatureInSectionPresent(0,"24........................................................................");
        var n2=PE.isSignatureInSectionPresent(0,"3c50726976617465496d706c656d656e746174696f6e44657461696c733e7b........................................................................7d");
        
        if (!n2 || !n3 || !PE.isNETStringPresent("<Initialize>o__SiteContainer0") 
                || !PE.isNETStringPresent("$$method0x6000005-1") 
                || !PE.isNETStringPresent("Assembly")
                || !PE.isNETStringPresent("Rfc2898DeriveBytes")
                || !PE.isNETStringPresent("AES_Decrypt")
                || !PE.isNETStringPresent("<>p__Site1") || PE.isNETStringPresent("Chainski")) {
             bDetected = 0;
        }


    }
    

    return result(bShowType, bShowVersion, bShowOptions);
}


// validateReferences by DosX
function validateReferences(isPositive, references) {
    for (var i = 0; i < references.length; i++) {
        var sign = "00'" + references[i] + "'00";
        if (isPositive == true) {
            if (!PE.isSignatureInSectionPresent(0, sign)) {
                return true;
            }
        } else { // negative
            if (PE.isSignatureInSectionPresent(0, sign)) {
                return true;
            }
        }
    }
    return false;
}// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","LucasArts Update Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..ff15"))
    {
        if(PE.compareOverlay("'1CNT'"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","Lyme SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..ff15"))
    {
        if(PE.compareOverlay("789c"))
        {
            sOptions="zlib";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","MEW");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("33C0e9$$$$$$$$be........ac91ad95ad92ad515687f297fcb2..33dba4b3..ff55"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(PE.compareEP("E9........000000020000000C"))
    {
        sVersion="SE v1.0";
        bDetected=1;
    }
    else if(PE.compareEP("E9......FF0C"))
    {
        sVersion="SE v1.1-1.2";
        bDetected=1;
    }
    else if(PE.compareEP("BE5B00....AD91AD9353AD96565FACC0C0"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("2BC0E9D090FFFF6AE0E8382B23700EA31C504018186824511007E565F8E8AF7022DD15D8023B558B00EC535756817D0C1060"))
    {
        sVersion="10 v1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","MP-ZipTool SFX32");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec83c4..33c08945..b8........e8........33c05568........64ff306489206a..68........6a"))
    {
        if(PE.compareOverlay("'MPU'0d"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","MPQ");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83c4..5356578965..ff15"))
    {
        if(PE.compareOverlay("'MPQ'1a20"))
        {
            sOptions="by Blizzard";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: ajax, adoxa
// History:
// 13:37 05.02.2013 create (ajax)
//       2014-05-10 rewrite (adoxa)

init("packer","MPRESS");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nSig=PE.getString(0x2e,13);
    if(nSig=="It's .NET EXE"||nSig=="Win32 .EXE.\r\n"||nSig=="Win64 .EXE.\r\n"||nSig=="Win32 .DLL.\r\n"||nSig=="Win64 .DLL.\r\n")
    {
        var nOffset=PE.findString(0x1f0,16,"v");
        if(nOffset!=-1)
        {
            sVersion=PE.getString(nOffset+1,0x1ff-nOffset);
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","MSLRH");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("EB033A4D3A1EEB02CD209CEB02CD20EB02CD2060EB02C705EB02CD20E803000000E9EB04584050C3619D1FEB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB018150"))
    {
        sVersion="0.32a";
        sOptions="fake .BJFNT 1.3";
        bDetected=1;
    }
    else if(PE.compareEP("60E802000000EB095D5581ED39394400C361EB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB018150E802000000295A586BC003E802000000295A83C40458740475"))
    {
        sVersion="0.32a";
        sOptions="fake ASPack 2.11d";
        bDetected=1;
    }
    else if(PE.compareEP("60E803000000E9EB045D4555C3E801000000EB5DBBEDFFFFFF03DD81EB00A002EB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB018150E802000000295A586BC003"))
    {
        sVersion="0.32a";
        sOptions="fake ASPack 2.12";
        bDetected=1;
    }
    else if(PE.compareEP("60E803000000E9EB045D4555C3E801000000EB5DBBEDFFFFFF03DD81EB0073000061EB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB018150E802000000295A586B"))
    {
        sVersion="0.32a";
        sOptions="fake ASPack 2.12";
        bDetected=1;
    }
    else if(PE.compareEP("3BC074028183553BC074028183533BC97401BC563BD27402818557E8000000003BDB74019083C414EB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB018150E80200"))
    {
        sVersion="0.32a";
        sOptions="fake EXE32Pack 1.3x";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC6AFF68........68........64A1000000005064892500000000648F050000000083C40C5DEB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB018150E80200"))
    {
        sVersion="0.32a";
        sOptions="fake Microsoft Visual C++";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC538B5D08568B750C578B7D1085F65F5E5B5DEB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB018150E802000000295A586BC003E802000000295A83C40458"))
    {
        sVersion="0.32a";
        sOptions="fake MSVC++ 6.0 DLL";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC538B5D08568B750C5E5B5DEB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB018150E802000000295A586BC003E802000000295A83C4045874047502EB02EB"))
    {
        sVersion="0.32a";
        sOptions="fake MSVC++ 7.0 DLL Method 3";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC5657BF010000008B750C85F65F5E5DEB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB018150E802000000295A586BC003E802000000295A83C40458740475"))
    {
        sVersion="0.32a";
        sOptions="fake MSVC++ DLL Method 4";
        bDetected=1;
    }
    else if(PE.compareEP("E9A6000000B07B4000786040007C60400000000000B03F000012624000'NeoLite Executable File Compressor\r\nCopyright (c) 1998'2C31"))
    {
        sVersion="0.32a";
        sOptions="fake Neolite 2.0";
        bDetected=1;
    }
    else if(PE.compareEP("9C60E8000000005DB8B38540002DAC8540002BE88DB5D3FEFFFF8B0683F80074118DB5DFFEFFFF8B0683F8010F84F1010000619DEB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874"))
    {
        sVersion="0.32a";
        sOptions="fake nSPack 1.3";
        bDetected=1;
    }
    else if(PE.compareEP("FC5550E8000000005DEB01E360E803000000D2EB0B58EB014840EB0135FFE0E761585DEB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB018150E802000000295A58"))
    {
        sVersion="0.32a";
        sOptions="fake PC-Guard 4.xx";
        bDetected=1;
    }
    else if(PE.compareEP("E8000000005B83EB05EB04'RND!'85C07302F70550E808000000EAFF58EB18EB010FEB02CD20EB03EACD205858EB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB"))
    {
        sVersion="0.32a";
        sOptions="fake PE Crypt 1.02";
        bDetected=1;
    }
    else if(PE.compareEP("EB03CD20C71EEB03CD20EA9CEB02EB01EB01EB60EB03CD20EBEB01EBE803000000E9EB04584050C3EB03CD20EBEB03CD2003619D83C404EB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83"))
    {
        sVersion="0.32a";
        sOptions="fake PE Lock NT 2.04";
        bDetected=1;
    }
    else if(PE.compareEP("9C60E80200000033C08BC483C004938BE38B5BFC81EB0730400087DD619DEB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB018150E802000000295A586BC003E802"))
    {
        sVersion="0.32a";
        sOptions="fake PEBundle 0.2-3.x";
        bDetected=1;
    }
    else if(PE.compareEP("9C60E80200000033C08BC483C004938BE38B5BFC81EB0730400087DD83BD9C38400001619DEB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB018150E80200000029"))
    {
        sVersion="0.32a";
        sOptions="fake PEBundle 2.0x-2.4x";
        bDetected=1;
    }
    else if(PE.compareEP("EB06682EA80000C39C60E80200000033C08BC483C004938BE38B5BFC81EB3F904000619DEB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB018150E802000000295A"))
    {
        sVersion="0.32a";
        sOptions="fake PECompact 1.4x";
        bDetected=1;
    }
    else if(PE.compareEP("60E82B000000'\r\n\r\n\r\nRegistAred to: NON-COMMERCIAL!!\r\n\r\n\r'005861EB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C4087404"))
    {
        sVersion="0.32a";
        sOptions="fake PESHiELD 0.25";
        bDetected=1;
    }
    else if(PE.compareEP("B8........6A0068........64FF350000000064892500000000669C605083C40461669D648F050000000083C408EB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB"))
    {
        sVersion="0.32a";
        sOptions="fake PEtite 2.1";
        bDetected=1;
    }
    else if(PE.compareEP("60E801000000E883C404E801000000E95D81EDFF22400061EB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB018150E802000000295A586BC003E802000000295A83"))
    {
        sVersion="0.32a";
        sOptions="fake PEX 0.99";
        bDetected=1;
    }
    else if(PE.compareEP("60E8000000005D81ED0600000064A02300000083C50661EB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB018150E802000000295A586BC003E802000000295A83C4"))
    {
        sVersion="0.32a";
        sOptions="fake SVKP 1.11";
        bDetected=1;
    }
    else if(PE.compareEP("60BE00908B008DBE0080B4FF5783CDFFEB3A9090909090908A064688074701DB75078B1E83EEFC11DB72EDB80100000001DB75078B1E83EEFC11DB11C001DB730B75198B1E83EEFC11DB7210586190EB05E8EB0440"))
    {
        sVersion="0.32a";
        sOptions="fake UPX 0.89.6-1.02/1.05-1.24";
        bDetected=1;
    }
    else if(PE.compareEP("53558be833dbeb$$e800000000582d........506033c9505850508be851fd2e2b84..........8bf02e03b4..........8bf8"))
    {
        sVersion="0.32a";
        sOptions="fake WWPack32 1.x";
        bDetected=1;
    }
    else if(PE.compareEP("60E8000000005D81EDF31D4000B97B0900008DBD3B1E40008BF7AC902C8AC0C078900462EB010061EB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB018150E80200"))
    {
        sVersion="0.32a";
        sOptions="fake yoda's cryptor 1.2";
        bDetected=1;
    }
    else if(PE.compareEP("60EB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB0181E80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB0181E80A000000E8EB0C0000E8"))
    {
        sVersion="0.1-0.2";
        bDetected=1;
    }
    else if(PE.compareEP("60D1CB0FCAC1CAE0D1CA0FC8EB01F1"))
    {
        sVersion="0.31";
        bDetected=1;
    }
    else if(PE.compareEP("EB05E8EB044000EBFAE80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB0181E80A000000E8EB0C0000E8F6FFFFFFE8F2FFFFFF83C40874047502EB02EB018150E802000000295A586BC003"))
    {
        sVersion="0.32a";
        bDetected=1;
    }
    else if(PE.compareEP("558bec5657bf........8b75..85f65f5e5deb$$eb$$eb$$e8$$$$$$$$e8$$$$$$$$eb$$83c4"))
    {
        sVersion="0.31a";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","MZ-Crypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E8000000005D81ED251440008BBD771440008B8D7F144000EB28837F1C07751E8B770C03B57B14"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","MZ0oPE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("EBCA890383C30487FE32C0AE75FD87FE803EFF75E2465B83C304538B1B803FFF75C98BE56168"))
    {
        sVersion="1.0.6b";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","MaskPE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isSectionNamePresent(".MaskPE")&&PE.compareEP("60"))
    {
        if(PE.findSignature(PE.nEP, 0x100, "6160e8........8bc33e8b..40e8")!=-1)
        {
            sVersion="2.0";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Maxtocode");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isNETStringPresent("Attick.dll")&&PE.isNETStringPresent("CheckRuntime"))
        {
            sVersion="1.X";
            sOptions="runtime";
            bDetected=1;
        }
        else if(PE.isSignatureInSectionPresent(0,"00'InfaceMax 'ffffff005f175920ffff00'toCode_interface'00"))
        {
            sVersion="1.X";
            bDetected=1;
        }
        else if(PE.isNETStringPresent("MRuntime3.dll"))
        {
            sVersion="3.X";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Metrowerks CodeWarrior");

function detect(bShowType,bShowVersion,bShowOptions)
{
    // DLL
    if(PE.compareEP("5589E55356578B750C8B5D1083FE01740583FE0275125356FF7508E86EFFFFFF09C0750431C0EB215356FF7508E8"))
    {
        sVersion="2.0";
        bDetected=1;
    }
    // Console

//false positive
//    else if(PE.compareEP("5589E555B8FFFFFFFF505068........64FF35000000006489250000000068"))
//    {
//        sVersion="2.0";
//        bDetected=1;
//    }
    // GUI
    else if(PE.compareEP("5589E5535683EC4455B8FFFFFFFF505068........64FF35000000006489250000000068"))
    {
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("joiner","MicroJoiner");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("BE........BB........33ED83EE04392E7411"))
    {
        sVersion="1.1";
        bDetected=1;
    }
    else if(PE.compareEP("BF........83EC308BECE8C8FFFFFFE8C3FFFFFF"))
    {
        sVersion="1.5";
        bDetected=1;
    }
    else if(PE.compareEP("33C0648B38488BC8F2AFAF8B1F6633DB66813B"))
    {
        sVersion="1.6";
        bDetected=1;
    }
    else if(PE.compareEP("BF........8D5F216A0A586A04596057E88E000000"))
    {
        sVersion="1.7";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Microsoft Class Installer for Java");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("64A1........558BEC6A..68........68........50648925........83EC..5356578965..FF15"))
    {
        for(var i=0;i<PE.resource.length;i++)
        {
            if(PE.resource[i].Type==280) //ZIP
            {
                if(PE.compare("'PK'0304",PE.resource[i].Offset))
                {
                    sVersion="4.x";
                    sOptions="zip";
                    bDetected=1;
                    break;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Microsoft Compound-based installer (MSI)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558becb9........6a..6a..4975..51535657b8........e8........33c05568........64ff3064892033c05568"))
    {
        if(PE.compareOverlay("d0cf11e0a1b11ae1"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Microsoft dotNet installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb........3bc774..85c374"))
    {
        var ArcOffset=PE.findSignature(PE.getOverlayOffset(),Math.min(0x110,PE.getOverlaySize()),"'7z'bcaf");
        if(ArcOffset!=-1)
        {
            sOptions="7zip";
            bDetected=1;
        }
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// This file has a lot of results
// Microsoft linker
// Microsoft Visual C/C++
// Visual Basic
// MASM
// MFC
function getVBOptions()
{
    var sResult="";

    var nOffset=PE.findDword(PE.section[0].FileOffset,PE.section[0].FileSize,0x21354256);
    if(nOffset==-1)
    {
        nOffset=PE.findDword(PE.section[0].FileOffset,PE.section[0].FileSize,0x21364256);
    }
    if(nOffset!=-1)
    {
        var nDword=PE.readDword(nOffset+0x30);
        nOffset=PE.VAToOffset(nDword);
        nDword=PE.readDword(nOffset+0x20);
        sResult=(nDword==0)?"P-Code":"Native";
    }

    return sResult;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    var sLinker_Name = "";
    var sLinker_Version = "";
    var sLinker_Options = "";
    var sCompilerCPP_Name = "";
    var sCompilerCPP_Version = "";
    var sCompilerCPP_Options = "";
    var sCompilerMASM_Name = "";
    var sCompilerMASM_Version = "";
    var sCompilerMASM_Options = "";
    var sCompilerVB_Name = "";
    var sCompilerVB_Version = "";
    var sCompilerVB_Options = "";
    var sLibraryDot_Name = "";
    var sLibraryDot_Version = "";
    var sLibraryDot_Options = "";
    var sLibraryMFC_Name = "";
    var sLibraryMFC_Version = "";
    var sLibraryMFC_Options = "";
    var sTool_Name = "";
    var sTool_Version = "";
    var sTool_Options = "";
    
    if (PE.isNET()) {
        sLibraryDot_Name = ".NET";
        sLibraryDot_Version=PE.getNETVersion();
    
        if (PE.compare("'MZ'90000300000004000000FFFF0000B800000000000000400000000000000000000000000000000000000000000000000000000000000000000000....00000E1FBA0E00B409CD21B8014CCD21'This program cannot be run in DOS mode.\r\r\n$'00000000")) {
            sLinker_Name="Microsoft Linker";
        }
    }
    
    var bCCP = 0;
    var bWmain=0;
    var aMSVCRT=PE.isLibraryPresentExp(/^MSVCR/i);
    if(aMSVCRT)
    {
        bWmain=PE.isLibraryFunctionPresent(aMSVCRT[0],"__wgetmainargs");
    }

    if(!PE.isPEPlus())
    {
        if(PE.compareEP("558BEC51C745FC01000000837D0C007510833D"))
        {
            if(PE.compareEP("00",-4))
            {
                sOptions=sOptions.append("libcd");
            }
            else if(PE.compareEP("00",-8))
            {
                sOptions=sOptions.append("libcmtd");
            }
            else
            {
                sOptions=sOptions.append("msvcrtd");
            }
            sCompilerCPP_Version="12.00";
            bCCP=1;
        }
        else if(PE.compareEP("558BEC538B5D08568B750C578B7D1085F67509833D"))
        {
            if(PE.compareEP("CA",-1))
            {
                sCompilerCPP_Options=sCompilerCPP_Options.append("libc");
            }
            else if(PE.compareEP("59",-7))
            {
                sCompilerCPP_Options=sCompilerCPP_Options.append("libcmt");
            }
            else
            {
                sCompilerCPP_Options=sCompilerCPP_Options.append("msvcrt");
            }
            sCompilerCPP_Version="12.00";
            bCCP=1;
        }
        else if(PE.compareEP("558BEC6AFF68........68........64A100000000506489250000000083"))
        {
            var nOfs;
            switch(PE.readByte(PE.nEP+31))
            {
            case 0x10:
                if(PE.compareEP("83",107))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("libc");
                    nOfs=116;
                }
                else
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("libcmt");
                    nOfs=133;
                }
                if(PE.compareEP("E8",nOfs))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("wmain");
                    --nOfs;
                }
                if(PE.compareEP("FF",nOfs+25))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("glob");
                }
                break;
            case 0x20:
                sCompilerCPP_Options=sCompilerCPP_Options.append("msvcrt");
                if(bWmain)
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("wmain");
                }
                if(PE.compareEP("FF",109))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("glob");
                }
                break;
            case 0x58:
                if(PE.compareEP("33",87))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("libc");
                    nOfs=116;
                }
                else
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("libcmt");
                    nOfs=134;
                }
                if(PE.compareEP("E8",nOfs))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("wWinMain");
                }
                break;
            case 0x68:
                sCompilerCPP_Options=sCompilerCPP_Options.append("msvcrt");
                if(PE.compareEP("5F",45))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("wWinMain");
                }
                break;
            case 0x90:
                sCompilerCPP_Options=sCompilerCPP_Options.append("libcd");
                if(PE.compareEP("E8",241))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("wWinMain");
                }
                break;
            case 0x94:
                sCompilerCPP_Options=sCompilerCPP_Options.append("msvcrtd");
                if(PE.compareEP("83",233))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("wWinMain");
                }
                break;
            case 0xA4:
                if(PE.compareEP("00",125))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("libcd");
                    nOfs=160;
                }
                else
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("libcmtd");
                    nOfs=179;
                }
                if(PE.compareEP("E8",nOfs))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("wWinMain");
                }
                break;
            case 0xE0:
                switch(PE.readByte(PE.nEP+38))
                {
                case 0xB8:
                    sCompilerCPP_Options=sCompilerCPP_Options.append("libcd");
                    if(PE.compareEP("E8",241))
                    {
                        sCompilerCPP_Options=sCompilerCPP_Options.append("wmain");
                    }
                    break;
                case 0xC7:
                    sCompilerCPP_Options=sCompilerCPP_Options.append("msvcrtd");
                    if(bWmain)
                    {
                        sCompilerCPP_Options=sCompilerCPP_Options.append("wmain");
                    }
                    if(PE.compareEP("FF",121))
                    {
                        sCompilerCPP_Options=sCompilerCPP_Options.append("glob");
                    }
                    break;
                }
                break;
            case 0xE8:
                sCompilerCPP_Options=sCompilerCPP_Options.append("libcd");
                break;
            case 0xF0:
                if(PE.compareEP("00",125))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("libcd");
                    nOfs=160;
                }
                else
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("libcmtd");
                    nOfs=179;
                }
                if(PE.compareEP("E8",nOfs))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("wmain");
                    --nOfs;
                }
                if(PE.compareEP("FF",nOfs+25))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("glob");
                }
                break;
            }
            sCompilerCPP_Version="11.00-13.10";
            bCCP=1;
        }
        else if(PE.compareEP("6A0C68........E8........33C0408945E48B750C33FF3BF7750C393D"))
        {
            switch(PE.readByte(PE.nEP-1))
            {
            case 0xC0: sCompilerCPP_Options=sCompilerCPP_Options.append("libc");   break;
            case 0x00: sCompilerCPP_Options=sCompilerCPP_Options.append("libcmt"); break;
            }
            sCompilerCPP_Version="13.10";
            bCCP=1;
        }
        else if(PE.compareEP("6A..68........E8........66813D"))
        {
            sCompilerCPP_Version="13.10";
            bCCP=1;
        }
        else if(PE.compareEP("6A..68........E8........BF940000008BC7E8"))
        {
            nOfs=0;
            var sMain;
            switch(PE.readByte(PE.nEP+1))
            {
            case 0x18:
                sMain="wmain";
                nOfs=197;
                break;
            case 0x60:
                sMain="wWinMain";
                nOfs=199;
                break;
            }
            if(nOfs)
            {
                if(PE.compareEP("6A",nOfs))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("libcmt");
                    nOfs+=62;
                }
                else
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("libc");
                    nOfs+=69;
                }
                if(PE.compareEP("E8",nOfs))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append(sMain);
                }
            }
            sCompilerCPP_Version="13.10";
            bCCP=1;
        }
        else if(PE.compareEP("8BFF558BEC837D0C017505E8"))
        {
            if(PE.compareEP("8B",16))
            {
                sCompilerCPP_Options=sCompilerCPP_Options.append(PE.compareEP("E8",74)?"libcmtd":"msvcrtd");
            }
            else
            {
                sCompilerCPP_Options=sCompilerCPP_Options.append(PE.compareEP("8B",35)?"libcmt":"msvcrt");
            }
            sCompilerCPP_Version="15.00-16.00";
            bCCP=1;
        }
        else if(PE.compareEP("8BFF558BECE8......00E8......005DC3"))
        {
            switch(PE.readByte(PE.nEP+58))
            {
            case 0x88:
                sCompilerCPP_Options=sCompilerCPP_Options.append("msvcrtd","wWinMain");
                sCompilerCPP_Version="15.00";
                break;
            case 0x8C:
                sCompilerCPP_Options=sCompilerCPP_Options.append("msvcrtd");
                sCompilerCPP_Version="15.00";
                break;
            case 0x90:
                sCompilerCPP_Options=sCompilerCPP_Options.append("msvcrtd");
                if(bWmain)
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("wWinMain");
                }
                sCompilerCPP_Version="16.00";
                break;
            case 0x94:
                sCompilerCPP_Options=sCompilerCPP_Options.append("libcmtd");
                if(PE.compareEP("52",145))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("wWinMain");
                }
                sCompilerCPP_Version="15.00";
                break;
            case 0x98:
                sCompilerCPP_Options=sCompilerCPP_Options.append("libcmtd");
                if(PE.compareEP("6A",645))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("wWinMain");
                }
                sCompilerCPP_Version="16.00";
                break;
            case 0xE4:
                sCompilerCPP_Options=sCompilerCPP_Options.append("msvcrtd");
                if(bWmain)
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("wmain");
                }
                if(PE.compareEP("FF",-0x9B))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("glob");
                }
                sCompilerCPP_Version="15.00-16.00";
                break;
            case 0xE8:
                sCompilerCPP_Options=sCompilerCPP_Options.append("libcmtd");
                if(PE.compareEP("E8",92))
                {
                    if(PE.compareEP("E8",184))
                    {
                        sCompilerCPP_Options=sCompilerCPP_Options.append("wmain");
                        bWmain=1;
                    }
                    sCompilerCPP_Version="15.00";
                }
                else
                {
                    if(PE.compareEP("E8$$$$$$$$8BFF558BEC83EC10",213))
                    {
                        sCompilerCPP_Options=sCompilerCPP_Options.append("wmain");
                        bWmain=1;
                    }
                    sCompilerCPP_Version="16.00";
                }
                if(bWmain)
                {
                    if(PE.compareEP("10",-6))
                    {
                        sCompilerCPP_Options=sCompilerCPP_Options.append("glob");
                    }
                }
                else
                {
                    if(PE.compareEP("CC",-2))
                    {
                        sCompilerCPP_Options=sCompilerCPP_Options.append("glob");
                    }
                }
                break;
            }
            bCCP=1;
        }
        else if(PE.compareEP("E8......00E9$$$$$$$$6A..68........E8"))
        {
            var nEP=PE.nEP;
            nEP+=10+~~PE.readDword(nEP+6);
            if(PE.compare("10",nEP+1))
            {
                sCompilerCPP_Options=sCompilerCPP_Options.append("msvcrt");
                if(bWmain)
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("wmain");
                }
                if(PE.compareEP("FF",-48))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("glob");
                }
            }
            else if(PE.compare("33DB",nEP+12))
            {
                sCompilerCPP_Options=sCompilerCPP_Options.append("msvcrt");
                if(PE.compare("89",nEP+53)||PE.compare("E0",nEP+60))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("wWinMain");
                }
            }
            else if(PE.compare("3935",nEP+14))
            {
                sCompilerCPP_Options=sCompilerCPP_Options.append("libcmt");
                if(PE.compareEP("E8$$$$$$$$8B",-150))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("wmain");
                }
                if(PE.compareEP("FF",-0xA3))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("glob");
                }
            }
            else if(PE.compare("8D4598",nEP+12))
            {
                sCompilerCPP_Options=sCompilerCPP_Options.append("libcmt");
                if(PE.compareEP("51",15))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("wWinMain");
                }
            }
            else if(PE.compare("33F68975FC",nEP+12))
            {
                sCompilerCPP_Options=sCompilerCPP_Options.append("libcmt");
                if(PE.compare("E8",nEP+170))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("wWinMain");
                }
            }
            else if(PE.compare("B8'MZ'",nEP+12))
            {
                sCompilerCPP_Options=sCompilerCPP_Options.append("libcmt");
                if(PE.compare("E8",nEP+149))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("wmain");
                    --nEP;
                }
                if(PE.compare("FF",nEP+174))
                {
                    sCompilerCPP_Options=sCompilerCPP_Options.append("glob");
                }
            }
            sCompilerCPP_Version="15.00-16.00";
            bCCP=1;
        }
        else if(PE.compareEP("64A100000000558BEC6AFF68"))
        {
            bCCP=1;
        }
        else if(PE.compareEP("64A100000000506489250000000083C4A8535657"))
        {
            sCompilerCPP_Version="11.00";
            bCCP=1;
        }
        else if(PE.compareEP("535657BB........8B......553BFB75"))
        {
            sCompilerCPP_Version="8.00";
            bCCP=1;
        }
        else if(PE.compareEP("56E8........8BF0E8........68........68........E8........6A..68........56E8"))
        {
            sCompilerCPP_Version="8.00";
            bCCP=1;
        }
        else if(PE.compareEP("53B8........8B......565785DB5575"))
        {
            sCompilerCPP_Version="10.20";
            bCCP=1;
        }
        else if(PE.compareEP("558BEC83EC4456FF15........6A018BF0FF15"))
        {
            sCompilerCPP_Version="12.00";
            bCCP=1;
        }
        else if(PE.compareEP("558BEC83EC4456FF15........8BF08A063C22"))
        {
            sCompilerCPP_Version="12.00";
            bCCP=1;
        }
        else if(PE.compareEP("558D6C....81EC........8B45..83F801560F84........85C00F84"))
        {
            sCompilerCPP_Version="12.00";
            bCCP=1;
        }
        //else if(PE.compareEP("837C24080175098B442404A3....0010E88BFFFFFF")) // Pure Basic 4.0
        //{
        //    sCompilerCPP_Version="12.00";
        //    bCCP=1;
        //}
        else if(PE.compareEP("558BEC538B5D08568B750C85F6578B7D10"))
        {
            sCompilerCPP_Version="13.00";
            bCCP=1;
        }
        else if(PE.compareEP("833D........00741A68........E8........85C059740BFF742404FF15........59E8........68........68........E8........85C059597554565768........E8........BE........8BC6BF"))
        {
            sCompilerCPP_Version="14.00";
            bCCP=1;
        }
        else if(PE.compareEP("6A1468........E8........BB94000000536A008B..........FFD750FF..........8BF085F6750A6A12E8........59EB18891E56FF..........5685C0751450FFD750FF..........B8"))
        {
            sCompilerCPP_Version="14.00";
            bCCP=1;
        }
        else if(PE.compareEP("8BFF558BEC538B5D08568B750C85F6578B7D100F84....000083FE01"))
        {
            sCompilerCPP_Version="14.00";
            bCCP=1;
        }
        else if(PE.compareEP("8BFF558BEC538B5D08568B750C85F6578B7D107509833D........00EB2683FE01740583FE027522A1........85C07409575653FFD085C0740C575653E8......FF85C0750433C0EB4E575653E8......FF83FE0189450C750C85C07537575053E8......FF85F6740583FE037526575653E8......FF85C0750321450C837D0C007411A1........85C07408575653FFD089450C8B450C5F5E5B5DC20C00"))
        {
            sCompilerCPP_Version="14.00";
            bCCP=1;
        }
        else if(PE.compareEP("558BEC83EC10A1........8365F8008365FC005357BF4EE640BB3BC7BB0000FFFF740D85C37409F7D0A3........EB60568D45F850FF15........8B75FC3375F8FF15........33F0FF15........33F0FF15........33F08D45F050FF15........8B45F43345F033F03BF77507BE4FE640BBEB0B85F375078BC6C1E0100BF08935........F7D68935........5E5F5BC9C3"))
        {
            sCompilerCPP_Version="14.00";
            bCCP=1;
        }
        else if(PE.compareEP("558BEC83EC245356578965F8"))
        {
            bCCP=1;
        }
    }
    else
    {
        if(PE.compareEP("4883EC2885D248895C243048896C243848897424408BDA488BE9498BF0751E3915"))
        {
            sCompilerCPP_Version="14.00";    // DLL
            bCCP=1;
        }
        else if(PE.compareEP("4883EC5848895C247048897C247866813D"))
        {
            sCompilerCPP_Version="14.00";    // console, msvcrt
            bCCP=1;
        }
        else if(PE.compareEP("4883EC3848895C245048897C2458FF15"))
        {
            sCompilerCPP_Version="14.00";    // console, static
            bCCP=1;
        }
        else if(PE.compareEP("488BC44881EC........4889581848897820488D4888FF15"))
        {
            sCompilerCPP_Version="14.00";    // GUI
            bCCP=1;
        }
        else if(PE.compareEP("4883EC28E8........4883C428E9$$$$$$$$48895C24"))
        {
            sCompilerCPP_Version="16.00";
            bCCP=1;
        }
        else if(PE.compareEP("4883EC28E8........E8........4883C428C3"))
        {
            sCompilerCPP_Version="16.00";    // debug
            bCCP=1;
        }
        else if(PE.compareEP("48895C24084889742410574883EC20498BF88BDA488BF183FA017505E8"))
        {
            sCompilerCPP_Version="16.00";    // DLL
            bCCP=1;
        }
        else if(PE.compareEP("4C894424188954241048894C24084883EC28837C2438017505E8"))
        {
            sCompilerCPP_Version="16.00";    // DLL debug
            bCCP=1;
        }
    }
    
    if (bCCP) {
        sCompilerCPP_Name = "Microsoft Visual C/C++";
    }
    
    if(PE.isRichSignaturePresent()) {
        sLinker_Name="Microsoft Linker";
    }
    
    var  aMFC = PE.isLibraryPresentExp(/^MFC(\d+?)(u?)(d?)\.dll/i);
    
    if (aMFC) {
        sLibraryMFC_Version = (aMFC[1]/10).toFixed(1);
        if (aMFC[2]) {
            sLibraryMFC_Options = "Unicode";
        }
        if (aMFC[3]) {
            sLibraryMFC_Options = sOptions.append("debug");
        }
        sLibraryMFC_Name = "MFC";
    }
    
    if (PE.isDeepScan() && (sLibraryMFC_Name == "")) {
        if(PE.section[".data"]&&PE.isSignatureInSectionPresent(PE.section[".data"].Number,"'CMFCComObject'")) {
            sLibraryMFC_Name = "MFC";
            sLibraryMFC_Options = "static";
        }
    }
    
    if(PE.isNET()) {
        if(PE.isNETStringPresent("Microsoft.VisualBasic")) {
            sCompilerVB_Name="VB.NET";
            bDetected=1;
        }
    } else if(PE.isLibraryPresent("MSVBVM60.DLL")) {
        sCompilerVB_Name = "Microsoft Visual Basic";
        sCompilerVB_Version="6.0";
        sCompilerVB_Options=getVBOptions();
    } else if(PE.isLibraryPresent("MSVBVM50.DLL")) {
        sCompilerVB_Name = "Microsoft Visual Basic";
        sCompilerVB_Version="5.0";
        sCompilerVB_Options=getVBOptions();
    } else if(PE.isLibraryPresent("VB40032.DLL")) {
        sCompilerVB_Name = "Microsoft Visual Basic";
        sCompilerVB_Version="4.0";
    }

    // Rich
    var _sLinker_Name = "";
    var _sLinker_Version = "";
    var _sLinker_Options = "";
    var _sCompilerCPP_Name = "";
    var _sCompilerCPP_Version = "";
    var _sCompilerCPP_Options = "";
    var _sCompilerMASM_Name = "";
    var _sCompilerMASM_Version = "";
    var _sCompilerMASM_Options = "";
    var _sCompilerVB_Name = "";
    var _sCompilerVB_Version = "";
    var _sCompilerVB_Options = "";
	
    var nNumberOfIDs = PE.getNumberOfRichIDs();
    
    for (var i = nNumberOfIDs - 1; i >= 0; i--) {
        var nRichID = PE.getRichID(i);

        if (nRichID > 1) {
            var _sV = "";
            var _sO = "";
            var bL = 0;
            var bC = 0;
            var bM = 0;
            var bB = 0;
			
            switch (nRichID) {
                case 0x0002: bL = 1; _sV = "5.10"; break;
                case 0x0004: bL = 1; _sV = "6.00"; break;
                case 0x0007: bB = 1; _sV = "5.00"; _sO = "Native"; break;
                case 0x0008: bC = 1; _sV = "11.00"; _sO = "C/C++"; break;
                case 0x0009: bB = 1; _sV = "6.00"; _sO = "Native"; break;
                case 0x000a: bC = 1; _sV = "12.00"; _sO = "C"; break;
                case 0x000b: bC = 1; _sV = "12.00"; _sO = "C++"; break;
                case 0x000e: bM = 1; _sV = "6.13"; break;
                case 0x000f: bM = 1; _sV = "7.01"; break;
                case 0x0010: bL = 1; _sV = "5.11"; break;
                case 0x0012: bM = 1; _sV = "6.14"; _sO = "MMX2 support"; break;
                case 0x0013: bL = 1; _sV = "5.12"; break;
                case 0x0015: bC = 1; _sV = "12.00"; _sO = "C/std"; break;
                case 0x0016: bC = 1; _sV = "12.00"; _sO = "C++/std"; break;
                case 0x0017: bC = 1; _sV = "12.00"; _sO = "C/book"; break;
                case 0x0018: bC = 1; _sV = "12.00"; _sO = "C++/book"; break;
                case 0x001b: bB = 1; _sV = "7.00"; _sO = "Native"; break;
                case 0x001c: bC = 1; _sV = "13.00"; _sO = "C"; break;
                case 0x001d: bC = 1; _sV = "13.00"; _sO = "C++"; break;
                case 0x001e: bL = 1; _sV = "6.10"; break;
                case 0x0020: bL = 1; _sV = "6.01"; break;
                case 0x0022: bB = 1; _sV = "6.10"; _sO = "Native"; break;
                case 0x0023: bC = 1; _sV = "12.10"; _sO = "C"; break;
                case 0x0024: bC = 1; _sV = "12.10"; _sO = "C++"; break;
                case 0x0025: bL = 1; _sV = "6.20"; break;
                case 0x0028: bL = 1; _sV = "6.21"; break;
                case 0x002a: bM = 1; _sV = "6.15"; break;
                case 0x002b: bC = 1; _sV = "13.00"; _sO = "LTCG/C"; break;
                case 0x002c: bC = 1; _sV = "13.00"; _sO = "LTCG/C++"; break;
                case 0x002d: bM = 1; _sV = "6.20"; break;
                case 0x002f: bB = 1; _sV = "6.20"; _sO = "Native"; break;
                case 0x0030: bC = 1; _sV = "12.20"; _sO = "C"; break;
                case 0x0031: bC = 1; _sV = "12.20"; _sO = "C++"; break;
                case 0x0032: bC = 1; _sV = "12.20"; _sO = "C/std"; break;
                case 0x0033: bC = 1; _sV = "12.20"; _sO = "C++/std"; break;
                case 0x0034: bC = 1; _sV = "12.20"; _sO = "C/book"; break;
                case 0x0035: bC = 1; _sV = "12.20"; _sO = "C++/book"; break;
                case 0x0039: bC = 1; _sV = "13.00"; _sO = "C/std"; break;
                case 0x003a: bC = 1; _sV = "13.00"; _sO = "C++/std"; break;
                case 0x003c: bL = 1; _sV = "6.22"; break;
                case 0x003d: bL = 1; _sV = "7.00"; break;
                case 0x0040: bM = 1; _sV = "7.00"; break;
                case 0x0041: bC = 1; _sV = "13.00"; _sO = "POGO_I_C"; break;
                case 0x0042: bC = 1; _sV = "13.00"; _sO = "POGO_I_CPP"; break;
                case 0x0043: bC = 1; _sV = "13.00"; _sO = "POGO_O_C"; break;
                case 0x0044: bC = 1; _sV = "13.00"; _sO = "POGO_O_CPP"; break;
                case 0x0047: bL = 1; _sV = "7.10p"; break;
                case 0x004b: bM = 1; _sV = "7.10p"; break;
                case 0x004c: bC = 1; _sV = "13.10p"; _sO = "C"; break;
                case 0x004d: bC = 1; _sV = "13.10p"; _sO = "C++/book"; break;
                case 0x004e: bC = 1; _sV = "13.10p"; _sO = "C/std"; break;
                case 0x004f: bC = 1; _sV = "13.10p"; _sO = "C++/std"; break;
                case 0x0050: bC = 1; _sV = "13.10p"; _sO = "LTCG/C"; break;
                case 0x0051: bC = 1; _sV = "13.10p"; _sO = "LTCG/C++"; break;
                case 0x0052: bC = 1; _sV = "13.10p"; _sO = "POGO_I_C"; break;
                case 0x0053: bC = 1; _sV = "13.10p"; _sO = "POGO_I_C"; break;
                case 0x0054: bC = 1; _sV = "13.10p"; _sO = "POGO_O_C"; break;
                case 0x0055: bC = 1; _sV = "13.10p"; _sO = "POGO_O_CPP"; break;
                case 0x0056: bL = 1; _sV = "6.24"; break;
                case 0x005a: bL = 1; _sV = "7.10"; break;
				case 0x005f: bC = 1; _sV = "13.10"; _sO = "C"; break;
                case 0x0060: bC = 1; _sV = "13.10"; _sO = "C++/book"; break;
                case 0x0061: bC = 1; _sV = "13.10"; _sO = "C/std"; break;
                case 0x0062: bC = 1; _sV = "13.10"; _sO = "C++/std"; break;
                case 0x0063: bC = 1; _sV = "13.10"; _sO = "LTCG/C"; break;
                case 0x0064: bC = 1; _sV = "13.10"; _sO = "LTCG/C++"; break;
                case 0x0065: bC = 1; _sV = "13.10"; _sO = "POGO_I_C"; break;
                case 0x0066: bC = 1; _sV = "13.10"; _sO = "POGO_I_C"; break;
                case 0x0067: bC = 1; _sV = "13.10"; _sO = "POGO_O_C"; break;
                case 0x0068: bC = 1; _sV = "13.10"; _sO = "POGO_O_CPP"; break;
                case 0x006d: bC = 1; _sV = "14.00"; _sO = "C"; break;
                case 0x006e: bC = 1; _sV = "14.00"; _sO = "C++/book"; break;
                case 0x006f: bC = 1; _sV = "14.00"; _sO = "C/std"; break;
                case 0x0070: bC = 1; _sV = "14.00"; _sO = "C++/std"; break;
                case 0x0071: bC = 1; _sV = "14.00"; _sO = "LTCG/C"; break;
                case 0x0072: bC = 1; _sV = "14.00"; _sO = "LTCG/C++"; break;
                case 0x0073: bC = 1; _sV = "14.00"; _sO = "POGO_I_C"; break;
                case 0x0074: bC = 1; _sV = "14.00"; _sO = "POGO_I_C"; break;
                case 0x0075: bC = 1; _sV = "14.00"; _sO = "POGO_O_C"; break;
                case 0x0076: bC = 1; _sV = "14.00"; _sO = "POGO_O_CPP"; break;
                case 0x0078: bL = 1; _sV = "8.00"; break;
                case 0x007d: bM = 1; _sV = "8.00"; break;
                case 0x0080: bC = 1; _sV = "14.00"; _sO = "CVTCIL/C"; break;
                case 0x0081: bC = 1; _sV = "14.00"; _sO = "CVTCIL/C++"; break;
                case 0x0082: bC = 1; _sV = "14.00"; _sO = "LTCG/MSIL"; break;
                case 0x0083: bC = 1; _sV = "15.00"; _sO = "C"; break;
                case 0x0084: bC = 1; _sV = "15.00"; _sO = "C++"; break;
                case 0x0085: bC = 1; _sV = "15.00"; _sO = "C/std"; break;
                case 0x0086: bC = 1; _sV = "15.00"; _sO = "C++/std"; break;
                case 0x0087: bC = 1; _sV = "15.00"; _sO = "CVTCIL/C"; break;
                case 0x0088: bC = 1; _sV = "15.00"; _sO = "CVTCIL/C++"; break;
                case 0x0089: bC = 1; _sV = "15.00"; _sO = "LTCG/C"; break;
                case 0x008a: bC = 1; _sV = "15.00"; _sO = "LTCG/C++"; break;
                case 0x008b: bC = 1; _sV = "15.00"; _sO = "LTCG/MSIL"; break;
                case 0x008c: bC = 1; _sV = "15.00"; _sO = "POGO_I_C"; break;
                case 0x008d: bC = 1; _sV = "15.00"; _sO = "POGO_I_C"; break;
                case 0x008e: bC = 1; _sV = "15.00"; _sO = "POGO_O_C"; break;
                case 0x008f: bC = 1; _sV = "15.00"; _sO = "POGO_O_CPP"; break;
                case 0x0091: bL = 1; _sV = "9.00"; break;
                case 0x0095: bM = 1; _sV = "9.00"; break;
                case 0x009d: bL = 1; _sV = "10.00"; break;
                case 0x009e: bM = 1; _sV = "10.00"; break;
                case 0x00aa: bC = 1; _sV = "16.00"; _sO = "C"; break;
                case 0x00ab: bC = 1; _sV = "16.00"; _sO = "C++"; break;
                case 0x00ac: bC = 1; _sV = "16.00"; _sO = "CVTCIL/C"; break;
                case 0x00ad: bC = 1; _sV = "16.00"; _sO = "CVTCIL/C++"; break;
                case 0x00ae: bC = 1; _sV = "16.00"; _sO = "LTCG/C"; break;
                case 0x00af: bC = 1; _sV = "16.00"; _sO = "LTCG/C++"; break;
                case 0x00b0: bC = 1; _sV = "16.00"; _sO = "LTCG/MSIL"; break;
                case 0x00b1: bC = 1; _sV = "16.00"; _sO = "POGO_I_C"; break;
                case 0x00b2: bC = 1; _sV = "16.00"; _sO = "POGO_I_C"; break;
                case 0x00b3: bC = 1; _sV = "16.00"; _sO = "POGO_O_C"; break;
                case 0x00b4: bC = 1; _sV = "16.00"; _sO = "POGO_O_CPP"; break;
                case 0x00ba: bL = 1; _sV = "10.10"; break;
                case 0x00bb: bM = 1; _sV = "10.10"; break;
                case 0x00bc: bC = 1; _sV = "16.10"; _sO = "C"; break;
                case 0x00bd: bC = 1; _sV = "16.10"; _sO = "C++"; break;
                case 0x00be: bC = 1; _sV = "16.10"; _sO = "CVTCIL/C"; break;
                case 0x00bf: bC = 1; _sV = "16.10"; _sO = "CVTCIL/C++"; break;
                case 0x00c0: bC = 1; _sV = "16.10"; _sO = "LTCG/C"; break;
                case 0x00c1: bC = 1; _sV = "16.10"; _sO = "LTCG/C++"; break;
                case 0x00c2: bC = 1; _sV = "16.10"; _sO = "LTCG/MSIL"; break;
                case 0x00c3: bC = 1; _sV = "16.10"; _sO = "POGO_I_C"; break;
                case 0x00c4: bC = 1; _sV = "16.10"; _sO = "POGO_I_C"; break;
                case 0x00c5: bC = 1; _sV = "16.10"; _sO = "POGO_O_C"; break;
                case 0x00c6: bC = 1; _sV = "16.10"; _sO = "POGO_O_CPP"; break;
                case 0x00cc: bL = 1; _sV = "11.00"; break;
                case 0x00cd: bM = 1; _sV = "11.00"; break;
                case 0x00ce: bC = 1; _sV = "17.00"; _sO = "C"; break;
                case 0x00cf: bC = 1; _sV = "17.00"; _sO = "C++"; break;
                case 0x00d0: bC = 1; _sV = "17.00"; _sO = "CVTCIL/C"; break;
                case 0x00d1: bC = 1; _sV = "17.00"; _sO = "CVTCIL/C++"; break;
                case 0x00d2: bC = 1; _sV = "17.00"; _sO = "LTCG/C"; break;
                case 0x00d3: bC = 1; _sV = "17.00"; _sO = "LTCG/C++"; break;
                case 0x00d4: bC = 1; _sV = "17.00"; _sO = "LTCG/MSIL"; break;
                case 0x00d5: bC = 1; _sV = "17.00"; _sO = "POGO_I_C"; break;
                case 0x00d6: bC = 1; _sV = "17.00"; _sO = "POGO_I_C"; break;
                case 0x00d7: bC = 1; _sV = "17.00"; _sO = "POGO_O_C"; break;
                case 0x00d8: bC = 1; _sV = "17.00"; _sO = "POGO_O_CPP"; break;
                case 0x00de: bL = 1; _sV = "12.00"; break;
                case 0x00df: bM = 1; _sV = "12.00"; break;
                case 0x00e0: bC = 1; _sV = "18.00"; _sO = "C"; break;
                case 0x00e1: bC = 1; _sV = "18.00"; _sO = "C++"; break;
                case 0x00e2: bC = 1; _sV = "18.00"; _sO = "CVTCIL/C"; break;
                case 0x00e3: bC = 1; _sV = "18.00"; _sO = "CVTCIL/C++"; break;
                case 0x00e4: bC = 1; _sV = "18.00"; _sO = "LTCG/C"; break;
                case 0x00e5: bC = 1; _sV = "18.00"; _sO = "LTCG/C++"; break;
                case 0x00e6: bC = 1; _sV = "18.00"; _sO = "LTCG/MSIL"; break;
                case 0x00e7: bC = 1; _sV = "18.00"; _sO = "POGO_I_C"; break;
                case 0x00e8: bC = 1; _sV = "18.00"; _sO = "POGO_I_C"; break;
                case 0x00e9: bC = 1; _sV = "18.00"; _sO = "POGO_O_C"; break;
                case 0x00ea: bC = 1; _sV = "18.00"; _sO = "POGO_O_CPP"; break;
                case 0x00f0: bL = 1; _sV = "12.10"; break;
                case 0x00f1: bM = 1; _sV = "12.10"; break;
                case 0x00f2: bC = 1; _sV = "18.10"; _sO = "C"; break;
                case 0x00f3: bC = 1; _sV = "18.10"; _sO = "C++"; break;
                case 0x00f4: bC = 1; _sV = "18.10"; _sO = "CVTCIL/C"; break;
                case 0x00f5: bC = 1; _sV = "18.10"; _sO = "CVTCIL/C++"; break;
                case 0x00f6: bC = 1; _sV = "18.10"; _sO = "LTCG/C"; break;
                case 0x00f7: bC = 1; _sV = "18.10"; _sO = "LTCG/C++"; break;
                case 0x00f8: bC = 1; _sV = "18.10"; _sO = "LTCG/MSIL"; break;
                case 0x00f9: bC = 1; _sV = "18.10"; _sO = "POGO_I_C"; break;
                case 0x00fa: bC = 1; _sV = "18.10"; _sO = "POGO_I_C"; break;
                case 0x00fb: bC = 1; _sV = "18.10"; _sO = "POGO_O_C"; break;
                case 0x00fc: bC = 1; _sV = "18.10"; _sO = "POGO_O_CPP"; break;
                case 0x0102: bL = 1; _sV = "14.00"; break;
                case 0x0103: bM = 1; _sV = "14.00"; break;
                case 0x0104: bC = 1; _sV = "19.00"; _sO = "C"; break;
                case 0x0105: bC = 1; _sV = "19.00"; _sO = "C++"; break;
                case 0x0106: bC = 1; _sV = "19.00"; _sO = "CVTCIL/C"; break;
                case 0x0107: bC = 1; _sV = "19.00"; _sO = "CVTCIL/C++"; break;
                case 0x0108: bC = 1; _sV = "19.00"; _sO = "LTCG/C"; break;
                case 0x0109: bC = 1; _sV = "19.00"; _sO = "LTCG/C++"; break;
                case 0x010a: bC = 1; _sV = "19.00"; _sO = "LTCG/MSIL"; break;
                case 0x010b: bC = 1; _sV = "19.00"; _sO = "POGO_I_C"; break;
                case 0x010c: bC = 1; _sV = "19.00"; _sO = "POGO_I_C"; break;
                case 0x010d: bC = 1; _sV = "19.00"; _sO = "POGO_O_C"; break;
                case 0x010e: bC = 1; _sV = "19.00"; _sO = "POGO_O_CPP"; break;
            }

            var __sVersion = _sV + "." + PE.getRichVersion(i);
            
            if ((bL && (_sV == "14.00")) || (bM && (_sV == "14.00")) || (bC && (_sV == "19.00"))) {
                var __nBuild = PE.getRichVersion(i);
                var __nMinorVersion = 0;
                if (__nBuild > 25000) {
                    if (__nBuild < 25506) __nMinorVersion = 10;
                    else if (__nBuild < 25830) __nMinorVersion = 11;
                    else if (__nBuild < 26128) __nMinorVersion = 12;
                    else if (__nBuild < 26428) __nMinorVersion = 13;
                    else if (__nBuild < 26726) __nMinorVersion = 14;
                    else if (__nBuild < 26926) __nMinorVersion = 15;
                    else if (__nBuild < 27508) __nMinorVersion = 16;
                    else if (__nBuild < 27702) __nMinorVersion = 20;
                    else if (__nBuild < 27905) __nMinorVersion = 21;
                    else if (__nBuild < 28105) __nMinorVersion = 22;
                    else if (__nBuild < 28314) __nMinorVersion = 23;
                    else if (__nBuild < 28610) __nMinorVersion = 24;
                    else if (__nBuild < 28805) __nMinorVersion = 25;
                    else if (__nBuild < 29110) __nMinorVersion = 26;
                    else if (__nBuild < 29333) __nMinorVersion = 27;
                    else if (__nBuild < 30133) __nMinorVersion = 28;
                    else if (__nBuild < 30401) __nMinorVersion = 29;
                    else if (__nBuild < 30818) __nMinorVersion = 30;
                    else if (__nBuild < 31114) __nMinorVersion = 31;
                    else if (__nBuild < 31424) __nMinorVersion = 32;
                    else if (__nBuild < 31721) __nMinorVersion = 33;
                    else if (__nBuild < 32019) __nMinorVersion = 34;
                    else if (__nBuild < 32323) __nMinorVersion = 35;
                    else if (__nBuild >= 32323) __nMinorVersion = 36;
                }
                
                if (__nMinorVersion) {
                    if (bL || bM) {
                        __sVersion = "14." + __nMinorVersion + "." + __nBuild;
                    } else if (bC) {
                        __sVersion = "19." + __nMinorVersion + "." + __nBuild;
                    }
                }
            }

            if (bL) {
                if (__sVersion > _sLinker_Version) {
                    _sLinker_Name = "Microsoft Linker";
                    _sLinker_Version = __sVersion;
                    _sLinker_Options = _sO;
                }
            } else if (bC) {
                if (__sVersion > _sCompilerCPP_Version) {
                    _sCompilerCPP_Name = "Microsoft Visual C/C++";
                    _sCompilerCPP_Version = __sVersion;
                    _sCompilerCPP_Options = _sO;
                }
            } else if (bM) {
                if (__sVersion > _sCompilerMASM_Version) {
                    _sCompilerMASM_Name = "MASM";
                    _sCompilerMASM_Version = __sVersion;
                    _sCompilerMASM_Options = _sO;
                }
            } else if (bB) {
                if (__sVersion > _sCompilerVB_Version) {
                    _sCompilerVB_Name = "Visual Basic";
                    _sCompilerVB_Version = __sVersion;
                    _sCompilerVB_Options = _sO;
                }
            }
        }
    }

    if (_sLinker_Name != "") {
        sLinker_Name = _sLinker_Name;
        sLinker_Version = _sLinker_Version;
        sLinker_Options = _sLinker_Options;
    }
    
    if (_sCompilerVB_Name != "") {
        sCompilerVB_Name = _sCompilerVB_Name;
        sCompilerVB_Version = _sCompilerVB_Version;
        sCompilerVB_Options = _sCompilerVB_Options;
    } else if (_sCompilerCPP_Name != "") {
        sCompilerCPP_Name = _sCompilerCPP_Name;
        sCompilerCPP_Version = _sCompilerCPP_Version;
        sCompilerCPP_Options = _sCompilerCPP_Options;
    } else if (_sCompilerMASM_Name != "") {
        sCompilerMASM_Name = _sCompilerMASM_Name;
        sCompilerMASM_Version = _sCompilerMASM_Version;
        sCompilerMASM_Options = _sCompilerMASM_Options;
    }
    
    if (PE.isDeepScan()) {
        if (_sCompilerCPP_Name == "") {
            if(PE.section.length>=3) {
                if( PE.isSignatureInSectionPresent(0,"'Microsoft Visual C++ Runtime Library'")||
                    PE.isSignatureInSectionPresent(1,"'Microsoft Visual C++ Runtime Library'")||
                    PE.isSignatureInSectionPresent(2,"'Microsoft Visual C++ Runtime Library'")) {
                    sCompilerCPP_Name = "Microsoft Visual C/C++";
                }
            }
        }
    }
    
    if (PE.isVerbose()) {
        if (_sCompilerCPP_Name == "") {
            if (PE.isLibraryPresent("msvcrt.dll")) {
                var nMajorLinkerVersion = PE.getMajorLinkerVersion();
                var nMinorLinkerVersion = PE.getMinorLinkerVersion();

                if ((nMajorLinkerVersion >= 3) && (nMajorLinkerVersion <= 14) && (nMinorLinkerVersion < 40)) {
                    sCompilerCPP_Name = "Microsoft Visual C/C++";
                }
            }
        }
    }
    
    if (PE.isVerbose()) {
        if (sLibraryMFC_Name != "") {
            if (sCompilerCPP_Name == "") {
                sCompilerCPP_Name = "Microsoft Visual C/C++";
                // TODO Version
            }
            if (sLinker_Name == "") {
                sLinker_Name = "Microsoft Linker";
                // TODO Version
            }
        }
    
        if ((sCompilerCPP_Name != "") || (_sCompilerVB_Name != "") || (sCompilerMASM_Name != "")) {
            if (sLinker_Name == "") {
                var nMajorLinkerVersion = PE.getMajorLinkerVersion();
                var nMinorLinkerVersion = PE.getMinorLinkerVersion();

                if ((nMajorLinkerVersion >= 3) && (nMajorLinkerVersion <= 14) && (nMinorLinkerVersion < 40)) {
                    sLinker_Name = "Microsoft Linker";
                }
            }
        }
    }
    
    if (sLinker_Name != "") {
        if (sLinker_Version == "") {
            var nMajorLinkerVersion = PE.getMajorLinkerVersion();
            var nMinorLinkerVersion = PE.getMinorLinkerVersion();
            
            if ((nMajorLinkerVersion >= 3) && (nMajorLinkerVersion <= 14) && (nMinorLinkerVersion < 40)) {
                sLinker_Version =PE.getCompilerVersion();
            }
        }
    }
    
    if ((sCompilerCPP_Name != "") && (sLinker_Name != "")) {
        var sLinkerMajorVersion = sLinker_Version.match(/\d+\.\d+/gm); 
        
        if (sLinkerMajorVersion != "") {
            sTool_Name = "Visual Studio";
        
            if (sLinkerMajorVersion == "6.00") sTool_Version = "6.0";
            else if (sLinkerMajorVersion == "7.00") sTool_Version = "2002";
            else if (sLinkerMajorVersion == "7.10") sTool_Version = "2003";
            else if (sLinkerMajorVersion == "8.00") sTool_Version = "2005";
            else if (sLinkerMajorVersion == "9.00") sTool_Version = "2008";
            else if (sLinkerMajorVersion == "10.00") sTool_Version = "2010";
            else if (sLinkerMajorVersion == "11.00") sTool_Version = "2012";
            else if (sLinkerMajorVersion == "12.00") sTool_Version = "2013";
            else if (sLinkerMajorVersion == "14.00") sTool_Version = "2015";
            else if (sLinkerMajorVersion == "14.10") sTool_Version = "2017 version 15.0-15.2";
            else if (sLinkerMajorVersion == "14.11") sTool_Version = "2017 version 15.3";
            else if (sLinkerMajorVersion == "14.12") sTool_Version = "2017 version 15.5";
            else if (sLinkerMajorVersion == "14.13") sTool_Version = "2017 version 15.6";
            else if (sLinkerMajorVersion == "14.14") sTool_Version = "2017 version 15.7";
            else if (sLinkerMajorVersion == "14.15") sTool_Version = "2017 version 15.8";
            else if (sLinkerMajorVersion == "14.16") sTool_Version = "2017 version 15.9";
            else if (sLinkerMajorVersion == "14.20") sTool_Version = "2019 version 16.0";
            else if (sLinkerMajorVersion == "14.21") sTool_Version = "2019 version 16.1";
            else if (sLinkerMajorVersion == "14.22") sTool_Version = "2019 version 16.2";
            else if (sLinkerMajorVersion == "14.23") sTool_Version = "2019 version 16.3";
            else if (sLinkerMajorVersion == "14.24") sTool_Version = "2019 version 16.4";
            else if (sLinkerMajorVersion == "14.25") sTool_Version = "2019 version 16.5";
            else if (sLinkerMajorVersion == "14.26") sTool_Version = "2019 version 16.6";
            else if (sLinkerMajorVersion == "14.27") sTool_Version = "2019 version 16.7-16.8";
            else if (sLinkerMajorVersion == "14.28") sTool_Version = "2019 version 16.9-16.10";
            else if (sLinkerMajorVersion == "14.29") sTool_Version = "2019 version 16.11";
            else if (sLinkerMajorVersion == "14.30") sTool_Version = "2022 version 17.0";
            else if (sLinkerMajorVersion == "14.31") sTool_Version = "2022 version 17.1";
            else if (sLinkerMajorVersion == "14.32") sTool_Version = "2022 version 17.2";
            else if (sLinkerMajorVersion == "14.33") sTool_Version = "2022 version 17.3";
            else if (sLinkerMajorVersion == "14.34") sTool_Version = "2022 version 17.4";
            else if (sLinkerMajorVersion == "14.35") sTool_Version = "2022 version 17.5";
            else if (sLinkerMajorVersion == "14.36") sTool_Version = "2022 version 17.6";
            else if (sLinkerMajorVersion == "14.37") sTool_Version = "2022 version 17.7";
        }
    }
    
    if ((sCompilerMASM_Version == "6.14.8444") && (sLinker_Version == "5.12.8078")) {
        sTool_Name = "masm32";
        sTool_Version = "8-11";
    }
    
    if (sCompilerVB_Name != "") {
        _setResult("compiler", sCompilerVB_Name, sCompilerVB_Version, sCompilerVB_Options); 
    } else if (sCompilerCPP_Name != "") {
        _setResult("compiler", sCompilerCPP_Name, sCompilerCPP_Version, sCompilerCPP_Options); 
    } else if (sCompilerMASM_Name != "") {
        _setResult("compiler", sCompilerMASM_Name, sCompilerMASM_Version, sCompilerMASM_Options); 
    }
    
    if (sLibraryDot_Name != "") {
        _setResult("library", sLibraryDot_Name, sLibraryDot_Version, sLibraryDot_Options); 
    }
    
    if (sLibraryMFC_Name != "") {
        _setResult("library", sLibraryMFC_Name, sLibraryMFC_Version, sLibraryMFC_Options); 
    }
    
    if (sLinker_Name != "") {
        _setResult("linker", sLinker_Name, sLinker_Version, sLinker_Options); 
    }
    
    if (sTool_Name != "") {
        _setResult("tool", sTool_Name, sTool_Version, sTool_Options); 
    }

    return ""; // No need
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","MiKTeX Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e9$$$$$$$$4883ec..e8$$$$$$$$e9$$$$$$$$48895c24..55488bec4883ec..488b05........48bb................483bc375..488365"))
    {
        if(PE.compareOverlay("'TARTARTARTARTART'"))
        {
            sOptions="tar";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","MinGW");

includeScript("FPC");

function getMinGWVersion()
{
    sResult="";

    if(PE.section[".rdata"])
    {
        var nOffset=PE.section[".rdata"].FileOffset;
        var nSize=PE.section[".rdata"].FileSize;
        var nVersionOffset=PE.findString(nOffset,nSize,"GCC: ");
        if(nVersionOffset!=-1)
        {
            sResult=PE.getString(nVersionOffset,128);
        }
        if(sResult=="")
        {
            var nVersionOffset=PE.findString(nOffset,nSize,"gcc-");
            if(nVersionOffset!=-1)
            {
                sResult=PE.getString(nVersionOffset);
                sResult=sResult.substring(0,sResult.indexOf('/'));
            }
        }
    }

    return sResult;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    /*if(PE.compareEP("5589E583EC08C7042401000000FF15........E8C8FEFFFF908DB426000000005589E583EC08C7042402000000FF15"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("5589E583EC0883C4F46A..A1........FFD0E8..FFFFFF"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("5589E583EC146A..FF15....................................00000000"))
    {
        bDetected=1;
    }
    else */if(PE.getMajorLinkerVersion()==2)
    {
        if(!bFPC&&(PE.getMinorLinkerVersion()<=30||PE.getMinorLinkerVersion()==36||PE.getMinorLinkerVersion()==56))
        {
            if(PE.compare("'MZ'90000300000004000000FFFF0000B800000000000000400000000000000000000000000000000000000000000000000000000000000000000000800000000E1FBA0E00B409CD21B8014CCD21'This program cannot be run in DOS mode.\r\r\n$'00000000000000'PE'0000"))
            {
                if(!PE.section[".rsrc"])
                {
                    bDetected=1;
                }
                else
                {
                    var nOffset=PE.section[".rsrc"].FileOffset;
                    var nSize=PE.section[".rsrc"].VirtualSize;
                    if(!PE.isSignaturePresent(nOffset+nSize-512,512,"'Microsoft Corp.'"))
                    {
                        bDetected=1;
                    }
                }
            }
        }
    }

    if(bDetected)
    {
        sVersion=getMinGWVersion();
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Minke");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC83C4F053..........10E87AF6FFFFBE........33C05568........64FF30648920E8FAF8FFFFBA"))
    {
        sVersion="1.0.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Mioplanet installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("eb$$a1........c1e0..a3........526a..e8........8bd0e8........5ae8"))
    {
        if(PE.compareOverlay("'[(*|*)]MZ'"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","MoleBox");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e80000000060e8$$$$$$$$e8$$$$$$$$e8$$$$$$$$558bec83ec..56576a..ff15........8945..68........6a..ff15"))
    {
        sVersion="2.3.3-2.6.4";
        bDetected=1;
    }
    else if(PE.compareEP("e80000000060e8$$$$$$$$e8$$$$$$$$8b4424..508b4424..50e8$$$$$$$$558bec83ec..5356576a..ff15"))
    {
        sVersion="2.3.3-2.6.4";
        bDetected=1;
    }
    else if(PE.compareEP("60e8$$$$$$$$e8$$$$$$$$e8$$$$$$$$558bec83ec..56576a..ff15........8945..68........6a..ff15"))
    {
        sVersion="2.0.0-2.3.0";
        bDetected=1;
    }
    else if(PE.compareEP("eb$$b8........8338..74..50ff70..ff3050830424..e8$$$$$$$$558beca1........53568b75..85c0578bde75..6a..68........68........ff15"))
    {
        sVersion="2.36";
        bDetected=1;
    }
   /* else if(PE.compareEP("6A2868........E8$$$$$$$$68........64A100000000508B442410896C24108D6C24102BE05356578B45F88965E8"))
    {
        sVersion="4.XX";
        bDetected=1;
    }*/
    /* else if(PE.compareEP("5589E583EC08C7042401000000FF15........E8B8FEFFFF908DB426000000005589E583EC08C7042402000000FF15"))
    {
        if(PE.isOverlayPresent()&&(PE.section.length>=6))
        {
            var nNumbersOfImports=PE.getNumberOfImports();
            if((nNumbersOfImports==4)||(nNumbersOfImports==3))
            {
                if(PE.isLibraryPresent("KERNEL32.dll")&&PE.isLibraryPresent("msvcrt.dll")&&PE.isLibraryPresent("USER32.dll"))
                {
                    sVersion="4.X";
                    bDetected=1;
                }
            }
        }
    } */

    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file

init("protector","Morphine");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("FF25........8BC0FF25........8BC0"))
    {
        sVersion="1.2-1.3";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Morphnah");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec87e55de9$$$$$$$$558bec83ec..5356576064a1........8b40..8945..64a1........c740"))
    {
        sVersion="1.0.7";
        bDetected=1;
    }
    else if(PE.section[".nah"])
    {
        if(PE.compareEP("60e8$$$$$$$$5d81ed........8bbd........8b8d........b8........01e88030..83f9..74..817f..........75..8b57"))
        {
            sVersion="1.0.2";
            bDetected=1;
        }
        else if(PE.compareEP("60e8$$$$$$$$5d81ed........31c04083f0..403d........75..be........eb..eb..8b85........83f8..75..31c001ee3d"))
        {
            sVersion="1.0.3";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Morton Software installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("64a1........558bec6a..68........68........50648925........83ec..5356578965..ff15"))
    {
        for(var i=0;i<PE.resource.length;i++)
        {
            if(PE.resource[i].Type==856) //RT_RCDATA
            {
                if(PE.compare("'SZDD'",PE.resource[i].Offset))
                {
                    sOptions="SZDD";
                    bDetected=1;
                    break;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Multimedia Fusion Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965"))
    {
        if(PE.compareOverlay("'wwwwI'874712"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","Mystic Compressor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec83ec..6a..ff35........6a..ff15........8d55..5268........68........ff15........6a..ff35"))
    {
        bDetected=1;
    }
    if(PE.compareEP("558bec83c4..68........ff15........8945..68........ff75..ff15........8945..8d55..526a..68"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","N-Code");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("9066be....6683fe..74..66b8....66be....6683fe..74..6683e8..66bb....6683c3..66436681fb....74..6683f8"))
    {
        sVersion="0.2";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("joiner","N-Joiner");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6A0068........68........6A00E8140000006A00E813000000CCFF25........FF25........FF25........FF25"))
    {
        sVersion="0.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","N-Joy");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC83C4F0B8........E8....FFFF6A0068........6A0A6A00E8....FFFFE8....FFFF8D4000"))
    {
        switch(PE.readWord(PE.nEP+33))
        {
        case 0xf5ef: sVersion="1.0"; break;
        case 0xf57f: sVersion="1.1"; break;
        case 0xeac7: sVersion="1.2"; break;
        case 0xe723: sVersion="1.3"; break;
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","NOS Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("50e8000000005b81eb........b9........2bd98bf381eb........8bfb81eb........575156e8........83c4..8bab........8d2c2b4d8a4d..80f9..74..83ed..8bd32b53"))
    {
        if(PE.compareOverlay("'PK??NOS_PO'")||PE.compareOverlay("'NOS_PO'"))
        {
            sOptions="(c) Netopsystems";
            bDetected=1;
        }
    }
    if(PE.compareEP("e8$$$$$$$$58bb........8bb3........8d0433488a0880f9..74..83e8..8b108bb3........03f38dbb........578bca2bce5156"))
    {
//        if(PE.compareOverlay("'PK??NOS_PO'")||PE.compareOverlay("'NOS_PO'"))
//        {
            sOptions="(c) Netopsystems";
            bDetected=1;
//        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","NOS Packer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("50e8000000005b81eb........b9........2bd98bf381eb........8bfb81eb........575156e8........83c4..8bab........8d2c2b4d8a4d..80f9..74..83ed..8bd32b53"))
    {
        sOptions="(c) Netopsystems";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","NTPacker");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC83C4E05333C08945E08945E48945E88945ECB8........E8....FFFF33C05568"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","NTSHELL");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("55e8........5d81ed........eb$$eb$$8d85........8dbd........eb$$8db5........eb$$8bcfeb$$2bc84ffdeb$$33dbeb$$8a07eb$$d2c8eb$$2a....eb$$E8"))
    {
        sVersion="5.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","NTkrnl Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("68........e8")&&(PE.nLastSection>=1))
    {
        if(PE.getNumberOfImports()==1)
        {
            if(PE.getNumberOfImportThunks(0)==2)
            {
                if((PE.getImportFunctionName(0,0)=="LoadLibraryA")&&(PE.getImportFunctionName(0,1)=="GetProcAddress"))
                {
                    if(PE.isSignatureInSectionPresent(1,"'http://www.ntcore.com  '"))
                    {
                        sVersion="0.1";
                        bDetected=1;
                    }
                    else if(PE.isSignatureInSectionPresent(1,"'http://www.ntkrnl.com'"))
                    {
                        sVersion="0.15";
                        bDetected=1;
                    }
                    /* if(bDetected)
                    {
                        var nFind=PE.findString(PE.section[1].FileOffset,PE.section[1].FileSize,"Version ");
                        if(nFind!=-1)
                        {
                            sVersion=PE.getString(nFind,20);
                            var aVersion=sVersion.match(/Version ?(.*?) /);
                            sVersion=aVersion[1];
                        }
                    } */
                }

            }
        }
    }
    if(PE.compareEP("68........e8........c3")&&(PE.compareEP("68########60e8$$$$$$$$5d4555c3")))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","NakedPacker");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60FC0FB605............7531B8........2B05..............................05........A3........E89A000000A3"))
    {
        sVersion="1.0";
        sOptions="by BigBoote";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: LinXP

init("sfx","NanoZip");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60be........8dbe........5789e58d9c24........31c05039dc75"))
    {
        if(PE.compareOverlay("AE01'NanoZip 0.09 alpha'"))
        {
            sVersion="0.09a";
            sOptions="nz_w32c.sfx";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","Native UD Packer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("31C031DB31C9EB0E6A006A006A006A00FF15........FF15........89C768"))
    {
        sVersion="1.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","NativeCryptor by DosX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.getNumberOfSections()>=3)
    {
        if(PE.compareOverlay("'7stgc_hdr'00"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// NecroVM by DosX

function detect(bShowType, bShowVersion, bShowOptions) {
    if (PE.isNET()) {
        if (PE.isSignatureInSectionPresent(0, "5F00'VmLoad'00'mscorlib'") &&
            PE.getString(0x2e, 13) == "It's NecroVM!") {

            var nOffset = PE.findString(0x1f0, 16, "v"),
                version = "";

            if (nOffset != -1) {
                version = PE.getString(nOffset + 1, 0x1ff - nOffset);
            }
            _setResult("packer", "NecroVM Compressor", version, "LZMAT");
            return ""; // There is no point in analyzing anything further
        }

        const references = ["System.Reflection", "System.Security.Cryptography", "System.Runtime.InteropServices"];
        for (var i = 0; i < references.length; i++)
            if (!PE.isSignatureInSectionPresent(0, "00'" + references[i] + "'00")) // 00'keyValue'00
                return "";

        const vmCore = "NecroVM.Runtime"; // Virtual machine namespace

        if (PE.isSignatureInSectionPresent(0, "50??'" + vmCore + "'") && PE.isNETStringPresent(vmCore) && // check for core
            PE.isSignatureInSectionPresent(0, "'info'00'flags'00'nativeEntry'00'nativeSizeOfCode'")) {

            if (PE.isSignatureInSectionPresent(0, "0005'_'00'_'00")) // code isolation
                _setResult("protection", "NecroVM Code Container", "", "");

            if (PE.isSignatureInSectionPresent(0, "2000690073002000740061006d00700065007200650064002e00")) // check for anti-tamper
                _setResult("protection", "NecroVM Anti-Tamper", "", "");

            var options = "Virtualization"

            if (PE.isSignatureInSectionPresent(0, "00'm_1'")) {
                options += " + Obfuscation"
            }

            _setResult("protector", "NecroVM", "2.X", options);
        }
    }
}// DIE's signature file

init("packer","NeoLite");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("8B4424048D5424FC2305........E8........FF35........50FF25"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(PE.compareEP("E9$$$$$$$$8B44....2305........E8$$$$$$$$5351525657C8......5081ED........8D..........B8........8B1D"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(PE.compareEP("E9")&&(PE.compareEP("'NeoLite'",29)||PE.compareEP("'NeoLite'",33)))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(PE.compareEP("E9A6000000"))
    {
        sVersion="2.0";
        bDetected=1;
    }
    else if(PE.compareEP("8B4424042305........50E8........83C404FE05........0BC074"))
    {
        sVersion="2.0";
        bDetected=1;
    }
    else if(PE.compareEP("e9$$$$$$$$8b4424..8d5424..2e2305........e8........09c074..2eff35"))
    {
        sVersion="1.01";
        bDetected=1;
    }
    else if(PE.compareEP("e9$$$$$$$$e9$$$$$$$$8b4424..8d5424..2e2305........e8........09c074..2eff35"))
    {
        sVersion="1.01";
        bDetected=1;
    }
    else if(PE.compareEP("e9$$$$$$$$e9$$$$$$$$8b4424..8d5424..2305........e8........ff35........50ff25"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("e9$$$$$$$$8b4424..8d5424..2305........e8........ff35........50ff25"))
    {
        sVersion="2.0";
        bDetected=1;
    }
    else if(PE.compareEP("e9$$$$$$$$8b4424..2305........e8........fe05........ffe0"))
    {
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: DosX
// E-Mail: collab@kay-software.ru
// GitHub: https://github.com/DosX-dev

function detect() {

    // https://github.com/0xd4d/dnlib
    if (PE.isNETStringPresent("dnlib") && PE.isNETStringPresent("ModuleDef"))
        _setResult("library", "dnlib", "", "");

    // https://www.mono-project.com/docs/tools+libraries/libraries/Mono.Cecil/
    if (PE.isNETStringPresent("Mono.Cecil"))
        _setResult("library", "Mono.Cecil", "", "");

    // https://github.com/Washi1337/AsmResolver
    if (PE.isNETStringPresent("AsmResolver"))
        _setResult("library", "AsmResolver", "", "");

    // https://learn.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/using-the-codedom
    if (PE.isNETStringPresent("System.CodeDom.Compiler")) { // Standart .NET library
        var languages = "";

        if (PE.isNETStringPresent("CSharpCodeProvider"))
            languages = "C#";

        if (PE.isNETStringPresent("VBCodeProvider"))
            languages += (languages != "" ? " + " : "") + "VB.NET";

        if (PE.isNETStringPresent("JScriptCodeProvider")) // Should check the relation to System.CodeDom......
            languages += (languages != "" ? " + " : "") + "JScript";

        if (languages != "") {
            _setResult("library", "CodeDom Compiler", "", languages);
        }
    }
}// DIE's signature file
// Author: DosX
// E-Mail: collab@kay-software.ru
// GitHub: https://github.com/DosX-dev
// Telegram: @DosX_dev

function detect() {
    var isDetected = false;

    var options = "",
        version = "";




    // === 4.X ===
    // by ajax
    if (PE.section[".reacto"]) {
        if (PE.section[1].FileSize == 0 && PE.section[2].FileSize == 0 && PE.section[3].FileSize == 0) {
            version = "2.0-2.1";
        }
    } else if (PE.compareEP("558becb90f0000006a006a004975f951535657b8........e8")) {
        version = "2.X-3.X";
    } else if (PE.resource["__"] && PE.compareEP("e8$$$$$$$$8bff558bec83ec10")) {
        if (PE.compareEP("e8........e9........6a0c68")) {
            version = "4.2";
        } else if (PE.compareEP("e8........e9........8bff558bec83ec208b45085657")) {
            version = "4.5-4.7";
        }
    } else if (PE.isNET()) {
        if (PE.isSignatureInSectionPresent(0, "558becb90f0000006a006a004975f951535657b8........e8")) {
            version = "3.X";
        } else if (PE.section.length >= 2) {
            if (PE.section[1].Characteristics == 0xc0000040) {
                if (PE.isSignatureInSectionPresent(1, "5266686E204D182276B5331112330C6D0A204D18229EA129611C76B505190158")) {
                    version = "4.8-4.9";
                }
            }
        }
    }
    // ===========



    if (PE.isNET()) {
        if (PE.isNetObjectPresent("NecroVM.Runtime")) return null;

        // === 6.X ===
        if (PE.isSignatureInSectionPresent(0, "6D5F6973526561644F6E6C790B636F6D70617265496E666F0874657874496E666F076E756D496E666F0C6461746554696D65496E666F0863616C656E6461720A6D5F646174614974656D0963756C747572654944066D5F6E616D65116D5F757365557365724F76657272696465")) {
            version = "6.X";
        }

        var signatureToScan = "";

        for (var i = 0; i < 50; i++) {
            signatureToScan += "'m_'................................................................00";
        }

        if (PE.isSignatureInSectionPresent(0, signatureToScan)) {
            options += "Control Flow";
            version = "6.X";
        }
        // ===========




        // === 6.5 ===
        if (PE.isSignatureInSectionPresent(0, "24246D6574686F643078363030303331372D310024246D6574686F643078363030303333322D310024246D6574686F643078363030303333322D320024246D6574686F643078363030303334302D310024246D6574686F643078363030303334302D320024246D6574686F643078363030303335332D310024246D6574686F64")) {
            version = "6.5";
        }
        // ===========




        // === ALL VERSIONS ===
        if (PE.isSignatureInSectionPresent(0, "2000690073002000740061006D00700065007200650064002E00") && PE.isNetObjectPresent("BinaryReader")) {
            options += (options.length != 0 ? " + " : "") + "Anti-Tamper";
        }

        if (PE.isSignatureInSectionPresent(0, "45007A006900720069007A0027007300200022002E004E00450054002000520065006100630074006F0072002200210020005400680069007300200061") && PE.isNetObjectPresent("DateTime")) {
            version += (version.length != 0 ? " " : "") + "Unregistered";
        }
        // ====================




        if (options.length != 0 || version.length != 0) isDetected = true;

        if (isDetected) {

            if (PE.isNetObjectPresent("SuppressIldasmAttribute")) {
                options += (options.length != 0 ? " + " : "") + "Anti-ILDASM";
            }

            _setResult("protector", ".NET Reactor", version, options);
        }
    }

}// DIE's signature file
// Author: KDSS-Research

init("protector", "NetShield Protector");

function detect(bShowType, bShowVersion, bShowOptions) {
    if (PE.isNET()) {
        bDetected = 1;
        if (validateReferences(
                isPositive = true,
                references = [
                    "System.Security.Cryptography",
                    "System.Text",
                    "System.CodeDom.Compiler",
                    "System.Reflection"

                ]
            )) {
            bDetected = 0;
            return null; // end
        } 
        if (!PE.isSectionNamePresent("!Sugar")) {
             bDetected = 0;
        }
         if (!PE.isNETStringPresent("_Lambda$__1") || 
          !PE.isNETStringPresent("_Lambda$__2") || 
          !PE.isNETStringPresent("k.exe")){
          sOptions += " [Rename Methods, etc...]";
        }
        if(PE.isNETStringPresent("ConfusedByAttribute")){
            sOptions += " [Fake Obfuscator Attributes]";
        }
    }
    

    return result(bShowType, bShowVersion, bShowOptions);
}


// validateReferences by DosX
function validateReferences(isPositive, references) {
    for (var i = 0; i < references.length; i++) {
        var sign = "00'" + references[i] + "'00";
        if (isPositive == true) {
            if (!PE.isSignatureInSectionPresent(0, sign)) {
                return true;
            }
        } else { // negative
            if (PE.isSignatureInSectionPresent(0, sign)) {
                return true;
            }
        }
    }
    return false;
}// DIE's signature file

init("compiler","Nim");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.section[".rdata"])
    {
        var nOffset=PE.section[".rdata"].FileOffset;
        var nSize=PE.section[".rdata"].FileSize;

        if((PE.findString(nOffset,nSize,"io.nim")!=-1)||(PE.findString(nOffset,nSize,"fatal.nim")!=-1))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Ningishzida");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("9C6096E8000000005D81ED........B9041B00008DBD........8BF7AC"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","NoobyProtect(Safengine)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.section[PE.getImportSection()].Name=="SE")
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","NoodleCrypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("EB019AE8..000000EB019AE8....0000EB019AE8....0000EB01"))
    {
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","North Star PE Shrinker");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("9C60E8000000005DB8........2D........2BE88DB5"))
    {
        sVersion="1.3";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","NsPacK");

function getNSPackVersion()
{
    if((PE.section[0].FileSize>0)&&(PE.section[0].FileOffset<0x200))
    {
        sVersion="2.x";
    }
    else if((PE.section[0].FileSize==0)&&(PE.section[0].FileOffset>=0x200))
    {
        sVersion="3.x";
    }
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nNumberOfFunctions=PE.getNumberOfImportThunks(0);
    if((nNumberOfFunctions==6)&&(!PE.getSizeOfCode()))
    {
        if(PE.getImportFunctionName(0,0)=="LoadLibraryA"
         &&PE.getImportFunctionName(0,1)=="GetProcAddress"
         &&PE.getImportFunctionName(0,2)=="VirtualProtect"
         &&PE.getImportFunctionName(0,3)=="VirtualAlloc"
         &&PE.getImportFunctionName(0,4)=="VirtualFree"
         &&PE.getImportFunctionName(0,5)=="ExitProcess")
        {
            getNSPackVersion();
            bDetected=1;
        }
    }
    if(!bDetected)
    {
        if(PE.isLibraryPresent("mscoree.dll")
         &&PE.getImportLibraryName(0)=="KERNEL32.dll"
         &&PE.getImportFunctionName(0,nNumberOfFunctions-1)=="GetSystemInfo")
        {
            getNSPackVersion();
            sOptions=".NET";
            bDetected=1;
        }
        else if(PE.isNETStringPresent("nsnet"))
        {
            sVersion="3.X";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// Made by KDSS-Research
// Contact Me: koffidev365supp@gmail.com

// Program name:
// ----------------------
// Nuitka
 
init("packer","Nuitka");

function detect(bShowType,bShowVersion,bShowOptions)
{
	if (PE.isSectionNamePresent(".rdata")){
		var n2=PE.findString(PE.section[".rdata"].FileOffset,PE.section[".rdata"].FileSize,"__nuitka_version__");
		var n3=PE.findString(PE.section[".rdata"].FileOffset,PE.section[".rdata"].FileSize,"NUITKA_ONEFILE_PARENT");
		if(n2!=-1)
		{
			bDetected=1;
		}
		if (n3!=-1)
		{
			bDetected=1;
			sOptions="Onefile";
		}
	}
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("installer","Nullsoft Scriptable Install System");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nOffset=PE.getOverlayOffset();
    if((!PE.compareOverlay("EFBEADDE'Null'..'oftInst'",4))&&(!PE.compareOverlay("EFBEADDE'nsisinstall'")))
    {
//        if(!PE.section[".ndata"])
//        {
//            return "";
//        }
        if(PE.isOverlayPresent())
        {
            nOffset+=PE.readDword(nOffset);
            if(nOffset+4>=PE.getSize()||!PE.compare("EFBEADDE'Null'..'oftInst'",nOffset+4))
            {
                nOffset=0;
            }
        }
    }
    if(nOffset&&PE.isOverlayPresent())
    {
        // Method detection adapted from 7-Zip.
        nOffset+=0x1C;
        if(PE.compare("5D0000..00",nOffset))
        {
            sOptions=sOptions.append("lzma","solid");
        }
        else if(PE.compare("5D0000....00",nOffset+4))
        {
            sOptions=sOptions.append("lzma");
        }
        else
        {
            function BorZ(nOffset)
            {
                if(PE.readByte(nOffset)==0x31&&PE.readByte(nOffset+1)<14)
                {
                    return "bzip2";
                }
                else
                {
                    return "zlib";
                }
            }
            if(PE.compare("8",nOffset+3))
            {
                sOptions=sOptions.append(BorZ(nOffset+4));
            }
            else
            {
                sOptions=sOptions.append(BorZ(nOffset),"solid");
            }
        }
        bDetected=1;
    }

    var aVersion=PE.getManifest().match(/Null[sS]oft Install System v?(.*?)</);
    if(aVersion)
    {
        sVersion=aVersion[1];
        bDetected=1;
    }
    else if(PE.compareEP("558BEC83EC2C535633F657568975DC8975F4BBA49E4000FF1560704000BFC0B24000"))
    {
        sVersion="1.xx";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC81EC....000056576A..BE........598DBD"))
    {
        sVersion="1.3x";
        bDetected=1;
    }
    else if(PE.compareEP("83EC5C53555657FF15"))
    {
        sVersion="1.x";
        bDetected=1;
    }
    else if(PE.compareEP("83EC0C535657FF15....40000"))
    {
        switch(PE.readWord(PE.nEP+8))
        {
        case 0x812C: sVersion="1.98";  break;
        case 0x10B4: sVersion="2.0a0"; break;
        default:     sVersion="1.xx";
        }
        bDetected=1;
    }
    else if(PE.compareEP("83EC0C53555657FF15..7040008B35..92400005E803000089442414B320FF152C704000"))
    {
        sVersion="2.0b2/2.0b3";
        bDetected=1;
    }
    else if(PE.compareEP("83EC14836424040053555657C644241320FF1530704000BE00207A00"))
    {
        sVersion="2.0b4";
        bDetected=1;
    }
    else if(PE.compareEP("83EC1053555657C7442414....400033EDC644241320FF152C704000"))
    {
        switch(PE.readWord(PE.nEP+11))
        {
        case 0x91F0: sVersion="2.0b4";   break;
        case 0x9270: sVersion="2.0 RC2"; break;
        }
        bDetected=1;
    }
    else if(PE.compareEP("83EC0C53555657C7442410........33DBC644241420FF15........53FF15"))
    {
        sVersion="2.0";
        bDetected=1;
    }
    else if(PE.compareEP("83EC2053555633DB57895C2418C7442410........C644241420FF15"))
    {
        sVersion="2.06";
        bDetected=1;
    }
    else if(PE.compareEP("558bec83ec..535633f657568975..8975..bb........ff15........bf........68........5750a3........ff15"))
    {
        sVersion="0.98";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","O'Setup95");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("64a1........558bec6a..68........68........50648925........83ec..5356578965..ff15"))
    {
        if(PE.compareOverlay("'FILE'"))
        {
            sOptions="Celtech Software";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","ORiEN");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E95D010000CED1CE..'\r\n--------------------------------------------\r\n- ORiEN executable files protection system -\r\n------ Created by A. Fisun, 1994-2003 ------\r\n------- WWW: http://zalexf.narod.ru/ -------\r\n-------- e-mail: zalexf@hotmail.ru ---------\r\n--------------'"))
    {
        switch(PE.readByte(PE.nEP+8))
        {
        case 0xCE: sVersion="2.11"; break;
        case 0xCD: sVersion="2.12"; break;
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Obfuscar");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isSignatureInSectionPresent(0,"0691066120AA00000061D29C0617580A"))
        {
            sVersion="1.0";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Obfuscator.NET 2009");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isNETStringPresent("Macrobject.Obfuscator"))
        {
            bDetected=1;
        }
        else if(PE.isNETStringPresent("Obfuscated by Macrobject Obfuscator.NET UNREGISTRED"))
        {
            sOptions="Unregistered";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: ajax
// History:
// 22:54 17.01.2013 add generic
// 22:30 14.07.2013 improved generic

init("protector","Obsidium");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E8AB1C"))
    {
        sVersion="1.0.0.59";
        bDetected=1;
    }
    else if(PE.compareEP("E8AF1C0000"))
    {
        sVersion="1.0.0.61";
        bDetected=1;
    }
    else if(PE.compareEP("EB02....E8E71C0000"))
    {
        sVersion="1.1.1.1";
        bDetected=1;
    }
    else if(PE.compareEP("EB02....E8771E0000"))
    {
        sVersion="1.2";
        bDetected=1;
    }
    else if(PE.compareEP("EB02....E83F1E0000"))
    {
        sVersion="1.2.0.0";
        bDetected=1;
    }
    else if(PE.compareEP("E80E0000008B54240C8382B8000000"))
    {
        sVersion="1.2.5.0";
        bDetected=1;
    }
    else if(PE.compareEP("EB01..E829000000EB02....EB01..8B54240CEB04"))
    {
        sVersion="1.2.5.8";
        bDetected=1;
    }
    else if(PE.compareEP("E80E00000033C08B54240C8382B80000000DC36467FF36"))
    {
        sVersion="1.2.X";
        bDetected=1;
    }
    else if(PE.compareEP("EB04........E829000000EB02....EB01..8B54240CEB02"))
    {
        sVersion="1.3.0.0";
        bDetected=1;
    }
    else if(PE.compareEP("EB02....E825000000EB04........EB01..8B54240CEB01"))
    {
        sVersion="1.3.0.4";
        bDetected=1;
    }
    else if(PE.compareEP("EB01..E826000000EB02....EB02....8B54240CEB01"))
    {
        sVersion="1.3.0.13";
        bDetected=1;
    }
    else if(PE.compareEP("EB02....E828000000EB04........EB01..8B54240CEB"))
    {
        sVersion="1.3.0.17";
        bDetected=1;
    }
    else if(PE.compareEP("EB03......E82E000000EB04........EB04........8B"))
    {
        sVersion="1.3.0.21";
        bDetected=1;
    }
    else if(PE.compareEP("EB02....E826000000EB03......EB01..8B54240CEB04"))
    {
        sVersion="1.3.0.37";
        bDetected=1;
    }
    else if(PE.compareEP("EB02....E827000000EB02....EB03......8B54240CEB01"))
    {
        sVersion="1.3.1.1";
        bDetected=1;
    }
    else if(PE.compareEP("EB04........E82A000000EB03......EB04........8B54"))
    {
        sVersion="1.3.2.2";
        bDetected=1;
    }
    else if(PE.compareEP("EB01..E829000000EB02....EB03......8B54240CEB02"))
    {
        sVersion="1.3.3.1";
        bDetected=1;
    }
    else if(PE.compareEP("EB01..E82B000000EB02....EB02....8B54240CEB03"))
    {
        sVersion="1.3.3.2";
        bDetected=1;
    }
    else if(PE.compareEP("EB02....E829000000EB03......EB03......8B..240CEB"))
    {
        sVersion="1.3.3.3";
        bDetected=1;
    }
    else if(PE.compareEP("EB02....E829000000EB03......EB02....8B54240CEB03"))
    {
        sVersion="1.3.3.4";
        bDetected=1;
    }
    else if(PE.compareEP("EB04........E828000000EB01..............8B54240"))
    {
        sVersion="1.3.3.6";
        bDetected=1;
    }
    else if(PE.compareEP("EB02....E827000000EB03......EB01..8B54240CEB03"))
    {
        sVersion="1.3.3.7";
        bDetected=1;
    }
    else if(PE.compareEP("EB02....E82C000000EB04........EB04........8B5424"))
    {
        sVersion="1.3.3.7";
        bDetected=1;
    }
    else if(PE.compareEP("EB04........E828000000EB01..EB01..8B54240CEB04"))
    {
        sVersion="1.3.3.8";
        bDetected=1;
    }
    else if(PE.compareEP("EB02....E829000000EB03......EB01..8B54240CEB04"))
    {
        sVersion="1.3.3.9";
        bDetected=1;
    }
    else if(PE.compareEP("EB01..E82A000000EB04........EB02....8B54240CEB03"))
    {
        sVersion="1.3.4.1";
        bDetected=1;
    }
    else if(PE.compareEP("EB02....E826000000EB03......EB01..8B54240CEB02"))
    {
        sVersion="1.3.4.2";
        bDetected=1;
    }
    else if(PE.compareEP("EB03......E8........EB02....EB04........8B54240C"))
    {
        sVersion="1.3.5.0";
        bDetected=1;
    }
    else if(PE.compareEP("eb08................eb03......50eb02"))
    {
        sVersion="1.6b43";
        bDetected=1;
    }
    else if(PE.compareEP("E84719"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("EB$$E8....0000EB$$EB$$8B54240CEB"))
    {
        bDetected=1;
    }
    // Generic
    else if(PE.getEntryPointSection()==PE.nLastSection)
    {
        if(PE.compareEP("EB"))
        {
            if(PE.getImportSection()>=0)
            {
                if(PE.isOverlayPresent())
                {
                    bDetected=1;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","Open Source Code Crypter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BECB9090000006A006A004975F9535657B8........E828F8FFFF33C05568"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Oreans CodeVirtualizer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("eb$$e9$$$$$$$$e9$$$$$$$$565053e8$$$$$$$$584889c348ffc0482d........482d........4805........803b..75..c603..bb........68........68........5350e8"))
    {
        bDetected=1;
    } 
    else if(PE.isSectionNamePresent(".vlizer"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: KDSS-Research

init("joiner","OxiJoiner");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e85c000000a30b3040006a00e868000000a313304000e86a000000a3703c40006a0aff350b3040006a00ff3513304000e8eaf4ffff6a00e813000000ccff257c204000ff2508204000ff250c204000ff"))
    {
	var n1=PE.findString(PE.section[".rsrc"].FileOffset,PE.section[".rsrc"].FileSize,"PAPADDING");
        if (n1!=-1){
		bDetected=1;
	}
    }
   

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","PACE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("833d..........75..E8........a3........e8$$$$$$$$56578b3d........8bc7e8........8bf085f674..5668........68........ff15"))
    {
        sName+=" Eden wrapper";
        bDetected=1;
    }
    if(PE.compareEP("558bec81ec........5356578d45..6a..5068........ff15........85c074..8b45..eb..8b75..6a..56ff15........85c075..66813e"))
    {
        sName+=" InterLok";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","PACKWIN");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("8CC0FA8ED0BC....FB060E1F2E........8BF14E8BFE8CDB2E........8EC3FDF3A453B8....50CB"))
    {
        sVersion="1.01p";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","PC Guard");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isSignatureInSectionPresent(0,"00000000000000000000000000000000fc5550e8000000005d60e80300000083"))
        {
            sVersion="5.X";
            bDetected=1;
        }
    }
    else if(PE.compareEP("fc5550e8000000005d60e8$$$$$$$$eb$$58eb$$40eb$$ffe0"))
    {
        sVersion="5.04-5.05";
        bDetected=1;
    }
    else if(PE.compareEP("fc5550e8$$$$$$$$5deb$$60e8"))
    {
        sVersion="4.06";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","PCInstall");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("64a1........558bec6a..68........68........50648925........83ec..5356578965..ff15"))
    {
        if(PE.compareOverlay("'[20/20]'"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","PCShrink");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("01AD........FFB5........6A40FF95"))
    {
        sVersion="0.71 beta";
        bDetected=1;
    }
    else if(PE.compareEP("9C60BD........01AD........FF..........6A..FF..........50502D........89..........5F8D"))
    {
        sVersion="0.71";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","PE Diminisher");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("535152565755E8000000005D8BD581ED........2B95........81EA0B0000008995........80BD"))
    {
        sVersion="0.1";
        bDetected=1;
    }
    else if(PE.compareEP("5D8BD581ED........2B95........81EA0B......8995........80BD"))
    {
        sVersion="0.1";
        sOptions="Alt";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","PE Encrypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC83C4D05356578D75FC8B442430250000FFFF8138'MZ'900074072D00100000EBF18945FC"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","PE Intro");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("8B04249C60E8........5D81ED........80BD..........0F8548"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","PELOCKnt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("EB03CD20EBEB01EB1EEB01EBEB02CD209CEB03CD"))
    {
        sVersion="2.01";
        bDetected=1;
    }
    else if(PE.compareEP("EB02C7851EEB03CD20EBEB01EB9CEB01EBEB02CD"))
    {
        sVersion="2.02c";
        bDetected=1;
    }
    else if(PE.compareEP("EB02C7851EEB03CD20C79CEB0269B160EB02EB01"))
    {
        sVersion="2.03";
        bDetected=1;
    }
    else if(PE.compareEP("EB$$1EEB$$9CEB$$EB$$60EB$$EB$$E8$$$$$$$$584050C3"))
    {
        sVersion="2.04";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","PE Password");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E804......8BEC5DC333C05D8BFD81ED........81EF........83EF0589AD........8D9D........8DB5........4680"))
    {
        sVersion="0.2";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","PE Protect");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("'\r\nPE-PROTECT 0.9 (C)o'",64))
    {
        sVersion="0.9";
        bDetected=1;
    }
    else if(PE.compareEP("525155576467A1300085C0780DE8........5883C007C6..C3"))
    {
        sVersion="0.9";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","PE Quake");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e8$$$$$$$$5d81ed........8d75..56ff55..8db5........5650ff55..8985........6a..68"))
    {
        sVersion="0.06";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","PE-Admin");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("609C64FF3500000000E879010000900000000000000000000000................0000000000000000000000000000000000000000"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","PE-Armor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E8$$$$$$$$5D81ED050000008D753D56FF55318DB5860000005650FF552D898593000000"))
    {
        sVersion="0.46";
        bDetected=1;
    }
    else if(PE.compareEP("5652515355E81501000032....0000000000"))
    {
        sVersion="0.49";
        bDetected=1;
    }
    else if(PE.compareEP("60E8000000005D81ED........8DB5........555681C5........55C3"))
    {
        sVersion="0.7X";
        bDetected=1;
    }
    else if(PE.compareEP("558bec83c4..b8........e8$$$$$$$$5883ec..5de9$$$$$$$$60e8000000005d81ed........8db5........5556"))
    {
        sVersion="0.X";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","PE-SHiELD");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E9$$$$$$$$60E8$$$$$$$$5D83ED..EB$$8DB5........BA........8A3C1632FA80....80....88....4AEB"))
    {
        sVersion="0.25";
        bDetected=1;
    }
    else if(PE.compareEP("60E8$$$$$$$$5D83ED..EB$$8D....................8A....32..80....80....88......EB"))
    {
        sVersion="0.25-0.26";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","PEBundle");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("9C60E802......33C08BC483C004938BE38B5BFC81EB........87DD"))
    {
        switch(PE.getEPSignature(28,2))
        {
        case "6A04": sVersion="0.2-2.0x";  break;
        case "01AD": sVersion="2.0b5-2.3"; break;
        case "83BD": sVersion="2.44";      break;
        case "80BD": sVersion="3.xx";      break;
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","PECRYPT32");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e8000000005b83eb..eb$$85c073..f705................58eb$$56575550e8"))
    {
        sVersion="1.02";
        sOptions="by random & killa";
        bDetected=1;
    }
    else if(PE.compareEP("e8000000005b83eb..eb$$eb$$eb$$eb$$eb$$eb$$eb$$eb$$80bb..........74..83bb..........74..be........03f38bbb........eb"))
    {
        sVersion="1.02";
        sOptions="by random & acpizer";
        bDetected=1;
    }
    else if(PE.compareEP("e8000000005b83eb..8b83........538beb2bd82b9d........899d........5bbe........03f38b93........52ad0bc00f84........8983"))
    {
        sVersion="0.0193c";
        sOptions="by random & acp";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","PECompact");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("EB0668........C39C60BD........B902......B0908DBD........F3AA01AD........FFB5"))
    {
        sVersion="0.90-0.92";
        bDetected=1;
    }
    else if(PE.compareEP("EB0668........C39C60E8........5D555881ED........2B85........0185........50B902"))
    {
        sVersion="0.94";
        bDetected=1;
    }
    else if(PE.compareEP("EB$$9C60E8$$$$$$$$8BC483....938BE38B....81EB........87DD8B85........0185........66C785"))
    {
        sVersion="1.68-1.84";
        bDetected=1;
    }
    else if(PE.compareEP("eb$$9c60e8$$$$$$$$83c4..8b4424..50505b5d81ed........8b85........0185........66c785"))
    {
        sVersion="1.00-1.3x";
        bDetected=1;
    }
    else if(PE.compareEP("eb$$9c60e8$$$$$$$$5d555b81ed........8b85........0185........66c785"))
    {
        sVersion="1.00-1.3x";
        bDetected=1;
    }
    else if(PE.compareEP("33C08BC483C004938BE38B5BFC81"))
    {
        sVersion="1.84";
        bDetected=1;
    }
    else if(PE.compareEP("B8........05........5064FF350000000064892500000000CC90909090"))
    {
        sVersion="2.0 beta";
        bDetected=1;
    }
    else if(PE.compareEP("B8........80002840"))
    {
        sVersion="2.x beta version";
        bDetected=1;
    }
    else if(PE.compareEP("B8........5064FF35000000006489250000000033C08908'PECompact2'00"))
    {
        sVersion="3.02.2 or 3.03.21 beta";
        bDetected=1;
    }
    else if(PE.compareEP("B8........5064FF..........6489..........33C08908"))
    {
        sVersion="2.20-3.02";
        bDetected=1;
    }
    else if(PE.compareEP("B8........5064FF35000000006489250000000033C08908'PEC'"))
    {
        sVersion="2.X";
        if(PE.compareEP("32",27))
        {
            sOptions="Slim Loader";
        }
        bDetected=1;
    }
    else if(PE.compareEP("B8........5553515756528D98........8B5318528BE86A406800100000FF7304"))
    {
        sVersion="2.53-2.76";
        bDetected=1;
    }
    else if(PE.compareEP("B8........5064ff35........648925........33c0890800000000"))
    {
        sVersion="2.78a-3.11";
        bDetected=1;
    }
    else if(PE.compareEP("b8########b8........5553515756528d98"))
    {
        bDetected=1;
    }
    if(bDetected)
    {
         var nOffset=PE.findString(0,0x600,"PEC2");
         if(nOffset!=-1)
         {
            var nBuildNumber=PE.readDword(nOffset+4);
            switch(nBuildNumber)
            {
                case 20206:     sVersion="2.70";        break;
                case 20240:     sVersion="2.78a";       break;
                case 20243:     sVersion="2.79b1";      break;
                case 20245:     sVersion="2.79bB";      break;
                case 20247:     sVersion="2.79bD";      break;
                case 20252:     sVersion="2.80b1";      break;
                case 20256:     sVersion="2.80b5";      break;
                case 20261:     sVersion="2.82";        break;
                case 20285:     sVersion="2.92.0";      break;
                case 20288:     sVersion="2.93b3";      break;
                case 20294:     sVersion="2.96.2";      break;
                case 20295:     sVersion="2.97b1";      break;
                case 20296:     sVersion="2.98";        break;
                case 20300:     sVersion="2.98.04";     break;
                case 20301:     sVersion="2.98.05";     break;
                case 20302:     sVersion="2.98.06";     break;
                case 20303:     sVersion="2.99b";       break;
                case 20308:     sVersion="3.00.2";      break;
                case 20312:     sVersion="3.01.3";      break;
                case 20317:     sVersion="3.02.1";      break;
                case 20318:     sVersion="3.02.2";      break;
                case 20323:     sVersion="3.03.5b";     break;
                case 20327:     sVersion="3.03.9b";     break;
                case 20329:     sVersion="3.03.10b";    break;
                case 20334:     sVersion="3.03.12b";    break;
                case 20342:     sVersion="3.03.18b";    break;
                case 20343:     sVersion="3.03.19b";    break;
                case 20344:     sVersion="3.03.20b";    break;
                case 20345:     sVersion="3.03.21b";    break;
                case 20348:     sVersion="3.03.23b";    break;
                default:
                {
                    if(nBuildNumber)
                    {
                        sVersion=nBuildNumber
                    }
                }
            }
         }
    }
    else if(PE.isNET())
    {
        if(PE.isSignaturePresent(0,512,"00'PEC2XO'000000000000..0000..'.rsrc'00"))
        {
            sVersion="2.X-3.X";
            sInfo=".NET";
            bDetected=1;
        }
        else if(PE.isSignatureInSectionPresent(0,"'mscoree.dll'000000'CorBindToRuntimeEx'"))
        {
            sVersion="2.X-3.X";
            sInfo=".NET";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","PELock");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.getNumberOfImports()==1)
    {
        if(PE.isLibraryFunctionPresent("KERNEL32.DLL", "LoadLibraryA")&&
           PE.isLibraryFunctionPresent("KERNEL32.DLL", "VirtualAlloc"))
        {
            if(PE.getNumberOfResources()>=1)
            {
                if(PE.getNumberOfSections()>=4)
                {
                    if((PE.getSectionName(0)==PE.getSectionName(1))&&(PE.getSectionName(0)==PE.getSectionName(3)))
                    {
                        bDetected=1;
                    }
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","PENightMare");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E9........EF4003A7078F071C375D43A704B92C3A"))
    {
        sVersion="2 Beta";
        bDetected=1;
    }
    else if(PE.compareEP("60E8000000005DB9........8031154181F9"))
    {
        sVersion="1.3";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","PESpin");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(!PE.isPEPlus())
    {
        if(PE.compareEP("EB016860E8000000008B1C2483C312812BE8B10600FE4BFD822C24"))
        {
            switch(PE.readByte(PE.nEP+27))
            {
            case 0x5C: sVersion="0.1";     break;
            case 0xB7: sVersion="0.3";     break;
            case 0x73: sVersion="0.4";     break;
            case 0x83: sVersion="0.7";     break;
            case 0xC8: sVersion="1.0";     break;
            case 0x7D: sVersion="1.1";     break;
            case 0x71: sVersion="1.3beta"; break;
            case 0xAC: sVersion="1.3";     break;
            case 0x88: sVersion="1.3x";    break;
            case 0x17: sVersion="1.32";    break;
            case 0x77: sVersion="1.33";    break;
            }
            bDetected=1;
        }
    }
    else
    {
        if(PE.compareEP("554881EC900000008D6C2428488975..48897D..48895D..4C8945..4C894D..4C8955..4C895D..4C8965..4C896D..4C8975..4C897D..48894D..488955"))
        {
            sVersion="1.2x";
            bDetected=1;
        }
        else if (PE.compareEP("554881EC90000000488d6c24284889751848897d2048895d004c8945284c894d304c8955384c895d404c8965484c896d504c8975584c897d6048894d0848895510482bc94c8d05"))
        {
            sVersion="1.23";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// Author KDSS-Research

init("protector","PETetris");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (PE.isSectionNamePresent("PETETRIS")){
        bDetected = 1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: KDSS-Research
// Edited: DosX

init("cryptor", "PEUnion");

function detect(bShowType, bShowVersion, bShowOptions) {
    //32bit RUNPE stub
    if (!PE.isNET()) {
        bDetected = 1;

        if (PE.isPEPlus()) {
            bDetected = 0;
        }

        const kLib = "kernel32.dll";

        if (validateNativeImports(
                isPositive = true,
                references = [
                    [kLib, "GetProcAddress"],
                    [kLib, "ExitProcess"],
                    [kLib, "GetModuleFileNameA"],
                    [kLib, "GetComputerNameA"],
                    [kLib, "VirtualAllocExNuma"],
                    ["shlwapi.dll", "PathFindFileNameA"]
                ]
            )) {
            bDetected = 0;
        }

        // ====== ENTRY POINT ======
        //      E8:  call ...
        //      6A:  push 0
        //  FF15A4:  call dword ptr [...]
        //      C3:  ret
        // =========================
        const entryPoint = "E8??????006A00FF15A4????00C3";

        if (PE.getNumberOfSections() != 3 ||
            !PE.compareEP(entryPoint) ||
            !PE.isSectionNamePresent(".rsrc") || !PE.isSectionNamePresent(".idata") || !PE.isSectionNamePresent(".text") ||
            PE.findString(PE.section[".rsrc"].FileOffset, PE.section[".rsrc"].FileSize, "</assembly>") == -1 ||
            !(PE.getSectionVirtualSize(1) + PE.getSectionVirtualSize(2) < PE.getSectionVirtualSize(0)) ||
            !PE.isSignatureInSectionPresent(1, "00'Shlwapi.dll'00")) { // validate imports with signature <[S]hlwapi.dll>
            bDetected = 0;
        }


        sOptions += "RunPE"
    }

    if (PE.isNET()) {
        bDetected = 1;
        if (validateReferences(
                isPositive = true,
                references = [
                    "kernel32.dll", "LoadLibraryA", "GetProcAddress",
                    "System.Runtime.InteropServices",
                    "System.Runtime.CompilerServices",
                    "System.IO",
                    "System.Reflection",
                    "System.Resources",
                    "System.Collections.Generic",
                    "System.Core",
                    "System.Linq",
                    "IEnumerable`1", "<>c__DisplayClass1", "Func`2"
                ],
                section = 0
            )) {
            bDetected = 0;
        }

        if (PE.isNETStringPresent("BeginInvoke") ||
            PE.isNETStringPresent("EndInvoke")) {
            sOptions += "Invoke"
        }

    }

    sVersion = "v4.0";
    return result(bShowType, bShowVersion, bShowOptions);
}


// validateReferences by DosX
function validateReferences(isPositive, references, section) {
    for (var i = 0; i < references.length; i++) {
        var sign = "00'" + references[i] + "'00";
        if (isPositive == true) {
            if (!PE.isSignatureInSectionPresent(section, sign)) {
                return true;
            }
        } else { // negative
            if (PE.isSignatureInSectionPresent(section, sign)) {
                return true;
            }
        }
    }
    return false;
}

// and validateNativeImports by DosX also
function validateNativeImports(isPositive, references) { // references[2]
    for (var i = 0; i < references.length; i++) {
        var importSign = references[i],
            library = importSign[0],
            entry = importSign[1];
        if (isPositive == true) {
            if (!PE.isLibraryFunctionPresent(library, entry)) {
                return true;
            }
        } else { // negative
            if (PE.isLibraryFunctionPresent(library, entry)) {
                return true;
            }
        }
    }
    return false;
}

// I like coffee. Preferably with milk
// DIE's signature file

init("protector","PEncrypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("609CBE........8BFEB9........BB78563412AD33C3ABE2FA9D61E9......FF"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(PE.compareEP("EB$$E8000000005D81ED........8DB5........E8330000008985"))
    {
        sVersion="2.0";
        bDetected=1;
    }
    else if(PE.compareEP("E8000000005D81ED........8DB5........8BFEB90F000000BB"))
    {
        sVersion="3.0";
        bDetected=1;
    }
    else if(PE.compareEP("E9......00F00FC6"))
    {
        sVersion="3.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","PEnguinCrypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("B8........55506764FF360000676489260000BD4B484342B804000000CC"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","PIMP Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec81ec........56576a..be........598dbd........f3a56a..33c0598dbd........f3ab8d85........68........33f65056ff"))
    {
        if(PE.compareOverlay("'PIMPFILE'00"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","PKLITE32");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("68........68........68........e8$$$$$$$$558beca1"))
    {
        sVersion="1.1";
        bDetected=1;
    }
    else if(PE.compareEP("68........68........B8........2b4424..50e8$$$$$$$$558beca1"))
    {
        sVersion="1.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("sfx","PKSFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a100000000506489250000000083c4..535657"))
    {
        if(PE.compareOverlay("'PK'090a"))
        {
            sVersion="2.50";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("patcher","PMAKER");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("68........e8........6a..e8........a3........8b58..03d80fb743..0fb74b..8d7c18..813f........74..83c7"))
    {
        sVersion="0.9";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","PUNiSHER");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("EB0483A4BCCE60EB0480BC0411E800000000"))
    {
        sVersion="1.5 demo";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","Pack Master");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E801000000E883C404E801000000E95D81ED........E804020000E8EB08EB02CD20FF24249A66BE4746"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","PackageForTheWeb");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83....5356578965..ff15"))
    {
        if(PE.compareOverlay("....0000dcedbd"))
        {
            sOptions="InstallShield";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","Packanoid");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("BF........BE........E89D000000B8........8B308B7804BB"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","Packman");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("0F85..FFFFFF8DB3........EB3D8B460C03C350FF5500568B36"))
    {
        sVersion="0.0.0.1";
        bDetected=1;
    }
    else if(PE.compareEP("60E800000000588D..........8D..........8D"))
    {
        sVersion="0.0.0.1";
        bDetected=1;
    }
    else if(PE.compareEP("60E8000000005B8D5BC6011B8B138D73146A08590116AD4975FA"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Pantaray QSetup");

function detect(bShowType,bShowVersion,bShowOptions)
{

    if(PE.compareEP("558bec83c4..b8........e8$$$$$$$$538bd833c0a3........6a..e8........a3........a1........a3........33c0a3........33c0a3........e8........ba........8bc3e8........5bc3"))
    {
        if(PE.compareOverlay("970300000201"))
        {
            sVersion="10.0.0.x";
            bDetected=1;
        }
        else if(PE.compareOverlay("370700000201"))
        {
            sVersion="11.0.0.x";
            bDetected=1;
        }
        var ArcOffset=PE.findSignature(PE.getOverlayOffset(),0x400, "'|http:'");
        if(ArcOffset!=-1)
        {
            sVersion="6.0.0.0";
            bDetected=1;
        }
        var ArcOffset=PE.findSignature(PE.getOverlayOffset(),0x400, "'|www.'");
        if(ArcOffset!=-1)
        {
            sVersion="8.0.0.0";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Paquet Builder");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("5589e56a..68........68........64ff35........648925........83ec..83ec..5356578965..68"))
    {
        if(PE.compareOverlay("'PB'................................'7z'"))
        {
            sOptions="7zip";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","Paquet archive");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec81c4........53565733c08985........8985........e8........e8"))
    {
        if(PE.compareOverlay("04'PBG'"))
        {
            sVersion="1.5";
            sOptions="1998 by Guillaume Di Giusto";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("patcher","Patch");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e8$$$$$$$$558bec81c4........5657536a..e8........a3........c745..........6a..68........6a..e8"))
    {
        for(var i=0;i<PE.resource.length;i++)
        {
            if(PE.resource[i].Type=="RT_RCDATA")
            {
                if(PE.compare("a28ff4c4", PE.resource[i].Offset))
                {
                    sVersion="2.0";
                    bDetected=1;
                    break;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","PE Ninja");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("5D8BC581ED........2B85........2D710200008985........0FB6B5........8BFD"))
    {
        sOptions="modified";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Pe123");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("8BC0609CE801000000C353E87200000050E81C0300008BD8FFD35BC3"))
    {
        sVersion="2006.4.12";
        bDetected=1;
    }
    else if(PE.compareEP("8BC0EB013460EB012A9CEB02EAC8E80F000000EB033D2323EB014AEB015BC3"))
    {
        sVersion="2006.4.4";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","PE-PACK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E8000000005D83ed..80bd..........0f84........c685..........8bc52b..........89..........89"))
    {
        sVersion="0.99";
        bDetected=1;
    }
    else if(PE.compareEP("74..E9$$$$$$$$60E8........5D83ED..80............0F84........C685..........8BC52B..........89"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","PeX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E9$$$$$$$$60e8$$$$$$$$83c404e8"))
    {
        sVersion="0.99";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("compiler","Pelles C")

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("5589E56AFF68........68........64FF35000000006489250000000083EC0C"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","PerlApp");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..8365....6a..ff15"))
    {
        for(var i=0;i<PE.getNumberOfResources();i++)
        {
            if(PE.resource[i].Type=="232") //BFS
            {
                if(PE.compare("ff'BFS'01",PE.resource[i].Offset))
                {
                    bDetected=1;
                    break;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","Petite");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("9C60E8CA......03..04..05..06..07..08"))
    {
        sVersion="1.2";
        bDetected=1;
    }
    else if(PE.compareEP("669C60E8$$$$$$$$582c..508bc88bd081c1........81c2........89208be15081"))
    {
        sVersion="1.2";
        bDetected=1;
    }
    else if(PE.compareEP("669C60508D8800F000008D90041600008BDC8BE1"))
    {
        sVersion="1.3";
        bDetected=1;
    }
    /*else if(PE.compareEP("B8........669C60508BD8030068........6a..ff....8bcc8da0"))
    {
        sVersion="1.4";
        bDetected=1;
    }*/
    else if(PE.compareEP("669C60508BD803006854BC00006A00FF50148BCC"))
    {
        sVersion="1.4";
        bDetected=1;
    }
    else if(PE.compareEP("64FF350000000064892500000000669C60508BD8"))
    {
        sVersion="2.1-2.3";
        bDetected=1;
    }
    else if(PE.compareEP("B8........669C60508D..........68........83"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("B8........669C60508D88........8d90........8bdc8be168"))
    {
        sVersion="1.3, 1.3a";
        bDetected=1;
    }
    /*else if(PE.compareEP("B8........669C60508BD803..6854BC....6A..FF50188BCC8DA054BC"))
    {
        sVersion="2.0";
        bDetected=1;
    }*/
    else if(PE.compareEP("B8........6A..68........64FF35........648925........669C6050"))
    {
        sVersion="2.1";
        bDetected=1;
    }
    else if(PE.compareEP("B8........68........64FF35........648925........669C6050"))
    {
        sVersion="2.2";
        bDetected=1;
    }
    else if(PE.compareEP("b8........669c605033db8d90........68........833a..0f84........8b0a"))
    {
        sVersion="2.2";
        bDetected=1;
    }
    else if(PE.compareEP("b8........669c60508bd803..68........6a..ff50"))
    {
        sVersion="1.4-2.2";
        bDetected=1;
    }
    else if(PE.compareEP("B8........608DA8........68........6A40680030000068........6A00FF90........8944241CBB........8DB5........8BF850"))
    {
        sVersion="2.X";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Phoenix");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isSignatureInSectionPresent(0,"0000010b160c..........0208..........0d0906085961d21304091e630861d21305070811051e62110460d19d081758"))
        {
            sVersion="1.7-1.8";
            bDetected=1;
        }
        else if(PE.isSignatureInSectionPresent(0,"'?.resources'"))
        {
            sVersion="1.X";
            bDetected=1;
        }
        else if(PE.compareEP_NET("1b3002001c00000000000000280100000a280200000add01000000dc28070000"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: A.S.L. <asl@onet.eu> 2019.10.20
// Exeinfo Pe - don't detect this

init("protector","Photo Compiler");

function detect(bShowType,bShowOptions)
{
    if((PE.compareEP("558bEC83C4F0B8"))&&(PE.compareOverlay("'PK'")))
    {
        if(PE.isSignatureInSectionPresent(0,"'PhotoCompiler.Runtime'"))
        {     
            bDetected=1;
        }
    }

    return result(bShowType);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","PolyCrypt PE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60e8$$$$$$$$918bf4adfec9803408..e2..c3"))
    {
        sOptions="2004-2005 by JLabSoftware";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","PolyEnE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6083ec..c70424........5868........8b0c2483c4..fff051ff15........50eb"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("player","Power Screen Recorder");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("eb$$a1........c1e0..a3........526a..e8........8bd0e8........5ae8........e8"))
    {
        if(PE.findSignature(PE.getSize()-0x500, 0x500, "'xzjtlx'")!=-1)
        {
            sVersion="6.x-7.x";
            sOptions="by www.tlxsoft.com";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","PowerBASIC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec535657bb........662ef705............0f85........6a..ff15........e8........c783"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Private EXE Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC83C4F4FC5357568B7424208B7C242466813E4A430F85A502000083C60A33DB"))
    {
        sVersion="1.9.7";
        bDetected=1;
    }
    else if(PE.compareEP("B8........B9..9001..BE........68........6801......C3"))
    {
        sVersion="1.x";
        bDetected=1;
    }
    else if(PE.compareEP("89....380000008B..0000000081..........89..0000000081..0400000081..0400000081..000000000F85D6FFFFFF"))
    {
        sVersion="2.0";
        bDetected=1;
    }
    else if(PE.compareEP("52ba........c702########....50....53....51....52....56..57....55....81ee"))
    {
        sVersion="3.04";
        bDetected=1;
    }
    else if(PE.compareEP("EB08....0000000000007.009C"))
    {
        sVersion="4.0-4.12";
        bDetected=1;
    }
    else if(PE.compareEP("EB08....0000000000007.0068"))
    {
        sVersion="4.0-4.12";
        bDetected=1;
    }
    else if(PE.compareEP("6064ff35........b9........89ce81c6........ba........bd........8b0683c6..8b1e89dffcf829c333dd31c3891e"))
    {
        sVersion="4.x";
        bDetected=1;
    }
    else if(PE.section.length>=3)
    {
        if(PE.getNumberOfImports()==1
         &&PE.getImportLibraryName(0)=="KERNEL32.DLL"
         &&PE.getImportFunctionName(0,0)=="ExitProcess")
        {
            if(PE.getAddressOfEntryPoint()==0x1000
             &&PE.section[0].FileSize!=0x200
             &&PE.section[0].FileSize!=0x400
             &&PE.section[0].Characteristics==0xe0000020)
            {
                bDetected=1;
                sVersion="1.X";
            }
            else if(PE.section[0].Characteristics==0xe4000000
                  &&PE.section[1].Characteristics==0xC0000000
                  &&PE.section[2].Characteristics==0x50000040)
            {
                bDetected=1;
                sVersion="1.7";
            }
        }
        else if((PE.getNumberOfImports()==1)||(PE.getNumberOfImports()==2))
        {
            if(PE.getImportLibraryName(0)=="KERNEL32.DLL")
            {
                if(PE.getNumberOfImportThunks(0)==1)
                {
                    var nSection=PE.nLastSection;
                    if(PE.section[nSection].Name==".rsrc")
                    {
                        nSection--;
                    }
                    if(PE.section[nSection].Characteristics==0xE0000000
                     &&PE.section[nSection-1].Characteristics==0xE0000000)
                    {
                        bDetected=1;
                        sVersion="2.X";
                    }
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Protection Plus");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("506029c064ff30e8........5d83ed..89e889a5........2b85........8985........8d85........508b0085c00f85"))
    {
        sVersion="4.x";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","PureBasic");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(!PE.isPEPlus())
    {
        if(PE.compareEP("68....0000680000000068......00E8......0083C40C6800000000E8......00A3"))
        {
            sVersion="4.X-6.X";
            bDetected=1;
        }
        else if(PE.compareEP("837C24080175..8B442404A3........E8"))
        {
            sVersion="4.X";
            bDetected=1;
        }
    }
    else
    {
        if(PE.compareEP("4883EC..49C7C0........4831D248B9................E8........4831C9E8"))
        {
            sVersion="4.X-6.X";
            bDetected=1;
        }
    }

    if(PE.isSectionNamePresent(".drectve"))
    {
            var sn=PE.getSectionNumber(".drectve");

            if(PE.isSignatureInSectionPresent(sn,"'pb_datapointer'"))
            {
                 sVersion="6.X";
                 sOptions="gcc";
                 bDetected=1;
            }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// Made by KDSS-Research

init("protector","PwdProtect");

function detect(bShowType,bShowVersion,bShowOptions)
{
	if (PE.isSectionNamePresent(".pwdprot")){
		bDetected=1;
	}
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","PyInstaller");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("78da"))
    {
        if(PE.section[".rdata"])
        {
            var nOffset=PE.section[".rdata"].FileOffset;
            var nSize=PE.section[".rdata"].FileSize;
            var nVersionOffset=PE.findString(nOffset,nSize,"PyInstaller: FormatMessageW failed.");
            
            if(nVersionOffset!=-1)
            {
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// Made by KDSS-Research
// Contact Me: koffidev365supp@gmail.com

// Program name:
// ----------------------
// PyInstaller Hider by KDSS-Research
 
init("scrambler","PyInstaller Hider");

function detect(bShowType,bShowVersion,bShowOptions)
{
	if (PE.isSectionNamePresent(".rdata")){
		var n2=PE.findString(PE.section[".rdata"].FileOffset,PE.section[".rdata"].FileSize,"Failed to get address for PyUnicode_Join");
		
		var n3=PE.findString(PE.section[".rdata"].FileOffset,PE.section[".rdata"].FileSize,"Failed to get address for PyImport_AddModule");
		if(n2!=-1)
		{
			if (n3==-1){
				bDetected=1;  
			}
					
		}
	}
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("library","Python");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var aPython=PE.isLibraryPresentExp(/^python(\d\d)/i);
    if(aPython)
    {
        sVersion=aPython[1]/10;
        bDetected=1;
    }

    var aPython2=PE.isLibraryPresentExp(/^libpython(\d.\d)/i);
    if(aPython2)
    {
        sVersion=aPython2[1];
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("installer","QT installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("'qres'"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// coauthor: sendersu

init("library","Qt");

includeScript("Qt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(aQt)
    {
        sVersion=PE.getPEFileVersion(PE.getFileDirectory()+"/"+aQt[0]);
        if(sVersion=="")
        {
            if (PE.getVersionStringInfo("ProductName") == "The Qt Company Ltd") {
                sVersion=PE.getPEFileVersion(PE.getFileDirectory()+"/"+ownName); // Check Linux !!!
            }
            if(sVersion=="")
                sVersion=(aQt[3]?aQt[3]:aQt[1])+".X";
        }
        if(aQt[2])
        {
            sOptions="debug";
        }
        bDetected=1;
    }

    if(!aQt&&PE.section[".rdata"])
    {
        var nVersionOffset=PE.findString(PE.section[".rdata"].FileOffset,PE.section[".rdata"].FileSize,"QWidget");
        if(nVersionOffset!=-1)
        {
            sVersion="x.xx";
            sOptions="static linked";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","QrYPt0r");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("EB$$E8$$$$$$$$64FF3500000000"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","Quantum");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("64a1........558bec6a..68........68........50648925........83ec..5356578965..ff15"))
    {
        for(var i=0;i<PE.resource.length;i++)
        {
            if(PE.compare("'DS'00", PE.resource[i].Offset))
            {
                bDetected=1;
                break;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","QuickPack NT");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("4d5a90eb$$52e9$$$$$$$$e8$$$$$$$$5d8dad........8d9d........8d......506a..68........55ff53"))
    {
        sVersion="0.1a";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","RCryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("90589050908B00903C5090580F8567D6EF115068"))
    {
        sVersion="1.??";
        bDetected=1;
    }
    else if(PE.compareEP("8B042483E84F68........FFD0"))
    {
        sVersion="1.1";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC8B44240483E84F68........FFD0585950"))
    {
        sVersion="1.3/1.4";
        bDetected=1;
    }
    else if(PE.compareEP("6183EF4F6068........FFD7"))
    {
        sVersion="1.3b";
        bDetected=1;
    }
    else if(PE.compareEP("832C244F68........FF542404834424044F"))
    {
        sVersion="1.5";
        bDetected=1;
    }
    else if(PE.compareEP("33D068........FFD2"))
    {
        sVersion="1.6";
        bDetected=1;
    }
    else if(PE.compareEP("8BC70304242BC78038500F851B8B1FFF68"))
    {
        sVersion="1.6b/1.6c";
        bDetected=1;
    }
    else if(PE.compareEP("60906161807FF04590600F851B8B1FFF68"))
    {
        sVersion="1.6d";
        bDetected=1;
    }
    else if(PE.compareEP("F7D183F1FF6A00F7D183F1FF810424........F7D183F1FF"))
    {
        if(PE.compareEP("E8",24))
        {
            sOptions="Hide EP";
        }
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
init("crypter","RDG Tejon Crypter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6850171001E8EEFFFFFF000000000000300000003800000100000000B365D0B8919CE145AA1BEEE0C80467EE"))
    {
        sVersion="0.7";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","REVProt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e8$$$$$$$$31c064ff30648920648f05........83c4..60e8$$$$$$$$83c4..e8$$$$$$$$5d81ed........60b9"))
    {
        sVersion="0.1a";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("joiner","RJoiner");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC81EC0C0200008D85F4FDFFFF56506804010000FF15"))
    {
        sVersion="1.2";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC81EC0C0100008D85F4FEFFFF56506804010000FF15"))
    {
        sVersion="1.2a";
        bDetected=1;
    }
    else if(PE.compareEP("E803FDFFFF6A00E80C000000FF25........FF25........FF25"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","RLP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.section[".rlp"])
    {
        sVersion="0.7.3.beta";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","RLPack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    // DLL
    var nEP=PE.compareEP("807C2408010F85")?11:0;
    if(PE.compareEP("608BDDE8000000005D9532C095899D80000000B8",nEP))
    {
        sVersion="0.7.3 beta";
        bDetected=1;
    }
    else if(PE.compareEP("60E8000000008D6424048B6C24FC8DB5........8D9D........33FF",nEP))
    {
        sVersion="1.0 beta";
        bDetected=1;
    }
    else if(PE.compareEP("60E8000000008B2C2483C404",nEP))
    {
        if(PE.compareEP("33FFEB",nEP+24))
        {
            sVersion="1.11-1.14";
            sOptions="aPlib";
        }
        else if(PE.compareEP("33FF6A",nEP+24))
        {
            sVersion="1.11-1.14";
            sOptions="LZMA";
        }
        else if(PE.compareEP("0000EB",nEP+29))
        {
            sVersion="1.15-1.18";
            sOptions="aPlib";
        }
        else if(PE.compareEP("00006A",nEP+29))
        {
            sVersion="1.15-1.18";
            sOptions="LZMA";
        }
        else if(PE.compareEP("33FFE8",nEP+55))
        {
            sVersion="1.19-1.20";
            sOptions="aPlib";
        }
        else if(PE.compareEP("33FF6A",nEP+55))
        {
            sVersion="1.19-1.20";
            sOptions="LZMA";
        }
        else if(PE.compareEP("EB0FFF",nEP+56))
        {
            sVersion="1.17 Full Edition";
            sOptions="aPLib";
        }
        else if(PE.compareEP("6A4068",nEP+51))
        {
            sVersion="1.17 Full Edition";
            sOptions="LZMA";
        }
        else if(PE.compareEP("33ffe8",nEP+60))
        {
            sVersion="1.21";
            sOptions="aPLib";
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
init("installer","RNsetup");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a100000000506489250000000083c4..535657"))
    {
        if (PE.getNumberOfResources()>0)
        {
            if (PE.resource[0].Name="Archive")
            {
                var nOffset=PE.getResourceOffsetByNumber(0);
                if (PE.compare("'.rzt'", nOffset))
                {
                    sVersion="6.0";
                    bDetected=1;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("patcher","R!SC Process Patcher");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("68........c705................68........68........6a..6a..6a..6a..6a..6a..6a..68........e8"))
    {
        sVersion="1.x";
        sOptions="by R!SC";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("patcher","RTPatch");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("4B2A9A")||PE.compareOverlay("4B2A84"))
    {
        if(PE.compareEP("64a1........558bec6a..68........68........50648925........83ec..5356578965..ff15"))
        {
            sVersion="10.50";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","ReNET-pack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isSignatureInSectionPresent(0,"'Protected/Packed with ReNET-Pack by stx'"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// sign by A.S.L  - asl@onet.eu  - 19.06.2015

init("system","ReactOS PE file");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.section[".rossym"])
    {
        if (PE.section[".rossym"].Characteristics==0x42000802)
        {
            sVersion="v0.3";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: sendersu
/*
If errors pls contact sendersu on cracklab.team
*/

init("compiler","REALbasic (by Xojo.com)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isOverlayPresent())
    {
        var nOffset=PE.getOverlayOffset();
        var nSize=PE.getOverlaySize();
        var nFoundOffset=PE.findString(nOffset,nSize,"REALbasic.Point");
        var nFoundOffset2=PE.findString(nOffset,nSize,"Xojo.Introspection");
        var bPicklePresent=PE.isResourceGroupNamePresent("PICKLE")

        if(bPicklePresent!=0 && nFoundOffset!=-1 && nFoundOffset2!=-1)
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>, based on an idea by hypn0

init("archive","Resources");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.getAddressOfEntryPoint()==0)
    {
        bDetected=1;
        for (var i=0;i<=PE.nLastSection;i++)
        {
            // IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_CNT_CODE
            if(PE.section[i].Characteristics&0x20000020)
            {
                bDetected=0;
                break;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
init("compiler","RosASM");

includeScript("RosASM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(bRosASM)
    {
        sVersion=PE.getCompilerVersion();
        sOptions=PE.getGeneralOptionsEx();  // RosASM doesn't have a linker
        bDetected=1;

        // Correct version
        if(PE.getMajorLinkerVersion()>3)
        {
            sVersion+="*";
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","Rust");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(!PE.isPEPlus())
    {
        if(PE.isTLSPresent()&&PE.compareEP("E8........E9........CCCCCCCCCC"))
        {
            sVersion="i686-pc-windows-msvc";
            bDetected=1;
        }
    }
    else
    {
        if(PE.isTLSPresent()&&PE.compareEP("4883EC28E8........4883C428E9........CCCCCCCC"))
        {
            sVersion="x86_64-pc-windows-msvc";
            bDetected=1;
        }
    }

    if(bDetected)
    {
        bDetected=0;
        if(PE.section[".rdata"])
        {
            var nOffset=PE.section[".rdata"].FileOffset;
            var nSize=PE.section[".rdata"].FileSize;
            var nVersionOffset=PE.findSignature(nOffset,nSize,"4C6F63616C5C527573744261636B74726163654D75746578"); // Local\RustBacktraceMutex
            
            if(nVersionOffset!=-1)
            {
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","SC Obfuscator");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6033c98b1d........031d........8a041984c074..3c..74..34..880419413b0d........75..a1........0105........61ff25"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Silver Creek Entertainment");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..ff15"))
    {
        for(var i=0;i<PE.resource.length;i++)
        {
            if(PE.compare("789c", PE.resource[i].Offset))
            {
                sOptions="zlib";
                bDetected=1;
                break;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","SDProtector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC6AFF68........688888880864A1"))
    {
        if(PE.compareEP("5083EC08",42))
        {
            sVersion="1.10";
        }
        else if(PE.compareEP("1833C0",77))
        {
            sVersion="1.16";
        }
        else
        {
            sVersion="1.1X";
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("joiner","SFXRun");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("ff15........8038..75..8a48..4080f9..74..84c975..eb..408a0880f9..74..80f9..74"))
    {
        sVersion="1.1";
        sOptions="1999 by Sergey Sorokin";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","SLVc0deProtector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nLastSection=PE.nLastSection;
    if(PE.section[nLastSection].Characteristics==0xA0000020)
    {
        if((PE.section[nLastSection].VirtualSize&0xFF)
         &&(PE.section[nLastSection].FileSize&0xFF))
        {
            if(PE.section[nLastSection].VirtualAddress==PE.getAddressOfEntryPoint())
            {
                sVersion="0.61";
                bDetected=1;
            }
        }
    }
    else if(PE.compareEP("E80000000058C600EBC6400108FFE0E952"))
    {
        sVersion="1.12";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","STATICSUP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("64a1........558bec6a..68........68........50648925........83ec..5356578965..ff15"))
    {
        if(PE.compareOverlay("67155234ff4d3642"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","ScanTime UnDetectable");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("682C114000E8F0FFFFFF00000000000030000000380000000000000037BB71ECA4E1984C9BFE8F0FFA6A07F6"))
    {
        sVersion="RC4 1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","SVK Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60EB03C784E8EB03C7849AE8000000005D81ED10000000EB03C784E964A023000000EB"))
    {
        sVersion="1.051";
        bDetected=1;
    }
    else if(PE.compareEP("60E8........5D81ED06......64A023"))
    {
        sVersion="1.11";
        bDetected=1;
    }
    else if(PE.compareEP("60E8000000005D81ED06000000EB05B8........64A023"))
    {
        sVersion="1.3x/1.4x";
        bDetected=1;
    }
    else if(PE.compareEP("E8000000005D81ED06000000EB05B8........64A023"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("60E8000000005D81ED0600000074..75........64a023"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","SZDD");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83c4..5356578965..ff15"))
    {
        for(var i=0;i<PE.resource.length;i++)
        {
            if(PE.resource[i].Type==2128) //FILE
            {
                if(PE.compare("'SZDD'",PE.resource[i].Offset))
                {
                    bDetected=1;
                    break;
                }
            }
        }
    }
    else if(PE.compareEP("a1........c1e0..a3........575133c0bf........b9........3bcf76..2bcffcf3aa595f"))
    {
        for(var i=0;i<PE.resource.length;i++)
        {
            if(PE.resource[i].Type=="RT_RCDATA")
            {
                if(PE.compare("'SZDD'",PE.resource[i].Offset))
                {
                    sOptions="1997 by Khaled Mardam-Bey";
                    bDetected=1;
                    break;
                }
            }
        }
    }
    else if(PE.compareEP("64a1........558bec6a..68........68........50648925........83ec..5356578965..ff15"))
    {
        for(var i=0;i<PE.resource.length;i++)
        {
            if(PE.resource[i].Type=="RT_RCDATA")
            {
                if(PE.compare("'SZDD'",PE.resource[i].Offset))
                {
                    sOptions="1997 by Klever Co.";
                    bDetected=1;
                    break;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Safedisc");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec60bb........33c98a0d........85c974..b8........2bc383e8..eb"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Safenet RMS (Sentinel)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec81ec........535657c785................c745..........c745..........c745..........c785................c745..........8b45..a3........833d..........74..e9"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hors, sendersu
/*
If errors pls contact sendersu on cracklab.team
*/

init("protector","Safengine Shielden");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E8........5361"))
    {
        if(PE.section[PE.nLastSection].FileSize==0x1000
         &&PE.section[PE.nLastSection].VirtualSize==0x1000)
        {
            sVersion="2.X";
            bDetected=1;
        }
        if(PE.section[PE.nLastSection].FileSize==0x2000
         &&PE.section[PE.nLastSection].VirtualSize==0x2000)
        {
            sVersion="";
            bDetected=1;
        }
    }
    if(PE.compareEP("EB$$E9$$$$$$$$E8........'Safengine Shielden'"))
    {
        sVersion="2.X";
        bDetected=1;
    }
    if (bDetected == 1)
    {
        // try to deduce specific version from payload (if present)
        var s = PE.getSize()
        var nOffset = PE.findString(0, PE.getSize(), "Safengine Shielden v")
        if (nOffset != -1)
        {
          sVersion = PE.getString(nOffset+19)
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","SecuPack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC83C4F053565733C08945F0B8CC3A4000E8E0FCFFFF33C05568EA3C400064FF306489206A0068800000006A036A006A"))
    {
        sVersion="1.5";
        sOptions="Soft Stuttgart"
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: ELF_7719116
// History:
// Created 30.07.2013

init("protector","SecuROM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.section[".securom"])
    {
        sVersion="pre-8.03.03";
        bDetected=1;
    }
    else if(PE.section[".dsstext"])
    {
        sVersion="8.03.03+";
        bDetected=1;
    }
    else if(PE.compareOverlay("'AddD'03"))
    {
        var nOffset=PE.getOverlayOffset();
        sVersion=PE.getString(nOffset+8);
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Secure Shade");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec81ec........535657be........8d7d..8d45..a5a5a5a56a..50a4e8........8b1d........595968........ffd3"))
    {
        sVersion="1.8";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","SerGreen Appacker");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isOverlayPresent())
        {
            if(PE.compareOverlay("'<SerGreen>'"))
            {
                sVersion="1.XX";
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("installer","Setup Factory");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC6AFF68..61400068..43400064A1000000005064892500000000"))
    {
        if(PE.compareEP("90614000",6))
        {
            sVersion="6.0.0.3";
        }
        else
        {
            sVersion="6.x";
        }
        bDetected=1;
    }
    else if(PE.compareOverlay("e0e0e1e1e2e2e3e3e4e4e5e5e6e6e7e7"))
    {
        if(PE.compareEP("e8$$$$$$$$558bec83ec..a1........8365....8365....5357bf........3bc7bb........74..85c374..f7d0a3........eb"))
        {
            sVersion="8.0";
            bDetected=1;
        }
        else if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb........3bc774..85c374..f7d0a3........eb"))
        {
            sVersion="9.0";
            bDetected=1;
        }
        else if(PE.compareEP("4883ec..e8$$$$$$$$48895c24..574883ec..488b05........48836424....48bf................483bc774..48f7d0488905........eb"))
        {
            sVersion="9.5";
            bDetected=1;
        }
    }
    else if(PE.compareOverlay("e0e1e2e3e4e5e6"))
    {
        if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..ff15"))
        {
            sVersion="5.0";
            bDetected=1;
        }
        else if(PE.compareEP("64a1........558bec6a..68........68........50648925........83ec..5356578965..ff15"))
        {
            sVersion="4.02";
            bDetected=1;
        }
    }

    if(bDetected)
    {
        var sInfoString=PE.getVersionStringInfo("Comments");
        if(sInfoString.indexOf("Trial")>=0)
        {
            sOptions="trial";
        }
    }


    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Setup-Specialist");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6a..68........e8........bf........8bc7e8........8965..8bf4893e56ff15"))
    {
        if(PE.compareOverlay("'TGCF'"))
        {
            sVersion="4.0.x";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: DosX
// E-Mail: collab@kay-software.ru
// GitHub: https://github.com/DosX-dev

function detect() {
    if (PE.isSignatureInSectionPresent(0, "'SexCrypt'....324485..4202....3842849322100493..7726374558429100005400000000002900390045....049003200539......44..000000219840"))
        _setResult("cryptor", "SEX", "", "");
}// DIE's signature file

init("crypter","Sexe Crypter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC83C4EC53565733C08945ECB8........E830FAFFFF33C05568........64FF306489"))
    {
        sVersion="1.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Sfx Custom Action");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("'MSCF'00000000"))
    {
        if(PE.compareEP("48895c24..48897424..574883ec..498bf88bda488bf183fa..75..e8........4c8bc7"))
        {
            sVersion="3.8";
            sOptions="by Outercurve Foundation";
            bDetected=1;
        }
        else if(PE.compareEP("558bec837d....75..e8$$$$$$$$558bec83ec..8365....8365....a1........5657bf........be........3bc7"))
        {
            sVersion="3.10";
            sOptions="by Outercurve Foundation";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Shrink Wrap");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("58608BE85533F6684801....E84901....EB"))
    {
        sVersion="1.4";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Shrinker");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC565775656800010000E8F1E6FFFF83C404"))
    {
        sVersion="3.2";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC565775656800010000E8"))
    {
        sVersion="3.3";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC5657756B6800010000E8110B000083C404"))
    {
        sVersion="3.4";
        bDetected=1;
    }
    else if(PE.compareEP("833D..........558BEC565775..68........e8........83....8b....a3........85F674..68"))
    {
        sVersion="3.2";
        bDetected=1;
    }
    else if(PE.compareEP("833D..........558BEC565775..68........e8........83....8b....a3........85F674..83"))
    {
        sVersion="3.5";
        bDetected=1;
    }
    else if(PE.compareEP("833DB4........558BEC5657756B6800010000E8..0B000083C4048B7508A3B4......85F67423837D0C03771D68FF"))
    {
        sVersion="3.4";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","SimbiOZ");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("5060E8000000005D81ED0710400068800B00008D851F10400050E8840B0000"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("57578D7C240450B800......AB585FC3"))
    {
        sVersion="1.3";
        bDetected=1;
    }
    else if(PE.compareEP("55508BC483C004C700........58C390"))
    {
        sVersion="2.1";
        bDetected=1;
    }
    else if(PE.compareEP("5560E8000000005D81ED........8D85........68........50E8"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","Simple Pack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60e8$$$$$$$$5b8d5b..6a..ff93........89c58b7d..8d74....8dbe........8b86........09c075..8d83........506a..68........55ff93"))
    {
        bDetected=1;
        sVersion="1.0";
    }
    else if(PE.compareEP("60e8$$$$$$$$5b8d5b..bd........8b7d..8d74....8dbe........0fb776..4e8b47..09c074..0fb747..09c074..6a..68........ff77..6a..ff93"))
    {
        bDetected=1;
        sVersion="1.2x";
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","Simple UPX Cryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60B8........B9....0000803408..E2FA6168........C3"))
    {
        if(PE.compareEP("1800",7))
        {
            sOptions="multi layer encryption";
        }
        else if(PE.compareEP("01",8))
        {
            sOptions="single layer encryption";
        }
        sVersion="30.4.2005";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Sixxpack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isSignatureInSectionPresent(0,"00'actmp.dll'00'stub'00'Sixxpack'00"))
        {
            sVersion="2.2";
            bDetected=1;
        }
        else if(PE.isSignatureInSectionPresent(0,"0021......'xpack!'00................'xpack'00"))
        {
            sVersion="2.4";
            bDetected=1;
        }
        else if(PE.isNETStringPresent("Sixxpack"))
        {
            sVersion="2.X";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Skater");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.compareEP_NET("4228070000066f09000006283800000a2a1b3004006f0000000d0000110272b9"))
        {
            bDetected=1;
            sVersion="2.X";
        }
        else if(PE.isSignatureInSectionPresent(0,"'RustemSoft.Skater'"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Smart Assembly");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isSignatureInSectionPresent(0,"20ffffff005f175920ffff0000"))
        {
            sVersion="3.X";
            bDetected=1;
        }
        else if(PE.isNETStringPresent("Powered by {smartassembly}"))
        {
            sVersion="1.X-4.X";
            bDetected=1;
        }
        else if(PE.isNETStringPresent("Powered by SmartAssembly"))
        {
            sVersion="5.X";
            bDetected=1;
        }
        else if(PE.isNETStringPresent("SmartAssembly.Attributes"))
        {
            bDetected=1;
        }
        else if((nOffset=PE.findString(PE.section[0].FileOffset,
                                       PE.section[0].FileSize,
                                       "Powered by SmartAssembly "))!=-1)
        {
            sVersion=PE.getString(nOffset+25);
            bDetected=1;
        }
        else
        {
            var nEPSection=PE.getEntryPointSection();
            if(nEPSection!=-1)
            {
                 if((nOffset=PE.findString(PE.section[nEPSection].FileOffset,
                                       PE.section[nEPSection].FileSize,
                                       "Powered by {smartassembly}"))!=-1)
                {
                    bDetected=1;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Smart Install Maker");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec83c4..b8........e8$$$$$$$$538bd833c0a3........6a..e8........a3........a1........a3........33c0a3"))
    {
        if(PE.compareOverlay("'Smart Install Maker v'"))
        {
            sVersion=PE.getString(PE.getOverlayOffset()+0x17);
            bDetected=1;
        }
        else if(PE.compareOverlay("..........87000001........5d0000800000"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","SmokesCrypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60B8........B8........8A140880F2..8814084183F9..75F1"))
    {
        sVersion="1.2";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Soft Defender");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("74$$74$$78$$68A2AF470159E8"))
    {               // 07  1F  0F
        if(PE.compareEP("BA010000",72))
        {
            sVersion="1.0-1.1";
            bDetected=1;
        }
        else if(PE.compareEP("BE010000",73))
        {
            sVersion="1.12";
            bDetected=1;
        }
        else
        {
            sVersion="1.x";
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","SoftProtect");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E8....00008D85....0000C70000000000E8....0000E8....00008D85....000050E8....000083"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("EB01E360E803......D2EB0B58EB014840EB0135FFE0E76160E803"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","SoftSentry");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC83EC..535657E9"))
    {
        if(PE.compareEP("50",10))
        {
            sVersion="2.11";
        }
        else if(PE.compareEP("B006",10))
        {
            sVersion="3.0";
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protection","Softlocx");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("eb$$55e8000000005d81ed........8bc555609c2b85........8985........ff74"))
    {
        sVersion="6.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","Software Compress");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E9BE000000608B7424248B7C2428FCB28033DBA4B302E86D0000"))
    {
        sVersion="1.2";
        bDetected=1;
    }
    else if(PE.compareEP("E800000000812C24AA1A41005DE800000000832C246E8B855D1A4100"))
    {
        sVersion="1.4 LITE";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Sony Windows Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("'UM'030a00"))
    {
        if(PE.compareEP("4883ec..e8$$$$$$$$48895c....574883ec..488b..........48836424....48bf................483bc774"))
        {
            bDetected=1;
        }
        else if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb........3bc774"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
init("compiler","SpASM");

includeScript("SpASM");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(bSpASM)
    {
        sVersion=PE.getCompilerVersion();
        sOptions=PE.getGeneralOptionsEx();  // SpASM doesn't have a linker
        bDetected=1;

        // Correct version
        if(PE.getMajorLinkerVersion()>3)
        {
            sVersion+="*";
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Special EXE Password Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E8000000005D81ED0600000089AD8C0100008BC52B85FE75000089853E"))
    {
        sVersion="1.0x";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
//  DIE's signature file
// 25.11.2018 added 5.X Version -  A.S.L - asl@onet.eu

init("protector","Spices.Net");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isNETStringPresent("NineRays.Obfuscator"))
        {
            if(PE.isSignaturePresent(PE.section[1].FileOffset-512,512,
                                     "'Built using an evaluation version of 9Rays.Net Spices.Obfuscator.'"))
            {
                sOptions="Evaluation";
            }
            bDetected=1;
        }

        if(!bDetected)
        {
           var Spices="'9Rays.Net Spices.Net Obfuscator'";
           if(PE.isDll())
           {
               if((PE.isSignatureInSectionPresent(1,Spices))||(PE.isSignatureInSectionPresent(0,Spices)))
               {
                    sVersion="5.X";
                    sOptions="DLL";
                    bDetected=1;
               }
            }
        }
        else
        {
             if(PE.isSignatureInSectionPresent(0,Spices))
            {
                sVersion="5.X";
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>
// updated A.S.L <asl@onet.eu>  2022.08.06

init("installer","Spoon Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..ff15"))
    {
        if(PE.compareOverlay("'BZh91AY&SY'"))
        {
            sOptions="BZIP2";
            bDetected=1;
        }
        else if(PE.compareOverlay("']'00008000"))
        {
            sOptions="Lzma";
            bDetected=1;
        }
        
        if(PE.getAddressOfEntryPoint()==0x0040C36E) 
        {
            sVersion="11 2005";
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","Spoon Studio");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.section.length>5)
    {
        if((PE.section[2].Characteristics==0)&&(PE.section[2].FileSize==0))
        {
            if((PE.section[3].Characteristics==0x40000040)&&(PE.section[3].FileSize==0x400))
            {
                sVersion=PE.getVersionStringInfo("PackagerVersion");
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","Squeez SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..33db895d..6a..ff15"))
    {
        if(PE.compareOverlay("'SQ5SFX'"))
        {
            sVersion="6.0.0.0";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
init("installer","Squirrel Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var _sVersion = PE.getVersionStringInfo("SquirrelAwareVersion");
    
    if (_sVersion != "") {
        sVersion = _sVersion;
        if (sVersion == "1") {
            sVersion = "1.0.0-1.9.1";
        }
    
        bDetected = 1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// Made by KDSS-Research

init("packer","Squishy");

function detect(bShowType,bShowVersion,bShowOptions)
{
	if (PE.isSectionNamePresent("logicoma")){
		bDetected=1;
	}
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","StarForce");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("68........FF25....63"))
    {
        sVersion="3.0";
        bDetected=1;
    }
    else if(PE.compareEP("68........FF25....57"))
    {
        sVersion="1.1";
        sOptions="ProActive";
        bDetected=1;
    }
    else if(PE.compareEP("5768..0D01006800....00E850..FFFF68......0068......0068......0068......0068......00"))
    {
        sOptions="Protection Driver";
        bDetected=1;
    }
    else if(PE.compareEP("E8........000000000000"))
    {
        sVersion="3.X";
        bDetected=1;
    }
    else if(PE.compareEP("68........FF25........0000000000"))
    {
        sVersion="3.X";
        bDetected=1;
    }
    else if(PE.isLibraryPresent("protect.dll"))
    {
        sVersion=PE.getPEFileVersion(PE.getFileDirectory()+"/protect.dll");
        if(sVersion=="")
        {
            if(PE.section[".ps4"])
            {
                sVersion="4.X-5.X";
            }
            else if(PE.section[".sforce3"])
            {
                sVersion="3.X";
            }
        }
        bDetected=1;
    }
    else
    {
        if(PE.section[".ps4"])
        {
            var sLibraryName;
            var nNumberOfImports=PE.getNumberOfImports();

            for(var i=0;i<nNumberOfImports;i++)
            {
                if(PE.getNumberOfImportThunks(i)==1
                 &&((PE.getImportFunctionName(i,0)=="")||(PE.getImportFunctionName(i,0)=="1")))
                {
                    sLibraryName=PE.getImportLibraryName(i);
                    sVersion=PE.getPEFileVersion(PE.getFileDirectory()+"/"+sLibraryName);
                    if(sVersion=="")
                    {
                        sVersion="4.X-5.X";
                    }

                    sOptions=sLibraryName;
                    bDetected=1;
                    break;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Ste@lth PE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.findSignature(PE.getSize()-0x40, 0x40, "ba........b8........8902424242b8........89024a4a4affd2")!=-1)
    {
        sVersion="2.x";
        bDetected=1;
    }
    else if(PE.findSignature(PE.getSize()-0x40, 0x40, "b8........ba........8910404040ba........891048484850c3")!=-1)
    {
        sVersion="2.x";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("other","Steam stub");

function detect(bShowType,bShowVersion,bShowOptions)
{
   if(PE.compareEP("e800000000505351525657558b4424..2d........8bcc83e4..51515150e8........83c4..5959598be1894424..5d5f5e5a595b58c3"))
   {
       bDetected=1;
   }
   if(PE.compareEP("e8000000005053515256575541504151415241534154415541564157488b4c24..4881e9........488bc44883e4..50504883ec..e8........4883c4..5959"))
   {
       sOptions="x64";
       bDetected=1;
   }

   return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","Stone's PE Encryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("555756525153E8........5D8BD581ED........2B95........83EA0B8995"))
    {
        switch(PE.getEPSignature(35,2))
        {
        case "8DB5": sVersion="1.0";  break;
        case "0195": sVersion="1.13"; break;
        }
        bDetected=1;
    }
    else if(PE.compareEP("535152565755E8........5D81ED........FF95........B8........03C52B85"))
    {
        sVersion="2.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","SwiftView Inc. installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a100000000506489250000000083ec..5356578965"))
    {
        if(PE.compareOverlay("'This is the end of the executable'"))
        {
            sVersion="6.1";
            bDetected=1;
        }
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: A.S.L. <asl@onet.eu> 2019.07.25
// Exeinfo Pe - don't detect this

init("installer","Synactis In-The-Box Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.getAddressOfEntryPoint()==0x00A98B0)
    {
        if((PE.compareEP("558bEC83C4F0B8"))&&(PE.compareOverlay("'['")))
        {
            sVersion="4.0";
            sOptions="zip sfx";
            bDetected=1;
        }
    }
    else if(PE.compareEP("'All In-The-Box Installer'",0x60)) 
    {
        sVersion="x.x";
        sOptions="zip sfx";
        bDetected=1;
    }

    return result(bShowType,bShowVersion);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","TPP Pack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e8$$$$$$$$5d81ed........60e8$$$$$$$$5883c0..ffe0"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Tages");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("8925........e8$$$$$$$$6a..6a..c705................e8$$$$$$$$8b4424..0faf4424..506a..ff15........50ff15........c3"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Tarma Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("'tiz1'........78da"))
    {
        sOptions="zlib";
        if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..e8"))
        {
            bDetected=1;
        }
        else if(PE.compareEP("60be........8dbe........5783cd..eb"))
        {
            bDetected=1;
        }
    }
    if(PE.isSectionNamePresent(".tsustub") && PE.isSectionNamePresent(".tsuarch"))
    {
        if(PE.compareEP("558bec81ec........535633db5766899d........895d..895d..ff15"))
        {
            sName="Tarma InstallMate";
            sVersion="9.0";
            bDetected=1;
        }
        else if(PE.compareEP("48895c24..48896c24..48897424..574881ec........66836424....33f633ffff15........488d8c24........8bd8ff15"))
        {
            sName="Tarma InstallMate";
            sVersion="9.0";
            sOptions="x64";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("crypter","The Best Cryptor by FsK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.findSignature(PE.getSize()-0x100, 0x100, "8b042483e8..68........ffd0b8........3d..............30..40eb..b8........3d..............30..40eb")!=-1)
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// Made by KDSS-Research

init("packer","TheArk");

function detect(bShowType,bShowVersion,bShowOptions)
{
	if (PE.isSectionNamePresent("adr") && PE.isSectionNamePresent("have") && PE.isSectionNamePresent("30cm")&& PE.isSectionNamePresent(".tw")){
		bDetected=1;
	}
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","TheHypers protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC83EC148BFCE8$$$$$$$$5EE80D000000'kernel32.dll'00"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: ajax
// History:
// 21:54 17.01.2013 add 1.x and 2.x
//       20.09.2013 add 2.x for x64

init("protector","Themida/Winlicense");

function detectThemida()
{
    var sResult="";

    if(PE.section.length>=4)
    {
        var nResourceSection=PE.getResourceSection();
        var nImportSection=PE.getImportSection();
        var nEntryPointSection=PE.getEntryPointSection();

        if((nResourceSection==1)&&(nImportSection==2))
        {
            if(PE.getAddressOfEntryPoint()==PE.section[nEntryPointSection].VirtualAddress)
            {
                if(PE.calculateEntropy(PE.section[0].FileOffset,PE.section[0].FileSize)>=7.5)
                {
                    if(nEntryPointSection==3)
                    {
                        sResult="1.X";
                    }
                    else if(nEntryPointSection>3)
                    {
                        sResult="2.X";
                    }
                }
            }
        }
    }

    return sResult;
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isPEPlus()&&PE.compareEP("4883EC085053E801000000CC584889C348FFC0482D........482D........4805........803BCC75..C60300"))
    {
        sVersion="2.X";
        bDetected=1;
    }
    else if(PE.isNET())
    {
        if(PE.isSignatureInSectionPresent(0,"b8000000006011c0"))
        {
            sVersion="1.9";
            bDetected=1;
        }
        else if(PE.isSignatureInSectionPresent(0,"83ec048053e80100"))
        {
            sVersion="2.X";
            bDetected=1;
        }
    }
    else if(PE.compareEP("B8........600BC074..E8000000005805..0000008038E975"))
    {
        switch(PE.readByte(PE.nEP+9))
        {
        case 0x58: sVersion="1.0.x.x-1.8.0.0"; break;
        case 0x68: sVersion="1.8.X-1.9.X";     break;
        }
        sOptions="compressed engine";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC83C4D860E8000000005A81EA........8BDAC745D8000000008B45D8408945D8817DD880000000"))
    {
        sVersion="1.0.x.x-1.8.x.x";
        sOptions="no compression";
        bDetected=1;
    }
    else if(PE.compareEP("8BC58BD460E8000000005D81ED........8995........89B5........8985........83BD"))
    {
        sVersion="1.X";
        sOptions="NoCompression SecureEngine";
        bDetected=1;
    }
    else if(PE.compareEP("83EC045053E801000000CC588BD840"))
    {
        sVersion="2.0.1.0-2.1.8.0";
        bDetected=1;
    }
    else if(PE.compareEP("83EC045053E801000000CC5889C3402D........2D........05........803BCC75..C60300"))
    {
        sVersion="2.X";
        bDetected=1;
    }
    else if(PE.compareEP("E9$$$$$$$$8bc58bd460e8"))
    {
        sVersion="1.1.X-1.2.X";
        bDetected=1;
    }
    else if(PE.compareEP("eb$$e9$$$$$$$$e9$$$$$$$$565053e8$$$$$$$$5889c3402d"))
    {
        bDetected=1;
    }
    else if(PE.isImportPositionHashPresent(0,0x3ffccc8a)&&PE.isImportPositionHashPresent(1,0x4b2fc056))
    {
        sVersion="1.XX-2.XX";
        bDetected=1;
    }
    else if(PE.isSectionNamePresent(".themida"))
    {
        sVersion="3.XX";
        bDetected=1;
    }
    else if(PE.isSectionNamePresent(".winlice"))
    {
        sVersion="3.XX";
        sOptions="Winlicense";
        bDetected=1;
    }
    else
    {
        var sThemidaVersion=detectThemida();
        if(sThemidaVersion!="")
        {
            sVersion=sThemidaVersion;
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Thinstall(VMware ThinApp)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6A00FF1520504000E8D4F8FFFFE9E9ADFFFFFF8BC18B4C2404898829040000C7400C010000000FB64901D1E9894810C7401480000000C204008B442404C7410C010000008981290400000FB64001D1E8894110C741"))
    {
        sVersion="2.403";
        bDetected=1;
    }
    else if(PE.compareEP("558BECB8........BB........50E800000000582D..1A0000B9..1A0000BA..1B0000BE00100000BF..530000BD..1A000003E8817500..........7504........817508........81750C........817510"))
    {
        sVersion="2.5xx";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC515356576A006A00FF15........50E887FCFFFF5959A1........8B40100305........8945FC8B45FCFFE05F5E5BC9C3000000"))
    {
        sVersion="1.9X";
        bDetected=1;
    }
    else if(PE.compareEP("B8EFBEADDE506A00FF15........E9..FFFFFF"))
    {
        switch(PE.readByte(PE.nEP+15))
        {
        case 0xAD: sVersion="2.0X";       break;
        case 0xB9: sVersion="2.2X-2.308"; break;
        }
        bDetected=1;
    }
    else if(PE.compareEP("E8F2FFFFFF5068........68401B0000E842FFFFFFE99DFFFFFF000000000000"))
    {
        sVersion="2.545";
        bDetected=1;
    }
    else if(PE.compareEP("E80000000058BB....00002BC35068........68....000068"))
    {
        switch(PE.readWord(PE.nEP+7))
        {
        case 0x80C1: sVersion="2.547-2.600"; break;
        case 0x19AD: sVersion="2.609";       break;
        case 0x1EAC: sVersion="2.620-2.623"; break;
        case 0x1D34: sVersion="2.628";       break;
        default:     sVersion="2.6XX";
        }
        bDetected=1;
    }
    else if(PE.compareEP("9C60E80000000058BB........2BC35068........68........68........E8........E9"))
    {
        sVersion="2.7XX";
        bDetected=1;
    }
    else if(PE.compareEP("9C6068'StAl'68'ThIn'E80000000058BB371F00002BC35068"))
    {
        if(PE.compareEP("0028",32))
        {
            sVersion="3.035-3.043";
        }
        else if(PE.compareEP("002C",32))
        {
            sVersion="3.049-3.080";
        }
        else if(PE.compareEP("BAFE",42))
        {
            sVersion="3.0XX";
        }
        else if(PE.compareEP("2CFF",42))
        {
            sVersion="3.10X";
        }
        bDetected=1;
    }
    else if(PE.compareEP("b8........e8........482be08d50..4533c033c9e8........85c075..b9........ff15"))
    {
        sVersion="5.0";
        bDetected=1;
    }
    else if(PE.isOverlayPresent())
    {
        if(PE.nLastSection>=1&&PE.section[1].Name==".res")
        {
            sVersion="4.7.X";
            bDetected=1;
        }
    }
    if(PE.compareEP("6a..6a..6a..e8$$$$$$$$8bff558bec837d....75..e8$$$$$$$$8bff558bec83ec..a1........8365"))
    {
        if(PE.compareOverlay("09050000"))
        {
            sVersion="5.2.2";
            bDetected=1;
        }
    }
    if(PE.compareEP("6a..6a..6a..e8$$$$$$$$558bec837d....75..e8$$$$$$$$558bec83ec..8365....8365....a1"))
    {
        if(PE.compareOverlay("09050000"))
        {
            sVersion="5.2.4";
            bDetected=1;
        }
    }
    if(bDetected)
    {
        var _sVersion=PE.getVersionStringInfo("ThinAppVersion");
        if(_sVersion!="")
        {
            sVersion=_sVersion;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","Tiny C Compiler");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if((PE.isLibraryPresent("msvcrt.dll"))&&(PE.getCompilerVersion()=="6.0"))
    {
        if(PE.isPEPlus())
        {
            if(PE.getNumberOfSections()==3)
            {
                if((PE.getSectionName(0)==".text")&&(PE.getSectionName(1)==".data")&&(PE.getSectionName(2)==".pdata"))
                {
                    bDetected=1;
                }
            }
        }
        else
        {
            if(PE.getNumberOfSections()==2)
            {
                if((PE.getSectionName(0)==".text")&&(PE.getSectionName(1)==".data"))
                {
                    bDetected=1;
                }
            }
        }
        
        if (!bDetected) {
            if(PE.isPEPlus()) {
                if (PE.compareEP("554889e54881ec........b8........8945..b8........4989c24c89d1e8"))
                {
                    bDetected=1;
                }
            } else {
                if(PE.compareEP("5589e581ec........908d45..50e8........83c4..b8........8945..b8........50e8........83c4"))
                {
                    bDetected=1;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: A.S.L. <asl@onet.eu> 2019.05
// Exeinfo Pe - don't detect this

init("installer","TrueCrypt-VeraCrypt installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if((PE.compareEP("E8....0000E9"))&&(PE.compareOverlay("..'CINSTRT'")))
    {
        sVersion="1.X-7.x";
        bDetected=1;
    }

    return result(bShowType,bShowVersion);
}
// DIE's signature file
// Author: A.S.L. <asl@onet.eu> 2020.09.30
// Exeinfo Pe - don't detect this installer

init("installer","UFI installer(Flash tool)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if((PE.compareEP("558BEC"))&&(PE.resource["BINFILE"])&&(PE.resource["BINFILE_2"]) ) 
    {
        sVersion="1.x";
        bDetected=1;
    }

    return result(bShowType,bShowVersion);
}
// DIE's signature file

init("protector","UG2002 Cruncher");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E8........5D81ED........E80D................................58"))
    {
        sVersion="0.3b3";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("scrambler","UPX Inliner");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("9C60E8000000005DB8........2D........2BE88DB5D5FEFFFF8B0683F8007411"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("scrambler","UPX Modifier");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("50BE........8DBE........5783CD"))
    {
        sVersion="0.1x";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// Made by KDSS-Research
// Contact Me: koffidev365supp@gmail.com

// Program name:
// ----------------------
// UPX Mutanter by AHTeam
 
init("scrambler","UPX Mutanter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("94 bc 61 62 4d 00 b9 .. 00 00 00 80 34 0c .. e2"))
    {
        sOptions="Method 2";
        bDetected=1;
    }
    if(PE.compareEP("94 bc .. b9 4d 00 b9 .. 00 00 00 80 34 0c .. e2"))
    {
        sOptions="Method 1";
        bDetected=1;  
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("scrambler","UPX Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("EB..........8A064688074701DB75078B1E83EEFC11DB"))
    {
        sVersion="1.0x";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("scrambler","UPX lock");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E8000000005D81ED........60E82B030000"))
    {
        sVersion="1.0-1.2";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("scrambler","UPX scrambler");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E8000000005983C10751C3C3BE........83EC04893424B9800000008136........50B80400000050033424585883E903E2E9EBD6"))
    {
        sVersion="3.06";
        bDetected=1;
    }
    else if(PE.compareEP("66C705........7507E9..FEFFFF00"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("9061BE........8DBE........5783CDFF"))
    {
        sVersion="1.x";
        bDetected=1;
    }
    else if(PE.compareEP("9061BE........8DBE........c787................5783CDFF"))
    {
        sVersion="1.x";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("scrambler","UPX shit");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E2FA94FFE06100000000000000"))
    {
        sVersion="0.0.1";
        bDetected=1;
    }
    else if(PE.compareEP("94BC......00B9..00000080340C..E2FA94FFE061"))
    {
        sVersion="0.0.1";
        bDetected=1;
    }
    else if(PE.compareEP("B8....4300B915000000803408..E2FAE9D6FFFFFF"))
    {
        sVersion="0.06";
        bDetected=1;
    }
    else if(PE.compareEP("E8000000005E83C614AD89C7AD89C1AD300747E2FBADFFE0C3"))
    {
        sVersion="0.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// History:
// 1:00 06.10.2013 x64 support (ajax)
//      2014-05-25 rewritten (adoxa)

init("packer","UPX");

function isPatchedUPX()
{
    var nResult=0;
    var nNumberOfFunctions=PE.getNumberOfImportThunks(0);
    if((nNumberOfFunctions>1)&&(nNumberOfFunctions<7))
    {
        if((PE.getSizeOfCode())&&(PE.getSizeOfUninitializedData())&&(PE.section.length>2)&&(PE.section[0].FileSize==0))
        {
            var nCount=0;
            if(PE.getImportFunctionName(0,0)=="LoadLibraryA")
            {
                nCount++;
            }
            if(PE.getImportFunctionName(0,1)=="GetProcAddress")
            {
                nCount++;
            }
            if(nNumberOfFunctions==4)
            {
                if(PE.getImportFunctionName(0,2)=="VirtualProtect")
                {
                    nCount++;
                }
                if(PE.getImportFunctionName(0,3)=="ExitProcess")
                {
                    nCount++;
                }
            }
            if((nNumberOfFunctions>=3)&&(nCount<4))
            {
                if(PE.getImportFunctionName(0,2)=="ExitProcess")
                {
                    nCount++;
                }
                else if(PE.isDll())
                {
                    if(PE.getImportFunctionName(0,2)=="VirtualProtect")
                    {
                        nCount++;
                    }
                }
            }
            if(nNumberOfFunctions==6)
            {
                if(PE.getImportFunctionName(0,2)=="VirtualProtect")
                {
                    nCount++;
                }
                if(PE.getImportFunctionName(0,3)=="VirtualAlloc")
                {
                    nCount++;
                }
                if(PE.getImportFunctionName(0,4)=="VirtualFree")
                {
                    nCount++;
                }
                if(PE.getImportFunctionName(0,5)=="ExitProcess")
                {
                    nCount++;
                }
            }

            if((nCount==2)&&(nNumberOfFunctions==2))
            {
                nResult=1;
            }
            if((nCount==3)&&(nNumberOfFunctions>=3))
            {
                nResult=1;
            }
            if((nCount==4)&&(nNumberOfFunctions==4))
            {
                nResult=1;
            }
            if((nCount==6)&&(nNumberOfFunctions==6))
            {
                nResult=1;
            }

            if(nResult)
            {
                if(PE.getAddressOfEntryPoint()==0x00001018)
                {
                    // (Win)Upack
                    nResult=0;
                }
            }
        }
    }

    return nResult;
}

function getUPXOptions(nOffset)
{
    var nMethod=PE.readByte(nOffset+2);
    var nLevel=PE.readByte(nOffset+3);
    var sCompression="";
    switch(nMethod) // From http://sourceforge.net/p/upx/code/ci/default/tree/src/conf.h
    {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10: sCompression="NRV"; break;
    case 14: sCompression="LZMA"; break;
    case 15: sCompression="zlib"; break;
    }

    if(sCompression!="")
    {
        sOptions=sOptions.append(sCompression);
        if(nLevel==8)
        {
            sOptions=sOptions.append("best");
        }
        else
        {
            sOptions=sOptions.append("brute");
        }
    }
}

function getUPXVersion()
{
    var nOffset1=PE.findString(0,1024,"$Id: UPX ");
    var nOffset2=PE.findString(0,1024,"UPX!");
    if(nOffset2!=-1)
    {
        getUPXOptions(nOffset2+4);
    }

    if(nOffset1!=-1)
    {
        sVersion=PE.getString(nOffset1+9,4);
    }
    if((sVersion=="")&&(nOffset2!=-1))
    {
        sVersion=PE.getString(nOffset2-5,4);
    }

    if (sVersion != "") {
        if((+sVersion).toString() != sVersion) {
            if (PE.isPEPlus()) {
                sVersion="3.91+";
            } else {
                sVersion="0.89+";
            }
            sOptions="modified";
        }
    }
}

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(!PE.isPEPlus())
    {
        var nEP=PE.compareEP("807C")?27:0;
        if(PE.compareEP("60BE........8DBE........57",nEP))
        {
            bDetected=1;
        }
        else if(PE.compareEP("60e8000000005883e8..508db8........578db0........83cd..31db9090909001db75"))
        {
            sVersion="0.70";
            bDetected=1;
        }
    }
    else
    {
        var nEP=PE.compareEP("4889")?24:0;
        if(PE.compareEP("53565755488D35........488DBE........57",nEP))
        {
            bDetected=1;
        }
    }

    getUPXVersion();
    if(sVersion!="")
    {
        bDetected=1;
    }

    if(!bDetected)
    {
        bDetected=isPatchedUPX();
    }

    if((bDetected)&&(sVersion==""))
    {
        if(PE.isPEPlus())
        {
            sVersion="3.91+"; // UPX 3.91 was the first version with a PE+ support.
        }
        sOptions="modified";
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("scrambler","UPXFreak");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("BE........83C601FFE60000"))
    {
        sVersion="0.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("scrambler","UPXcrypter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("BF......0081FF......007410812F..00000083C704BB05....00FFE3BE......00FFE600000000"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","UPolyX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("81FD00FBFFFF83D1..8D142F83FDFC76..8A02428807474975"))
    {
        sVersion="0.x";
        bDetected=1;
    }
    else if(PE.compareEP("E2..FF..0000000000000000000000000000"))
    {
        sVersion="0.1";
        nDetected=1;
    }
    else if(PE.compareEP("558BEC..00BD46008B..B9..00000080....51"))
    {
        sVersion="0.5";
        bDetected=1;
    }
    else if(PE.compareEP("BB........83EC04891C24..B9..0000008033"))
    {
        sVersion="0.5";
        bDetected=1;
    }
    else if(PE.compareEP("E8000000005983C10751C3C3"))
    {
        sVersion="0.5";
        bDetected=1;
    }
    else if(PE.compareEP("EB01C3"))
    {
        sVersion="0.5";
        bDetected=1;
    }
    else if(PE.compareEP("83EC0489..2459....000000"))
    {
        sVersion="0.5";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","UltraPro");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("A1........85C00F853B0600005556C705........01000000FF15"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(PE.compareEP("60E8070000006168....4000C383042418C32083B8ED2037EFC6B979379E61"))
    {
        sVersion="0.75";
        bDetected=1;
    }
    else if(PE.compareEP("83EC04C7042400......C300....000000000000000000000000....001000000002000001"))
    {
        sVersion="1.03-1.10";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("scrambler","UnoPiX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E8070000006168........C383042418C3"))
    {
        sVersion="0.75";
        bDetected=1;
    }
    
    var nLastSection=PE.nLastSection;
    if(nLastSection>=2)
    {
        var nVirtualSize=PE.section[nLastSection].VirtualSize;
        if(nVirtualSize==0x1000)
        {
            var nRawSize=PE.section[nLastSection].FileSize;
            if(nVirtualSize==nRawSize)
            {
                var nFlags=PE.section[nLastSection].Characteristics;
                if((nFlags==0xe0000040)&&(PE.section[nLastSection].Name=="")&&(PE.getMajorLinkerVersion()==0)&&(PE.getMinorLinkerVersion()==0))
                {
                    sVersion="0.94";
                    bDetected=1;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","VBox");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("ff7424..ff7424..ff7424..68........68........68........68........ff15........68........ffd0c2"))
    {
        if(PE.isLibraryPresent("vboxp410.dll"))
        {
            sVersion="4.10";
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","VCasm-Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC6AFF68........68........64A1000000005064892500000000E803000000"))
    {
        sVersion="1.0X";
        bDetected=1;
    }
    else if(PE.compareEP("EB..'[VProtect]'"))
    {
        if(PE.compareEP("..0A"))
        {
            sVersion="1.0e";
        }
        else if(PE.compareEP("..0B"))
        {
            sVersion="1.1-1.2";
        }
        else
        {
            sVersion="1.X";
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

// 16:27 26.01.2013 detect improved //ajax
//  2:30 27.01.2013 bugfixes
// 14:14 27.01.2013 bugfixes
// 2022/10 new detect hypn0 <hypn0@mail.ru>

init("protector","VMProtect");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nNumberOfSections=PE.getNumberOfSections();

    var sVMPSectionName;

    for(var i=nNumberOfSections-1;i>=0;i--)
    {
        if(i==PE.getRelocsSection())
        {
            continue;
        }
        if(i==PE.getResourceSection())
        {
            continue;
        }

        if(PE.getSectionName(i)!="")
        {
            sVMPSectionName=PE.getSectionName(i);

            if(     (i>0)&&
                    (sVMPSectionName==".vmp0"))
            {
                bDetected=true;

                break;
            }
            else if((i>1)&&
                    (sVMPSectionName.substr(sVMPSectionName.length-1)=="1"))
            {
                var sCollision=PE.getSectionNameCollision("0","1");

                if(PE.isSectionNamePresent(sCollision+"1"))
                {
                    bDetected=true;

                    break;
                }
            }
            else if((i>2)&&
                    (sVMPSectionName.substr(sVMPSectionName.length-1)=="2"))
            {
                var sCollision=PE.getSectionNameCollision("1","2");

                if( PE.isSectionNamePresent(sCollision+"1")&&
                    PE.isSectionNamePresent(sCollision+"0"))
                {
                    bDetected=true;

                    break;
                }
            }
            else if((i>3)&&
                    (sVMPSectionName.substr(sVMPSectionName.length-1)=="3"))
            {
                var sCollision=PE.getSectionNameCollision("2","3");

                if( PE.isSectionNamePresent(sCollision+"2")&&
                    PE.isSectionNamePresent(sCollision+"1")&&
                    PE.isSectionNamePresent(sCollision+"0"))
                {
                    bDetected=true;

                    break;
                }
            }
        }

        break;
    }

    if(bDetected)
    {
        if(PE.is64())
        {
            sVersion="2.XX-3.XX";
        }

        if(sVMPSectionName!="")
        {
            if((sVMPSectionName.substr(sVMPSectionName.length-1)=="0"))
            {
                sOptions="Min protection";
            }
        }

        if(PE.isImportPositionHashPresent(-1,0x1ff3103f))
        {
            sVersion="1.70";
        }
        else if(PE.isImportPositionHashPresent(-1,0x0c16df2d))
        {
            sVersion="1.70";
            sOptions="Max protection";
        }
        else if(PE.isImportPositionHashPresent(-1,0x9d12b153))
        {
            sVersion="2.0.3-2.13";
        }
        else if(PE.isImportPositionHashPresent(-1,0x1e5500c1))
        {
            sVersion="3.0.0";
        }
        else if(PE.isImportPositionHashPresent(-1,0xc5fb6a4b))
        {
            sVersion="3.0.9";
        }
        else if(PE.isImportPositionHashPresent(-1,0x5caa99c7))
        {
            sVersion="3.2.0-3.5.0";
        }
    }
    
    if((!bDetected)&&(PE.isDeepScan())&&(PE.isVerbose()))
    {
        var da = "";
        var das = "";
        var res = 0;
        var jmp = 0;
        var ep = PE.OffsetToVA(PE.getEntryPointOffset());
        var count = 0;

        while ((das.substr(0,das.indexOf('+')) != "MOV EDX, DWORD PTR [EAX*4 ") &&
               (das.substr(0,das.indexOf('+')) != "MOV EBX, DWORD PTR [EAX*4 ") &&
               (das.substr(0,das.indexOf('+')) != "MOV ECX, DWORD PTR [EAX*4 ") && count < 1000)
        {
            count++;
            var byte = PE.readByte(PE.VAToOffset(ep));
            var da = PE.getDisasmString(ep);
            var das = da;

            if(da.indexOf(' ') !=-1)
            {
                da=da.substr(0,da.indexOf(' '));
            }

            if((byte==0xFF && da =="JMP") || ((byte==0xC3 || byte==0xC2) && da =="RET"))
            {
                var fresh=1; break;
            }

            if(byte==0xFF && da =="CALL") {break;}

            if(da.indexOf(' ') !=-1)
            {
                da=da.substr(0,da.indexOf(' '));
            }

            if(da=="CLC" || da=="CMC") {res++;}
            if(da=="PUSHFD") {res++;}
            if(da=="PUSHAL") {res++;}
            if(da=="XOR") {res++;}
            if(da=="NEG" || da=="NOT") {res++;}
            if(da=="SAR" || da=="SAL") {res++;}
            if(da=="JMP" || da=="CALL") {jmp++;}
            if(da=="BT" || da=="BTR" || da=="BTS" || da=="BTC") {res++;}
            if(da=="BSF" || da=="BSR" || da=="BSWAP") {res++;}
            if(da=="ROL" || da=="ROR" || da=="RCL" || da=="RCR") {res++;}

            ep = PE.getDisasmNextAddress(ep);
        }

        if(res > 10 && count < 200)
        {
            sOptions = "count "+count;
            if(fresh==1) {sVersion = "new " + res+" jmp "+jmp;} else {sVersion = "old " + res+" jmp "+jmp;}
            bDetected=1;
            sOptions="DS";
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}

function detectVMP(sSectionName)
{
    if(PE.section[sSectionName])
    {
        nCharacteristics=PE.section[sSectionName].Characteristics;
        if((nCharacteristics==0x60000060)||(nCharacteristics==0xE0000060)||(nCharacteristics==0xE0000040)||(nCharacteristics==0x68000060)||(nCharacteristics==0xe2000060))
        {
            return 1;
        }
    }

    return 0;
}

function detectVMP2()
{
    if(PE.section.length>7)
    {
        var nCount=5;
        var nResource=PE.getResourceSection();
        var nRelocs=PE.getRelocsSection();

        if(nResource>PE.section.length-nCount)
        {
            nCount++;
        }
        if(nRelocs>PE.section.length-nCount)
        {
            nCount++;
        }

        var nDetectCount=0;
        var nLastVMPSection=0;

        for(var nSection=PE.section.length-nCount;nSection<PE.section.length;nSection++)
        {
            if((nSection==nResource)||(nSection==nRelocs))
            {
                continue;
            }
            if((PE.section[nSection].FileSize==0)&&(PE.section[nSection].FileOffset==0))
            {
                nDetectCount++;
            }

            if((PE.section[nSection].FileSize!=0)&&(PE.section[nSection].FileOffset!=0))
            {
                nLastVMPSection=nSection;
            }
        }

        if(nDetectCount>=3)
        {
            if(PE.getEntryPointSection()==nLastVMPSection)
            {
                if(PE.section[nLastVMPSection].Characteristics==0xE0000060)
                {
                    if(PE.calculateEntropy(PE.section[nLastVMPSection].FileOffset,PE.section[nLastVMPSection].FileSize)>7.6)
                    {
                        return 1;
                    }
                }
                else if(PE.section[nLastVMPSection].Characteristics&0x20000000) // Fix sent Deniskore
                {
                    var nSectionOffset=PE.section[nLastVMPSection].FileOffset;
                    var nSectionSize=PE.section[nLastVMPSection].FileSize;
                    var nOffset=nSectionOffset;
                    var nSize=nSectionSize;
                    var nCount=0;
                    var nSignatureOffset;
                    while(nSize>0)
                    {
                        nSignatureOffset=PE.findSignature(nOffset,nSize,"9c8d64");
                        if(nSignatureOffset==-1)
                            break;
                        nCount++;
                        nOffset=nSignatureOffset+3;
                        nSize=nSectionSize-(nSignatureOffset-nSectionOffset);
                        if(nCount>=2)
                        {
                            return 1;
                        }
                    }
                }
            }
        }
    }

    return 0;
}

function detect_old(bShowType,bShowVersion,bShowOptions)
{
    var nSectionNumber=0;
    var nCharacteristics=0;
    var collision="";

    if(PE.section[".vmp0"]&&(PE.compareEP("68........E9")||PE.compareEP("68........E8")))
    {
        sVersion="1.60-2.05";
        bDetected=1;
    }
    else if(detectVMP(".vmp0"))
    {
        bDetected=1;
    }
    else if(detectVMP(".vmp1"))
    {
        bDetected=1;
    }
    else if(detectVMP(".vmp2"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("54c70424........9c60c74424..........c64424....887424..60"))
    {
        sVersion="2.06";
        bDetected=1;
    }
    else if(PE.compareEP("e8$$$$$$$$e9$$$$$$$$880424881c24c70424........9ce8"))
    {
        sVersion="2.07";
        bDetected=1;
    }
    else if(PE.compareEP("9ce8$$$$$$$$e8$$$$$$$$c74424..........e9$$$$$$$$e8$$$$$$$$c74424..........526068"))
    {
        sVersion="2.12-13";
        bDetected=1;
    }
    else if(PE.compareEP("9c9cc74424..........9cc74424..........9c528d6424..e9"))
    {
        sVersion="2.12-13";
        bDetected=1;
    }
    else if(PE.compareEP("68........e8$$$$$$$$41574150448ac350410f96c057415148c7c7"))
    {
        sVersion="3.0x";
        bDetected=1;
    }
    else
    {
        collision=PE.getSectionNameCollision("0","1");

        if(collision!="")
        {
            if((PE.compareEP("68........E9")||PE.compareEP("68........E8")))
            {
                sVersion="1.X";
                bDetected=1;
            }
            else if((PE.compareEP("9cE9")||PE.compareEP("9cFF")))
            {
                sVersion="2.X";
                bDetected=1;
            }
            else if(detectVMP(collision+"0")&&detectVMP(collision+"1"))
            {
                bDetected=1;
            }
        }
        if(!bDetected)
        {
            if(detectVMP2())
            {
                sVersion="2.X";
                bDetected=1;
            }
        }
    }

    if(bDetected)
    {
        if(PE.section.length<3)
        {
            bDetected=0;
        }
        else if(PE.section.length==3)
        {
            if(PE.section[0].FileSize==0)
            {
                bDetected=0;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","VMWare");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("'RWMV'"))
    {
        if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb........3bc774..85c374..f7d0"))
        {
            sName+=" Installation Launcher";
            bDetected=1;
        }
        else if(PE.compareEP("e8$$$$$$$$558bec83ec..a1........8365....8365....5357bf........3bc7bb........74..85c374..f7d0"))
        {
            sName+=" Installation Launcher";
            bDetected=1;
        }
        else if(PE.compareEP("4883ec..e8$$$$$$$$48895c24..574883ec..488b05........48836424....48bf................483bc774..48f7d0"))
        {
            sName+=" Installation Launcher";
            bDetected=1;
        }
        else if(PE.compareEP("e8$$$$$$$$558bec83ec..8365....8365....a1........5657bf........be........3bc7"))
        {
            sName+=" Installation Launcher";
            bDetected=1;
        }
    }

    if(PE.isOverlayPresent()&&PE.compareEP("e8$$$$$$$$558bec83ec..a1........8365....8365....5357bf........3bc7bb........74..85c374..f7d0"))
    {
        var nSize=Math.min(PE.getOverlaySize(), 0x100);
        if(PE.findString(PE.getOverlayOffset(), nSize, "BZh91AY&")!=-1)
        {
            sName+=" Software Installer";
            sOptions="bzip2";
            bDetected=1;
        }
        else if(PE.findSignature(PE.getOverlayOffset(), nSize, "d0cf11e0a1b11ae1")!=-1)
        {
            sName+=" Software Installer";
            sOptions="MS Compound";
            bDetected=1;
        }
    }

    if(bDetected)
    {
        sVersion=PE.getFileVersion();
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","VPacker");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60e8$$$$$$$$558bec83c4..5356578b45..83c0..8b008945..837d....75..e8........8945..e8........8b10"))
    {
        sVersion="0.02.10";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: A.S.L  <asl@onet.eu>

init("protector","VaySoft PDF to EXE Converter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BECB9"))
    {
        if(PE.compareOverlay("255B484220322A"))
        {
            sOptions="PDF Adv.Xor Ovl.";
            sVersion=6.82;
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// sign by A.S.L  - asl@onet.eu
// fixed by adoxa

init("protector","Vbs To Exe");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.resource["D"])
    {
        if(PE.compare("'2edecompile'", PE.resource["D"].Offset+2))
        {
            sVersion="v2.0.2.0";
            bDetected=1;
        }
        else if(PE.resource["D"].Size==14 &&
                PE.isResourceNamePresent("B") &&
                PE.isResourceNamePresent("F") &&
                PE.isResourceNamePresent("I") &&
                PE.isResourceNamePresent("N") &&
                PE.isResourceNamePresent("O"))
        {
            sVersion="v2.0.2.0";
            bDetected=1;
        }
        if(bDetected)
        {
            if(PE.resource["P"])
            {
                sOptions="Protected";
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Virtual Pascal");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("b9........b8........e8$$$$$$$$83ec..fc51e8"))
    {
        sVersion="2.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Vise");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83ec..5356578965..ff15"))
    {
        if(PE.compareOverlay("'ESIV'"))
        {
            bDetected=1;
        }
        else if(PE.compare("'SIVM'",0xf000))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
init("compiler","Visual Objects");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compare("'This Visual Objects application cannot be run in DOS mode'",0x312))
    {
        sVersion="2.XX";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","Visual Prolog");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec57dbe3d92d........68........e8........8325..........75..6a..eb..33c066a1........50e8........8038"))
    {
        sVersion="5.2";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: DosX

function detect() {
    if (PE.isNET() && PE.isNETStringPresent("Guna.UI2") && PE.isNETStringPresent("Guna.UI2.WinForms"))
        _setResult("library", "Guna UI", "v2.X", "");
}// DIE's signature file
// Author: DosX

function detect() {
    if (PE.isNET() && PE.isNETStringPresent("MetroFramework"))
        _setResult("library", "MetroFramework UI", "", "");
}// DIE's signature file
// Author: DosX

function detect() {
    if (PE.isNET() && PE.isNETStringPresent("MaterialSkin"))
        _setResult("library", "MaterialSkin UI", "", "");
}// DIE's signature file

init("packer","WWPACK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("53558BE833DBEB60'\r\n\r\nWWPack32'"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","Watcom C/C++");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compare(/*[Tt]*/"'his is a Windows '"/*(?:95|NT)*/,0x4f))
    {
        bDetected=1;
    }
    else if(PE.findString(PE.nEP,32,"watcom")!=-1)
    {
        bDetected=1;
    }
    else if(PE.compareEP("e9$$$$$$$$5351525589e583ec..b8........e8........a1........83c0..24..31d229c489e18b1d"))
    {
        sOptions="1995 by Watcom International";
        bDetected=1;
    }
    else if(PE.compareEP("e9$$$$$$$$535657558b7c24..8b7424..8b6c24..83fe..0f87........89f02eff"))
    {
        sOptions="1995 DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("e9$$$$$$$$535657558b7424..8b7c24..8b6c24..83ff..0f87........89f82eff"))
    {
        sOptions="1995 DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("e9$$$$$$$$535589e583ec..b8........e8........a1........83c0..24..29c489e38b15"))
    {
        sOptions="1995 EXE32, console";
        bDetected=1;
    }
    else if(PE.compareEP("e9$$$$$$$$535152565783ec..e8........a3........894424..8d4424..31dbe8"))
    {
        sOptions="1995 EXE32, console";
        bDetected=1;
    }
    else if(PE.compareEP("e9$$$$$$$$535657558b7424..8b7c24..8b6c24..83ff..0f87........2eff"))
    {
        sOptions="2000 DLL32";
        bDetected=1;
    }
    else if(PE.compareEP("c705................e9$$$$$$$$5351525589e583ec..b8........e8........a1........83c0..24..31d229c489e1"))
    {
        sOptions="1995 EXE32";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","WiX Toolset installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("'MSCF'00000000"))
    {
        if(PE.compareEP("e8$$$$$$$$558bec83ec..a1........8365....8365....5657bf........be........3bc774..85c674..f7"))
        {
            bDetected=1;
        }
        else if(PE.compareEP("e8$$$$$$$$558bec83ec..8365....8365....a1........5657bf........be........3bc774..85c674..f7"))
        {
            bDetected=1;
        }
        else if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb........3bc774..85c374..f7"))
        {
            bDetected=1;
        }
        else if(PE.isSectionNamePresent(".wixburn"))
        {
            sVersion="1.0";
            bDetected=1;
        }
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: sendersu
/*
If errors pls contact sendersu on cracklab.team
*/

init("protection","Wibu Codemeter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nFound=0;
    var nOffset;

    for(var i=0;i<=PE.nLastSection;i++)
    {
        nOffset=PE.section[i].FileOffset;
        sSection=PE.section[i].Name;
        if(sSection=="__wibu00")
        {
            ++nFound;
        }
        else if(sSection=="__wibu01")
        {
            ++nFound;
        }
        // actually you may see many more __wibuXX sections,
        // we test just first two
        if(nFound==2)
        {
            bDetected=1;
            break;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("sfx","WinACE");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(/WinACE|UNACE/i.test(PE.getVersionStringInfo("InternalName")))
    {
        sVersion=PE.getVersionStringInfo("FileVersion");
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","WinIMP");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("51526a..2eff15........506a..6a..2eff15........50e8........502eff15........5a59c3"))
    {
        if(PE.compareOverlay("'IMP'0a"))
        {
            sOptions="1999 by Technelysium Pty Ltd";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","WinImage");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("64a1........558bec6a..68........68........50a1........648925........8b0d........83ec..89018b15"))
    {
        if(PE.compareOverlay("'RsDl'"))
        {
            sOptions="1998 by Gilles Vollant";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","WinKript");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("33C08BB8........8B90........85FF74..33C950EB..8A0439C0C8..34..880439413BCA72..58"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","WinPatch Apply Program by Artistry, Inc.");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83....535657"))
    {
        if(PE.compareOverlay("'@Daisy@Lucy@xyzzy@'................1f8b08"))
        {
            sOptions="1996-1998 (gzip)";
            bDetected=1;
        }
        else if(PE.compareOverlay("'@Daisy@Lucy@xyzzy@'1f8b08"))
        {
            sOptions="1996-1998 (gzip)";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","WinRAR Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e8$$$$$$$$558bec83c4..b8........53"))
    {
        if(PE.compareOverlay("'***messages***'"))
        {
            bDetected=1;
        }
    }
    else if(PE.compareEP("a1........c1e0..a3........575133c0bf........b9........3bcf76..2bcffcf3aa595f"))
    {
        if(PE.compareOverlay("'Rar!'1a"))
        {
            bDetected=1;
        }
    }
    if(PE.compareOverlay("fffe2a002a002a006d0065007300730061006700650073002a002a002a00"))
    {
        sOptions="Unicode";
        if(PE.compareEP("4883ec..e8$$$$$$$$48895c24..55488bec4883ec..488365....48bb................488b05........483bc375"))
        {
            sVersion="5.x";
            bDetected=1;
        }
        else if(PE.compareEP("e8$$$$$$$$558bec83ec..8365....8365....a1........5657bf........be........3bc7"))
        {
            sVersion="5.x";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("sfx","WinRAR");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("'Rar!'"))
    {
        if((PE.resource["STARTDLG"]&&PE.resource["LICENSEDLG"])||(PE.resource["INSTALL"]&&PE.resource["SETUP"]))
        {
            bDetected=1;
        }
    }
    if(PE.compareEP("e8$$$$$$$$53bb........e8........85c074..33d28a1083fa..75..40eb"))
    {
        if(PE.compareOverlay("'Rar!'1a"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","(Win)Upack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("BE........AD8BF895A533C033"))
    {
        sVersion="0.1x/0.20/0.21/0.24 beta";
        bDetected=1;
    }
    else if(PE.compareEP("BE........AD8BF86A0495A533C0AB"))
    {
        sVersion="0.21 beta";
        bDetected=1;
    }
    else if(PE.compareEP("BE........AD8BF895AD91F3A5ADB5"))
    {
        sVersion="0.24-0.27 beta/0.28 alpha";
        bDetected=1;
    }
    else if(PE.compareEP("BE........AD50FF7634EB7C4801"))
    {
        switch(PE.readByte(PE.nEP+62))
        {
        case 0x37: sVersion="0.37 beta";  break;
        case 0x38: sVersion="0.38 beta";  break;
        case 0x39: sVersion="0.39 final"; break;
        case 0x3A: sVersion="0.399";      break;
        }
        bDetected=1;
    }
    else if(PE.compareEP("6A07BE........AD8BF85995F3A5"))
    {
        sVersion="0.22/0.23 beta";
        bDetected=1;
    }
    else if(PE.compareEP("BE........AD50..AD91F3A5"))
    {
        sVersion="0.32 beta";
        sOptions="Patch";
        bDetected=1;
    }
    else if(PE.compareEP("BE........AD50..AD91..F3A5"))
    {
        sVersion="0.32 beta";
        bDetected=1;
    }
    else if(PE.compareEP("BE........AD50....AD91F3A5"))
    {
        sVersion="0.32 beta";
        bDetected=1;
    }
    else if(PE.compareEP("BE........FF36E9C3000000"))
    {
        sVersion="0.36 beta";
        bDetected=1;
    }
    else if(PE.compareEP("60E809000000..................33C95E870E"))
    {
        sOptions="Alt stub";
        bDetected=1;
    }
    else if(PE.compare("4D5A4C6F61644C696272617279410000504500004C0102004B45524E454C3332"))
    {
        sVersion="0.33";
        bDetected=1;
    }
    else if(PE.compare("4D5A4B45524E454C33322E444C4C00004C6F61644C696272617279410000000047657450726F63416464726573730000"))
    {
        sVersion="0.32";
        bDetected=1;
    }
    else if(PE.compare("4D5A4B45524E454C33322E444C4C00005045"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("sfx","WinZip");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("ff15........b1..380874..b1..4080....74..380874..4080....75..80....74..4033"))
    {
        sVersion="6.x";
        bDetected=1;
    }
    else if(PE.compareEP("53ff15........b3..38..74..80c3..4033d28a083aca74..3acb74..408a083aca75"))
    {
        if(PE.findSignature(PE.getOverlayOffset(),Math.min(255,PE.getOverlaySize()),"504b0304")!=-1)
        {
            sVersion="2.2";
        }
        else if(PE.compareEP("8A48014033D23ACA740A3ACB74068A4801",16))
        {
            sVersion="8.x";
        }
        bDetected=1;
    }
    else if(PE.compareEP("53ff15........b3..38..74..80c3..8a48..4033d23aca74..3acb74..8a48..40"))
    {
        sVersion="8.x";
        bDetected=1;
    }
    else if(PE.compareEP("e8$$$$$$$$558bec83ec..a1........8365....8365....5357bf........3bc7bb........74..85c374..f7d0"))
    {
        for(var i=0;i<PE.resource.length;i++)
        {
            if(PE.resource[i].Type!="RT_DIALOG")
            {
                var nSize=Math.min(PE.resource[i].Size, 0x1100);
                var ArcOffset=PE.findSignature(PE.resource[i].Offset, nSize, "'PK'0304");
                if(ArcOffset!=-1)
                {
                    bDetected=1;
                    break;
                }
            }
        }
        if(PE.isSectionNamePresent("_winzip_"))
        {
            bDetected=1;
        }
    }
    if(PE.isSectionNamePresent("_winzip_"))
    {
        var nOffset=PE.getSectionFileOffset(PE.getSectionNumber("_winzip_"));
        var ArcOffset=PE.findSignature(nOffset, 0x1000, "'PK'0304");
        if(ArcOffset!=-1)
        {
            sVersion="3.1";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Winamp Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("81ec........a1........8b0d........8b15........53894424..a1........894c24..8a0d........555657894424..884c24..b9"))
    {
        sVersion="1.0";
        sOptions="1997-98 by Nullsoft, Inc.";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Wind of Crypt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC83C4EC53........8945ECB8........E828EAFFFF33C05568"))
    {
        sVersion="1.0";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("sign tool","Windows Authenticode");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("........00020200"))
    {
        sVersion="2.0";
        sOptions="PKCS #7";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("installer","Windows Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    for(var i=0;i<PE.resource.length;i++)
    {
        if(PE.compare("D0CF11E0A1B11AE1",PE.resource[i].Offset))
        {
            var nOffset=PE.findString(PE.resource[i].Offset,PE.resource[i].Size,"Windows Installer");
            if(nOffset!=-1)
            {
                var aVersion=PE.getString(nOffset).match(/ XML \((.*?)\)/);
                if(aVersion)
                {
                    sOptions="XML";
                    sVersion=aVersion[1];
                }
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("emulator","Wine");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compare("'Wine'",0x40))
    {
        bDetected=1;
        sVersion="1.X";
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("installer","Wise Installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.getOverlaySize()>80)
    {
        var nOffset=PE.getOverlayOffset()+77;
        if(PE.readDword(nOffset)==PE.getSize())
        {
            bDetected=1;
        }
        else if(PE.section[".WISE"])
        {
            bDetected=1;
        }
        else if(PE.compareEP("558bec81ec........5356576a..ff15........ff15........8bf08975..8a063c..0f85........8a46..46"))
        {
            bDetected=1;
        }
        else if(PE.compareEP("558bec81ec........5356576a..5e6a..8975..ff15........ff15........8bf8897d..8a073c..0f85........8a47..47"))
        {
            bDetected=1;
        }
    }
    else if(PE.compareEP("81ec........535556576a..ff15........33db895c24..895c24..895c24..895c24..895c24..ff15........8a08894424"))
    {
        if(PE.isSectionNamePresent(".WISE"))
        {
            sOptions="CAB";
            bDetected=1;
        }
    }
    if(PE.compareEP("558bec81ec........53565733f6466a..8975..ff15........ff15........8bf88a07"))
    {
        if(PE.findSignature(PE.getOverlayOffset(),0x1000,"'Wise Installation Wizard...'")!=-1)
        {
            bDetected=1;
        }
    }
    if(PE.isSectionNamePresent(".WISE"))
    {
        if(PE.findSignature(PE.getSectionFileOffset(PE.getSectionNumber(".WISE")), 0x1000, "'Wise Installation Wizard...'")!=-1)
        {
            bDetected=1;
        }
    }
    if(PE.compareEP("64a1........558bec6a..68........68........50648925........83ec..5356578965..ff15"))
    {
        var nOffset=PE.getOverlayOffset();
        var nZipsig=PE.findSignature(nOffset,0x1000,"504b0304");
        if(nZipsig!=-1)
        {
            sOptions="ZIP";
            bDetected=1;
        }
        else if(PE.compareOverlay("'MSCF'0000"))
        {
            sOptions="CAB";
            bDetected=1;
        }
    }
    if(PE.compareEP("558bec81ec........538d85........5633db57be........565053ff15........568d85........5050ff15........538d8d........536a..536a..68........51ff15"))
    {
        bDetected=1;
    }
    if(PE.compareEP("558bec81ec........538d85........565733f668........5056ff15........68........8d8d........5151ff15........568d8d........568b3d........6a..566a..68"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","XCR");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("9371..EB$$EB$$8BD878$$EB$$9C33C0EB$$74$$EB$$6079..EB$$E8$$$$$$$$83C4..E8$$$$$$$$8D05........EB$$5D85ED75"))
    {
        sVersion="0.13";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","XComp");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.getNumberOfImports()==1
     &&PE.getNumberOfImportThunks(0)==5
     &&PE.getImportFunctionName(0,0)=="GetProcAddress"
     &&PE.getImportFunctionName(0,1)=="LoadLibraryA"
     &&PE.getImportFunctionName(0,2)=="VirtualAlloc"
     &&PE.getImportFunctionName(0,3)=="VirtualFree"
     &&PE.getImportFunctionName(0,4)=="VirtualProtect")
    {
        if(PE.compareEP("68........9C60E8$$$$$$$$E8$$$$$$$$5B5D833B00"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","XPACK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.getNumberOfImports()==1
     &&PE.getNumberOfImportThunks(0)==3
     &&PE.getImportFunctionName(0,0)=="GetProcAddress"
     &&PE.getImportFunctionName(0,1)=="LoadLibraryA"
     &&PE.getImportFunctionName(0,2)=="VirtualProtect")
    {
        if(PE.compareEP("68........9C60E8$$$$$$$$E8$$$$$$$$5B5D833B00"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: KDSS-Research

init("GameEngine","Xash3D");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (!PE.isSectionNamePresent(".data")){
        return null;
    }
    var n1=PE.findString(PE.section[".data"].FileOffset,PE.section[".data"].FileSize,"Xash Error")
    var n2=PE.findString(PE.section[".data"].FileOffset,PE.section[".data"].FileSize,"xash.dll")
    var n3=PE.findString(PE.section[".data"].FileOffset,PE.section[".data"].FileSize,"Unable to load the xash.dll")
    if (n1!=-1 && n2!=-1 && n3 !=-1){
        bDetected=1;
		
    }
    return result(bShowType,bShowVersion,bShowOptions);
}// DIE's signature file
// Author: sendersu
/*
If errors pls contact sendersu on cracklab.team
*/

/*
Alaska Software
https://www.alaska-software.com/
*/

init("compiler","Xbase++ Native Code Compiler");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (PE.isSectionNamePresent(".xpp"))
    {
       var nOffset=PE.section[".xpp"].FileOffset;
       var nSize=PE.section[".xpp"].FileSize;
       var nPresent=PE.findString(nOffset,nSize,"XBPEXCEPTION");

       if (nPresent != -1)
           bDetected=1;
    }

    if(PE.isLibraryPresent("XBTBase1.dll"))
	bDetected=1;

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Xenocode Postbuild");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNETStringPresent("Xenocode.Client.Attributes.AssemblyAttributes"))
    {
        sVersion="2.X-3.X";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jupiter

/*
Xojo GUI Framework
https://www.xojo.com
*/

init("framework","Xojo");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.section["xojoinit"])
    {
        // plugins
        if(PE.section["xojoplgn"])
        {
            sOptions=sOptions.append("plugins");
        }

        // x64 | x86
        if(PE.isLibraryPresent("XojoGUIFramework64.dll"))
        {
            sVersion="x64";
        }
        else if(PE.isLibraryPresent("XojoGUIFramework32.dll"))
        {
            sVersion="x86";
        }
        //sVersion="2018r2";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","Xoreax installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558becb9........6a..6a..4975..51535657b8........e8........33c055"))
    {
        for(var i=0;i<PE.getNumberOfResources();i++)
        {
            if(PE.resource[i].Type=="RT_RCDATA")
            {
                if(PE.compare("5d0000",PE.resource[i].Offset))
                {
                    bDetected=1;
                    break;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","Xtreamlok (SoftWrap)");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("9090eb$$525351565755e8000000005d81ed........e8$$$$$$$$6a..e9"))
    {
        sVersion="1.x-3.x";
        bDetected=1;
    }
    else if(PE.compareEP("90eb$$525351565755e8000000005d81ed........e8$$$$$$$$6a..e9"))
    {
        sVersion="1.x-3.x";
        bDetected=1;
    }
    else if(PE.compareEP("909090eb$$525351565755e8000000005d81ed........e8$$$$$$$$6a..e9"))
    {
        sVersion="1.x-3.x";
        bDetected=1;
    }
    else if(PE.compareEP("eb$$525351565755e8000000005d81ed........e8$$$$$$$$6a..e9"))
    {
        sVersion="1.x-3.x";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Xtreme-Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("B8........B9........5051E805000000E94A010000608B7424248B7C2428FCB2808A0646880747BB0200000"))
    {
        sVersion="1.06";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Yano");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNETStringPresent("YanoAttribute"))
    {
        sVersion="1.X";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","Yoda's Crypter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("60E8000000005D81ED........E8A1000000E8D1000000E885010000F785"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(PE.compareEP("60E8000000005D81ED........B9....00008DBD........8BF7"))
    {
        switch(PE.readWord(PE.nEP+14))
        {
        case 0x009E: sVersion="1.1"; break;
        case 0x097B: sVersion="1.2"; break;
        default:     sVersion="1.x";
        }
        bDetected=1;
    }
    else if(PE.compareEP("558BEC53565760E8000000005D81ED"))
    {
        if(PE.compareEP("E803000000EB01",19))
        {
            sVersion="1.0b";
            bDetected=1;
        }
        else if(PE.compareEP("B9",19))
        {
            sVersion="1.3";
            bDetected=1;
        }
    }
    else if(PE.compareEP("558BEC81ECC00000005356578DBD40FFFFFFB930000000B8CCCCCCCCF3AB60"))
    {
        sVersion="1.3";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Yoda's Protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC535657E8$$$$$$$$E8$$$$$$$$33C064FF30648920CCC3"))
    {
        sVersion="1.01";
        bDetected=1;
    }
    else if(PE.compareEP("E8$$$$$$$$BB........E8$$$$$$$$E8$$$$$$$$33c064ff306489204bccc3"))
    {
        sVersion="1.02-1.03";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Levis

/*
Created by Levis <levintaeyeon@live.com> - Site: http://ltops9.wordpress.com
*/

init("protector","Yummy Game SoftwareShield");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("31C0E9B9FFFFFFC3"))
    {
        sVersion="5.x";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","Zig");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compare("'MZ'78000100000004000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000780000000E1FBA0E00B409CD21B8014CCD21'This program cannot be run in DOS mode.$'0000'PE'0000"))
    {
        if((PE.section[".rdata"])&&(PE.isDeepScan()))
        {
            var nOffset=PE.section[".rdata"].FileOffset;
            var nSize=PE.section[".rdata"].FileSize;
            var nVersionOffset=PE.findSignature(nOffset,nSize,"5A00490047005F00440045004200550047005F0043004F004C004F005200"); // Unicode ZIG_DEBUG_COLOR
            
            if(nVersionOffset!=-1)
            {
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","Zip SFX");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec6a..68........68........64a1........50648925........83....5356578965..ff15"))
    {
        if(PE.findSignature(PE.getOverlayOffset(),Math.min(255,PE.getOverlaySize()),"'PK'0304")!=-1)
        {
            bDetected=1;
        }
    }
    else if(PE.compareEP("558bec83c4..b8........e8........33c05568........64ff30648920e8"))
    {
        if(PE.resource.length)
        {
            if(PE.resource[0].Type==784) //ZIP
            {
                bDetected=1;
            }
        }
    }
    else if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb"))
    {
        if(PE.compareOverlay("'PK'0304"))
        {
            sOptions="by Intel";
            bDetected=1;
        }
    }
    if(PE.compareEP("558bec83c4..5356e8$$$$$$$$e8........6a..e8........8905........e8........8905"))
    {
        if(PE.compareOverlay("'PK'0304"))
        {
            sOptions="by C.Ghisler & Co.";
            bDetected=1;
        }
    }
    if(PE.compareEP("558becb8........e8........5356be........578d45..5633db5053ff15........85c00f84"))
    {
        if(PE.findSignature(PE.getOverlayOffset(),0x1000,"'PK'0304")!=-1)
        {
            sOptions="by Symantec";
            bDetected=1;
        }
    }
    if(PE.compareEP("83ec..5657ff15........8bf08d4424..50c74424..........ff15........8a068b3d........3c..75..56ffd7"))
    {
        if(PE.compareOverlay("'PK'0304"))
        {
            sName="SymW32SFX";
            sOptions="by Symantec";
            bDetected=1;
        }
    }
    if(PE.compareEP("558bec83ec..565733ffff15........8bf0897d..8d45..50ff15........8a063c..75..56ff15"))
    {
        if(PE.compareOverlay("'PK'0304"))
        {
            sName="Symantec EasyZIP SFX";
            bDetected=1;
        }
    }
    if(PE.compareEP("558bec83ec..56ff15........8bf08a003c..75..84c074..803e..74..46803e..75..803e..75..46eb"))
    {
        if(PE.findSignature(PE.getOverlayOffset(),0x2000,"'PK'0304")!=-1)
        {
            sOptions="Squeez SFX by SpeedProject 1995-1998"
            bDetected=1;
        }
    }
    if(PE.compareEP("6a..33c0505050ff15........50e8$$$$$$$$55b8........8bece8........53b9........5657be"))
    {
        if(PE.compareOverlay("'PK'0304"))
        {
            sOptions="EasyZIP SFX by AKSoft 1995-1996";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","ZipCentral SFX-32");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC83C4..33C089....B8........e8........33c05568........64....64....6a"))
    {
        if(PE.compareOverlay("'MPV*'"))
        {
            sVersion="2.0";
            sOptions=PE.getGeneralOptions();
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","Zprotect");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.section.length>3)
    {
        if((PE.section[0].FileOffset==0)&&(PE.section[0].FileSize==0))
        {
            if(!PE.isDosStubPresent())
            {
                if(PE.compare("6B65726E656C33322E646C6C000000005669727475616C416C6C6F6300000000",PE.section[1].FileOffset))
                {
                    sVersion="1.X";
                    bDetected=1;
                }
                else if((PE.getEntryPointSection()==1)&&(PE.calculateEntropy(PE.section[2].FileOffset,PE.section[2].FileSize)>7.6))
                {
                    sVersion="1.X";
                    bDetected=1;
                }
            }
        }
    }
// TODO EP NFD

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector",".BJFnt");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("EB01EA9CEB01EA53EB01EA51EB01EA52EB01EA56"))
    {
        sVersion="1.1b";
        bDetected=1;
    }
    else if(PE.compareEP("EB0269B183EC04EB03CD20EBEB01EB9CEB01EBEB"))
    {
        sVersion="1.2 RC";
        bDetected=1;
    }
    else if(PE.compareEP("EB033A4D3A1EEB02CD209CEB02CD20EB02CD2060"))
    {
        sVersion="1.3";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
function detect(bShowType,bShowVersion,bShowOptions)
{
    if (_isResultPresent("packer", "AHpacker") && _isResultPresent("packer", "ExE Pack")) {
        _removeResult("packer", "AHpacker");
    }

    if (_isResultPresent("linker", "Microsoft linker") && _isResultPresent("linker", "Turbo linker")) {
        _removeResult("linker", "Turbo linker");
    }

    if (_isResultPresent("tool", "Microsoft Visual Studio") && _isResultPresent("tool", "Borland Delphi")) {
        _removeResult("tool", "Borland Delphi");
    }

    if (_isResultPresent("packer", "Simple Pack") && _isResultPresent("compiler", "FASM")) {
        _removeResult("compiler", "FASM");
    }

    return "";
}		
includeScript("languages");

function detect(bShowType,bShowVersion,bShowOptions)
{
    handleLanguage();

    return "";
}		
// DIE's signature file

init("protector",".NET Reactor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.section[".reacto"])
    {
        if(PE.section[1].FileSize==0&&PE.section[2].FileSize==0&&PE.section[3].FileSize==0)
        {
            sVersion="2.0-2.1";
            bDetected=1;
        }
    }
    else if(PE.compareEP("558becb90f0000006a006a004975f951535657b8........e8"))
    {
        sVersion="2.X-3.X";
        bDetected=1;
    }
    else if(PE.resource["__"]&&PE.compareEP("e8$$$$$$$$8bff558bec83ec10"))
    {
        if(PE.compareEP("e8........e9........6a0c68"))
        {
            sVersion="4.2";
            bDetected=1;
        }
        else if(PE.compareEP("e8........e9........8bff558bec83ec208b45085657"))
        {
            sVersion="4.5-4.7";
            bDetected=1;
        }
    }
    else if(PE.isNET())
    {
        if(PE.isSignatureInSectionPresent(0,"558becb90f0000006a006a004975f951535657b8........e8"))
        {
            sVersion="3.X";
            bDetected=1;
        }
        else if(PE.section.length>=2)
        {
            if(PE.section[1].Characteristics==0xc0000040)
            {
                if(PE.isSignatureInSectionPresent(1,"5266686E204D182276B5331112330C6D0A204D18229EA129611C76B505190158"))
                {
                    sVersion="4.8-4.9";
                    bDetected=1;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector",".NET Spider");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isSignatureInSectionPresent(0,"'Protected_By_Attribute'00'NETSpider.Attribute'"))
        {
            sVersion="0.5-1.3";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer",".NETZ");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isSignatureInSectionPresent(0,"00'NetzStarter'00'netz'00"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("operation system","Windows");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (PE.isVerbose()) {
        sName = PE.getOperationSystemName();
        sVersion = PE.getOperationSystemVersion();
        sOptions = PE.getOperationSystemOptions();
        
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
/*
             ██████╗ ███████╗███╗   ██╗███████╗██████╗ ██╗ ██████╗
            ██╔════╝ ██╔════╝████╗  ██║██╔════╝██╔══██╗██║██╔════╝
            ██║  ███╗█████╗  ██╔██╗ ██║█████╗  ██████╔╝██║██║     
            ██║   ██║██╔══╝  ██║╚██╗██║██╔══╝  ██╔══██╗██║██║     
            ╚██████╔╝███████╗██║ ╚████║███████╗██║  ██║██║╚██████╗
             ╚═════╝ ╚══════╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝╚═╝ ╚═════╝
  ██╗    ██╗  ██╗███████╗██╗   ██╗██████╗ ██╗███████╗████████╗██╗ ██████╗    ██╗  
 ██╔╝    ██║  ██║██╔════╝██║   ██║██╔══██╗██║██╔════╝╚══██╔══╝██║██╔════╝    ╚██╗ 
██╔╝     ███████║█████╗  ██║   ██║██████╔╝██║███████╗   ██║   ██║██║          ╚██╗
╚██╗     ██╔══██║██╔══╝  ██║   ██║██╔══██╗██║╚════██║   ██║   ██║██║          ██╔╝
 ╚██╗    ██║  ██║███████╗╚██████╔╝██║  ██║██║███████║   ██║   ██║╚██████╗    ██╔╝ 
  ╚═╝    ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═╝╚══════╝   ╚═╝   ╚═╝ ╚═════╝    ╚═╝  
           █████╗ ███╗   ██╗ █████╗ ██╗  ██╗   ██╗███████╗██╗███████╗
          ██╔══██╗████╗  ██║██╔══██╗██║  ╚██╗ ██╔╝██╔════╝██║██╔════╝
          ███████║██╔██╗ ██║███████║██║   ╚████╔╝ ███████╗██║███████╗
          ██╔══██║██║╚██╗██║██╔══██║██║    ╚██╔╝  ╚════██║██║╚════██║
          ██║  ██║██║ ╚████║██║  ██║███████╗██║   ███████║██║███████║
          ╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝╚══════╝╚═╝   ╚══════╝╚═╝╚══════╝
 */

// DIE's signature file

// =================== [ ABOUT ] ===================
// This heuristic analysis will help
// identify the presence of obfuscation
// or wrapper tricks through advanced
// complex checks. Static emulation,
// signature analysis, smart checks
// and much more!
// ================================================

// ================= [ CONTACTS ] =================
// Author: DosX
// E-Mail: collab@kay-software.ru
// GitHub: https://github.com/DosX-dev
// Telegram: @DosX_dev
// ================================================
// If I don't respond to email, message to Telegram
// ================================================

// Please do not read the code out loud unless you have exorcism skills

function detect() {
    if (stubForLegacyEngines()) return null; // old DIE version

    if (PE.isHeuristicScan()) {
        if (PE.isNET()) {
            scanForObfuscations_NET();
            scanForAntiAnalysis_NET();
        } else {
            scanForObfuscations_Native();
        }

        scanForPackersAndCryptors_NET_and_Native();
    }
}

function stubForLegacyEngines() {
    if (typeof PE.isNetObjectPresent === 'undefined') {
        _setResult("DIE-Message", ">>> Update DIE Engine to 3.09 and higher for using Heuristic-analyser by DosX <<<", "", "");
        return true;
    }

    return false;
}



function scanForObfuscations_NET() {
    var options = "";

    var isDetected = false;




    const isVbNet = isVbNetStandartLibraryPresent();


    var isEntryPointModified = false;

    const vbNetEntries = [
            "Main",
            "main",
            "MAIN",
            "MyApplication"
        ],
        defaultEntries = [ // like MSIL, C#, C++ NET etc
            "Main",
            "<Main>$" // For programs with top-level operators (C#)
        ]

    if (!PE.isDll()) {
        if (isVbNet) {
            if (isAllNetReferencesMissing(vbNetEntries)) {
                isEntryPointModified = true;
            }
        } else if (isAllNetReferencesMissing(defaultEntries)) {
            isEntryPointModified = true;
        }
    }

    if (isEntryPointModified) options += "Modified EP";




    var isStrangeEpPosition = false;

    const netMetaHeaders = [
        "~",
        "Strings",
        "US",
        "GUID",
        "Blob"
    ];

    // Specify the default .NET section index
    const defaultNetSection = 0;

    // Check conditions for a strange entry point position
    if (PE.getNumberOfSections() > 1) {
        // Iterate through .NET metadata headers
        for (var s = 0; s < netMetaHeaders.length; s++) {
            const headerName = netMetaHeaders[s];

            // Check if the signature is not present in the default .NET section
            if (!PE.isSignatureInSectionPresent(defaultNetSection, "00'#" + headerName + "'00")) {
                isStrangeEpPosition = true;
                break;
            }
        }
    }

    if (isStrangeEpPosition) options += (options.length != 0 ? " + " : "") + "Strange EP position";




    var isNativeEntryPointModified = false;

    if (!PE.isDll()) {
        if (!PE.is64()) {
            // FF2500????00: jmp dword ptr [ ... ]
            const firstOpCode = getFirstEpAsmOpCode();

            if (firstOpCode !== "JMP") {
                _log("Very strange EP pattern: " + getEpAsmPattern(onlyOpCodes = true, numberOf = 4).split("|").join(" .. "));

                isNativeEntryPointModified = true;
            }
        } else { // AMD64
            if (PE.VAToOffset(PE.getAddressOfEntryPoint()) != 0x00) {
                isNativeEntryPointModified = true;
            }
        }
    }

    if (isNativeEntryPointModified) options += (options.length != 0 ? " + " : "") + "Modified native EP";




    var isDosMessageModified = false;

    // Check if the specified DOS message is not found in the DOS stub
    if (PE.findSignature(PE.getDosStubOffset(), PE.getDosStubSize(), "'This program cannot be run in DOS mode.'") === -1) {
        isDosMessageModified = true;
    }

    if (isDosMessageModified) options += (options.length != 0 ? " + " : "") + "Modified DOS";




    var strangeSections = false;

    const badChars = '_-=+~!@#$%^&*()"№;%:?*():;,/\\|\'`<>.0123456789'; // Very very bad!

    // Check conditions for strange sections
    if (PE.getNumberOfSections() > 6 || !PE.isSectionNamePresent(".text")) {
        strangeSections = true;
    } else {
        // Iterate through each section
        for (var i = 0; i != PE.getNumberOfSections(); i++) {
            var sectionName = PE.getSectionName(i);

            // Check if the first character is not "." and the length of name is less than 3
            if (sectionName[0] != "." && sectionName.length < 3) {
                strangeSections = true;
                break;
            }

            // Iterate through characters after "."
            for (var x = 1; x < sectionName.length; x++) {
                // Check if the character is in the badChars list
                for (var d = 0; d < badChars.length; d++) {
                    if (sectionName[x] === badChars[d]) {
                        strangeSections = true;
                        break;
                    }
                }
            }
        }
    }

    if (strangeSections) options += (options.length != 0 ? " + " : "") + "Strange sections";




    const opCodes = new NetOpCodes();




    var isIntConfusionPresent = false;

    const intConfusionXorPattern = opCodes.ldc_i4 + opCodes.ldc_i4 + opCodes.xor + opCodes.ldc_i4;

    if (validateSignature(intConfusionXorPattern)) {
        if (validateSignature( // samples by: Inx Obfuscator
                intConfusionXorPattern +
                (opCodes.bne_un_s + opCodes.ldc_i4_2 + opCodes.stloc_0 + opCodes.sizeof + opCodes.add)
            ) ||
            validateSignature( // samples by: MindLated, NetShield
                intConfusionXorPattern +
                (opCodes.bne_un + opCodes.ldc_i4 + opCodes.stloc + opCodes.sizeof + opCodes.add)
            ) ||
            validateSignature( // samples by: VavilonProtect
                intConfusionXorPattern +
                (opCodes.bne_un + opCodes.ldc_i4_2 + opCodes.stloc_s + opCodes.sizeof + opCodes.add)
            )
        ) {
            isIntConfusionPresent = true;
        }
    }

    if (isIntConfusionPresent) options += (options.length != 0 ? " + " : "") + "Int confusion";




    var isVirtualizationPresent = false;

    if (
        isAllNetReferencesPresent(
            references = [
                "System.Reflection", // System.Reflection.dll
                "GetILGenerator", // MSIL: 'System.Reflection.Emit.DynamicMethod::GetILGenerator()'
                "BeginInvoke",
                "EndInvoke",
                "OpCode" // MSIL: 'System.Reflection.Emit.OpCode'
            ]
        ) &&
        (
            validateSignature("'Ldarg_0'") || // MSIL: 'System.Reflection.Emit.OpCodes.Ldarg_0'
            validateSignature("'CreateDelegate'") // MSIL: 'System.Delegate.CreateDelegate'
        ) && !isFrameworkComponent()
    ) {
        isVirtualizationPresent = true;
    }

    if (isVirtualizationPresent) options += (options.length != 0 ? " + " : "") + "Virtualization";




    var callsEncrypt = false;

    if (
        isAllNetReferencesPresent(
            references = [
                "GetTypeFromHandle", // MSIL: 'System.Type::GetTypeFromHandle( ... )'
                "BinaryReader", // MSIL: 'System.IO.BinaryReader'
                "CreateDelegate", // MSIL: '[Delegate].CreateDelegate'
                "MakeByRefType", // MSIL: 'System.Type::MakeByRefType()'
                "DynamicMethod" // MSIL: 'System.Reflection.Emit.DynamicMethod'
            ]
        ) && !isFrameworkComponent()
    ) {
        callsEncrypt = true;
    }

    if (callsEncrypt) options += (options.length != 0 ? " + " : "") + "Calls encrypt";




    // https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.suppressildasmattribute
    var isAntiIldasmPresent = false;

    if (PE.isNetObjectPresent("SuppressIldasmAttribute")) {
        isAntiIldasmPresent = true;
    }

    if (isAntiIldasmPresent) options += (options.length != 0 ? " + " : "") + "Anti-ILDASM";




    // Anti de4dot via inheritance
    var isAntiDe4dotPresent = false;

    if (
        validateSignature("'Form'??????00'Form'??????00'Form'??????00") || // samples by: NetShield
        PE.isNetObjectPresent("Form0") // samples by: MindLated
    ) {
        isAntiDe4dotPresent = true;
    }

    if (isAntiDe4dotPresent) options += (options.length != 0 ? " + " : "") + "Anti-de4dot";




    var isCalliInvokesPresent = false;

    if (validateSignature( // samples by: MindLated
            opCodes.setStrict(opCodes.ldftn, "?? ?? 00 0A") +
            opCodes.setStrict(opCodes.calli, "?? 00 00 11")
        ) ||
        validateSignature( // samples by: ArmDot, DarksProtector
            opCodes.idelem_i +
            opCodes.setStrict(opCodes.calli, "?? 00 00 11")
        )) {
        isCalliInvokesPresent = true;
    }

    if (isCalliInvokesPresent) options += (options.length != 0 ? " + " : "") + "Calli invokes";




    var isCtrlFlowPresent = false;

    if (validateSignature( // samples by: ConfuserEx
            opCodes.nop + opCodes.ldloc_0 + opCodes.ldc_i4 + opCodes.mul + opCodes.ldc_i4 + opCodes.xor + opCodes.br_s +
            opCodes.nop + opCodes.ldloc_0 + opCodes.ldc_i4 + opCodes.mul + opCodes.ldc_i4 + opCodes.xor + opCodes.br_s
        ) ||
        validateSignature( // samples by: ConfuserEx (neo mod)
            opCodes.ldc_i4 + opCodes.ldc_i4 + opCodes.xor + opCodes.dup + opCodes.stloc_0 + opCodes.ldc_i4_3 + opCodes.rem_un + opCodes.switch__nobody
        ) ||
        validateSignature( // samples by: .NET Reactor
            opCodes.ldsfld + opCodes.brfalse + opCodes.pop +
            opCodes.setStrict(opCodes.ldc_i4, "01 00 00 00") + // MSIL: 'ldc.4 1'
            opCodes.br + opCodes.nop
        ) ||
        validateSignature( // samples by: .NET Reactor
            opCodes.setNullValue(opCodes.ldc_i4) +
            opCodes.ldsfld + opCodes.brtrue + opCodes.pop + opCodes.ldc_i4 +
            opCodes.br
        ) ||
        validateSignature( // samples by: .NET Reactor (legacy~~)
            opCodes.stloc + opCodes.ldloc +
            opCodes.setStrict(opCodes.switch__nobody, "?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 00 00") +
            opCodes.ldc_i4 + opCodes.br
        ) ||
        validateSignature( // samples by: MindLated, NetShield
            opCodes.setNullValue(opCodes.ldc_i4) + // MSIL: 'ldc.i4 0'
            opCodes.stloc + opCodes.br + opCodes.nop + opCodes.ldloc +
            opCodes.setStrict(opCodes.ldc_i4, "01 00 00 00") + // MSIL: 'ldc.i4 1'
            opCodes.ceq + opCodes.brfalse
        ) ||
        validateSignature( // samples by: Rose Obfuscator
            opCodes.setNullValue(opCodes.ldc_i4) + // MSIL: 'ldc.i4'
            opCodes.stloc + opCodes.br + opCodes.nop + opCodes.ldloc + opCodes.ldc_i4 + opCodes.ceq + opCodes.brfalse
        ) ||
        validateSignature( // samples by: Smart Assembly
            opCodes.ldc_i4 + opCodes.br + opCodes.ldloc_s + opCodes.ldc_i4_s + opCodes.ldc_i4_0 + opCodes.stelem_i1 +
            opCodes.ldc_i4 + opCodes.br
        ) ||
        validateSignature( // samples by: ConfuserEx (Beds mod)
            opCodes.ldc_i4 + opCodes.ldc_i4 + "??" + opCodes.ldc_i4 + "??" + opCodes.stloc_0 + opCodes.nop + opCodes.ldloc_0 +
            opCodes.ldc_i4 + opCodes.ldc_i4 + "??" + opCodes.ldc_i4 + "??" + opCodes.ceq + opCodes.brfalse_s
        ) ||
        validateSignature( // samples by: DotNetPatcher
            opCodes.setStrict(opCodes.stloc_s, "05") + opCodes.nop + opCodes.ldloc_s + "??" + opCodes.ceq + opCodes.brfalse_s + "??" +
            opCodes.setStrict(opCodes.stloc_s, "05") + opCodes.nop + opCodes.ldloc_s + "??" + opCodes.ceq + opCodes.brfalse_s
        )
    ) {
        isCtrlFlowPresent = true;
    }

    if (isCtrlFlowPresent) options += (options.length != 0 ? " + " : "") + "Ctrl flow";




    var isAntiTamperPresent = false;

    if (
        PE.isNetUStringPresent(" is tampered.") || // samples by: .NET Reactor
        PE.isNetUStringPresent("ping 127.0.0.1 > nul") || // samples by: ConfuserEx (Trinity, SkiDzEx like)
        PE.isNetUStringPresent("/C ping 1.1.1.1 -n 1 -w 3000 > Nul & Del \"") || // samples by: MindLated
        validateSignature( // samples by: ConfuserEx
            opCodes.ldloc_s + opCodes.ldc_i4_0 + opCodes.ldloc_s + opCodes.ldc_i4_0 + opCodes.ldelem_u4 + opCodes.ldloc_s + opCodes.ldc_i4_0 + opCodes.ldelem_u4 + "??" + opCodes.stelem_i4 +
            opCodes.ldloc_s + opCodes.ldc_i4_1 + opCodes.ldloc_s + opCodes.ldc_i4_1 + opCodes.ldelem_u4 + opCodes.ldloc_s + opCodes.ldc_i4_1 + opCodes.ldelem_u4 + "??" + opCodes.stelem_i4 +
            opCodes.ldloc_s + opCodes.ldc_i4_2 + opCodes.ldloc_s + opCodes.ldc_i4_2 + opCodes.ldelem_u4 + opCodes.ldloc_s + opCodes.ldc_i4_2 + opCodes.ldelem_u4 + "??" + opCodes.stelem_i4 +
            opCodes.ldloc_s + opCodes.ldc_i4_3 + opCodes.ldloc_s + opCodes.ldc_i4_3 + opCodes.ldelem_u4 + opCodes.ldloc_s + opCodes.ldc_i4_3 + opCodes.ldelem_u4 + "??" + opCodes.stelem_i4 +
            opCodes.ldloc_s + opCodes.ldc_i4_4 + opCodes.ldloc_s + opCodes.ldc_i4_4 + opCodes.ldelem_u4 + opCodes.ldloc_s + opCodes.ldc_i4_4 + opCodes.ldelem_u4 + "??" + opCodes.stelem_i4
        ) ||
        validateSignature( // samples: ConfuserEx (Beds mod, private)
            opCodes.ldloc_s + "??" + opCodes.shr_un + opCodes.ldloc_s + opCodes.ldc_i4_s + opCodes.shl + opCodes.or + opCodes.stloc_s +
            opCodes.ldloc_s + "??" + opCodes.shr_un + opCodes.ldloc_s + opCodes.ldc_i4_s + opCodes.shl + opCodes.or + opCodes.stloc_s +
            opCodes.ldloc_s + "??" + opCodes.shr_un + opCodes.ldloc_s + opCodes.ldc_i4_s + opCodes.shl + opCodes.or + opCodes.stloc_s
        )
    ) {
        isAntiTamperPresent = true;
    }

    if (isAntiTamperPresent) options += (options.length != 0 ? " + " : "") + "Anti-tamper";




    var isModuleCtorMultiple = false;

    var currentCtorOffset = PE.findSignature(PE.getDosStubOffset() + PE.getDosStubSize(), PE.getSize() - PE.getOverlaySize(), "00'<Module>'00");

    if (currentCtorOffset != -1) {
        var secondCtorNameOffset = PE.findSignature(currentCtorOffset + 10, PE.getSize() - PE.getOverlaySize(), "'<Module>'");

        if (secondCtorNameOffset != -1 && PE.readByte(secondCtorNameOffset + 8) != 0x00) {
            isModuleCtorMultiple = true;
        }
    }

    if (isModuleCtorMultiple) options += (options.length != 0 ? " + " : "") + "Repeating .cctor name";




    const mathOpCodes = [
        opCodes.add, opCodes.mul,
        opCodes.div, opCodes.xor,
        opCodes.shr, opCodes.shl,
        opCodes.or, opCodes.not,
        opCodes.and
    ];

    var isMutationsPresent = false;

    const prefix = opCodes.ldc_i4 + opCodes.ldc_i4,
        postfix = opCodes.stloc;

    for (var e = 0; e < mathOpCodes.length; e++) {

        if (!validateSignature(prefix + "??" + postfix)) break;

        // TODO: array with patterns

        const pattern = prefix + mathOpCodes[e] + postfix;

        if (validateSignature(pattern)) {
            isMutationsPresent = true;
            break;
        }
    }

    if (isMutationsPresent) options += (options.length != 0 ? " + " : "") + "Math mutations";




    var isMathInversionsPresent = false;

    if (validateSignature(opCodes.ldc_i4 + opCodes.not) && (
            validateSignature( // ~(-(~(-(~(-(~(-( num ))))))))
                opCodes.ldc_i4 +
                opCodes.not + opCodes.neg + opCodes.not + opCodes.neg +
                opCodes.not + opCodes.neg + opCodes.not + opCodes.neg
            ) ||
            validateSignature( // ~(~(-(-(~(~( num ))))))
                opCodes.ldc_i4 +
                opCodes.not + opCodes.not + opCodes.neg + opCodes.neg +
                opCodes.not + opCodes.not
            ) ||
            validateSignature( // ~(-(~(~(-(-( num ))))))
                opCodes.ldc_i4 +
                opCodes.not + opCodes.neg + opCodes.not + opCodes.not +
                opCodes.neg + opCodes.neg
            ) ||
            validateSignature( // ~(-(~(-(~(~( num ))))))
                opCodes.ldc_i4 +
                opCodes.not + opCodes.neg + opCodes.not + opCodes.neg +
                opCodes.not + opCodes.not
            )
        )) {
        isMathInversionsPresent = true;
    }

    if (isMathInversionsPresent) options += (options.length != 0 ? " + " : "") + "Math inversions";




    const obfuscatorsAttributes = [
        "Xenocode.Client.Attributes.AssemblyAttributes.ProcessedByXenocode",
        "CryptoObfuscator.ProtectedWithCryptoObfuscatorAttribute",
        "SecureTeam.Attributes.ObfuscatedByAgileDotNetAttribute",
        "Xenocode.Client.Attributes.AssemblyAttributes",
        "SmartAssembly.Attributes.PoweredByAttribute",
        "ObfuscatedByAgileDotNetAttribute",
        "NineRays.Obfuscator.Evaluation",
        "ObfuscatedByCliSecureAttribute",
        "BabelObfuscatorAttribute",
        "AsStrongAsFuckAttribute",
        "Macrobject.Obfuscator",
        "DotfuscatorAttribute",
        "CodeWallTrialVersion",
        "ConfusedByAttribute",
        "ObfuscatedByGoliath",
        "NETSpider.Attribute",
        "NineRays.Obfuscator",
        "PoweredByAttribute", // Smart Assembly
        "RustemSoft.Skater",
        "BabelAttribute",
        "YanoAttribute",
        "EMyPID_8234_",
        "ZYXDNGuarder",
        "Sixxpack",
        "____KILL", // CodeVeil
        "Reactor",
    ];

    var isFakeSignaturesPresent = false;

    var isWatermarkPresent = false;

    var signaturesCounter = 0;

    var obfuscatorAttributeFound = "";

    // Iterate through obfuscators attributes
    for (var t = 0; t < obfuscatorsAttributes.length; t++) {

        if (PE.isNetObjectPresent(obfuscatorsAttributes[t])) {
            obfuscatorAttributeFound = obfuscatorsAttributes[t];
            signaturesCounter++;
        }

        // Check if the number of detected signatures exceeds 1
        if (signaturesCounter > 1) {
            // Set flag indicating the presence of fake signatures
            isFakeSignaturesPresent = true;

            // Break the loop if the condition is met
            break;
        }
    }

    if (isFakeSignaturesPresent) {
        options += (options.length != 0 ? " + " : "") + "Fake signatures";
    } else {
        // "Watermark" is only possible in the absence of fake signatures

        if (signaturesCounter === 1) {
            _log("Watermark (Attribute) found: '" + obfuscatorAttributeFound + "'");
            isWatermarkPresent = true;
        }

        if ((!isWatermarkPresent && (
                validateSignature("'Obfuscated'") ||
                validateSignature("'obfuscated'") ||
                validateSignature("'ByAttribute'") ||
                validateSignature("'ObfuscatorAttribute'") ||
                PE.isNetObjectPresent("ObfuscationAttribute")
            )) && !isFrameworkComponent()) // System.Reflection.ObfuscationAttribute
        {
            isWatermarkPresent = true;
        }
    }

    if (isWatermarkPresent) options += (options.length != 0 ? " + " : "") + "Watermark";




    const protectorsLabelsToRemove = [ // Protectors with these names will be removed from results
        "Xenocode Postbuild",
        "Smart Assembly",
        "Dotfuscator",
        "Babel .NET",
        "Spices.Net",
        "Agile .NET",
        "CliSecure",
        "CodeWall",
        "DNGuard",
        "Goliath",
        "Yano"
    ];

    if (isFakeSignaturesPresent) {
        for (var d = 0; d < protectorsLabelsToRemove.length; d++) {
            _removeResult("protector", protectorsLabelsToRemove[d]);
        }
    }


    if (options.length != 0) isDetected = true;




    if (isDetected) {
        _setResult("protection", "Obfuscation", "Heuristic", PE.isVerbose() ? options : "");
    }
}



function scanForAntiAnalysis_NET() {
    var options = "";


    var isAntiDebugPresent = false;

    const debuggerObject = "Debugger", // MSIL: 'System.Diagnostics.Debugger' from System.Diagnostics.dll
        isAttached = "get_IsAttached", // MSIL: '*.Debugger::get_IsAttached()'
        isLogging = "IsLogging" // MSIL: '*.Debugger::IsLogging()'

    if (
        (( // .NET Functions
                PE.isNetObjectPresent(debuggerObject) || PE.isNetUStringPresent(debuggerObject) // Check for 'Debugger'
            ) && (
                (PE.isNetObjectPresent(isAttached) || PE.isNetUStringPresent(isAttached)) || // Check for 'get_IsAttached' property
                (PE.isNetObjectPresent(isLogging) || PE.isNetUStringPresent(isLogging)) // Check for 'IsLogging' function
            ) ||
            ( // Native (WinAPI) functions
                PE.isNetObjectPresent("CheckRemoteDebuggerPresent") || PE.isNetObjectPresent("IsDebuggerPresent")
            )) && !isFrameworkComponent()
    ) {
        isAntiDebugPresent = true;
    }

    if (isAntiDebugPresent) options += (options.length != 0 ? " + " : "") + "Anti-debug";




    var isAntiDumpPresent = false;

    if (
        PE.isNetObjectPresent("VirtualProtect") && ( // from 'kernel32.dll', WinAPI
            // Need to check
            isAllNetReferencesPresent( // samples by: ConfuserEx, SkiDzEX
                references = [
                    "System.Runtime.InteropServices", // System.Runtime.InteropServices.dll
                    "Marshal", // MSIL: '*.Marshal::GetHINSTANCE( ... )'
                    "GetHINSTANCE", // MSIL: '*.Marshal::GetHINSTANCE( ... )'
                    "IntPtr", // MSIL: 'System.IntPtr'
                    "op_Explicit" // MSIL: 'System.IntPtr::op_Explicit'
                ]
            ) ||
            isAllNetReferencesPresent( // samples by: Inx Obfuscator
                references = [
                    "System.Diagnostics", // System.Diagnostics
                    "memcpy", // from 'msvcrt.dll', WinAPI
                    "IntPtr", // MSIL: 'System.IntPtr'
                    "get_MainModule", // MSIL: '*.Process::get_MainModule()'
                    "get_BaseAddress" // MSIL: '*.ProcessModule::get_BaseAddress()'
                ]
            ) ||
            isAllNetReferencesPresent( // samples by: MindLated
                references = [
                    "System.Runtime.InteropServices", // System.Runtime.InteropServices.dll
                    "Marshal", // MSIL: '*.Marshal::GetHINSTANCE( ... )'
                    "GetHINSTANCE", // MSIL: '*.Marshal::GetHINSTANCE( ... )'
                    "IntPtr", // MSIL: 'System.IntPtr'
                    "CopyBlock",
                    "InitBlock"
                ]
            )
        )
    ) {
        isAntiDumpPresent = true
    }

    if (isAntiDumpPresent) options += (options.length != 0 ? " + " : "") + "Anti-dump";




    const antiDnSpyTriggers = [
        "dnspy",
        "dnSpy",
        "DNSPY"
    ];

    var isAntiDnSpyPresent = false;

    // Iterate through anti-DnSpy triggers
    for (var l = 0; l < antiDnSpyTriggers.length; l++) {
        const dnSpyName = antiDnSpyTriggers[l];

        // Check if the signature for anti-DnSpy trigger is valid using Unicode signature mask or the original signature
        if (
            validateSignature(generateUnicodeSignatureMask(dnSpyName)) ||
            validateSignature("'" + dnSpyName + "'")
        ) {
            // Set flag indicating the presence of anti-DnSpy behavior
            isAntiDnSpyPresent = true;

            // Break the loop if a match is found
            break;
        }
    }

    if (isAntiDnSpyPresent) options += (options.length != 0 ? " + " : "") + "Anti-dnSpy";




    const sbieVariants = [
        "sbiedll.",
        "SbieDll.",
        "SBIEDLL."
    ];

    var isAntiSbiePresent = false;

    // Check if the signature for 'GetModuleHandle' is present
    if (validateSignature("'GetModuleHandle'")) { // from 'kernel32.dll') {
        // Iterate through Sandboxie variants
        for (var l = 0; l < sbieVariants.length; l++) {
            const sbieLib = sbieVariants[l];

            // Check if the signature for Sandboxie variant is valid using Unicode signature mask or the original signature
            if (
                validateSignature(generateUnicodeSignatureMask(sbieLib)) ||
                validateSignature("'" + sbieLib + "'")
            ) {
                // Set flag indicating the presence of anti-Sandboxie behavior
                isAntiSbiePresent = true;

                // Break the loop if a match is found
                break;
            }
        }
    }

    if (isAntiSbiePresent) options += (options.length != 0 ? " + " : "") + "Anti-SandBoxie";




    var isAntiVmPresent = false;

    if (PE.isNetUStringPresent("vmware") || PE.isNetUStringPresent("VirtualBox")) {
        isAntiVmPresent = true;
    }

    if (isAntiVmPresent) options += (options.length != 0 ? " + " : "") + "Anti-VM";




    if (options.length != 0) {
        _setResult("protection", "Anti analysis", "Heuristic", PE.isVerbose() ? options : "");
    }
}



// .NET OpCodes for static emulations
function NetOpCodes() {
    this.add = "58"; // MSIL: 'add'
    this.sub = "59"; // MSIL: 'sub'
    this.mul = "5A"; // MSIL: 'mul'
    this.and = "5F"; // MSIL: 'and'
    this.bne_un = "40????????"; // MSIL: 'bne.un'
    this.bne_un_s = "3309"; // MSIL: 'bne.un.s'
    this.br = "38????????"; // MSIL: 'br'
    this.br_s = "2B??"; // MSIL: 'br.s'
    this.brfalse = "39????????"; // MSIL: 'brfalse'
    this.brfalse_s = "2C??"; // MSIL: 'brfalse.s'
    this.brtrue = "3A????????"
    this.call = "28????????"; // MSIL: 'call'
    this.calli = "29????????"; // MSIL: 'calli'
    this.ceq = "FE01"; // MSIL: 'ceq'
    this.div = "5B"; // MSIL: 'div'
    this.dup = "25"; // MSIL: 'dup'
    this.idelem_i = "97"; // MSIL: 'idelem.i'
    this.ldc_i4 = "20????????"; // MSIL: 'ldc.i4'
    this.ldc_i4_0 = "16"; // MSIL: 'ldc.i4.0'
    this.ldc_i4_1 = "17"; // MSIL: 'ldc.i4.1'
    this.ldc_i4_2 = "18"; // MSIL: 'ldc.i4.2'
    this.ldc_i4_3 = "19"; // MSIL: 'ldc.i4.2'
    this.ldc_i4_4 = "1A"; // MSIL: 'ldc.i4.4'
    this.ldc_i4_s = "1F??"; // MSIL: 'ldc.i4.s'
    this.ldftn = "FE06????????"; // MSIL: 'ldftn'
    this.ldloc = "FE??????"; // MSIL: 'ldloc'
    this.ldloc_0 = "06"; // MSIL: 'ldloc.0'
    this.ldloc_1 = "07"; // MSIL: 'ldloc.1'
    this.ldloc_2 = "08"; // MSIL: 'ldloc.2'
    this.ldloc_3 = "09"; // MSIL: 'ldloc.3'
    this.ldloc_s = "11??"; // MSIL: 'ldloc.s'
    this.ldsfld = "7E????????"; // MSIL: 'ldsfld'
    this.ldstr = "72????????"; // MSIL: 'ldstr'
    this.ldelem_u4 = "95"; // MSIL: 'ldelem.u4'
    this.nop = "00"; // MSIL: 'nop'
    this.not = "66"; // MSIL: 'not'
    this.neg = "65"; // MSIL: 'neg'
    this.or = "60"; // MSIL: 'or'
    this.pop = "26"; // MSIL: 'pop'
    this.ret = "2A"; // MSIL: 'ret'
    this.rem_un = "5E"; // MSIL: 'rem.un'
    this.shl = "62"; // MSIL: 'shl'
    this.shr = "63"; // MSIL: 'shr'
    this.sizeof = "FE1C????????"; // MSIL: 'sizeof'
    this.stloc = "FE0E????"; // MSIL: 'stloc'
    this.stloc_0 = "0A"; // MSIL: 'stloc.0'
    this.stloc_1 = "0B"; // MSIL: 'stloc.1'
    this.stloc_2 = "0C"; // MSIL: 'stloc.2'
    this.stloc_3 = "0D"; // MSIL: 'stloc.3'
    this.stloc_s = "13??"; // MSIL: 'stloc.s'
    this.shr_un = "64"; // MSIL: 'shr.un'
    this.xor = "61"; // MSIL: 'xor'
    this.stelem_i1 = "9C"; // MSIL: 'stelem.i1'
    this.stelem_i4 = "9E"; // MSIL: 'stelem.i4'

    this.switch__nobody = "45"; // MSIL: 'switch'



    // setStrict sets the strict value of the opcode for substitution
    // btw I like what I do
    this.setStrict = function(opCodeMask, value) {
        // Remove spaces from opcode mask and value
        opCodeMask = removeSpaces(opCodeMask);
        value = removeSpaces(value);

        // Find the index of the special pattern "??" in the opcode mask
        var indexOfSpecialPattern = opCodeMask.indexOf("??");

        // Check if the opcode mask has a body (contains the special pattern "??")
        var isOpCodeMaskHasBody = indexOfSpecialPattern !== -1; // -1 if not found

        // Extract the opcode in hexadecimal
        var opCodeInHex = isOpCodeMaskHasBody ? opCodeMask.substr(0x00, indexOfSpecialPattern) : opCodeMask;

        // Check if the opcode mask has a body and the length of the body matches the length of the value
        if (isOpCodeMaskHasBody && opCodeMask.substr(opCodeInHex.length).length != value.length) {
            throw "The size of the input values does not match.";
        }

        // Combine the opcode in hexadecimal with the value
        return opCodeInHex + value;
    }

    // Sets the mask value to zero for the specified opcode
    this.setNullValue = function(opCodeMask) {

        if (opCodeMask.indexOf("??") === -1) {
            throw "Instruction does not have a body to overwrite the value.";
        }

        return replaceAllInString(opCodeMask, "??", "00");
    }

}


function removeSpaces(inputString) {
    return inputString.split(" ").join("");
}


function replaceAllInString(inputString, search, replacement) {
    while (inputString.indexOf(search) !== -1) {
        inputString = inputString.replace(search, replacement)
    }

    return inputString;
}



// This feature was originally intended only for .NET, but
// now partially works with Native files.
function scanForPackersAndCryptors_NET_and_Native() { // For .NET and Native apps
    var options = "";

    var isDetected = false,
        isCryptor = false;




    if (PE.isNET()) {

        var isAssemblyInvokeFound = false;

        if (isAllNetReferencesPresent( // TODO: update [!!!]
                references = [
                    "System.Reflection", // System.Reflection.dll
                    "get_EntryPoint", // MSIL: '*.Assembly::get_EntryPoint()'
                    "Assembly", // MSIL: 'System.Reflection.Assembly' from System.Reflection.dll
                    "Invoke", // MSIL: '*.MethodBase::Invoke(object, object[])'
                    "Load" // MSIL: '*.Assembly::Load(uint8[])'
                ]
            )) {
            isAssemblyInvokeFound = true;

            options = "Assembly invoke";
        }




        // Check if any class from System.Security.Cryptography namespace is used (non-full name) - for cryptors
        if (findAndMark("System.Security.Cryptography", isFullName = false) != "") {

            // Specify cryptography classes to look for
            const cryptoClasses = [
                "TripleDESCryptoServiceProvider",
                "RSACryptoServiceProvider",
                "DSACryptoServiceProvider",
                "DESCryptoServiceProvider",
                "AesCryptoServiceProvider",
                "Rfc2898DeriveBytes",
                "SHA256Managed",
                "TripleDES",
                "Rijndael",
                "ECDsaCng",
                "AesAEAD",
                "Aes192Cbc",
                "Aes256Cbc",
                "Aes128Cbc",
                "AesManaged",
                "AesCng",
                "SHA256",
                "SHA512",
                "SHA1CryptoServiceProvider",
                "SHA512CryptoServiceProvider",
                "RC2CryptoServiceProvider",
                "SHA384CryptoServiceProvider",
                // "MD5CryptoServiceProvider",
                "SHA256CryptoServiceProvider",
                "RNGCryptoServiceProvider"
            ];

            // Iterate through cryptography classes
            for (var i = 0; i < cryptoClasses.length; i++) {
                var cryptoClassSign = cryptoClasses[i],
                    result = findAndMark(
                        sign = cryptoClassSign,
                        isFullName = true
                    );

                // Check if assembly invoke is found and the cryptography class is present
                if (isAssemblyInvokeFound && result.length != 0) {
                    isCryptor = true;

                    // Add the cryptography class to options
                    options += (options.length != 0 ? " + " : "") + cryptoClassSign;

                    // Break the loop if a match is found
                    break;
                }
            }
        }




        // Check if any class from System.IO.Compression namespace is used (non-full name)
        if ((findAndMark("System.IO.Compression", isFullName = false).length != 0)) {

            // Specify compression classes to look for
            const compressionClasses = [
                "DeflateStream",
                "GZipStream"
            ];

            // Iterate through compression classes
            for (var i = 0; i < compressionClasses.length; i++) {
                var compressionClassSign = compressionClasses[i],
                    result = findAndMark(compressionClassSign, isFullName = true);

                // Check if assembly invoke is found and the compression class is present
                if (isAssemblyInvokeFound && result.length != 0) {

                    // If it's a cryptor, add the compression class to options
                    if (isCryptor) options += (options.length != 0 ? " + " : "") + compressionClassSign;

                    // Break the loop if a match is found
                    break;
                }
            }
        }

    }


    // Self-Extracting archives
    // TODO: Upgrade
    var sfx = false;

    if (!PE.isDll()) {

        if (PE.isOverlayPresent()) {
            const overlayPatterns = [
                "'Rar!'", // samples by: WinRAR
                "'PK'03", // samples by: Zip SFX (by Intel)
                "';!@Install@!UTF-8!'", "'7z'BCAF271C", "efbbbf';!@Install@!UTF-8!'" // samples by: 7z
            ]

            for (var l = 0; l < overlayPatterns.length; l++) {
                if (PE.compareOverlay(overlayPatterns[l])) {
                    sfx = true;
                }
            }


            if (!sfx && !PE.isNET()) {
                const sfxEntries = [
                    // "e8$$$$$$$$558bec83ec..a1........8365....8365....5357bf........3bc7bb........74..85c374..f7d0", // samples by: WinZip
                    // "558bec6a..68........68........64a1........50648925........83....5356578965..ff15", // samples by: Zip SFX
                    // "e8$$$$$$$$558bec83ec..8365....8365....a1........5657bf........be........3bc7", // samples by: WinRAR Installer
                    // "e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb", // samples by: Zip SFX
                    // "558bec83c4..b8........e8........33c05568........64ff30648920e8", // samples by: Zip SFX
                    "4883ec..e8$$$$$$$$48895c24..55488bec4883ec..488365....48bb................488b05........483bc375", // samples by: WinRAR Installer
                    "83ec..5657ff15........8bf08d4424..50c74424..........ff15........8a068b3d........3c..75..56ffd7", // samples by: Zip SFX
                    "e9$$$$$$$$558bec81ec........830d..........5356576a..33dbbf........68........895d..881d", // samples by: Microsoft Cabinet
                    "558bec83ec..56ff15........8bf08a003c..75..84c074..803e..74..46803e..75..803e..75..46eb", // samples by: Zip SFX
                    "6a..33c0505050ff15........50e8$$$$$$$$55b8........8bece8........53b9........5657be", // samples by: Zip SFX
                    "6a..68........e8........66813d............75..a1........81b8................75..", // samples by: Microsoft Cabinet
                    "558bec83ec..565733ffff15........8bf0897d..8d45..50ff15........8a063c..75..56ff15", // samples by: Zip SFX
                    "51526a..2eff15........506a..6a..2eff15........50e8........502eff15........5a59c3", // samples by: WinIMP
                    "558bec81ec........535657ff15........a3........ff15........a1........6625....3d", // samples by: Microsoft Cabinet
                    "558becb8........e8........5356be........578d45..5633db5053ff15........85c00f84", // samples by: Zip SFX
                    "a1........c1e0..a3........575133c0bf........b9........3bcf76..2bcffcf3aa595f", // samples by: WinRAR Installer
                    "558bec83c4..5356e8$$$$$$$$e8........6a..e8........8905........e8........8905", // samples by: Zip SFX
                    "ff15........b1..380874..b1..4080....74..380874..4080....75..80....74..4033", // samples by: WinZip
                    "53ff15........b3..38..74..80c3..4033d28a083aca74..3acb74..408a083aca75", // samples by: WinZip
                    "558bec83c4..535657e8........e8........33c05568........64ff30648920e8", // samples by: WinRAR
                    "53ff15........b3..38..74..80c3..8a48..4033d23aca74..3acb74..8a48..40", // samples by: WinZip
                    "e8$$$$$$$$53bb........e8........85c074..33d28a1083fa..75..40eb", // samples by: WinRAR
                    "fffe2a002a002a006d0065007300730061006700650073002a002a002a00", // samples by: WinRAR Installer
                    "e8$$$$$$$$558bec83c4..b8........53", // samples by: WinRAR Installer
                    "8A48014033D23ACA740A3ACB74068A4801" // samples by: WinZip
                ]

                if (PE.isSectionNamePresent("_winzip_")) {
                    sfx = true;
                }

                for (var k = 0; k < sfxEntries.length; k++) {
                    if (PE.compareEP(sfxEntries[k])) {
                        _log("SFX entry pattern: " + sfxEntries[k]);

                        sfx = true;
                    }
                }
            }
        }

        if (sfx) options += (options.length != 0 ? " + " : "") + "SFX";




        var entryLikePacker = false;

        const entries = [
            "53565755488D35........488DBE", // samples by: UPX (x64)
            "B8........68........64", // samples by: Petite (x32)
            "60..................E8", // samples by: Anticrack Software (x32)
            "33C08BC068........68", // samples by: ExE Pack (x32)
            "74..E9........60E8", // samples by: PE-PACK
            "EB0668........C39C", // samples by: PECompact (x32)
            "93071F05....8ED0BC", // samples by: aPack (x32)
            "60BE........8DBE", // samples by: UPX (x32)
            "B8........6A..68", // samples by: Petite (x32)
            "BE........AD8BF8", // samples by: WinUPack (x32)
            "68........9C60E8", // samples by: XComp, XPACK (x32)
            "53558BE833DBEB60", // samples by: WWPack (x32)
            "BD........C745", // samples by: kkrunchy (x32)
            "57565351524150", // samples by: mpress (x64)
            "B8........5064", // samples by: PECompact (x32)
            "8CCBBA....03DA", // // samples by: aPack (x32)
            "B8........669C", // samples by: Petite, Themida (x32)
            "8CC0FA8ED0BC", // samples by: PACKWIN (x32)
            "B8........60", // samples by: Petite, Themida (x32)
            "8B44240456", // samples by: ASDPack (x32)
            "1E068CC88E", // samples by: aPack (x32)
            "1E068CCBBA", // samples by: aPack (x32)
            "EB..9C60E8", // samples by: PECompact (x32)
            "9C60E8CA", // samples by: Petite (x??)
            "60FCBED4", // samples by: ANDPakk (x32)
            "60EB..5D", // samples by: ASPack (x32)
            "60EB..E8", // samples by: G!X Protector
            "64FF35", // samples by: Petite (x32)
            "6033C0", // samples by: yzPack (x32)
            "669C60", // samples by: Petite (x??)
            "EB..60", // samples by: kkryptor, dePACK (x32)
            "60E8", // samples by: mpress, Packman, Pack Master, Yodas Crypter, DxPack, ASPack, MSLRH, tElock (x32)
            "6068" // samples by: BeRo, ExE Pack, AHPacker (x32)
        ];

        // Iterate through the entries to check against the entry point
        for (var e = 0; e < entries.length; e++) {
            const entryToCheck = entries[e];

            // If the entry point matches the current entry, set the flag to true and break the loop
            if (PE.compareEP(entryToCheck)) {
                _log("EP like a packer: '" + entryToCheck + "'");

                entryLikePacker = true;

                // Break the loop if a match is found
                break;
            }
        }

        if (entryLikePacker) options += (options.length != 0 ? " + " : "") + "EntryPoint";




        // Check if the entry point is in the last section
        var isLastSectionEP = false;

        if (PE.getNumberOfSections() > 1) {
            // Get addresses of the last section and entry point
            var lastSectionAddress = PE.OffsetToVA(PE.getSectionFileOffset(PE.getNumberOfSections() - 1)),
                entryPointAddress = PE.getAddressOfEntryPoint();

            // Check if the entry point is greater than or equal to the last section address
            if (entryPointAddress >= lastSectionAddress) {
                isLastSectionEP = true;
            }
        }

        // If entry point is in the last section, set options to "Last section EP"
        if (isLastSectionEP) options = "Last section EP";




        // Check for strange calls if entry point is in the last section
        var isStrangeCalls = false;

        if (isLastSectionEP && getAsmOpCode(getAsmInstructionByIndex(1)) === "CALL") {
            _log("Strange call to address: " + getAsmInstructionByIndex(1).split(" ")[1]);
            isStrangeCalls = true;
        }

        if (isStrangeCalls) options += (options.length != 0 ? " + " : "") + "Strange call";

    }




    var isImportsLikePacker = false;

    var dbCollectionOfHashesDictionary = [
        // packers
        ["UPX", "0.59-0.93", 0, 0xd4fdcab1],
        ["UPX", "0.94-1.93", 0, 0x1d51299a],
        ["UPX", "1.94-2.03", 0, 0xb3318086],
        ["UPX", "1.94-2.03", 0, 0x3778aab9],
        ["UPX", "2.90-3.XX", 0, 0xf375ee03],
        ["UPX", "2.90-3.XX", 0, 0xf737d853],
        ["UPX", "3.91+", 0, 0xf737d853],
        ["UPX", "3.91+", -1, 0x82a048fc],
        ["UPX", "3.91+", -1, 0x554a1748],
        ["NSPACK", "", 0, 0xf375ee03],
        ["ASPack", "1.XX-2.XX", 0, 0x1272f45b],
        ["MKFPACK", "", 0, 0x42b3e7f9],
        ["MPRESS", "", 0, 0x174efb84],
        ["PACKMAN", "0.0.0.1", 0, 0x174efb84],
        ["PACKMAN", "1.0", 0, 0x69076a83],
        ["PECompact", "0.90-0.91", -1, 0xbea416d1],
        ["PECompact", "0.92-0.94", -1, 0x93312c2e],
        ["PECompact", "0.97-0.971b", -1, 0xe6aa8495],
        ["PECompact", "0.975-1.10b3", -1, 0x29188619],
        ["PECompact", "1.10b7-1.34", -1, 0xe4c11305],
        ["PECompact", "1.30-1.40", 0, 0x9b3305ed],
        ["PECompact", "1.40-1.84", 0, 0xcc5b2a3c],
        ["PECompact", "2.40-3.XX", 0, 0x2652ce4f],
        ["PECompact", "2.40-3.XX", -1, 0xdb8fbb75],
        ["EXE32PACK", "1.3X-1.4X", 0, 0x174efb84],
        ["tElock", "1.0", -1, 0x051946f7],
        ["JDPACK", "2.00", 0, 0xc002db0e],
        ["CRINKLER", "", 0, 0x0b0e1fbf],
        ["WinUpack", "", -1, 0x29188619],
        ["YodasCrypter", "1.X", -1, 0x1303a51b],
        ["XComp", "0.97-0.98", -1, 0xea1e66e4],
        ["XPack", "0.97-0.98", -1, 0x2ac44dd2],
        ["kkrunchy", "", -1, 0x29188619],
        ["ANDPakk2", "0.18", -1, 0x29188619],
        // protectors
        ["ASProtect", "1.XX-2.XX", 0, 0x1272f45b],
        ["SHRINKER", "3.2", 0, 0xb2a64858],
        ["SHRINKER", "3.2", 0, 0x158af2d0],
        ["SHRINKER", "3.2", 0, 0x49e8aa1f],
        ["SHRINKER", "3.5", 0, 0xe9ea0851],
        ["SHRINKER", "3.5", 0, 0x3344b95d],
        ["SHRINKER", "3.5", 0, 0x586088f3],
        ["Enigma", "1.00-3.60", 0, 0xc002db0e],
        ["Enigma", "2.XX", 0, 0xdd92de10],
        ["Enigma", "3.70+", 0, 0xd04c7a50],
        ["PCGUARD", "5.04-5.05", 0, 0x5a169c7a],
        ["PCGUARD", "5.04-5.05", 0, 0x0b0b2965],
        ["eXPressor", "1.2", -1, 0x66b35c6e],
        ["eXPressor", "1.2", -1, 0x32f4466c],
        ["eXPressor", "1.3", -1, 0x921d0280],
        ["eXPressor", "1.3", -1, 0xf51eba68],
        ["eXPressor", "1.3", -1, 0xbc84ce09],
        ["eXPressor", "1.4.5.X", 0, 0x427816ab],
        ["eXPressor", "1.4.5.X", -1, 0x3c705cae],
        ["eXPressor", "1.4.5.X", -1, 0x4d02e093],
        ["eXPressor", "1.4.5.X", -1, 0x958a9ea2], // VB6
        ["eXPressor", "1.4.5.X", 1, 0x0c16df2d],
        ["eXPressor", "1.5.0.X", -1, 0x7ababb5a],
        ["eXPressor", "1.5.0.X", -1, 0x95ca15e4],
        ["eXPressor", "1.5.0.X", -1, 0xbd41da20],
        ["eXPressor", "1.6", -1, 0xca58fa0c],
        ["eXPressor", "1.6.1", -1, 0x48ffd359],
        ["VMProtect", "1.70", -1, 0x1ff3103f],
        // ["VMProtect", "1.70", -1, 0x0c16df2d],
        ["VMProtect", "2.0.3-2.13", -1, 0x9d12b153],
        ["VMProtect", "3.0.0", -1, 0x1e5500c1],
        ["VMProtect", "3.0.9", -1, 0xc5fb6a4b],
        ["VMProtect", "3.2.0-3.5.0", -1, 0x5caa99c7],
        ["YodasProtector", "1.0b", -1, 0x1303a51b]
    ];

    const importValidatingResult = validateImportHashes(dbCollectionOfHashesDictionary);

    if (importValidatingResult != null) {
        isImportsLikePacker = true;
    }

    // Clean up: release the dictionary
    dbCollectionOfHashesDictionary = undefined;

    if (isImportsLikePacker) options += (options.length != 0 ? " + " : "") + "Imports like " + importValidatingResult[0] + (importValidatingResult[1].length != 0 ? " (v" + importValidatingResult[1] + ")" : "");




    var isSectionNameLikePacker = false;

    var dbCollectionOfSectionNamesDictionary = [
        ["UPX", "", "UPX1"],
        ["UPX", "", "UPX2"],
        ["UPX", "", "UPX3"],
        ["VMProtect", "", ".vmp"],
        ["VMProtect", "", ".vmp0"],
        ["VMProtect", "", ".vmp1"],
        ["VMProtect", "", ".vmp2"],
        ["VMProtect", "", ".vmp3"],
        ["ASPack", "1.08-2.XX", ".adata"],
        ["ASPack", "2.XX", ".aspack"],
        ["Petite", "", ".petite"],
        ["Petite", "", "petite"],
        ["Enigma", "", ".enigma1"],
        ["Enigma", "", ".enigma2"],
        [".NET Reactor", "2.XX", ".reacto"],
        ["Themida", "3.X", ".imports"],
        ["Themida", "3.X", ".themida"],
        ["Themida", "3.X", ".winlice"],
        ["Themida", "3.X", ".loadcon"],
        ["ASM Guard", "2.XX", "ASMGUARD"],
        ["ASM Guard", "2.XX", ".asmg"],
        ["tElock", "", "UPX!"], // ???
        ["YodasProtector", "1.0b", ".yP"],
        ["YodasCrypter", "1.X", "yC"],
        ["MPRESS", "", ".MPRESS0"],
        ["MPRESS", "", ".MPRESS1"],
        ["DxPack", "1.0", "coderpub"]
    ];

    const sectionNamesValidatingResult = validateSectionNames(dbCollectionOfSectionNamesDictionary);

    if (sectionNamesValidatingResult != null) {
        isSectionNameLikePacker = true;
    }

    // Clean up: release the dictionary
    dbCollectionOfSectionNamesDictionary = undefined;

    if (isSectionNameLikePacker) options += (options.length != 0 ? " + " : "") + "Sections like " + sectionNamesValidatingResult[0] + (sectionNamesValidatingResult[1].length != 0 ? " (v" + sectionNamesValidatingResult[1] + ")" : "");




    // Check if there is a collision in sections
    var isCollisionInSectionsPresent = false;

    // Get section name collision between "0" and "1"
    const sectionNameCollision = PE.getSectionNameCollision("0", "1");

    // Check if there is a collision
    if (sectionNameCollision.length != 0) {
        isCollisionInSectionsPresent = true;
    }

    // If there is a collision, add "Sections collision" to options
    if (isCollisionInSectionsPresent) options += (options.length != 0 ? " + " : "") + "Sections collision (\"" + sectionNameCollision + "\")";




    // Check if there are repeating section names
    var isCollisionInSectionsPresent = false;

    // Dictionary to track encountered section names
    var sectionNamesDictionary = {};

    // Iterate through sections to check for collisions
    for (var i = 0; i < PE.getNumberOfSections(); i++) {
        const sectionName = PE.getSectionName(i);

        // If section name is already encountered, set collision flag and break
        if (sectionNamesDictionary[sectionName]) {
            isCollisionInSectionsPresent = true;

            // Break the loop if a match is found
            break;
        } else {
            sectionNamesDictionary[sectionName] = true;
        }
    }

    // Clean up: release the dictionary
    sectionNamesDictionary = undefined;

    if (isCollisionInSectionsPresent) options += (options.length != 0 ? " + " : "") + "Section names repeating";




    // Check if the first instruction at entry point starts with a stack operation
    var isStartsWithStackOperation = false;

    // Get the opcode of the first instruction at entry point
    const firstEpAsmOpCode = getFirstEpAsmOpCode();

    // Switch statement to check for specific stack operation opcodes
    switch (firstEpAsmOpCode) {
        case "PUSHAL":
        case "PUSHA":
        case "PUSHF":
        case "POPA":
            isStartsWithStackOperation = true;
    }

    if (isStartsWithStackOperation) options += (options.length != 0 ? " + " : "") + "\"" + firstEpAsmOpCode.toLowerCase() + "\" at EP";




    // Many not-so-smart virus writers use base64 to pack
    // or hide malicious code, but do not realize that this
    // is very easily detected by heuristic analysis.

    const signaturesVariants = [
        "TVoAAAAAA", // MZ ~[00 00 00 00 00]
        "TVqQAA" // MZ ~[90 00 03]
    ];

    var isPackedPeDetected = false;

    // Iterate through signature variants
    for (var s = 0; s < signaturesVariants.length; s++) {
        const trigger = signaturesVariants[s];

        // Check if the signature is valid using Unicode signature mask or the original signature
        if (
            validateSignature(generateUnicodeSignatureMask(trigger) + "00") || validateSignature("'" + trigger + "'")
        ) {
            isCryptor = true;
            isPackedPeDetected = true;

            // Break the loop if a match is found
            break;
        }
    }

    if (isPackedPeDetected) options += (options.length != 0 ? " + " : "") + "Base64 payload";




    var isMzSignatureDetected = false;

    if (PE.isOverlayPresent() &&
        PE.getOverlaySize() >= 100 &&
        PE.compareOverlay("'MZ'")) {
        isMzSignatureDetected = true;
    }

    if (isMzSignatureDetected) options += (options.length != 0 ? " + " : "") + "PE in overlay";




    // Check for a strange overlay in the PE file
    var hasStrangeOverlay = false;

    // Conditions to check for a strange overlay
    if (!isMzSignatureDetected && !sfx && !PE.isSigned() && PE.isOverlayPresent()) {
        if (
            PE.getOverlaySize() > 150 && PE.calculateEntropy(PE.getOverlayOffset(), PE.getOverlaySize()) > 7 ||
            PE.getOverlaySize() > (PE.getSize() - PE.getOverlaySize())
        ) {
            hasStrangeOverlay = true;
        }
    }

    if (hasStrangeOverlay) options += (options.length != 0 ? " + " : "") + "Strange overlay";




    // Flag to indicate high entropy
    var isHighEntropy = false;

    // Checks for high entropy (ignore overlay)
    if (!(PE.isDll() && (PE.isSectionNamePresent(".rdata") || PE.isSectionNamePresent(".rsrc"))) && // .dll with resources
        PE.calculateEntropy(0x00, PE.getSize() - PE.getOverlaySize()) > 7.2) {
        isHighEntropy = true;
    }

    if (isHighEntropy) options += (options.length != 0 ? " + " : "") + "High entropy";




    var isCompressedSectionPresent = false;

    var sectionNumber = 0;

    for (var t = 0; t < PE.getNumberOfSections(); t++) {
        sectionNumber = t;
        if (PE.calculateEntropy(PE.getSectionFileOffset(sectionNumber), PE.getSectionFileSize(sectionNumber)) > 7.2) {
            isCompressedSectionPresent = true;
            break;
        }
    }

    if (isCompressedSectionPresent) options += (options.length != 0 ? " + " : "") + "Section " + sectionNumber + " (\"" + PE.getSectionName(sectionNumber) + "\") compressed";




    if (options.length != 0) isDetected = true;


    if (isDetected) {
        var detectedType = isCryptor ? "cryptor" : "packer";

        _setResult(detectedType, (isCryptor ? "Cryptor" : "Packer") + " detected", "Heuristic", PE.isVerbose() ? options : "");
    }
}




function isVbNetStandartLibraryPresent() {
    return PE.isNetObjectPresent("Microsoft.VisualBasic");
}


// Check if the file is a .NET Framework component
function isFrameworkComponent() {
    return PE.isNET() && PE.isDll() && PE.isSigned() && PE.findSignature(PE.getOverlayOffset(), 300, "'Microsoft Corporation'") != -1;
}

// Validate the presence of a signature in the file
function validateSignature(sign) {
    const result = PE.findSignature(PE.getDosStubOffset() + PE.getDosStubSize(), PE.getSize() - PE.getOverlaySize(), sign) != -1
    if (result) _log("[*] Pattern validated: " + sign);
    return result;
}


// Function to generate Unicode signature mask from an input string
// "test" -> "'t'00'e'00's'00't'"

function generateUnicodeSignatureMask(inputString) {
    var output = "";

    // Iterate through each character in the input string
    for (var c = 0; c < inputString.length; c++) {
        // Append the Unicode representation of the character to the output
        output += (c != 0 ? "00" : "") + "'" + inputString[c] + "'";
    }

    // Return the generated Unicode signature mask
    return output;
}


// Function to check if all specified .NET references are missing

function isAllNetReferencesMissing(references) {
    // Iterate through the array of .NET references
    for (var i = 0; i < references.length; i++) {
        // Get the current reference
        const ref = references[i];

        // If the .NET object corresponding to the reference is present, return false
        if (PE.isNetObjectPresent(ref)) {
            return false;
        }
    }

    // If all .NET references are missing, return true
    return true;
}


// Function to check if all specified .NET references are present

function isAllNetReferencesPresent(references) {
    // Iterate through the array of .NET references
    for (var i = 0; i < references.length; i++) {
        // Get the current reference
        const ref = references[i];

        // If the .NET object corresponding to the reference is not present, return false
        if (!PE.isNetObjectPresent(ref)) {
            return false;
        }
    }

    // If all .NET references are present, return true
    return true;
}


// "isFullName = true"  = 00'sign'00
// "isFullName = false" = 00'sign'

function findAndMark(sign, isFullName) {
    if (PE.isSignatureInSectionPresent(0,
            ("00'" + sign + "'") + // 00'string
            (isFullName ? "00" : ""))) { // ... '00
        return sign;
    }
    return "";
}



function scanForObfuscations_Native() {
    var options = "";

    var isDetected = false;




    // Check for section names containing forbidden characters
    var strangeSections = false;

    // Define forbidden characters
    const badChars = '-=+~!@#$%^&*()"№;%:?*():;,/\\|\'`<> ';

    // Iterate through sections and characters to check for forbidden characters
    for (var i = 0; i != PE.getNumberOfSections(); i++) {
        var sectionName = PE.getSectionName(i);

        if (sectionName.length === 0 || sectionName[0] === " ") {
            strangeSections = true;

            break;
        }


        var isIdioticMinGwSectionsPresent = false;

        if (_isResultPresent("linker", "GNU linker ld (GNU Binutils)")) {
            if (PE.isSectionNamePresent(".build-id")) {
                isIdioticMinGwSectionsPresent = true;
            } else {
                for (var d = 1; d < 10; d++) { // sections like "/5", "/2" etc
                    if (sectionName.indexOf("/" + d) != -1) {
                        isIdioticMinGwSectionsPresent = true;
                        break;
                    }
                }
            }
        }

        if (isIdioticMinGwSectionsPresent) {
            strangeSections = false;
            break;
        }


        // If section name is too short, skip to the next iteration
        if (sectionName.length > 1) {
            for (var x = 0; x < sectionName.length; x++) {
                for (var d = 0; d < badChars.length; d++) {
                    // If forbidden character is found, set flag and break
                    if (sectionName[x] === badChars[d]) {
                        strangeSections = true;

                        // Break the loop if a match is found
                        break;
                    }
                }
            }
        }


    }

    if (strangeSections) options += (options.length != 0 ? " + " : "") + "Strange sections";




    // Check for DOS header in the PE file
    var isDosMissing = false,
        isCustomDosPresent = false;

    // If DOS stub size is 0, set flag for missing DOS
    if (PE.getDosStubSize() === 0) {
        isDosMissing = true;
    } else {
        // Define messages to check for custom DOS
        const messages = [
            "This program cannot be run in DOS mode.",
            "This program must be run under Win32",
            "This program must be run under Win64",
            "This program requires Win32"
        ];

        isCustomDosPresent = true;

        // Iterate through messages to check for custom DOS
        for (var d = 0; d < messages.length; d++) {
            // If signature is found in DOS stub, set flag to false and break
            if (PE.findSignature(PE.getDosStubOffset(), PE.getDosStubSize(), "'" + messages[d] + "'") != -1) {
                isCustomDosPresent = false;

                // Break the loop if a match is found
                break;
            }
        }
    }

    // Add appropriate option based on DOS presence
    if (isDosMissing) options += (options.length != 0 ? " + " : "") + "Missing DOS";
    else if (isCustomDosPresent) options += (options.length != 0 ? " + " : "") + "Custom DOS";




    // Check if the first instruction at the entry point is "INT 3" (CC or CD 03)
    var isStartsWithBreakPoint = false;

    // If the first instruction is a breakpoint, set the flag to true
    if (getFirstEpAsmInstruction() === "INT 3") // int 3 (CC or CD 03)
        isStartsWithBreakPoint = true;

    if (isStartsWithBreakPoint) options += (options.length != 0 ? " + " : "") + "Suspicious break at EP";




    // Check if the entry point starts with NOP
    var isStartsWithNop = false;

    // Condition to check if the first instruction is NOP
    if (getFirstEpAsmInstruction() === "NOP") { // nop (90)
        isStartsWithNop = true;
    }

    if (isStartsWithNop) options += (options.length != 0 ? " + " : "") + "Nop at EP";




    // Check if NOP padding is present at the entry point
    var isNopPaddingPresent = false;

    // Condition to check for NOP padding
    if (!isStartsWithNop && getEpAsmPattern(onlyOpCodes = true, numberOf = 5).indexOf(getInstructionsAsmPattern(["NOP", "NOP"])) !== -1) {
        isNopPaddingPresent = true;
    }

    if (isNopPaddingPresent) options += (options.length != 0 ? " + " : "") + "Nop EP padding";




    // ASM Guard fake signatures
    if (PE.isSectionNamePresent(".asmg") || PE.isSectionNamePresent("ASMGUARD")) {
        for (var f = 0; f < 3; f++)
            _removeResult("packer", ["UPX", "MPRESS", "EP:MPRESS"][f]);
    }


    if (options.length != 0) isDetected = true;


    if (isDetected) {
        _setResult("protection", "Generic", "Heuristic", PE.isVerbose() ? options : "");
    }
}


const _patternSplitter = "|";


// Makes it possible to disassemble the entry point code and output
// a specified number of instructions through a splitter (_patternSplitter)

function getEpAsmPattern(onlyOpCodes, numberOf) {
    // Initialize the result with a pattern splitter
    var result = _patternSplitter;

    // Get the address of the entry point
    var disasmAddress = PE.getAddressOfEntryPoint();

    // Iterate through instructions up to the specified number
    for (var i = 0; i < numberOf; i++) {

        // Update the address to the next instruction if not the first iteration
        if (i >= 1) {
            disasmAddress = PE.getDisasmNextAddress(disasmAddress);
        }

        // Get the assembly instruction at the current address
        const asmInstruction = PE.getDisasmString(disasmAddress);

        // Append either the opcode or the full instruction to the result
        result += (
            onlyOpCodes ?
            getAsmOpCode(asmInstruction) : // "MOV"
            asmInstruction // "MOV EAX, 4"
        ) + _patternSplitter;
    }

    // Return the generated assembly pattern
    return result;
}


// Function to get assembly instruction by index

function getAsmInstructionByIndex(index) {
    // Get the address of the entry point
    var disasmAddress = PE.getAddressOfEntryPoint();

    // Iterate through instructions until the specified index is reached
    for (var i = 0; i <= index; i++) {

        // Update the address to the next instruction if not the first iteration
        if (i >= 1) {
            disasmAddress = PE.getDisasmNextAddress(disasmAddress);
        }

        // If the current iteration matches the specified index, retrieve the instruction
        if (i === index) {
            const asmInstruction = PE.getDisasmString(disasmAddress);

            // Return the assembly instruction
            return asmInstruction;
        }
    }
}


// Makes it possible to get a subpattern to search for instructions in a
// pattern divided through a separator (_patternSplitter)
//
// like "|OPCODE1|OPCODE2|OPCODE3|".indexOf("|OPCODE2|")
// but  "|OPCODE1|OPCODE2|OPCODE3|".indexOf(getInstructionsAsmPattern("OPCODE2"))
//  or
// like "|OPCODE1|OPCODE2|OPCODE3|".indexOf("|OPCODE2|OPCODE3|")
// but  "|OPCODE1|OPCODE2|OPCODE3|".indexOf(getInstructionsAsmPattern(["OPCODE2", "OPCODE3"]))

function getInstructionsAsmPattern(instruction) {
    return _patternSplitter +
        (
            Array.isArray(instruction) ?
            instruction.join(_patternSplitter) :
            instruction
        ) +
        _patternSplitter;
}


function getFirstEpAsmInstruction() {
    return PE.getDisasmString(PE.OffsetToVA(PE.getEntryPointOffset()));
}


function getAsmOpCode(instruction) {
    return instruction.indexOf(" ") !== -1 ? instruction.split(" ")[0] : instruction;
}


// Returns only the name of the opcode used, without arguments

function getFirstEpAsmOpCode() {
    return getAsmOpCode(getFirstEpAsmInstruction());
}


function validateImportHashes(dbCollection) {
    for (var i = 0; i < dbCollection.length; i++) {
        const currentIndex = i,
            currentArrayPattern = dbCollection[currentIndex];

        const name = currentArrayPattern[0],
            version = currentArrayPattern[1],
            hash1 = currentArrayPattern[2],
            hash2 = currentArrayPattern[3];

        if (PE.isImportPositionHashPresent(hash1, hash2)) {
            return currentArrayPattern;
        }
    }

    return null;
}


function validateSectionNames(dbCollection) {
    for (var i = 0; i < dbCollection.length; i++) {
        const currentIndex = i,
            currentArrayPattern = dbCollection[currentIndex];

        const name = currentArrayPattern[0],
            version = currentArrayPattern[1],
            sectionName = currentArrayPattern[2];

        if (PE.isSectionNamePresent(sectionName)) {
            return currentArrayPattern;
        }
    }

    return null;
}


// Every time I start writing bad code I get hit with my head on the keybofewuihdsowefjfqodgsa79dowqhdsioefurogrwhuoguethuhofrwyi// DIE's signature file
// Author: deadmau5 <deadmau5@tutanota.de>

init("protector","Denuvo");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if (PE.isSectionNamePresent(".arch") || PE.isSectionNamePresent(".srdata") || PE.isSectionNamePresent(".xpdata") || PE.isSectionNamePresent(".xdata") || PE.isSectionNamePresent(".xtls"))
    {
      if(PE.isPEPlus())
      {
        // Mad Max, Metal Gear Solid: TPP, Rise of the Tomb Raider
        if(PE.compareEP("51 52 41 50 41 51 4C 8D ?? ?? ?? ?? ?? 4C 8D ?? ?? ?? ?? ?? 4D 29 C1"))
        {
            sVersion="v1.0";
            sOptions="x64";
            bDetected=1;
        }
        // Lords of the Fallen, Batman: AK, Just Cause 3, Sherlock Holmes: TdD, Tales of Berseria etc
        else if(PE.compareEP("48 8D 0D ?? ?? ?? ?? E9 ?? ?? ?? ??"))
        {
            sVersion="v2.0a";
            sOptions="x64";
            bDetected=1;
        }
        // Yesterday Origins
        else if(PE.compareEP("48 89 ?? ?? ?? ?? ?? 48 89 ?? ?? ?? ?? ?? 4C 89 ?? ?? ?? ?? ?? 4C 89 ?? ?? ?? ?? ?? 48 83 FA 01"))
        {
            sVersion="v2.0b";
            sOptions="x64";
            bDetected=1;
        }
        // Sniper Ghost Warrior 3 (beta), Dead Rising 4 (SteamStub-free)
        else if(PE.compareEP("?? ?? ?? ?? ?? ?? ?? ?? 4C 89 1C 24 49 89 E3"))
        {
            sVersion="v3.0a";
            sOptions="x64";
            bDetected=1;
        }
        // Train Sim World CSX Heavy Haul
        else if(PE.compareEP("4D 8D ?? ?? ?? ?? ?? ?? ?? ?? ?? 48 89 ?? ?? ?? ?? ?? 48 8D ?? ?? 48 89 ?? 48 89 ?? 48 89"))
        {
            sVersion="v3.0b";
            sOptions="x64";
            bDetected=1;
        }
        else if(PE.findSignature(0,PE.getSize(),"64656E75766F5F617464000000000000") != -1)
        {
            sVersion="v?";
            sOptions="x64";
            bDetected=1;
        }
        // Check if steam_api64.dll present
        if(PE.isLibraryPresent("steam_api64.dll"))
        {
            // Override additional info
            sOptions="x64 -> Steam";
            bDetected=1;
        }
        // Check if uplay_r1_loader64.dll present
        if(PE.isLibraryPresent("uplay_r1_loader64.dll"))
        {
            // Override additional info
            sOptions="x64 -> uPlay";
            bDetected=1;
        }
        // Check if Core/Activation64.dll present
        if(PE.isLibraryPresent("Core/Activation64.dll"))
        {
           // Override additional info
           sOptions="x64 -> Origin";
           bDetected=1;
        }
      }
      else
      {
        // Pro Evolution Soccer 2017, Champions of Anteria
        if(PE.compareEP("55 89 E5 8D ?? ?? ?? ?? ?? ?? E8 ?? ?? ?? ?? E8 ?? ?? ?? ?? E8 ?? ?? ?? ?? E8 ?? ?? ?? ??"))
        {
            sVersion="v1.0";
            sOptions="x86";
            bDetected=1;
        }
        // Romance of 13 Kingdoms, 2Dark
        else if(PE.compareEP("8D ?? ?? ?? ?? ?? ?? 89 7C 24 04 89 E7"))
        {
            sVersion="v2.0";
            sOptions="x86";
            bDetected=1;
        }
        else
        {
            sVersion="v?";
            sOptions="x86";
        }
        // Check if steam_api64.dll present
        if(PE.isLibraryPresent("steam_api.dll"))
        {
            // Override additional info
            sOptions="x86 -> Steam";
            bDetected=1;
        }
        // Check if uplay_r1_loader.dll present
        if(PE.isLibraryPresent("uplay_r1_loader.dll"))
        {
            // Override additional info
            sOptions="x86 -> uPlay";
            bDetected=1;
        }
        // Check if Core/Activation.dll present
        if(PE.isLibraryPresent("Core/Activation.dll"))
        {
            // Override additional info
            sOptions="x86 -> Origin";
            bDetected=1;
        }
      }
    }
    return result(bShowType,bShowVersion,bShowOptions);
}var File=PE;

includeScript("result");


/**
 * The file offset of the entry point.
 */
PE.nEP=PE.getEntryPointOffset();

/**
 * Get the signature at an offset of the entry point.
 * @see Binary.getSignature
 */
PE.getEPSignature = function(nOffset,nSize)
{
    return PE.getSignature(PE.nEP+nOffset,nSize);
}


/**
 * Add console and/or administrator requirement to the general options.
 * @returns {String}
 */
PE.getGeneralOptionsEx = function()
{
    sResult=PE.getGeneralOptions();
    if(PE.isConsole())
    {
        sResult=sResult.append("console");
    }
    if(/requireAdministrator/.test(PE.getManifest()))
    {
        sResult=sResult.append("admin");
    }
    if(PE.isSignedFile())
    {
        sResult=sResult.append("signed");
    }
    return sResult;
}


/**
 * Locate the first library matching a pattern.
 * @returns {?Array} <code>null</code> if not found, otherwise:
 * <br><code>[-1]</code> is the number of the library;
 * <br><code>[0]</code> is the name of the library (lower cased);
 * <br><code>[1]</code> onwards are the captured subpatterns.
 */
PE.isLibraryPresentExp = function(sLibraryPattern)
{
    var aMatch=null;
    for (var n=0;n<PE.getNumberOfImports();n++)
    {
        aMatch=PE.getImportLibraryName(n).match(sLibraryPattern);
        if(aMatch)
        {
            aMatch[-1]=n;
            aMatch[0]=PE.getImportLibraryName(n).toLowerCase();
            break;
        }
    }

    return aMatch;
}


// Create an array of sections.

/**
 * The number of the last section.
 */
PE.nLastSection=PE.getNumberOfSections()-1;

function Section(number, name, virtsize, rva, filesize, offset, characteristics)
{
    this.Number          = number;
    this.Name            = name;
    this.VirtualSize     = virtsize;
    this.VirtualAddress  = rva;
    this.FileSize        = filesize;
    this.FileOffset      = offset;
    this.Characteristics = characteristics;
}

/**
 * An array of sections, indexed by number and name (if not numeric). Members are the same as the functions.
 * @example
 * var nOffset=PE.section[".rsrc"].FileOffset;
 */
PE.section=[];
for(var i=0;i<=PE.nLastSection;i++)
{
    PE.section[i] = new Section(i,
                                PE.getSectionName(i),
                                PE.getSectionVirtualSize(i),
                                PE.getSectionVirtualAddress(i),
                                PE.getSectionFileSize(i),
                                PE.getSectionFileOffset(i),
                                PE.getSectionCharacteristics(i));
    if(PE.section[i].Name)
    {
        var name=PE.section[i].Name;
        // Don't do numeric names, as they are always treated as an index.
        if((+name).toString() != name) // parseInt crashes the application if Delphi project uses diedll :(
        {
            PE.section[name] = PE.section[i];
        }
    }
}

// Create dummy sections for the few files that need them.
PE.section[-1] = new Section(-1,"\0",0,0,0,PE.getSize(),0);
if(PE.nLastSection==-1)
{
    PE.section[0]=PE.section[-1];
}


// Create an array of resources.

function Resource(number, id, name, offset, size, type)
{
    this.Number = number;
    this.Id     = id;
    this.Name   = name;
    this.Offset = offset;
    this.Size   = size;
    this.Type   = type;
}

/**
 * An array of resources, indexed by number and name (if not numeric). Members are the same as the functions.
 * @example
 * var nOffset=PE.resource["PACKAGEINFO"].Offset;
 */
PE.resource=[];
for(var i=0;i<PE.getNumberOfResources();i++)
{
    PE.resource[i] = new Resource(i,
                                  PE.getResourceIdByNumber(i),
                                  PE.getResourceNameByNumber(i),
                                  PE.getResourceOffsetByNumber(i),
                                  PE.getResourceSizeByNumber(i),
                                  PE.getResourceTypeByNumber(i));
    if(PE.resource[i].Name)
    {
        var name=PE.resource[i].Name;
        // Don't do numeric names, as they are always treated as an index.
        if((+name).toString() != name) // parseInt crashes the application if Delphi project uses diedll :(
        {
            PE.resource[name] = PE.resource[i];
        }
    }
}
// DIE's signature file

init("protector",".netshrink");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
        if(PE.isSignatureInSectionPresent(0,"20fe2b136028........13..203b28136028........13..11..11..161f4028........26"))
        {
            sVersion="2.01 Demo";
            sOptions="Password";
            bDetected=1;
        }
        else if(PE.isSignatureInSectionPresent(0,"20ad65133228........13..206866133228........13..11..11..161f4028........26"))
        {
            sVersion="2.01 Demo";
            sOptions="Password";
            bDetected=1;
        }
        else if(PE.isSignatureInSectionPresent(0,"20b9059f0728........13..2066059f0728........13..11..11..161f4028........26"))
        {
            sVersion="2.01 Demo";
            bDetected=1;
        }
        else if(PE.isSignatureInSectionPresent(0,"20e6ea19be28........13..2039ea19be28........13..11..11..161f4028........26"))
        {
            sVersion="2.01 Demo";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","aPack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("1E068CC88ED8......8EC050BE....33FFFCB6"))
    {
        sVersion="0.62";
        bDetected=1;
    }
    else if(PE.compareEP("1E068CCBBA....03DA8D......FC33F633FF484B8EC08EDB"))
    {
        sVersion="0.82";
        bDetected=1;
    }
    else if(PE.compareEP("1E068CC88ED805....8EC050BE....33FFFCB2..BD....33C950A4BB....3BF376"))
    {
        sVersion="0.98";
        sOptions="-m";
        bDetected=1;
    }
    else if(PE.compareEP("8CCBBA....03DAFC33F633FF4B8EDB8D......8EC0B9....F3A54A75"))
    {
        sVersion="0.98b";
        bDetected=1;
    }
    else if(PE.compareEP("93071F05....8ED0BC....EA"))
    {
        sVersion="0.98b";
        sOptions="exe";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

includeScript("arj");

function detect(bShowType,bShowVersion,bShowOptions)
{
    detect_ARJ(0,bShowOptions);
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("crypter","ass-crypter");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC83C4EC53........8945ECB898400010E8ACEAFFFF33C055687851001064........206A0A6888510010A1E097001050E8D8EAFFFF8BD853A1E097001050E812EBFFFF8BF853A1E097001050E8DCEAFFFF8B"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","avast! Antivirus installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e8$$$$$$$$8bff558bec83ec..a1........8365....8365....5357bf........bb........3bc7"))
    {
        if(PE.compareOverlay("'ASWsetupFPkgFil3'"))
        {
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","bambam");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6A14E89A050000....5368........E86CFDFFFF"))
    {
        sVersion="0.01";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: sendersu
/*
If errors pls contact sendersu on cracklab.team
*/

//https://www.flashbackrecorder.com/

init("packer","Blueberry/FLASHBACK");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nOffset=Binary.findString(0,Binary.getSize(),"BB FlashBack Movie");
    if(nOffset!=-1)
    {
        if(PE.compare("'FBPE'", PE.getSize()-4))
        {
            bDetected=1;
        }

        sVersion=PE.getFileVersion();
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","beria");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("83EC18538B1D0030....555657683007000033ED55FFD38BF03BF5740D89AE20070000E8880F0000EB0233F66A105589353040....FFD38BF03BF57409892EE83CFEFFFFEB0233F66A18558935D843....FFD38BF0"))
    {
        sVersion="0.07";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("patcher","dUP diablo2oo2's Universal Patcher");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e8$$$$$$$$558bec81c4........5657536a..e8........a3........c745..........6a..68"))
    {
        if (PE.getNumberOfResources()>0)
        {
            nOffset=PE.getResourceNameOffset("DLL");
            {
                if(PE.compare("a2", nOffset))
                {
                    sVersion="2.0";
                    bDetected=1;
                }
            }
        }

    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("Crypter","DarkEye");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isNET())
    {
		if(PE.isNETStringPresent("BasicCryptorFromDebil")){
			bDetected=1;
		}
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","dePack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("eb$$6068........68........e8$$$$$$$$558bec60558b75..8b7d..e8........eb..8b1c24c3"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("eb$$6090eb$$61b8........ffe0"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("installer","distutils installer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareOverlay("'[metadata]'"))
    {
        if(PE.compareEP("e8........e9$$$$$$$$6a5868........e8........33f68975..8d45..50ff15........6a..5f897d..b8........663905........75"))
        {
            sVersion="2.6"
            bDetected=1;
        }
        else if(PE.compareEP("6a..68........e8........33db895d..538b3d........ffd766........75..8b48..03c88139........75..0fb7"))
        {
            sVersion="2.5"
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","eXPressor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E935140000E931130000E998120000E9EF0C0000E94213"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(PE.compareEP("E915130000E9F0120000E958120000E9AF0C0000E9AE02"))
    {
        sVersion="1.1";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC81EC....0000535657EB0C'ExPr-v.1.2.'"))
    {
        sVersion="1.2";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC83EC..535657EB0C'ExPr-v.1.3.'"))
    {
        sVersion="1.3";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC83EC..535657EB0C'ExPr-v.1.4.'"))
    {
        sVersion="1.4";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC83EC..5356578365..00F3EB0C'eXPr-v.1.4.'00"))
    {
        sVersion="1.4.5.X";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC81EC........53565783A5..........F3EB0C'eXPr-v.1.5.'00"))
    {
        sVersion="1.5.0.X";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC81EC........53565783A5..........F3EB0C'eXPr-v.1.6.'"))
    {
        sVersion="1.6";
        bDetected=1;
    }
    else if(PE.compareEP("EB0168EB01........83EC0C535657EB01..833D........007408EB01E9E956010000EB02"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("68########eb$$eb$$558bec83ec..535657eb$$833d..........74"))
    {
        sVersion="1.6.1";
        bDetected=1;
    }
    else if(PE.compareEP("68........C3"))
    {
        if(PE.section.length>=3)
        {
            if(PE.section[0].FileSize==0)
            {
                if(PE.section[2].Name==".code")
                {
                    sVersion="1.5-1.6";
                    bDetected=1;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","ezip");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isOverlayPresent())
    {
        if(PE.compareEP("E919320000E97C2A0000E919240000E9FF230000E91E2E0000E9882E0000E92C250000E9AE150000E9772B0000E987020000E9702E"))
        {
            bDetected=1;
            sVersion="1.X";
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("compiler","gcc");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("5589e583ec..e8$$$$$$$$5589e583ec..5383c4..68........e8........83c4..e8........e8........e8........83c4"))
    {
        sVersion="2.9x";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// made by KDSS-Research

init("packer","hXOR Packer");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("5589e583ec18c7042402000000ff1538424100e8f8feffff908db426000000005589e583ec18c7042401000000ff1538424100e8d8feffff908db426000000005589e55383ec148b45088b008b003d"))
    {
        sVersion="0.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","hmimys PE-Pack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E8000000005D83ED056A00FF95E10E00008985850E00008B583C03D881C3F8000000"))
    {
        sVersion="0.1";
        bDetected=1;
    }
    else if(PE.compareEP("5E83C664AD50AD5083EE6CAD50AD50AD50AD50AD50E8E707"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(PE.compareEP("E8$$$$$$$$5EAD50AD5097AD50AD50AD50E8C0010000AD50AD9387DEB9"))
    {
        sVersion="1.2";
        bDetected=1;
    }
    else if(PE.section["hmimys"])
    {
        if(PE.compareEP("E8"))
        {
            sVersion="1.3";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","hmimys Protect");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("5E83C664AD50AD5083EE6CAD50AD50AD50AD50AD50E8"))
    {
        sVersion="0.1";
        bDetected=1;
    }
    else if(PE.compareEP("E8BA000000..00000000....00..............00......0000....00......00......00......00......00......00..00000000000000......000000000000000000......00......000000000000000000"))
    {
        sVersion="1.0";
        bDetected=1;
    }
    else if(PE.compareEP("ba........ffe2ba........b8........890283c2..b8........890283c2..ffe2"))
    {
        sVersion="0.1";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","iPB Protect");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558BEC6AFF68'KCUF'68'TIHS'64A100000000"))
    {
        sVersion="0.1.3-0.1.7";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
init("joiner","inPEct");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E8000000005D5583C5208BF58BFEB9......00BA........AD8BD833C2C1C20703D3ABE2F3"))
    {
        sVersion="1.1";
        bDetected=1;
    }
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("library","java");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.getOverlaySize()>0x40)
    {
        if(PE.findString(PE.getOverlayOffset(),0x40,"META-INF/MANIFEST.MF")!=-1)
        {
            var nResSection=PE.getResourceSection();
            if(nResSection!=-1)
            {
                if(PE.isSignatureInSectionPresent(nResSection,"'Java Runtime Environment'"))
                {
                    bDetected=1;
                }
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("keygen","Keygen");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6a..e8........a3........c705................c705................c705................c705................c705................a1........a3........6a..ff35........e8........a3........a3........68"))
    {
        sOptions="by Dimedrol //CORE";
        bDetected=1;
    }
    else if(PE.compareEP("606a..e8........a3........6a..6a..6a..e8........506a..e8........50e8........a3........8bf883c7..f647"))
    {
        sOptions="by promethee //ECLIPSE";
        bDetected=1;
    }
    else if(PE.compareEP("6a..e8........a3........68........6a..6a..6a..6a..68........6a..6a..6a..68........6a..6a..6a..6a..e8........a3........6a"))
    {
        sOptions="by Duelist //CORE";
        bDetected=1;
    }
    else if(PE.compareEP("6a..e8........a3........6a..68........6a..6a..50e8........50e8........c3"))
    {
        sOptions="2000 by Duelist //CORE";
        bDetected=1;
    }
    else if(PE.compareEP("6a..e8........a3........33c066b8....6a..68........6a..50ff35........e8........e8........c8......53575633c0668b45..663d....75..eb"))
    {
        sOptions="by //oDDiTy";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","kkrunchy");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("BD........C745..........B8........89450489455450C74510"))
    {
        sVersion="0.23 alpha 2";
        bDetected=1;
    }
    else if(PE.compareEP("BD........C745..........FF4D08C6450C058D7D1431C0B40489C1F3ABBF"))
    {
        sVersion="0.2X";
        bDetected=1;
    }
    else if(PE.compareEP("bd........c7............fcff4d0831d28d7d30be"))
    {
        bDetected=1;
    }
    else if(PE.compare("'MZfarbrauschPE'"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("protector","k.kryptor");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("eb$$60e8........5e8d....b9........4933c05102....d3c04979..33....5900"))
    {
        sVersion="3";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("compiler","ldc");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.isSectionNamePresent(".minfo") && (!(PE.isSectionNamePresent("._deh"))))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("linker","unknown",PE.getCompilerVersion(),PE.getGeneralOptionsEx());

includeScript("FASM");
includeScript("RosASM");
includeScript("SpASM");
includeScript("FPC");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compare("'MZ'78000100000004000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000780000000E1FBA0E00B409CD21B8014CCD21'This program cannot be run in DOS mode.$'0000'PE'0000"))
    {
        var nMajor=PE.getMajorLinkerVersion();
        var nMinor=PE.getMinorLinkerVersion();
        if(nMajor>=14) // TODO Check
        {
            sName="Microsoft Linker";
            bDetected=1;
        }
    }
    else if(PE.compare("'MZ'90000300000004000000FFFF0000B800000000000000400000000000000000000000000000000000000000000000000000000000000000000000800000000E1FBA0E00B409CD21B8014CCD21'This program cannot be run in DOS mode.\r\r\n$'00000000000000'PE'0000"))
    {
        var nMajor=PE.getMajorLinkerVersion();
        var nMinor=PE.getMinorLinkerVersion();
        if(nMajor==2)
        {
            if(nMinor==55)
            {
                sName="LCC Linker";
                sVersion+="*";
                bDetected=1;
            }
            else if(nMinor<=40||nMinor==56)
            {
                sName="GNU linker ld (GNU Binutils)";
                if(nMinor==56)
                {
                    sVersion+="*";
                }
                bDetected=1;
            }
            else if(nMinor==50)
            {
                sName="Polink";
                sVersion+="*";
                bDetected=1;
            }
        }
        else if(nMajor==1)
        {
            if(nMinor==3)
            {
                sName="LCC Linker";
                bDetected=1;
            }
        }
    }
    else if(PE.compare("'This program must be run under Win'....0D0A24..00",0x50))
    {
        sName="Turbo Linker";
        if(sVersion=="2.25")
        {
            sVersion+="*,Delphi";
        }
        bDetected=1;
    }
    else if(PE.compare("FB..'jr'",0x1e))
    {
        sName="Turbo Linker";
        sVersion=(PE.readByte(0x1f)/16).toFixed(1);
        if(PE.compare("'32STUB'",0x200))
        {
            sOptions=sOptions.append("RTM32");
        }
        bDetected=1;
    }
    else if(PE.compare(/*[Tt]*/"'his is a Windows '"/*(?:95|NT)*/,0x4f))
    {
        sName="Watcom Linker";
        sVersion+="*";
        bDetected=1;
    }
    else if(PE.compare("'MZ'6c000100000002000000ffff000000000000110000004000000000000000'Win'....' Program!\r\n$'b409ba0001cd21b44ccd2160000000'GoLink, GoAsm www.GoDevTool.com'00"))
    {
        sName="GoLink";
        bDetected=1;
    }
    var nMajor=PE.getMajorLinkerVersion();
    var nMinor=PE.getMinorLinkerVersion();
    if((nMajor==2)&&(nMinor==18))
    {
        sName="Watcom Linker";
        bDetected=1;
    }
    else if((nMajor==2)&&(nMinor==52))
    {
        sName="PowerBASIC Linker";
        bDetected=1;
    }
    // Correct version
    if(sName=="Borland Linker")
    {
        if(PE.getMajorLinkerVersion()>15)
        {
            sVersion+="*";
        }
    }

    /* if(!bDetected&&(bShowVersion||bShowOptions))
    {
        if(!bShowType)
        {
            sName+=" "+sType;
        }
        bDetected=1;
    } */

    if(bFASM)
    {
        // FASM doesn't have a linker.
        bDetected=0;
    }
    if(bRosASM)
    {
        // RosASM doesn't have a linker.
        bDetected=0;
    }
    if(bSpASM)
    {
        // SpASM doesn't have a linker.
        bDetected=0;
    }
    if(bFPC)
    {
        // Free Pascal doesn't have a linker.
        bDetected=0;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","mPack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("E90000000060E8140000005D81ED000000006A45E8A30000006800000000E85861E8AA0000004E"))
    {
        sVersion="0.0.2";
        bDetected=1;
    }
    else if(PE.compareEP("558BEC83....33C08945F0B8........E867C4FFFF33C05568........64FF306489208D55F033C0E893C8FFFF"))
    {
        sVersion="0.0.3";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("packer","mkfPack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("e8$$$$$$$$5b81eb........8b93........536a..68........526a..ff93........5b8bf08bbb........03fb5657e8........83c4..8d93........5253ffe6"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","muckis protector");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("BE........B9........8A06F6D0880646E2F7E9"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("E8240000008B4C240CC70117000100C781B80000000000000031C0894114894118806A00"))
    {
        sVersion="II";
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","nPack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("833D..........7505E901000000C3E841000000B8........2B05........A3........E85E000000E8"))
    {
        switch(PE.getEPSignature(42,7))
        {
        case "E0010000E8EC06": sVersion="1.1.150.2006.Beta"; break;
        case "EC010000E8F806": sVersion="1.1.200.2006.Beta"; break;
        default:               sVersion="1.1.xxx";
        }
        bDetected=1;
    }
    else if(PE.compareEP("833D..........7505E901000000C3E846000000E873000000B8........2B05........A3........E89C000000E8"))
    {
        switch(PE.readDword(PE.nEP+47))
        {
        case 0x204: sVersion="1.1.250.2006.Beta"; break;
        case 0x22D: sVersion="1.1.300.2006.Beta"; break;
        case 0x248: sVersion="1.1.800.2008.Beta"; break;
        default:    sVersion="1.1.xxx";
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("sfx","Rar");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec83c4..535657e8........e8........33c05568........64ff30648920e8"))
    {
        for(var i=0;i<PE.resource.length;i++)
        {
            if(PE.compare("'rar!'", PE.resource[i].Offset))
            {
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

includeScript("rar");

function detect(bShowType,bShowVersion,bShowOptions)
{
    detect_RAR(0,bShowOptions);
    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: sendersu
/*
If errors pls contact sendersu on cracklab.team
*/

//www.screen-record.com/screen2exe.htm

init("packer","SCREEN2EXE/SCREEN2SWF");

function detect(bShowType,bShowVersion,bShowOptions)
{
    var nOffset=Binary.findString(0,Binary.getSize(),"Video created by SCREEN2EXE/SCREEN2SWF");
    if(nOffset!=-1)
    {
        bDetected = 1;
        sVersion=PE.getFileVersion();
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: hypn0 <hypn0@mail.ru>

init("patcher","simple patch");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("33c040c2"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("33c0c3"))
    {
        bDetected=1;
    }
    else if(PE.compareEP("b801000000c2"))
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: A.S.L <asl@onet.eu>
// Exeinfo PE not detect this SFX , other detectors too !
// SIGNATURE CREATED : 2023.10.02

init("installer","SQX Archive Installer 2002");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("558bec83ec44"))
    {
        if (PE.isSectionNamePresent(".data")) {
            if (PE.findString(PE.section[".data"].FileOffset,PE.section[".data"].FileSize,"SFX kann nicht gestartet werden")!=1)
            {
                sVersion="0.0"; // future use
                bDetected=1;
            }
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("protector","tElock");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("668BC08D2424EB01EB60EB01EB9CE8000000005E83C6508BFE68"))
    {
        sVersion="0.41x";
        bDetected=1;
    }
    else if(PE.compareEP("C1EE00668BC9EB01EB60EB01EB9CE8000000005E83C6"))
    {
        switch(PE.readByte(PE.nEP+22))
        {
        case 0x52: sVersion="0.4x"; break;
        case 0x5E: sVersion="0.5x"; break;
        }
        bDetected=1;
    }
    else if(PE.compareEP("E90000000060E8000000005883C008"))
    {
        sVersion="0.60";
        bDetected=1;
    }
    else if(PE.compareEP("60E8....0000C383"))
    {
        switch(PE.readWord(PE.nEP+2))
        {
        case 0x10BD: sVersion="0.70";   break;
        case 0x10ED: sVersion="0.71";   break;
        case 0x1144: sVersion="0.71b2"; break;
        case 0x1148: sVersion="0.71b7"; break;
        case 0x11F9: sVersion="0.80";   break;
        default:     sVersion="0.7x-0.84";
        }
        bDetected=1;
    }
    else if(PE.compareEP("60E802000000CD20E8000000005E2BC9587402"))
    {
        sVersion="0.85f";
        bDetected=1;
    }
    else if(PE.compareEP("....E802000000E800E8000000005E2B"))
    {
        sVersion="0.90";
        bDetected=1;
    }
    else if(PE.compareEP("E9....FFFF"))
    {
        if(PE.compareEP("E97EE9"))
        {
            sVersion="0.92a";
            bDetected=1;
        }
        else if(PE.compareEP("E9D5E4"))
        {
            sVersion="0.95";
            bDetected=1;
        }
        else if(PE.compareEP("E959E4"))
        {
            sVersion="0.96";
            bDetected=1;
        }
        else if(PE.compareEP("E925E4"))
        {
            sVersion="0.98b1";
            bDetected=1;
        }
        else if(PE.compareEP("E91BE4"))
        {
            sVersion="0.98b2";
            bDetected=1;
        }
        else if(PE.compareEP("E999D7"))
        {
            sVersion="0.98 Special Build";
            bDetected=1;
        }
        else if(PE.compareEP("E95EDF"))
        {
            sVersion="0.99";
            bDetected=1;
        }
        else if(PE.compareEP("E93FDF"))
        {
            sVersion="0.99c";
            bDetected=1;
        }
        else if(PE.compareEP("E9E5E2"))
        {
            sVersion="1.00";
            bDetected=1;
        }
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: DosX

function detect(bShowType, bShowVersion, bShowOptions) {

    if (!PE.isNET()) return null;

    if (!PE.isNETStringPresent("Microsoft.VisualBasic")) return null;

    const malwareType = "NjRAT";

    if (checkForNative(
            type = malwareType, edition = "0.7D Green Edition", stubReferences = [
                "w",
                "System.Drawing",
                "System.Windows.Forms",
                "avicap32.dll", "capGetDriverDescriptionA",
                "kernel32",
                "KERNEL32.DLL",
                "ntdll",
                "user32", "GetWindowText", "EnumChildWindows", "SendMessage", "GetWindowTextLength",
                "user32.dll",
                "winmm.dll"
            ], objectsToValidate = ["A", "kl", "mgr", "OK"])) {
        return null;
    }

    if (checkForNative(
            type = malwareType, edition = "0.7D Lime Edition", stubReferences = [
                "Stub",
                "System.Drawing",
                "System.Windows.Forms",
                "avicap32.dll", "capGetDriverDescriptionA",
                "kernel32",
                "ntdll", "NtSetInformationProcess",
                "user32", "MapVirtualKey", "ToUnicodeEx", "GetKeyboardState",
                "user32.dll",
                "wintrust.dll"
            ], objectsToValidate = ["Lime", "kl", "StartNow"])) {
        return null;
    }

    if (checkForNative(
            type = malwareType, edition = "0.7D", stubReferences = [
                "Stub",
                "System.Drawing",
                "System.Windows.Forms",
                "avicap32.dll", "capGetDriverDescriptionA",
                "kernel32",
                "ntdll", "NtSetInformationProcess",
                "user32", "MapVirtualKey", "ToUnicodeEx", "GetKeyboardState",
                "user32.dll"
            ], objectsToValidate = ["A", "kl", "OK"])) {
        return null;
    }

    if (checkForNative(
            type = malwareType, edition = "0.7D Danger Edition", stubReferences = [
                "Stub",
                "System.Drawing",
                "System.Windows.Forms",
                "avicap32.dll", "capGetDriverDescriptionA",
                "Kernel32.dll",
                "KERNEL32.DLL",
                "user32", "GetWindowText", "EnumChildWindows", "SendMessage", "GetWindowTextLength", "SetWindowPos",
                "user32.dll",
                "winmm.dll",
            ], objectsToValidate = ["e", "A", "CompDir", "connect"])) {
        return null;
    }

    if (checkForNative(
            type = malwareType, edition = "0.7D Golden Edition", stubReferences = [
                "Stub",
                "System.Drawing",
                "System.Windows.Forms",
                "avicap32.dll",
                "kernel32",
                "Kernel32.dll",
                "ntdll",
                "user32", "GetWindowText",
                "user32.dll",
                "winmm.dll",
            ], objectsToValidate = ["A", "OK", "connect"])) {
        return null;
    }

    if (checkForNative(
            type = "XWorm", edition = "5.0", stubReferences = [
                "System.Core",
                "System.Drawing",
                "System.Management",
                "System.Windows.Forms",
                "avicap32.dll", "capCreateCaptureWindowA",
                "kernel32.dll", "SetThreadExecutionState", "",
                "user32.dll", "GetForegroundWindow", "GetWindowText",
            ], objectsToValidate = ["Main", "ClientSocket", "Uninstaller"])) {
        return null;
    }
}

function checkForNative(type, edition, stubReferences, objectsToValidate) {
    if (validateReferences(
            isPositive = true,
            references = stubReferences
        )) {
        return false;
    }

    var isObfuscated = false;
    if (validateReferences(
            isPositive = true,
            references = objectsToValidate
        )) {
        isObfuscated = true;
    }

    _setResult("virus", type, edition, (isObfuscated ? "Obfuscated" : ""));
    return true;
}

function validateReferences(isPositive, references) {
    for (var i = 0; i < references.length; i++) {
        var sign = "00'" + references[i] + "'00";
        if (isPositive) {
            if (!PE.isSignatureInSectionPresent(0, sign)) {
                return true;
            }
        } else { // negative
            if (PE.isSignatureInSectionPresent(0, sign)) {
                return true;
            }
        }
    }
    return false;
}// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

init("library","wxWidgets");

includeScript("wxWidgets");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(aWx==1)
    {
        sOptions="static";
        bDetected=1;
    }
    else if(aWx)
    {
        sVersion=(aWx[2]/10).toFixed(1);
        if(aWx[1])
        {
            sOptions="Universal";
        }
        if(aWx[3])
        {
            sOptions=sOptions.append("Unicode");
        }
        if(aWx[4])
        {
            sOptions=sOptions.append("debug");
        }
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file

init("packer","yzPack");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(PE.compareEP("6033C08D480750E2FD8BEC648B4030780C8B400C"))
    {
        sVersion="1.0-1.1";
        bDetected=1;
    }
    else if(PE.compareEP("4D5A52456083EC188BEC8BFC33C0648B4030780C8B400C8B701CAD8B4008EB098B403483C07C8B403CABE9"))
    {
        sVersion="1.2";
        bDetected=1;
    }
    else if(PE.compareEP("5A52456083EC188BEC8BFC33C0648B4030780C8B400C8B701CAD8B4008EB098B403483C07C8B403CABE9"))
    {
        sVersion="1.12";
        bDetected=1;
    }
    else if(PE.compareEP("25........6187CC5545455581EDCA00000055A4B302FF142473F833C9FF1424731833C0FF1424731FB3"))
    {
        sVersion="2.0";
        bDetected=1;
    }
    /*else if(PE.isSignaturePresent(0,512,"'MZKERNEL32'")) // false detect  (Win)Upack
    {
        sVersion="2.0";
        bDetected=1;
    } */

    return result(bShowType,bShowVersion,bShowOptions);
}
// DIE's signature file
// Author: Jason Hood <jadoxa@yahoo.com.au>

includeScript("zip");

function detect(bShowType,bShowVersion,bShowOptions)
{
    detect_Zip(0,bShowOptions);
    return result(bShowType,bShowVersion,bShowOptions);
}
// Qt is tested twice - as a library and as a compiler (to distinguish C from
// C++).  Detect it once here.
// coauthor: sendersu

var aQt;
var ownName;
if(typeof aQt==="undefined")
{
    ownName = PE.getFileBaseName() + "." + PE.getFileCompleteSuffix();
    aQt=PE.isLibraryPresentExp(/^Qt(\d)?Core(d?)(\d)?/i);
    //special case - check own name
    if (!aQt)
    {
        aQt = ownName.match(/^Qt(\d)?Core(d?)(\d)?/i)
        if (aQt)
            aQt[0] = ownName;
    }
}
// RosASM's PE DOS stub is tested twice - once to detect RosASM as a compiler and
// again to prevent being detected as a linker (RosASM has no linker).  Detect it
// once here.

var bRosASM;
if(typeof bRosASM==="undefined")
{
    bRosASM=false;
    if(PE.compare("'RosAsm Assembler'",0xb0))
    {
        bRosASM=true;
    }
    else if(PE.compare("'MZ'90000300000004000000ffff0000b8000000000000004000000000000000000000000000000000000000000000000000000000000000........800000000e1fba0e00b409cd21b8014ccd21'This program cannot be run in DOS mode\r\n$'000000000000000000"))
    {
        bRosASM=true;
    }
}
// SpASM's PE DOS stub is tested twice - once to detect SpASM as a compiler and
// again to prevent being detected as a linker (SpASM has no linker).  Detect it
// once here.

var bSpASM;
if(typeof bSpASM==="undefined")
{
    bSpASM=PE.compare("'MZ'80000000000004000000ffff0000b800000000000000400000000000000000000000000000000000000000000000000000000000000007786c16800000000e1fba0e00b409cd21b8014ccd21'Spindoz 32 spit PEfile made wizz SpAsm Assembler.$'");
}
/**
 * The type of the signature. For example <code>compiler</code> or <code>packer</code>.
 */
var sType;
/**
 * The name of the signature.
 */
var sName;
/**
 * The version of the signature.
 */
var sVersion;
/**
 * Options used by the signature.
 */
var sOptions;
/**
 * The flag to indicate the signature was found.
 */
var bDetected;

/**
 * Initialize a signature.
 * @param {String} [sType="unknown"] - The signature type.
 * @param {String} [sName="unknown"] - The signature name.
 * @param {String} [sVersion=""] - The signature version.
 * @param {String} [sOptions=""] - The signature options.
 */
function init()
{
    sType=arguments[0]?arguments[0]:"unknown";
    sName=arguments[1]?arguments[1]:"unknown";
    sVersion=arguments[2]?arguments[2]:"";
    sOptions=arguments[3]?arguments[3]:"";
    bDetected=0;
}

/**
 * Append one or more strings, separating with ",".
 * @param {...String} sString - String to append.
 * @returns {String} The new string.
 * @global
 * @example
 * sOptions=sOptions.append("debug");
 */
String.prototype.append = function()
{
    var s=this.valueOf();
    if(arguments.length>0)
    {
        if(s)
        {
            s+=",";
        }
        s+=arguments[0];
        for(var i=1;i<arguments.length;i++)
        {
            s+=","+arguments[i];
        }
    }
    return s;
}

// Common routines for handling archives.

init("archive");

var Archive = {
    nFiles:  0,         // number of files in archive
    nDirs:   0,         // number of directories in archive
    nSize:   0,         // total unpacked size of all files
    nPacked: 0,         // total packed size of all files

    // Add an entry, updating the counts and sizes.
    add: function(nSize,nPacked,bDir)
    {
        if(bDir)
        {
            this.nDirs++;
        }
        else
        {
            this.nFiles++;
            this.nSize+=nSize;
            this.nPacked+=nPacked;
        }
    },

    // Return the contents according to what was found - "P%,F files,D dirs".
    contents: function()
    {
        var sContents="";
        if(this.nSize!=0)
        {
            sContents=(this.nPacked/this.nSize*100).toFixed(1)+"%";
        }
        if(this.nFiles!=0)
        {
            sContents=sContents.append(this.nFiles+(this.nFiles==1?" file":" files"));
        }
        if(this.nDirs!=0)
        {
            sContents=sContents.append(this.nDirs+(this.nDirs==1?" dir":" dirs"));
        }
        return sContents;
    }
}
// Detect an ARJ archive.
// Info from http://www.fileformat.info/format/arj/corion.htm
includeScript("archive");
sName="ARJ";

function detect_ARJ(bFile,bShowOptions)
{
    var nOffset,nSize;
    if(bFile)
    {
        nOffset=0;
        nSize=File.getSize();
    }
    else
    {
        nOffset=File.getOverlayOffset()+8;
        nSize=File.getOverlaySize();
    }
    if(nSize>=64)
    {
        if(File.compare("60EA",nOffset))
        {
            sVersion=File.readByte(nOffset+5);
            bDetected=1;
        }
        if(bDetected&&bShowOptions)
        {
            // Options
            switch(File.readByte(nOffset+7)) // Host OS
            {
            case(0):    sOptions=sOptions.append("MS-DOS");  break;
            case(1):    sOptions=sOptions.append("PRIMOS");  break;
            case(2):    sOptions=sOptions.append("UNIX");  break;
            case(3):    sOptions=sOptions.append("AMIGA");  break;
            case(4):    sOptions=sOptions.append("MAC-OS");  break;
            case(5):    sOptions=sOptions.append("OS/2");  break;
            case(6):    sOptions=sOptions.append("APPLE GS");  break;
            case(7):    sOptions=sOptions.append("ATARI ST");  break;
            case(8):    sOptions=sOptions.append("NeXT");  break;
            case(9):    sOptions=sOptions.append("VAX VMS");  break;
            }
            if(File.readByte(nOffset+8)&0x01) // password
            {
                sOptions=sOptions.append("encrypted");
            }

            switch(File.readByte(nOffset+9)) // Compression method
            {
            case(0):    sOptions=sOptions.append("stored");  break;
            case(1):    sOptions=sOptions.append("compressed most");  break;
            case(2):    sOptions=sOptions.append("compressed");  break;
            case(3):    sOptions=sOptions.append("compressed faster");  break;
            case(4):    sOptions=sOptions.append("compressed fastest");  break;
            }
        }
    }
}
// Convert a time in seconds to a string:
//    less than 10 seconds: N.NNs
//    less than a minute: NN.Ns
//    otherwise: NmNNs
// Author: Jason Hood <jadoxa@yahoo.com.au>

function duration(nSeconds)
{
    if(nSeconds<60)
    {
        return nSeconds.toFixed(nSeconds<10?2:1)+"s";
    }
    nSeconds=Math.round(nSeconds);
    return Math.floor(nSeconds/60)+"m"
           +("0"+Math.floor(nSeconds%60)).slice(-2)+"s";
}
function handleLanguage()
{
    if (Binary.isVerbose()) {
        if (_isResultPresent("compiler", "rust") ) {
            _setResult("language", "rust", "", "");
        } else if (_isResultPresent("compiler", "nim") ) {
            _setResult("language", "Nim", "", "");
        } else if (_isResultPresent("compiler", "go") ) {
            _setResult("language", "go", "", "");
        } else if (_isResultPresent("compiler", "Free Pascal") ) {
            _setResult("language", "Pascal", "", "");
        } else if (_isResultPresent("compiler", "JScript") ) {
            _setResult("language", "ECMAScript", "", "");
        } else if (_isResultPresent("compiler", "PureBasic") || 
            _isResultPresent("compiler", "VB.NET") || 
            _isResultPresent("compiler", "Microsoft Visual Basic")) {
            _setResult("language", "BASIC", "", "");
        } else if (_isResultPresent("compiler", "DMD") || 
            _isResultPresent("compiler", "ldc") || 
            _isResultPresent("compiler", "gdc")) {
            _setResult("language", "D", "", "");  
        } else if (_isResultPresent("compiler", "Microsoft Visual C/C++") || 
            _isResultPresent("compiler", "Borland C++") || 
            _isResultPresent("compiler", "LCC-Win32") || 
            _isResultPresent("compiler", "Watcom C/C++") || 
            _isResultPresent("compiler", "gcc") || 
            _isResultPresent("compiler", "MinGW")) {
            _setResult("language", "C/C++", "", "");
        } else if (_isResultPresent("compiler", "Borland Delphi") || 
            _isResultPresent("compiler", "Embarcadero Delphi")) {
            _setResult("language", "Object Pascal(Delphi)", "", "");
        } else if (_isResultPresent("compiler", "FASM") || 
            _isResultPresent("compiler", "MASM") || 
            _isResultPresent("compiler", "MASM32")) {
            _setResult("language", "x86 Assembler", "", "");
        } else if (_isResultPresent("library", ".NET") ) {
            _setResult("language", "C#", "", "");
        }
    }
}

// Detect a RAR archive.
// Author: Jason Hood <jadoxa@yahoo.com.au>

includeScript("archive");
sName="RAR";

function detect_RAR(bFile,bShowOptions)
{
    var nOffset,nSize;
    if(bFile)
    {
        nOffset=0;
        nSize=File.getSize();
    }
    else
    {
        nOffset=File.getOverlayOffset();
        nSize=File.getOverlaySize();
    }
    if(nSize>=64)
    {
        if(File.compare("'Rar!'1A07",nOffset))
        {
            switch(File.readByte(nOffset+6))
            {
            case 0: sVersion="4"; break;
            case 1: sVersion="5"; break;
            }
            bDetected=1;
        }
        else if(File.compare("'RE~^'",nOffset))
        {
            sVersion="1.4";
            bDetected=1;
        }
        if(sVersion=="4")
        {
            var nOptions=File.readByte(nOffset+10);
            if(nOptions&8)
            {
                sOptions="solid";
            }
            if(nOptions&0x80)
            {
                sOptions=sOptions.append("encrypted");
            }
            else if(bShowOptions)
            {
                var nDelta=0;
                nOffset+=7+File.readWord(nOffset+12);
                while(File.readByte(nOffset+2)!=0x74)
                {
                    nDelta=File.readWord(nOffset+5)+File.readDword(nOffset+7);
                    if(!nDelta)
                    {
                        break;
                    }
                    nOffset+=nDelta;
                }
                while(File.readByte(nOffset+2)==0x74)
                {
                    var nLen=File.readDword(nOffset+7);
                    Archive.add(File.readDword(nOffset+11),nLen,
                                (File.readByte(nOffset+3)&0xE0)==0xE0);
                    nDelta=File.readWord(nOffset+5)+nLen;
                    if(!nDelta)
                    {
                        break;
                    }
                    nOffset+=nDelta;
                }
                sOptions=sOptions.append(Archive.contents());
            }
        }
    }
}
// Supplemental read functions.
// Authors: unknown guy, Kaens (TG @kaens)
// Lots of legacy,
// TODO update the old scripts to use the new functions,
// and get rid of the functions themselves

const _BE = true; const _LE = false; //endianness for read_uint16+
//little-endian = reversed notation (Intel),
//big-endian = direct notation (TCP/IP, Motorola, Amiga, ZX Spectrum)

const TOEOF = -1; //use for the size parameter in findSignature

// ---------- START OF PRE-v3.06 CODE --------------------

/**
 * Read a big-endian word.
 * @param {UInt} nOffset - The offset in the file.
 * @returns {UShort} The word value.
 * @alias Binary.readBEWord
 */
File.readBEWord = function(nOffset)
{
    return File.read_uint16(nOffset,_BE)
//    return  (File.readByte(nOffset) << 8) + File.readByte(nOffset+1);
}

/**
 * Read a big-endian dword.
 * @param {UInt} nOffset - The offset in the file.
 * @returns {UInt} The dword value.
 * @alias Binary.readBEDword
 */
File.readBEDword = function(nOffset)
{
    return File.read_uint32(nOffset,_BE)
}


/**
 * Read a word, selecting endianness.
 * @param {UInt} nOffset - The offset in the file.
 * @param {Bool} bBE - True for big-endian.
 * @returns {UShort} The word value.
 * @alias Binary.readEWord
 */
File.readEWord = function(nOffset,bBE)
{
    return File.read_uint16(nOffset,bBE)
}

/**
 * Read a dword, selecting endianness.
 * @param {UInt} nOffset - The offset in the file.
 * @param {Bool} bBE - True for big-endian.
 * @returns {UInt} The dword value.
 * @alias Binary.readEDWord
 */
File.readEDword = function(nOffset,bBE)
{
    return File.read_uint16(nOffset,bBE)
}


/**
 * Read a short (signed 16-bit) value.
 * @param {UInt} nOffset - The offset in the file.
 * @returns {Short} The short value.
 * @alias Binary.readShort
 */
File.readShort = function(nOffset)
{
    return File.read_int16(nOffset,_LE)
}


// -------- END OF PRE-v3.06 CODE

const CP437="ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛"+
    "┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ";
const JISX0201="→-‚ƒ„…†‡ˆ‰Š‹Œ↑Ž³™‘’“”•–—˜™š›œ¢žŸ"+//decided to mix it with cp1252
    "→｡｢｣､･ｦｧｨｩｪｫｬｭｮｯｰｱｲｳｴｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟ"+
    "àáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"

/**
 * Derive a string hexadecimal value, zero-padded.
 * @param {Int} a - the numerical value.
 * @param {UInt} padz (optional,default=2) - how many characters to zero-pad.
 * @returns {String} The hex value, capital letters A~F, ending with "h".
 */
function Hex(a,padz) {
    if(padz==undefined) padz=2;
    var minus=""; if(a<0) { a=-a; minus="-" }
    var r = a.toString(16).toUpperCase(); var pads="";
    if(r.length < padz) pads = Array(1 + padz - r.length).join('0');
    return minus+pads+r+"h"
}

/**
 * Read a byte array from file.
 * @param {UInt} ofs - the offset to start from.
 * @param {ByteArray} len - the amount of bytes to read.
 * @returns {[uint8]} The file slice. If you go beyond EoF, read_uint8 only knows what happens.
 */
function readBytes(ofs,len) { //for now; feels like this should be a system function
    var s=[];
    for (i=0;i<len;i++) s.push(File.read_uint8(ofs+i));
    return s;
}

/**
 * Decode a 1-byte encoding from a byte array using the 128-byte-long table given.
 * @param {[uint8]} ansi - an array returned by readBytes.
 * @param {String[0x80]} dectbl - a decoding table; just make a const here in db/read for that
 * @param {bool} zstop (optional, default=true) - whether to stop reading on 0 (ASCIIZ behaviour)
 * @returns {String} a string value usable with js.
 */
function decEncoding(ansi,dectbl,zstop) {
    if(zstop==undefined) zstop=true;
    var s=""; var bit8=0;
    for(i=0; i<ansi.length; i++)
        if ((ansi[i]==0) && zstop) break; else
        if(ansi[i] < 0x80)
            switch(ansi[i]) { // 7-bit variation processing
                case 0x0E: if(dectbl == "JISX0201") bit8=0x80; break;
                case 0x0F: if(dectbl == "JISX0201") bit8=0; break;
                case 0x5C: if(dectbl == "JISX0201") s+="¥"; break;
                case 0x7E: if(dectbl == "JISX0201") s+="‾"; break;
                default: s += String.fromCharCode(bit8+ansi[i]);
            }
        else s+=dectbl[ansi[i]-0x80];
    return s;
}

/**
 * Decode a 1-byte encoding from file using the 128-byte-long table given.
 * @param {UInt} ofs - the offset to start from.
 * @param {ByteArray} len - the amount of bytes to read.
 * @param {String[0x80]} dectbl - a decoding table; just make a const here in db/read for that
 * @param {bool} zstop (optional, default=true) - whether to stop reading on 0 (ASCIIZ behaviour)
 * @returns {String} a string value usable with js.
 */
function decAnsi(ofs,len,dectbl,zstop) {
    var s="";
    if(zstop==undefined) zstop=true;
    for (i=0;i<len;i++) {
        b = Binary.read_uint8(ofs+i);
        if ((b==0) && zstop) break; else
        if(b < 0x80) s+=String.fromCharCode(b);
        else s+=dectbl[b-0x80];
    }
    return s;
}

/**
 * sOptions.append a string (optionally prefixed) if the space-trimmed string is not empty.
 * @param {variant} a - the string to output (safe to accidentally drop a non-string in)
 * @param {String} prefix (optional) - what to put in front of the output string
 */
function sOptionT(a,prefix) { if ((""+a).trim() != "")
  if(prefix != undefined) sOptions = sOptions.append(prefix+a.trim())
  else sOptions = sOptions.append((""+a).trim()) }

/**
 * sOptions.append a string (optionally prefixed) if the string is not empty.
 * @param {variant} a - the string to output (safe to accidentally drop a non-string in)
 * @param {String} prefix (optional) - what to put in front of the output string
 */
function sOption(a,prefix) { if ((""+a) != "")
  if(prefix != undefined) sOptions = sOptions.append(prefix+a)
  else sOptions = sOptions.append(""+a) }

/**
 * A shorthand for the situation where you compare the file suffix to what you'd expect. Use as the option to isHeuristicScan being true.
 * @param {String} a - the expected file suffix, case-insensitive, no heading period unlike Python
 * @returns {bool} if a match is reached
 */
function extIs(a) { return Binary.getFileSuffix().toLowerCase() == a.toLowerCase() }

/**
 * slashTag formats a string in a way that's useful when a tag has two versions (for ex. in different languages). It will either show both with "/" in between, or one of them if the other one's an empty string, or an empty string if both are empty.
 * @param {String} a - the first of the two
 * @param {String} b - the second of the two
 * @returns {String}
*/
function slashTag(a,b) {
    if(a == b) return a;
    else if(a != "" && b == "")
        return a;
    else if(a == "" && b != "")
        return b;
    else if(a != "" && b != "")
        return a+"/"+b;
    else return ""
}
// Standard result format - "type: name(version)[options]".

includeScript("_init");

function result(bShowType,bShowVersion,bShowOptions)
{
    var sResult="";

    if(bDetected)
    {
        if(bShowType)
        {
            sResult+=sType+": ";
        }
        sResult+=sName;
        if(bShowVersion)
        {
            if(sVersion!="")
            {
                sResult+="("+sVersion+")";
            }
        }
        if(bShowOptions)
        {
            if(sOptions!="")
            {
                sResult+="["+sOptions+"]";
            }
        }
        
        if((typeof _setResult)=='function')
        { 
            _setResult(sType,sName,sVersion,sOptions); 
        }
    }

    return sResult;
}
// Standard result format - "type: name(version)[options]".
// If no version, make it "-"; if no options, use the general options.

includeScript("_init");

function result(bShowType,bShowVersion,bShowOptions)
{
    var sResult="";

    if(bDetected)
    {
        if(bShowType)
        {
            sResult+=sType+": ";
        }
        sResult+=sName;
        if(bShowVersion)
        {
            if(sVersion!="")
            {
                sResult+="("+sVersion+")";
            }
        }
        if(bShowOptions)
        {
            if(sOptions=="")
            {
                sOptions=File.getGeneralOptions();
            }
            sResult+="["+sOptions+"]";
        }
        
        if((typeof _setResult)=='function')
        { 
            _setResult(sType,sName,sVersion,sOptions); 
        }
    }

    return sResult;
}
// Standard result format - "type: name(version)[options]".
// If no version or options, leave them out.

includeScript("_init");

function result(bShowType,bShowVersion,bShowOptions)
{
    var sResult="";

    if(bDetected)
    {
        if(bShowType)
        {
            sResult+=sType+": ";
        }
        sResult+=sName;
        if(bShowVersion&&sVersion!="")
        {
            sResult+="("+sVersion+")";
        }
        if(bShowOptions&&sOptions!="")
        {
            sResult+="["+sOptions+"]";
        }
        
        if((typeof _setResult)=='function')
        { 
            _setResult(sType,sName,sVersion,sOptions); 
        }
    }

    return sResult;
}
// Retrieve the interpreter from a #! script.

var sInterpreter;
if(typeof sInterpreter==="undefined")
{
    sInterpreter="";
    var sLine=Binary.getString(0);
    // Make the expression a little easier to deal with by translating
    // something like "/usr/bin/env perl" to just "/usr/bin/perl".
    sLine=sLine.replace(/\/env\s+/,"/");
    var aMatch=sLine.match(/#!.*\/(.+?)(?:\.exe)?\s/);
    if(aMatch)
    {
        sInterpreter=aMatch[1];
    }
}

// Check for a particular interpreter.
function isInterpreter(sString)
{
    if(sInterpreter==sString)
    {
        // Found it, so blank it out to stop "script.2" picking it up again.
        sInterpreter="";
        return 1;
    }
    return 0;
}
// wxWidgets is tested twice - as a library and as a compiler (to distinguish C
// from C++).  Detect it once here.

var aWx;
if(typeof aWx==="undefined")
{
    aWx=PE.isLibraryPresentExp(/^wx.*?(univ)?(\d+)(u)?(d)?/i);
    if(!aWx)
    {
        if(PE.isResourceNamePresent("WXWINDOWMENU"))
        {
            aWx=1;
        }
    }
}
// Detect a zip archive.
// Author: Jason Hood <jadoxa@yahoo.com.au>

includeScript("archive");
sName="Zip";

function detect_Zip(bFile,bShowOptions)
{
    var nOffset=0;
    if(bFile)
    {
        // Don't know what this is, but I happened to have a file that started
        // with it.
        if(File.compare("'PK00'"))
        {
            nOffset=4;
        }
        if(Binary.compare("'PK'0708",nOffset))
        {
            sOptions="extended";
            bDetected=1;
            return;
        }
    }
    else
    {
        if(File.compareOverlay("'PK'0304"))
        {
            nOffset=File.getOverlayOffset();
        }
        else
        {
            var nSize=File.getSize();
            if(nSize<64)
            {
                return;
            }
            nSize-=11;
            nOffset=nSize;
            if(!File.compare("'PK'0506'",nOffset))
            {
                if(nSize<4096)
                {
                    nOffset=0;
                }
                else
                {
                    nOffset-=4096;
                    nSize=4096;
                }
                nOffset=File.findSignature(nOffset,nSize,"'PK'0506");
                if(nOffset==-1)
                {
                    return;
                }
                var nBase=File.readDword(nOffset+16);
                nOffset-=File.readDword(nOffset+12);
                if(!File.compare("'PK'0102",nOffset))
                {
                    return;
                }
                nOffset+=File.readDword(nOffset+0x2a)-nBase;
            }
        }
    }

    if(File.compare("'PK'0304",nOffset))
    {
        bDetected=1;

        if(File.findString(nOffset,0x40,"META-INF/MANIFEST.MF")!=-1)
        {
            sOptions=sOptions.append("JAR"); // Java archive
        }

        if(File.findString(nOffset,0x40,"classes.dex")!=-1)
        {
            sOptions=sOptions.append("APK"); // Android application package file
        }

        var nVer=0;
        if(!bShowOptions)
        {
            // Just take the first file and assume it carries through.
            if(File.readByte(nOffset+6)&1)
            {
                sOptions="encrypted";
            }
            nVer=File.readByte(nOffset+4);
        }
        else
        {
            var bEncrypted=0;
            do
            {
                var v=File.readByte(nOffset+4);
                if(v>nVer)
                {
                    nVer=v;
                }
                if(!bEncrypted&&(File.readByte(nOffset+6)&1))
                {
                    bEncrypted=1;
                }
                var nPacked=File.readDword(nOffset+0x12);
                var nName=File.readWord(nOffset+0x1A);
                Archive.add(File.readDword(nOffset+0x16),nPacked,
                            nPacked==0&&File.readByte(nOffset+0x1E+nName-1)==0x2F);
                nOffset+=0x1E+nName+File.readWord(nOffset+0x1C)+nPacked;
            } while(File.compare("'PK'0304",nOffset));
            if(bEncrypted)
            {
                sOptions="encrypted";
            }
            sOptions=sOptions.append(Archive.contents());
        }
        sVersion=(nVer/10).toFixed(1);
    }
}
// Detect a ZLIB.
// Author: LinXP

function detect_zlib(bFile,nOffset,bShowOptions)
{
    var sInfo = "ZLIB compression";
    if(bFile.compare("7801",nOffset))
    {
        if (bFile.isVerbose()) {sInfo +=" fastest"}
        sOptions=sOptions.append(sInfo);
        return true;
    }
    else if (bFile.compare("785E",nOffset))
    {
        if (bFile.isVerbose()) {sInfo +=" fast"}
        sOptions=sOptions.append(sInfo);
        return true;
    }
    else if (bFile.compare("789C",nOffset))
    {
        if (bFile.isVerbose()) {sInfo +=" normal"}
        sOptions=sOptions.append(sInfo);
        return true;
    }
    else if (bFile.compare("78DA",nOffset))
    {
        if (bFile.isVerbose()) {sInfo +=" best"}
        sOptions=sOptions.append(sInfo);
        return true;
    }
}
// DIE's signature file

init("packer","TEST");

function detect(bShowType,bShowVersion,bShowOptions)
{
    if(false) // TODO !!!
    {
        bDetected=1;
    }

    return result(bShowType,bShowVersion,bShowOptions);
}
